{
  "comments": [
    {
      "key": {
        "uuid": "6dbe757d_86727d79",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-06-28T14:30:07Z",
      "side": 1,
      "message": "What is the wire endianness (for f64) VPP assumes? Native or net?\n1. If net, papi should also use net.\n2. If native, papi constructor should have a switch to change endiannes, so clients on opposite endian machines (connected over a socket forwarded by ssh) can understand.\n\nConsidering all other types have net endianness, 1. should be true.",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "14a18abb46830c319bd7f11a4b482b638c1512b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a77b0d9d_534f3e86",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-06-28T15:11:36Z",
      "side": 1,
      "message": "I would agree with you, but I started researching this a bit.  \n1) IEEE f64 endianess is not defined.https://stackoverflow.com/questions/2945174/floating-point-endianness.\n2) I haven\u0027t been able to transfer f64 over the api without it.\n\nI\u0027m open to alternatives that actually work. ;)",
      "parentUuid": "6dbe757d_86727d79",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "14a18abb46830c319bd7f11a4b482b638c1512b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb0ba7c7_77fbe46b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-06-28T15:19:56Z",
      "side": 1,
      "message": "Wheat we need to do is to add an api call, say send_one, which serializes a \"1\" for each type, so the behavior can be documented.",
      "parentUuid": "a77b0d9d_534f3e86",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "14a18abb46830c319bd7f11a4b482b638c1512b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eae3fcff_1e0f4f0f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-06-28T16:04:51Z",
      "side": 1,
      "message": "\u003e IEEE f64 endianess is not defined.\n\nSo the first step is for VPP to decide what it wants on wire?\nThen adapt papi with \u0027\u003c\u0027 or \u0027\u003e\u0027, but not \u0027@\u0027.",
      "parentUuid": "cb0ba7c7_77fbe46b",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "14a18abb46830c319bd7f11a4b482b638c1512b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3cd546d_bda05f99",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-06-28T16:20:05Z",
      "side": 1,
      "message": "This patch exists so that  am not blocked.  Who is the right person to implement clib_net_to_host_f64, clib_host_to_net_f64? Can we then ask them to make the decision and implement those functions?",
      "parentUuid": "eae3fcff_1e0f4f0f",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "14a18abb46830c319bd7f11a4b482b638c1512b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d182032_d01e2e87",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-06-28T16:27:11Z",
      "side": 1,
      "message": "\u003e Who is the right person to implement clib_net_to_host_f64, clib_host_to_net_f64?\n\nI would say it is \"api\" component/feature, mainatainer Dave Barach.",
      "parentUuid": "a3cd546d_bda05f99",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "14a18abb46830c319bd7f11a4b482b638c1512b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d2fafe8_8499d899",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 7
      },
      "writtenOn": "2019-07-01T16:34:17Z",
      "side": 1,
      "message": "There is no standard representation for IEEE floating-point numbers. The only advice I\u0027ve ever seen along these lines is to act as if f32/f64\u0027s were u32/u64\u0027s, and I don\u0027t consider the source of that advice even mildly trustworthy. \n\nI added noop inline functions with the appropriate names to .../src/vppinfra/byte_order.h. As opposed to discovering how many places would break the instant we did something non-trivial. \n\nSuggest leaving well enough alone.",
      "parentUuid": "9d182032_d01e2e87",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "14a18abb46830c319bd7f11a4b482b638c1512b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aad0ee9_b4842207",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-07-01T17:06:44Z",
      "side": 1,
      "message": "Leaving it alone with the noop\u0027s across the wire is what this patch does.  It wraps all f64 references in the api with your noop and matches it appropriately on the papi side.\n\nWithout it, map.api treats it as u64 and gbp.api treats it as a no op.\nSo, some api\u0027s are \"correct\" and some are \"broken\" depending on your view.\n\nThe existing papi_serializer treats it as a u64.\n\nby \"leaving well enough alone\", do you want to leave it a noop on the wire?  If so, we need to commit this otherwise I can let it go.",
      "parentUuid": "0d2fafe8_8499d899",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "14a18abb46830c319bd7f11a4b482b638c1512b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}