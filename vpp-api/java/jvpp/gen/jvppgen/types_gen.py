#!/usr/bin/env python
#
# Copyright (c) 2016 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
from string import Template

import util

type_template = Template("""
package $plugin_package.$type_package;

/**
 * <p>This class represents $c_name type.
 * <br>It was generated by types_gen.py based on $inputfile preparsed data:
 * <pre>
$docs
 * </pre>
 */
public final class $java_name {

$fields
}
""")


def generate_type_fields(camel_case_type_name, type):
    """
    Generates fields for class representing typeonly definition
    :param camel_case_type_name: name of the type in camel case format
    :param type: python representation of typeonly definition
    :return: string representing class fields
    """
    return "fields"


def generate_types(types_list, base_package, plugin_package, plugin_name, types_package, inputfile):
    """ Generates dto objects in a dedicated package """
    print "Generating DTOs"

    if not os.path.exists(types_package):
        raise Exception("%s folder is missing" % types_package)

    for type in types_list:
        camel_case_type_name = util.underscore_to_camelcase_upper(type['name'])
        dto_path = os.path.join(types_package, camel_case_type_name + ".java")

        fields = generate_type_fields(camel_case_type_name, type)

        dto_file = open(dto_path, 'w')
        dto_file.write(type_template.substitute(plugin_package=plugin_package,
                                                type_package=type_package,
                                                c_name=type['name'],
                                                inputfile=inputfile,
                                                docs=util.api_message_to_javadoc(type), # todo different representation for type?
                                                java_name=camel_case_type_name,
                                                fields=fields
                                                ))
        dto_file.flush()
        dto_file.close()
