#!/usr/bin/env python
#
# Copyright (c) 2016 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
from string import Template

import util

type_template = Template("""
package $plugin_package.$type_package;

/**
 * <p>This class represents $c_type_name type definition.
 * <br>It was generated by types_gen.py based on $inputfile preparsed data:
 * <pre>
$docs
 * </pre>
 */
public final class $java_type_name {
$fields
}
""")

field_template = Template("""    public $type $name;\n""")

def generate_type_fields(java_type_name, type):
    """
    Generates fields for class representing typeonly definition
    :param camel_case_type_name: name of the type in camel case format
    :param type: python representation of typeonly definition
    :return: string representing class fields
    """
    fields = ""
    for t in zip(type['types'], type['args']):
        field_name = util.underscore_to_camelcase(t[1])
        fields += field_template.substitute(type=util.jni_2_java_type_mapping[t[0]],
                                            name=field_name)
    return fields


def generate_types(types_list, plugin_package, types_package, inputfile):
    """
    Generates Java representation of custom types defined in api file. Allows
    :param types_list:
    :param plugin_package:
    :param types_package:
    :param inputfile:
    :return:
    """
    print "Generating DTOs"

    if not os.path.exists(types_package):
        raise Exception("%s folder is missing" % types_package)

    for type in types_list:
        c_type_name = type['name']
        java_type_name = util.underscore_to_camelcase_upper(type['name'])
        dto_path = os.path.join(types_package, java_type_name + ".java")

        fields = generate_type_fields(java_type_name, type)

        dto_file = open(dto_path, 'w')
        dto_file.write(type_template.substitute(plugin_package=plugin_package,
                                                type_package=types_package,
                                                c_type_name=c_type_name,
                                                inputfile=inputfile,
                                                docs=util.api_message_to_javadoc(type), # todo different representation for type?
                                                java_type_name=java_type_name,
                                                fields=fields
                                                ))

        # add type to jni_2_java_type_mapping:
        util.jni_2_java_type_mapping[c_type_name] = "%s.%s.%s" % (plugin_package, types_package, java_type_name)

        dto_file.flush()
        dto_file.close()
