{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8c244dbc_da9c3fc9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 3173
      },
      "writtenOn": "2025-01-10T14:33:01Z",
      "side": 1,
      "message": "Hi linux-cp experts, appreciate your feedback on this change. I added it to support LAG in the Sonic-VPP project: https://github.com/sonic-net/sonic-platform-vpp/issues/140\n\nThe change is inspired by the discussions in https://lists.fd.io/g/vpp-dev/message/23417 and https://lists.fd.io/g/vpp-dev/topic/96476162.\n\nNote that I currently enable this functionality based on the presence of the LACP plugin (for which I had to add a variable). I could change that to be an API if preferred (eg. lcp \u003cenable|disable\u003e \u003cethertype\u003e or some other form of API).\n\nThank you,\nAkeel",
      "revId": "42736ad16bfee4c30bbcaad88e15518195776d3b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d51ebd98_90da0493",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 366
      },
      "writtenOn": "2025-01-15T18:40:39Z",
      "side": 1,
      "message": "Hi Akeel,\n\nIt actually would be very useful if you could add the ability to enable a given ethertype via explicit API/CLI configuration instead of always registering LACP at initialization time when the lacp plugin is not loaded. Can you add API and CLI support for this? This will eliminate the need to touch the lacp plugin and can be useful for passing through other ethertypes in addition to LACP.\n\nE.g. this could be accomplished via something like the following:\n- Add a new function \u0027int lcp_ethertype_enable(ethernet_type_t ethertype);\u0027. It can lookup existing info for ethertype by calling ethernet_get_type_info(). If none is found, it can return VNET_API_ERROR_INVALID_PARAM. If the info indicates that the ethertype is already registered to another node (ethernet_type_info_t.node_index !\u003d the index of linux-cp-punt-xc), it can return VNET_API_ERROR_INVALID_REGISTRATION. Otherwise it can call ethernet_register_input_type() to register linux-cp-punt-xc for the ethertype and return 0.\n- Add a new API message definition lcp_ethertype_enable to lcp.api. The only parameter (aside from boilerplate client_index/context params) can be u16 ethertype. The reply message (lcp_ethertype_enable_reply) can be autogenerated by using the \u0027autoreply\u0027 keyword.\n- Add a new API message handler function vl_api_lcp_ethertype_enable_t_handler() to lcp_api.c. It can invoke lcp_ethertype_enable() and populate the return status into the retval of the reply message.\n- Add a new CLI command \u0027lcp ethertype enable \u003cethertype\u003e\u0027 in lcp_cli.c. Create a function lcp_ethertype_enable_cmd() which parses the ethertype from the CLI input and calls lcp_ethertype_enable().\n\nThanks,\n-Matt",
      "parentUuid": "8c244dbc_da9c3fc9",
      "revId": "42736ad16bfee4c30bbcaad88e15518195776d3b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49aba589_233fb371",
        "filename": "src/plugins/linux-cp/lcp_node.c",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 366
      },
      "writtenOn": "2025-01-15T02:51:03Z",
      "side": 1,
      "message": "Can the comment use c-style comments like `/* comment */` ? It would be more consistent with nearly all of the other comments present in this file.",
      "revId": "42736ad16bfee4c30bbcaad88e15518195776d3b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2175b01_5561bda7",
        "filename": "src/plugins/linux-cp/lcp_node.c",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 366
      },
      "writtenOn": "2025-01-15T02:51:03Z",
      "side": 1,
      "message": "The name xc confused me at first. I thought that if it is true it meant packets were being cross-connected until I looked at the code more closely.\n\nMaybe the meaning of xc would be more clear if it was named check_xc or maybe_xc.",
      "revId": "42736ad16bfee4c30bbcaad88e15518195776d3b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20ec08e0_e17b9781",
        "filename": "src/plugins/linux-cp/lcp_node.c",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 366
      },
      "writtenOn": "2025-01-15T02:51:03Z",
      "side": 1,
      "message": "You use a bool for xc and it seems like direction0 is also being treated as a bool, but it is declared as a u8 instead. It would be more consistent to make direction0 a bool. Or declare xc as a u8.\n\nIt seems like it\u0027s value will be false if traffic is being punted phy to host and true if it\u0027s being cross-connected host to phy. The semantics would be more clear if it were given a more meaningful name like \u0027is_xc0\u0027 or \u0027is_host2phy0\u0027 or \u0027is_outbound0\u0027.",
      "revId": "42736ad16bfee4c30bbcaad88e15518195776d3b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}