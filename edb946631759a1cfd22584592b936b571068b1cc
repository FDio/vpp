{
  "comments": [
    {
      "key": {
        "uuid": "3a3291f1_c418a677",
        "filename": "src/vnet/ip/ip6.h",
        "patchSetId": 3
      },
      "lineNbr": 453,
      "author": {
        "id": 267
      },
      "writtenOn": "2017-03-05T20:53:06Z",
      "side": 1,
      "message": "why not perform this \u0027find the tcp header\u0027 code whenever the ip-\u003eprotocol is hop-by-hop? hashing correctly on tcp/udp ports is always desired when hop-by-hop options are present and whether or not im-hbh_enabled is present.\n\nif so put this block in the appropriate place in ip6_compute_flow_hash. and remove this function.",
      "revId": "edb946631759a1cfd22584592b936b571068b1cc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_a7bd9c6a",
        "filename": "src/vnet/ip/ip6.h",
        "patchSetId": 3
      },
      "lineNbr": 453,
      "author": {
        "id": 518
      },
      "writtenOn": "2017-03-06T16:41:16Z",
      "side": 1,
      "message": "Changed to use ip6_locate_header() with latest patch.\nInitially in Patch1, I did modify ip6_compute_flow_hash() to take care of hbh header but later what we thought was to not add any extra clock cycles for packets without hbh headers. So changed it to not to touch existing ip6_compute_flow_hash(), but instead add ip6_compute_flow_hash_for_ext_hdr() which will be called only when extension header is present.\nThis way we are not adding any additional cycles for packets without hbh header.",
      "parentUuid": "3a3291f1_c418a677",
      "revId": "edb946631759a1cfd22584592b936b571068b1cc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_440dd636",
        "filename": "src/vnet/ip/ip6_forward.c",
        "patchSetId": 3
      },
      "lineNbr": 196,
      "author": {
        "id": 267
      },
      "writtenOn": "2017-03-05T20:53:06Z",
      "side": 1,
      "message": "why the check for whether it\u0027s an adj?\nwhen the forwarding chain has load-balancing over multiple levels, e.g.\n\nLB-a\n   | ----\u003eLB-b\n   |            |------\u003e Adj-a\n   |            |------\u003e Adj-b\n   |\n   | ----\u003eLB-c\n   |           |------\u003e Adj-c\n   |           |------\u003e Adj-d\n\nyour changes will mean your new hash algorithm is used when making choices at LB-b and LB-c (in ip6_load_balance()), but not when making a choice at LB-a (in ip6_lookup_inline()).",
      "revId": "edb946631759a1cfd22584592b936b571068b1cc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_874e2095",
        "filename": "src/vnet/ip/ip6_forward.c",
        "patchSetId": 3
      },
      "lineNbr": 196,
      "author": {
        "id": 518
      },
      "writtenOn": "2017-03-06T16:41:16Z",
      "side": 1,
      "message": "I overlooked this. Corrected it now.",
      "parentUuid": "3a3291f1_440dd636",
      "revId": "edb946631759a1cfd22584592b936b571068b1cc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_e41de267",
        "filename": "src/vnet/ip/ip6_forward.c",
        "patchSetId": 3
      },
      "lineNbr": 955,
      "author": {
        "id": 267
      },
      "writtenOn": "2017-03-05T20:53:06Z",
      "side": 1,
      "message": "the goal here appears to be to have the packets sent to the hop-by-hop node just before they get to the adjacency. this in turn suggests to me two things:\n 1 - hop-by-hop processing does not affect the forwarding result, and therefore\n 2 - should run either as an output feature on the adjacency, or as an input feature. there are local/for-us features now too, if you are interested to processing for-us packets as well as transit.\n\nwhen choosing between input and output/for-us features please consider that there are many outcomes for processing down-stream of this VLIB node - matching an adj is just one possibility. There could also be gre/vxlan/etc tunnel decap, an MPLS label imposition, SR policy, MAP encap/decap/translate. The list is long and will continue to grow. There\u0027s also the multicast forwarding to consider.\n\nwith hop-by-hop processing in a input/output feature, and the hash done correctly always, this whole block can be removed.",
      "revId": "edb946631759a1cfd22584592b936b571068b1cc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_ea1dab67",
        "filename": "src/vnet/ip/ip6_forward.c",
        "patchSetId": 3
      },
      "lineNbr": 955,
      "author": {
        "id": 518
      },
      "writtenOn": "2017-03-06T16:41:16Z",
      "side": 1,
      "message": "Typically hbh headers are added at host generating packet or in case of In-Band OAM, we add it in edge of the domain routers using classifier. After this all transit routers which see HBH options need to update the data irrespective of packet received/going out on any interface. So we would need to add o/p feature on all interfaces in the system which scans for HBH header and update if present. This would be costlier than current approach where we send it to HBH node only when HBH options are present.",
      "parentUuid": "3a3291f1_e41de267",
      "revId": "edb946631759a1cfd22584592b936b571068b1cc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_ed9f055e",
        "filename": "src/vnet/ip/ip6_forward.c",
        "patchSetId": 3
      },
      "lineNbr": 955,
      "author": {
        "id": 267
      },
      "writtenOn": "2017-03-07T10:37:12Z",
      "side": 1,
      "message": "i think there are two parts to the issue of HBH:\n 1) generating a correct hash when HBH is present, irrespective of whether the device examines those packets (i.e. whatever the value of im-\u003ehbh_enabeld)\n 2) steering packets to the HBH node when HBH processing is enabled on the device (i.e. im-\u003ehbh_enabled \u003d\u003d TRUE)\n\nFor 1) we should extend ip6_compute_flow_hash(). therein there is already a check for the packet\u0027s payload proto, by adding an \u0027else if HBH\u0027, and removing other checks for HBH in the lookup/load_balance nodes, we are not adding extra instructions.\nfor 2) I still maintain that trying to intercept packets before they reach an adjacency is not the correct approach, for the reason that not all packets will reach an adjacency. Consider the case of MAP-E. There a packet from the host, with HBH options, will match a route that leads to a MAP-E encap object. At that point we will add another IP6 header, then load-balance/lookup (and now there is not HBH options), then we reach the adj.\nSo to guarantee that all packets from hosts are checked for HBH options, we need to run as an input feature. However, that input feature is enabled only when im-\u003ehbh_enabled\u003d\u003dTRUE. So there is no added cost when it is not. We can add infra to the feature management code that does the \u0027enable on all interfaces\u0027 management.",
      "parentUuid": "3a3291f1_ea1dab67",
      "revId": "edb946631759a1cfd22584592b936b571068b1cc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_d86765b6",
        "filename": "src/vnet/ip/ip6_forward.c",
        "patchSetId": 3
      },
      "lineNbr": 955,
      "author": {
        "id": 518
      },
      "writtenOn": "2017-03-07T14:33:19Z",
      "side": 1,
      "message": "Fixed point 1. ip6_compute_flow_hash() takes care of hbh header.\nFor point 2, we need to discuss more on which is the best place to have hbh processing. From In-Band OAM, we need both input and output interfaces. So it makes sense for us to do it in o/p feature. So can we defer this for now? We will take this up later.",
      "parentUuid": "3a3291f1_ed9f055e",
      "revId": "edb946631759a1cfd22584592b936b571068b1cc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_040fce2f",
        "filename": "src/vnet/ip/ip6_forward.c",
        "patchSetId": 3
      },
      "lineNbr": 2810,
      "author": {
        "id": 267
      },
      "writtenOn": "2017-03-05T20:53:06Z",
      "side": 1,
      "message": "what guarantees this union member is still valid this late in the game?",
      "revId": "edb946631759a1cfd22584592b936b571068b1cc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_8a2aa77c",
        "filename": "src/vnet/ip/ip6_forward.c",
        "patchSetId": 3
      },
      "lineNbr": 2810,
      "author": {
        "id": 518
      },
      "writtenOn": "2017-03-06T16:41:16Z",
      "side": 1,
      "message": "There is not guaranty that this will be valid, but with the current set of usecase for in-band OAM, this is not being overwritten by any other features :)\nIn the past, we did consider to use the opaque2 to store this, but that would cause performance hit as its in next cache line.",
      "parentUuid": "3a3291f1_040fce2f",
      "revId": "edb946631759a1cfd22584592b936b571068b1cc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}