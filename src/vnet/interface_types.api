/* Hey Emacs use -*- mode: C -*- */
/*
 * Copyright (c) 2018 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

typedef u32 interface_index;

enum if_status_flags
{
  IF_STATUS_API_FLAG_ADMIN_UP = 1,
  IF_STATUS_API_FLAG_LINK_UP = 2,
};

/* Per protocol MTU */
enum mtu_proto
{
  MTU_PROTO_API_L3,			/* Default payload MTU (without L2 headers) */
  MTU_PROTO_API_IP4,			/* Per-protocol MTUs overriding default */
  MTU_PROTO_API_IP6,
  MTU_PROTO_API_MPLS,
  MTU_PROTO_API_N,
};

enum link_duplex
{
  LINK_DUPLEX_API_UNKNOWN = 0,
  LINK_DUPLEX_API_HALF = 1,
  LINK_DUPLEX_API_FULL = 2,
};

enum sub_if_flags
{
  SUB_IF_API_FLAG_NO_TAGS = 1,
  SUB_IF_API_FLAG_ONE_TAG = 2,
  SUB_IF_API_FLAG_TWO_TAGS = 4,
  SUB_IF_API_FLAG_DOT1AD = 8,
  SUB_IF_API_FLAG_EXACT_MATCH = 16,
  SUB_IF_API_FLAG_DEFAULT = 32,
  SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY = 64,
  SUB_IF_API_FLAG_INNER_VLAN_ID_ANY = 128,
  SUB_IF_API_FLAG_MASK_VNET = 254, /* use with vnet_sub_interface_t raw_flags */
  SUB_IF_API_FLAG_DOT1AH = 256,
};

enum rx_mode
{
  RX_MODE_API_UNKNOWN = 0,
  RX_MODE_API_POLLING,
  RX_MODE_API_INTERRUPT,
  RX_MODE_API_ADAPTIVE,
  RX_MODE_API_DEFAULT,
};

enum if_type
{
  /* A hw interface. */
  IF_API_TYPE_HARDWARE,

  /* A sub-interface. */
  IF_API_TYPE_SUB,
  IF_API_TYPE_P2P,
  IF_API_TYPE_PIPE,
};

enum dev_rx_offload_flags : u32
{
  DEV_RX_API_OFFLOAD_F_VLAN_STRIP       = 0x00000001,
  DEV_RX_API_OFFLOAD_F_IPV4_CKSUM       = 0x00000002,
  DEV_RX_API_OFFLOAD_F_UDP_CKSUM        = 0x00000004,
  DEV_RX_API_OFFLOAD_F_TCP_CKSUM        = 0x00000008,
  DEV_RX_API_OFFLOAD_F_TCP_LRO          = 0x00000010,
  DEV_RX_API_OFFLOAD_F_QINQ_STRIP       = 0x00000020,
  DEV_RX_API_OFFLOAD_F_OUTER_IPV4_CKSUM = 0x00000040,
  DEV_RX_API_OFFLOAD_F_MACSEC_STRIP     = 0x00000080,
  DEV_RX_API_OFFLOAD_F_HEADER_SPLIT     = 0x00000100,
  DEV_RX_API_OFFLOAD_F_VLAN_FILTER      = 0x00000200,
  DEV_RX_API_OFFLOAD_F_VLAN_EXTEND      = 0x00000400,
  DEV_RX_API_OFFLOAD_F_JUMBO_FRAME      = 0x00000800,
  DEV_RX_API_OFFLOAD_F_SCATTER          = 0x00001000,
  DEV_RX_API_OFFLOAD_F_TIMESTAMP        = 0x00002000,
  DEV_RX_API_OFFLOAD_F_SECURITY         = 0x00004000,
  DEV_RX_API_OFFLOAD_F_KEEP_CRC         = 0x00008000,
  DEV_RX_API_OFFLOAD_F_SCTP_CKSUM       = 0x00010000,
  DEV_RX_API_OFFLOAD_F_OUTER_UDP_CKSUM  = 0x00020000,
  DEV_RX_API_OFFLOAD_F_RSS_HASH         = 0x00040000,
};

enum dev_tx_offload_flags : u32
{
  DEV_TX_API_OFFLOAD_F_VLAN_INSERT      = 0x00000001,
  DEV_TX_API_OFFLOAD_F_IPV4_CKSUM       = 0x00000002,
  DEV_TX_API_OFFLOAD_F_UDP_CKSUM        = 0x00000004,
  DEV_TX_API_OFFLOAD_F_TCP_CKSUM        = 0x00000008,
  DEV_TX_API_OFFLOAD_F_SCTP_CKSUM       = 0x00000010,
  DEV_TX_API_OFFLOAD_F_TCP_TSO          = 0x00000020,
  DEV_TX_API_OFFLOAD_F_UDP_TSO          = 0x00000040,
  DEV_TX_API_OFFLOAD_F_OUTER_IPV4_CKSUM = 0x00000080,
  DEV_TX_API_OFFLOAD_F_QINQ_INSERT      = 0x00000100,
  DEV_TX_API_OFFLOAD_F_VXLAN_TNL_TSO    = 0x00000200,
  DEV_TX_API_OFFLOAD_F_GRE_TNL_TSO      = 0x00000400,
  DEV_TX_API_OFFLOAD_F_IPIP_TNL_TSO     = 0x00000800,
  DEV_TX_API_OFFLOAD_F_GENEVE_TNL_TSO   = 0x00001000,
  DEV_TX_API_OFFLOAD_F_MACSEC_INSERT    = 0x00002000,
  DEV_TX_API_OFFLOAD_F_MT_LOCKFREE      = 0x00004000,
  DEV_TX_API_OFFLOAD_F_MULTI_SEGS       = 0x00008000,
  DEV_TX_API_OFFLOAD_F_MBUF_FAST_FREE   = 0x00010000,
  DEV_TX_API_OFFLOAD_F_SECURITY         = 0x00020000,
  DEV_TX_API_OFFLOAD_F_UDP_TNL_TSO      = 0x00040000,
  DEV_TX_API_OFFLOAD_F_IP_TNL_TSO       = 0x00080000,
  DEV_TX_API_OFFLOAD_F_OUTER_UDP_CKSUM  = 0x00100000,
};

enum eth_mq_rx_mode : u8
{
  ETH_MQ_RX_API_NONE = 0,
  ETH_MQ_RX_API_RSS,
  ETH_MQ_RX_API_DCB,
  ETH_MQ_RX_API_DCB_RSS,
  ETH_MQ_RX_API_VMDQ_ONLY,
  ETH_MQ_RX_API_VMDQ_RSS,
  ETH_MQ_RX_API_VMDQ_DCB,
  ETH_MQ_RX_API_VMDQ_DCB_RSS,
};

enum eth_mq_tx_mode : u8
{
  ETH_MQ_TX_API_NONE = 0,
  ETH_MQ_TX_API_DCB,
  ETH_MQ_TX_API_VMDQ_DCB,
  ETH_MQ_TX_API_VMDQ_ONLY,
};

enum eth_rss_hash_flags : u32
{
  ETH_RSS_API_HASH_F_IPV4               = 0x00000004,
  ETH_RSS_API_HASH_F_FRAG_IPV4          = 0x00000008,
  ETH_RSS_API_HASH_F_NONFRAG_IPV4_TCP   = 0x00000010,
  ETH_RSS_API_HASH_F_NONFRAG_IPV4_UDP   = 0x00000020,
  ETH_RSS_API_HASH_F_NONFRAG_IPV4_SCTP  = 0x00000040,
  ETH_RSS_API_HASH_F_NONFRAG_IPV4_OTHER = 0x00000080,
  ETH_RSS_API_HASH_F_IPV6               = 0x00000100,
  ETH_RSS_API_HASH_F_FRAG_IPV6          = 0x00000200,
  ETH_RSS_API_HASH_F_NONFRAG_IPV6_TCP   = 0x00000400,
  ETH_RSS_API_HASH_F_NONFRAG_IPV6_UDP   = 0x00000800,
  ETH_RSS_API_HASH_F_NONFRAG_IPV6_SCTP  = 0x00001000,
  ETH_RSS_API_HASH_F_NONFRAG_IPV6_OTHER = 0x00002000,
  ETH_RSS_API_HASH_F_L2_PAYLOAD         = 0x00004000,
  ETH_RSS_API_HASH_F_IPV6_EX            = 0x00008000,
  ETH_RSS_API_HASH_F_IPV6_TCP_EX        = 0x00010000,
  ETH_RSS_API_HASH_F_IPV6_UDP_EX        = 0x00020000,
  ETH_RSS_API_HASH_F_PORT               = 0x00040000,
  ETH_RSS_API_HASH_F_VXLAN              = 0x00080000,
  ETH_RSS_API_HASH_F_GENEVE             = 0x00100000,
  ETH_RSS_API_HASH_F_NVGRE              = 0x00200000,
  ETH_RSS_API_HASH_F_GTPU               = 0x00400000,
};
