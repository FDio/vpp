/* Hey Emacs use -*- mode: C -*- */
/*
 * Copyright (c) 2019 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
option version = "1.0.1";

import "vnet/interface_types.api";
import "vnet/ip/ip_types.api";

/**
 * Flags controlling tunnel behaviour
 */
enum tunnel_encap_decap_flags : u8
{
  TUNNEL_API_ENCAP_DECAP_FLAG_NONE = 0,
  /** at encap, copy the DF bit of the payload into the tunnel header */
  TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DF = 0x1,
  /** at encap, set the DF bit in the tunnel header */
  TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_SET_DF = 0x2,
  /** at encap, copy the DSCP bits of the payload into the tunnel header */
  TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DSCP = 0x4,
  /** at encap, copy the ECN bit of the payload into the tunnel header */
  TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_ECN = 0x8,
  /** at decap, copy the ECN bit of the tunnel header into the payload */
  TUNNEL_API_ENCAP_DECAP_FLAG_DECAP_COPY_ECN = 0x10,
  /** at encap, compute flow hash on the inner packet for more entropy */
  TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_INNER_HASH = 0x20 [backwards_compatible],
  /** at encap, copy the hop-limit/TTL of the payload into the tunnel header */
  TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_HOP_LIMIT = 0x40 [backwards_compatible],
  /** at encap, copy the Flow Label of the payload into the tunnel header */
  TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_FLOW_LABEL = 0x80 [backwards_compatible],
};

/**
 * tunnel mode
 */
enum tunnel_mode : u8
{
  /** point-to-point */
  TUNNEL_API_MODE_P2P = 0,
  /** multi-point */
  TUNNEL_API_MODE_MP,
};

/**
 * tunnel mode
 */
enumflag tunnel_flags : u8
{
  /**
   * the tunnel's MTU tracks the MTU of its destination
   *  Currently NOT IMPLEMENTATION (this is a API place-holder)
   */
  TUNNEL_API_FLAG_TRACK_MTU = 0x1,
};

/**
 * An IP{v4,v6} tunnel.
 */
typedef tunnel
{
  /** If non-~0, specifies a custom dev instance */
  u32 instance;
  /** Tunnel source and destination address */
  vl_api_address_t src;
  vl_api_address_t dst;
  /** ignored on create, set in details/dump */
  vl_api_interface_index_t sw_if_index;
  /** The table ID in which the source and destination addresses are valid */
  u32 table_id;
  vl_api_tunnel_encap_decap_flags_t encap_decap_flags;
  vl_api_tunnel_mode_t mode;
  vl_api_tunnel_flags_t flags;
  /* DSCP value for the tunnel encap, ignored if ECNAP_COPY_DSCP flag is set */
  vl_api_ip_dscp_t dscp;
  /* TTL=0 is considered 255 */
  u8 hop_limit;
};

/*
 * Local Variables:
 * eval: (c-set-style "gnu")
 * End:
 */
