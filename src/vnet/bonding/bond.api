/*
 * Copyright (c) 2017 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** \file

    This file defines vpe control-plane API messages for
    the bonding device driver
*/

option version = "1.0.0";

/** \brief Initialize a new bond interface with the given paramters
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param use_random_mac - let the system generate a unique mac address
    @param mac_address - mac addr to assign to the interface if use_random_mac not set
    @param mode - mode (0=round-robin, 1=active-backup, 2=xor, 3=broadcastcast, 4=lacp)
    @param lb - load balance, optional (0-l2, 1=l34, 2=l34)
*/
define bond_create
{
  u32 client_index;
  u32 context;
  u8 use_random_mac;
  u8 mac_address[6];
  u8 mode;
  u8 lb;
};

/** \brief Reply for bond create reply
    @param context - returned sender context, to match reply w/ request
    @param retval - return code
    @param sw_if_index - software index allocated for the new tap interface
*/
define bond_create_reply
{
  u32 context;
  i32 retval;
  u32 sw_if_index;
};

/** \brief Delete bond interface
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param sw_if_index - interface index of slave interface
*/
autoreply define bond_delete
{
  u32 client_index;
  u32 context;
  u32 sw_if_index;
};

/** \brief Initialize a new bond interface with the given paramters
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param sw_if_index - slave sw_if_index
    @param bond_sw_if_index - bond sw_if_index
    @param is_passive - is passive speaker
    @param is_long_timeout - is long timeout/slow lacp rate
*/
define bond_enslave
{
  u32 client_index;
  u32 context;
  u32 sw_if_index;
  u32 bond_sw_if_index;
  u8 is_passive;
  u8 is_long_timeout;
};

/** \brief Reply for bond enslave reply
    @param context - returned sender context, to match reply w/ request
    @param retval - return code
*/
define bond_enslave_reply
{
  u32 context;
  i32 retval;
};

/** \brief bond detach slave
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param sw_if_index - interface index of slave interface
*/
autoreply define bond_detach_slave
{
  u32 client_index;
  u32 context;
  u32 sw_if_index;
};

/** \brief Dump bond interfaces request */
define sw_interface_bond_dump
{
  u32 client_index;
  u32 context;
};

/** \brief Reply for bond dump request
    @param sw_if_index - software index of bond interface
    @param interface_name - name of interface
    @param mode - bonding mode
    @param lb - load balance algo
    @param active_slaves - active slaves count
    @param slaves - config slave count
*/
define sw_interface_bond_details
{
  u32 context;
  u32 sw_if_index;
  u8 interface_name[64];
  u8 mode;
  u8 lb;
  u32 active_slaves;
  u32 slaves;
};

/** \brief Dump lacp interfaces request */
define sw_interface_lacp_dump
{
  u32 client_index;
  u32 context;
};

/** \brief Reply for lacp dump request
    @param sw_if_index - software index of slave interface
    @param interface_name - name of slave interface
    @param rx_state - rx machine state
    @param tx_state - tx machine state
    @param mux_state - mux machine state
    @param ptx_state - ptx machine state
    @param bond_interface_name - name of bond interface
    @param actor_system_priority - actor system priority
    @param actor_system - actor system
    @param actor_key - actor key
    @param actor_port_priority - actor port priority
    @param actor_port_number - actor port number
    @param actor_state - actor state
    @param partner_system_priority - partner system priority
    @param partner_system - partner system
    @param partner_key - partner key
    @param partner_port_priority - partner port priority
    @param partner_port_number - partner port number
    @param partner_state - partner state
*/
define sw_interface_lacp_details
{
  u32 context;
  u32 sw_if_index;
  u8 interface_name[64];
  u32 rx_state;
  u32 tx_state;
  u32 mux_state;
  u32 ptx_state;
  u8 bond_interface_name[64];
  u16 actor_system_priority;
  u8 actor_system[6];
  u16 actor_key;
  u16 actor_port_priority;
  u16 actor_port_number;
  u8 actor_state;
  u16 partner_system_priority;
  u8 partner_system[6];
  u16 partner_key;
  u16 partner_port_priority;
  u16 partner_port_number;
  u8 partner_state;
};

/*
 * Local Variables:
 * eval: (c-set-style "gnu")
 * End:
 */
