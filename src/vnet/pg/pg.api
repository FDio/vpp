/*
 * Copyright (c) 2015-2016 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** \file

    This file defines packet-generator interface APIs.
*/

option version = "2.0.0";
import "vnet/interface_types.api";
import "vnet/pg/pg_types.api";

/** \brief PacketGenerator create interface request
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param interface_id - interface index
*/
define pg_create_interface
{
  u32 client_index;
  u32 context;
  u32 interface_id;
};

/** \brief PacketGenerator create interface response
    @param context - sender context, to match reply w/ request
    @param retval - return value for request
*/
define pg_create_interface_reply
{
  u32 context;
  i32 retval;
  u32 sw_if_index;
  string interface_name [limit=64];
};

/** \brief PacketGenerator capture packets on given interface request
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param interface_id - pg interface index
    @param is_enabled - 1 if enabling streams, 0 if disabling
    @param count - number of packets to be captured
    @param pcap_file - pcap file name to store captured packets
*/
autoreply define pg_capture
{
  u32 client_index;
  u32 context;
  u32 interface_id;
  u8 is_enabled;
  u32 count;
  string pcap_file_name [limit=255];
};

autoreply define pg_capture_timeout
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  f64 timeout;
};

define pg_capture_dump
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index [default=0xffffffff];
};

define pg_capture_details
{
u32 context;
vl_api_interface_index_t sw_if_index;
vl_api_interface_index_t hw_if_index;
u32 n_packets_to_capture;
vl_api_pcap_packet_type_t packet_type;
u32 n_packets_captured;
u32 flags;
i32 file_descriptor;
u32 n_pcap_data_written;
u32 min_packet_bytes;
u32 max_packet_bytes;
u8 status;
f64 enable_timestamp;
f64 disable_timestamp;
f64 timeout;
string interface_name;
string pcap_file_name;
};

/** \brief Enable / disable packet generator request
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_enabled - 1 if enabling streams, 0 if disabling
    @param stream - stream name to be enable/disabled, if not specified handle all streams
*/
autoreply define pg_enable_disable
{
  u32 client_index;
  u32 context;
  u8 is_enabled;
  string stream_name[limit=255];
};

/*
 * Local Variables:
 * eval: (c-set-style "gnu")
 * End:
 */
