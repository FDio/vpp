/*
 * Copyright (c) 2015-2016 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option version = "2.0.0";

import "vnet/interface_types.api";
import "vnet/ethernet/ethernet_types.api";

/** \brief Create host-interface
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param hw_addr - interface MAC
    @param use_random_hw_addr - use random generated MAC
    @param host_if_name - interface name
*/
define af_packet_create
{
  u32 client_index;
  u32 context;

  vl_api_mac_address_t hw_addr;
  bool use_random_hw_addr;
  string host_if_name[64];
};

/** \brief Create host-interface response
    @param context - sender context, to match reply w/ request
    @param retval - return value for request
*/
define af_packet_create_reply
{
  u32 context;
  i32 retval;
  vl_api_interface_index_t sw_if_index;
};

/** \brief Create host-interface
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param hw_addr - interface MAC
    @param use_random_hw_addr - use random generated MAC
    @param host_if_name - interface name
    @param rx_frame_size - frame size for RX
    @param tx_frame_size - frame size for TX
    @param rx_frames_per_block - frames per block for RX
    @param tx_frames_per_block - frames per block for TX
    @param flags - flags for the af_packet interface creation
    @param num_rx_queues - number of rx queues
*/
define af_packet_create_v2
{
  u32 client_index;
  u32 context;

  vl_api_mac_address_t hw_addr;
  bool use_random_hw_addr;
  string host_if_name[64];
  u32 rx_frame_size;
  u32 tx_frame_size;
  u32 rx_frames_per_block;
  u32 tx_frames_per_block;
  u32 flags;
  u16 num_rx_queues [default=1];
};

/** \brief Create host-interface response
    @param context - sender context, to match reply w/ request
    @param retval - return value for request
*/
define af_packet_create_v2_reply
{
  u32 context;
  i32 retval;
  vl_api_interface_index_t sw_if_index;
};

enum af_packet_mode {
  AF_PACKET_API_MODE_ETHERNET = 1, /* mode ethernet */
  AF_PACKET_API_MODE_IP = 2, /* mode ip */
};

enum af_packet_flags {
  AF_PACKET_API_FLAG_QDISC_BYPASS = 1, /* enable the qdisc bypass */
  AF_PACKET_API_FLAG_CKSUM_GSO = 2, /* enable checksum/gso */
};

/** \brief Create host-interface
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param mode - 1 - Ethernet, 2 - IP
    @param hw_addr - interface MAC
    @param use_random_hw_addr - use random generated MAC
    @param host_if_name - interface name
    @param rx_frame_size - frame size for RX
    @param tx_frame_size - frame size for TX
    @param rx_frames_per_block - frames per block for RX
    @param tx_frames_per_block - frames per block for TX
    @param flags - flags for the af_packet interface creation
    @param num_rx_queues - number of rx queues
    @param num_tx_queues - number of tx queues
*/
define af_packet_create_v3
{
  u32 client_index;
  u32 context;

  vl_api_af_packet_mode_t mode;
  vl_api_mac_address_t hw_addr;
  bool use_random_hw_addr;
  string host_if_name[64];
  u32 rx_frame_size;
  u32 tx_frame_size;
  u32 rx_frames_per_block;
  u32 tx_frames_per_block;
  vl_api_af_packet_flags_t flags;
  u16 num_rx_queues [default=1];
  u16 num_tx_queues [default=1];
};

/** \brief Create host-interface response
    @param context - sender context, to match reply w/ request
    @param retval - return value for request
*/
define af_packet_create_v3_reply
{
  u32 context;
  i32 retval;
  vl_api_interface_index_t sw_if_index;
};

/** \brief Delete host-interface
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param host_if_name - interface name
*/
autoreply define af_packet_delete
{
  u32 client_index;
  u32 context;

  string host_if_name[64];
};

/** \brief Set l4 offload checksum calculation
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
autoreply define af_packet_set_l4_cksum_offload
{
  u32 client_index;
  u32 context;

  vl_api_interface_index_t sw_if_index;
  bool set;
};

/** \brief Dump af_packet interfaces request */
define af_packet_dump
{
  u32 client_index;
  u32 context;
};

/** \brief Reply for af_packet dump request
    @param sw_if_index - software index of af_packet interface
    @param host_if_name - interface name
*/
define af_packet_details
{
  u32 context;
  vl_api_interface_index_t sw_if_index;
  string host_if_name[64];
};

/*
 * Local Variables:
 * eval: (c-set-style "gnu")
 * End:
 */
