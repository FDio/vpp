#!/usr/bin/env python2
#
# Copyright (c) 2018 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
from string import Template

from jvpp_json_parser import is_request

_JVPP_IFC_TEMPLATE = Template("""
package $plugin_package;

/**
 * <p>Java representation of plugin's api file.
 * <br>It was generated by jvpp_java_api_gen.py based on $json_filename.
 */
public interface JVpp${plugin_name} extends io.fd.vpp.jvpp.JVpp {
    /**
     * Generic dispatch method for sending requests to VPP
     *
     * @throws io.fd.vpp.jvpp.VppInvocationException if send request had failed
     */
    int send(io.fd.vpp.jvpp.dto.JVppRequest request) throws io.fd.vpp.jvpp.VppInvocationException;
$methods
}
""")

_JVPP_IFC_METHOD_TEMPLATE = Template(
    """    int $name($plugin_package.dto.$type request) throws io.fd.vpp.jvpp.VppInvocationException;""")

_JVPP_IFC_NO_ARG_METHOD_TEMPLATE = Template("""    int $name() throws io.fd.vpp.jvpp.VppInvocationException;""")


class JavaApiGenerator(object):
    def __init__(self, model, logger):
        self.model = model
        self.logger = logger

    def generate(self):
        model = self.model
        self.logger.debug("Generating JVpp interface and implementation for %s" % model.json_api_files)
        plugin_package = model.plugin_package
        methods = []
        for msg in filter(is_request, model.messages):
            if msg.fields:
                methods.append(_JVPP_IFC_METHOD_TEMPLATE.substitute(
                    name=msg.java_method_name,
                    plugin_package=plugin_package,
                    type=msg.java_name))
            else:
                methods.append(_JVPP_IFC_NO_ARG_METHOD_TEMPLATE.substitute(name=msg.java_method_name))

        plugin_name = model.plugin_name
        jvpp_interface = _JVPP_IFC_TEMPLATE.substitute(
            plugin_package=plugin_package,
            json_filename=model.json_api_files,
            plugin_name=plugin_name,
            methods="\n".join(methods)
        )
        with open('JVpp%s.java' % plugin_name, "w") as f:
            f.write(jvpp_interface)
