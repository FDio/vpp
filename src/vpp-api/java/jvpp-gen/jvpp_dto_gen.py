#!/usr/bin/env python
#
# Copyright (c) 2018 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from string import Template

reply_template = Template("""
package $plugin_package.dto;

/**
 * <p>This class represents reply DTO.
 * <br>It was generated by dto_gen.py based on $inputfile preparsed data:
 * <pre>
$docs
 * </pre>
 */
public final class $cls_name implements io.fd.vpp.jvpp.dto.JVppReply<$plugin_package.dto.$request_dto> {

$fields

$hash_code

$equals

$to_string

}
""")


dto_template = Template("""
package $plugin_package.$dto_package;

/**
 * <p>This class represents $description.
 * <br>It was generated by dto_gen.py based on $inputfile preparsed data:
 * <pre>
$docs
 * </pre>
 */
public final class $cls_name implements $base_package.$dto_package.$base_type {

$fields

$hash_code

$equals

$to_string

}
""")

dto_template_typeless = Template("""
package $plugin_package.$dto_package;

/**
 * <p>This class represents $description.
 * <br>It was generated by dto_gen.py based on $inputfile preparsed data:
 * <pre>
$docs
 * </pre>
 */
public final class $cls_name {

$fields
$methods
}
""")

field_template = Template("""    public $type $name;\n""")

send_template = Template("""    @Override
    public int send(final $base_package.JVpp jvpp) throws io.fd.vpp.jvpp.VppInvocationException {
        return (($plugin_package.JVpp${plugin_name})jvpp).$method_name($args);
    }""")


tostring_field_template = Template("""                \"$field_name=\" + $field_name + ", " +\n""")
tostring_array_field_template = Template("""                \"$field_name=\" + java.util.Arrays.toString($field_name) + ", " +\n""")
tostring_template = Template("""    @Override
    public String toString() {
        return "$cls_name{" +
$fields_tostring "}";
    }\n\n""")


equals_other_template = Template("""
        final $cls_name other = ($cls_name) o;
\n""")
equals_field_template = Template("""        if (!java.util.Objects.equals(this.$field_name, other.$field_name)) {
            return false;
        }\n""")
equals_array_field_template = Template("""        if (!java.util.Arrays.equals(this.$field_name, other.$field_name)) {
            return false;
        }\n""")
equals_template = Template("""    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
$comparisons
        return true;
    }\n\n""")


hash_template = Template("""    @Override
    @io.fd.vpp.jvpp.coverity.SuppressFBWarnings("UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD")
    public int hashCode() {
        return java.util.Objects.hash($fields);
    }\n\n""")
hash_single_array_type_template = Template("""    @Override
    @io.fd.vpp.jvpp.coverity.SuppressFBWarnings("UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD")
    public int hashCode() {
        return java.util.Arrays.hashCode($fields);
    }\n\n""")



request_template = Template("""
package $plugin_package.dto;

/**
 * <p>This class represents request DTO.
 * <br>It was generated by dto_gen.py based on $json_filename:
 * <pre>
$json_definition
 * </pre>
 */
public final class $class_name implements io.fd.vpp.jvpp.dto.JVppRequest {

$fields

$hash_code

$equals

$to_string

$send

}
""")

"""
1) generate code just for requests
2) add generation for replies to find best structure

3) play with 

3) update model and unit tests for model creation

4) write tests for code generation
"""


class DtoGenerator(object):
    def __init__(self, model, logger):
        self.model = model
        self.logger = logger

    def generate(self):
        model = self.model
        plugin_package = model.plugin_package
        for msg in model.messages:
            # before push, change to getters or properties
            class_name = msg.java_name
            dto = request_template.substitute(plugin_package=plugin_package,
                                              json_filename="// fixme msg.json_filename",
                                              json_definition=model.json_messages_by_name,
                                              class_name=class_name,
                                              fields="//fixme fields",
                                              hash_code="//fixme hash_code",
                                              equals="//fixme equals",
                                              to_string="//fixme to_string=",
                                              send="//fixme send")
            with open('%s.java' % class_name, "w") as f:
                f.write(dto)
