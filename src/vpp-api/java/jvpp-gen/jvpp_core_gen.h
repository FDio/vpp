/**
 * This file contains JNI bindings for jvpp Java API.
 * It was generated by jvpp_jni_gen.py based on ['test.api.json'].
 */

// JAVA class reference cache
jclass fooDumpClass;
jclass requestTwoArgsReplyClass;
jclass fooDetailsClass;
jclass requestNoArgsClass;
jclass requestTwoArgsClass;
jclass requestSingleArgClass;
jclass requestSingleArgReplyClass;
jclass requestNoArgsReplyClass;
jclass callbackExceptionClass;

static int cache_class_references(JNIEnv* env) {
    
    fooDumpClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/FooDump"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestTwoArgsReplyClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestTwoArgsReply"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    fooDetailsClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/FooDetails"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestNoArgsClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestNoArgs"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestTwoArgsClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestTwoArgs"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestSingleArgClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestSingleArg"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestSingleArgReplyClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestSingleArgReply"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestNoArgsReplyClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestNoArgsReply"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    callbackExceptionClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/VppCallbackException"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    return 0;
}

static void delete_class_references(JNIEnv* env) {
    
    if (fooDumpClass) {
        (*env)->DeleteGlobalRef(env, fooDumpClass);
    }
    if (requestTwoArgsReplyClass) {
        (*env)->DeleteGlobalRef(env, requestTwoArgsReplyClass);
    }
    if (fooDetailsClass) {
        (*env)->DeleteGlobalRef(env, fooDetailsClass);
    }
    if (requestNoArgsClass) {
        (*env)->DeleteGlobalRef(env, requestNoArgsClass);
    }
    if (requestTwoArgsClass) {
        (*env)->DeleteGlobalRef(env, requestTwoArgsClass);
    }
    if (requestSingleArgClass) {
        (*env)->DeleteGlobalRef(env, requestSingleArgClass);
    }
    if (requestSingleArgReplyClass) {
        (*env)->DeleteGlobalRef(env, requestSingleArgReplyClass);
    }
    if (requestNoArgsReplyClass) {
        (*env)->DeleteGlobalRef(env, requestNoArgsReplyClass);
    }
    if (callbackExceptionClass) {
        (*env)->DeleteGlobalRef(env, callbackExceptionClass);
    }
}


// List of supported API messages used for verification
#define foreach_supported_api_message \
_(foo_dump_8ac76db6)
_(request_two_args_reply_9910a325)
_(foo_details_e18f0c91)
_(request_no_args_51077d14)
_(request_two_args_25ffac9b)
_(request_single_arg_4199095a)
_(control_ping_51077d14)
_(control_ping_reply_f6b0b8ca)
_(request_single_arg_reply_e8d4e804)
_(request_no_args_reply_e8d4e804)


// JNI bindings

/**
 * JNI binding for sending foo_dump message.
 * Generated based on ['test.api.json']:
 * [[u'u16', u'_vl_msg_id'], [u'u32', u'client_index'], [u'u32', u'context'], [u'u32', u'index'], {   u'crc': u'0x8ac76db6'}]
 */
JNIEXPORT jint JNICALL Java_io_fd_vpp_jvpp_core_JVppCoreImpl_fooDump0
(JNIEnv * env, jclass clazz, jobject request) {
    core_main_t *plugin_main = &core_main;
    vl_api_foo_dump_t * mp;
    u32 my_context_id = vppjni_get_context_id (&jvpp_main);
    jclass requestClass = (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/FooDump");

    
    jfieldID vlMsgIdFieldId = (*env)->GetFieldID(env, requestClass, "vlMsgId", "fixme jni_signature");
    fixme jni_type vlMsgId = (*env)->Getfixme jni_getter(env, request, vlMsgIdFieldId);
    
    jfieldID clientIndexFieldId = (*env)->GetFieldID(env, requestClass, "clientIndex", "fixme jni_signature");
    fixme jni_type clientIndex = (*env)->Getfixme jni_getter(env, request, clientIndexFieldId);
    
    jfieldID contextFieldId = (*env)->GetFieldID(env, requestClass, "context", "fixme jni_signature");
    fixme jni_type context = (*env)->Getfixme jni_getter(env, request, contextFieldId);
    
    jfieldID indexFieldId = (*env)->GetFieldID(env, requestClass, "index", "fixme jni_signature");
    fixme jni_type index = (*env)->Getfixme jni_getter(env, request, indexFieldId);
    

    // create message:
    const size_t size = sizeof(*mp);
    mp = vl_msg_api_alloc(size);
    memset (mp, 0, size);
    mp->_vl_msg_id = ntohs (get_message_id(env, "foo_dump_8ac76db6"));
    mp->client_index = plugin_main->my_client_index;
    mp->context = clib_host_to_net_u32 (my_context_id);

    msg_initialization FIXME

    // send message:
    if (CLIB_DEBUG > 1)
        clib_warning ("Sending foo_dump message");
    vl_msg_api_send_shmem (plugin_main->vl_input_queue, (u8 *)&mp);
    if ((*env)->ExceptionCheck(env)) {
        return JNI_ERR;
    }
    return my_context_id;
}
/**
 * JNI binding for sending request_no_args message.
 * Generated based on ['test.api.json']:
 * [[u'u16', u'_vl_msg_id'], [u'u32', u'client_index'], [u'u32', u'context'], {   u'crc': u'0x51077d14'}]
 */
JNIEXPORT jint JNICALL Java_io_fd_vpp_jvpp_core_JVppCoreImpl_requestNoArgs0
(JNIEnv * env, jclass clazz) {
    core_main_t *plugin_main = &core_main;
    vl_api_request_no_args_t * mp;
    u32 my_context_id = vppjni_get_context_id (&jvpp_main);
    jclass requestClass = (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestNoArgs");

    

    // create message:
    const size_t size = sizeof(*mp);
    mp = vl_msg_api_alloc(size);
    memset (mp, 0, size);
    mp->_vl_msg_id = ntohs (get_message_id(env, "request_no_args_51077d14"));
    mp->client_index = plugin_main->my_client_index;
    mp->context = clib_host_to_net_u32 (my_context_id);

    msg_initialization FIXME

    // send message:
    if (CLIB_DEBUG > 1)
        clib_warning ("Sending request_no_args message");
    vl_msg_api_send_shmem (plugin_main->vl_input_queue, (u8 *)&mp);
    if ((*env)->ExceptionCheck(env)) {
        return JNI_ERR;
    }
    return my_context_id;
}
/**
 * JNI binding for sending request_two_args message.
 * Generated based on ['test.api.json']:
 * [   [u'u16', u'_vl_msg_id'],
 *     [u'u32', u'client_index'],
 *     [u'u32', u'context'],
 *     [u'u8', u'val_i8'],
 *     [u'u8', u'val_u16'],
 *     {   u'crc': u'0x25ffac9b'}]
 */
JNIEXPORT jint JNICALL Java_io_fd_vpp_jvpp_core_JVppCoreImpl_requestTwoArgs0
(JNIEnv * env, jclass clazz, jobject request) {
    core_main_t *plugin_main = &core_main;
    vl_api_request_two_args_t * mp;
    u32 my_context_id = vppjni_get_context_id (&jvpp_main);
    jclass requestClass = (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestTwoArgs");

    
    jfieldID valI8FieldId = (*env)->GetFieldID(env, requestClass, "valI8", "fixme jni_signature");
    fixme jni_type valI8 = (*env)->Getfixme jni_getter(env, request, valI8FieldId);
    
    jfieldID valU16FieldId = (*env)->GetFieldID(env, requestClass, "valU16", "fixme jni_signature");
    fixme jni_type valU16 = (*env)->Getfixme jni_getter(env, request, valU16FieldId);
    

    // create message:
    const size_t size = sizeof(*mp);
    mp = vl_msg_api_alloc(size);
    memset (mp, 0, size);
    mp->_vl_msg_id = ntohs (get_message_id(env, "request_two_args_25ffac9b"));
    mp->client_index = plugin_main->my_client_index;
    mp->context = clib_host_to_net_u32 (my_context_id);

    msg_initialization FIXME

    // send message:
    if (CLIB_DEBUG > 1)
        clib_warning ("Sending request_two_args message");
    vl_msg_api_send_shmem (plugin_main->vl_input_queue, (u8 *)&mp);
    if ((*env)->ExceptionCheck(env)) {
        return JNI_ERR;
    }
    return my_context_id;
}
/**
 * JNI binding for sending request_single_arg message.
 * Generated based on ['test.api.json']:
 * [[u'u16', u'_vl_msg_id'], [u'u32', u'client_index'], [u'u32', u'context'], [u'u8', u'val_u8'], {   u'crc': u'0x4199095a'}]
 */
JNIEXPORT jint JNICALL Java_io_fd_vpp_jvpp_core_JVppCoreImpl_requestSingleArg0
(JNIEnv * env, jclass clazz, jobject request) {
    core_main_t *plugin_main = &core_main;
    vl_api_request_single_arg_t * mp;
    u32 my_context_id = vppjni_get_context_id (&jvpp_main);
    jclass requestClass = (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestSingleArg");

    
    jfieldID valU8FieldId = (*env)->GetFieldID(env, requestClass, "valU8", "fixme jni_signature");
    fixme jni_type valU8 = (*env)->Getfixme jni_getter(env, request, valU8FieldId);
    

    // create message:
    const size_t size = sizeof(*mp);
    mp = vl_msg_api_alloc(size);
    memset (mp, 0, size);
    mp->_vl_msg_id = ntohs (get_message_id(env, "request_single_arg_4199095a"));
    mp->client_index = plugin_main->my_client_index;
    mp->context = clib_host_to_net_u32 (my_context_id);

    msg_initialization FIXME

    // send message:
    if (CLIB_DEBUG > 1)
        clib_warning ("Sending request_single_arg message");
    vl_msg_api_send_shmem (plugin_main->vl_input_queue, (u8 *)&mp);
    if ((*env)->ExceptionCheck(env)) {
        return JNI_ERR;
    }
    return my_context_id;
}

// Message handlers
//todo msg_handlers


// Registration of message handlers in vlib
#define foreach_api_reply_handler \
_(request_two_args_reply_9910a325, request_two_args_reply)
_(foo_details_e18f0c91, foo_details)
_(request_single_arg_reply_e8d4e804, request_single_arg_reply)
_(request_no_args_reply_e8d4e804, request_no_args_reply)

