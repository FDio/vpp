/**
 * This file contains JNI bindings for jvpp Java API.
 * It was generated by jvpp_jni_gen.py based on ['test.api.json'].
 */

// JAVA class reference cache

jclass fooDumpClass;
jclass requestTwoArgsReplyClass;
jclass fooDetailsClass;
jclass requestNoArgsClass;
jclass requestTwoArgsClass;
jclass requestNoArgsReplyClass;
jclass requestSingleArgReplyClass;
jclass requestSingleArgClass;
jclass callbackExceptionClass;

static int cache_class_references(JNIEnv* env) {
    
    fooDumpClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/FooDump"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestTwoArgsReplyClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestTwoArgsReply"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    fooDetailsClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/FooDetails"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestNoArgsClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestNoArgs"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestTwoArgsClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestTwoArgs"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestNoArgsReplyClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestNoArgsReply"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestSingleArgReplyClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestSingleArgReply"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    requestSingleArgClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/core/dto/RequestSingleArg"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    callbackExceptionClass = (jclass)(*env)->NewGlobalRef(env, (*env)->FindClass(env, "io/fd/vpp/jvpp/VppCallbackException"));
    if ((*env)->ExceptionCheck(env)) {
        (*env)->ExceptionDescribe(env);
        return JNI_ERR;
    }
    return 0;
}

static void delete_class_references(JNIEnv* env) {
    
    if (fooDumpClass) {
        (*env)->DeleteGlobalRef(env, fooDumpClass);
    }
    if (requestTwoArgsReplyClass) {
        (*env)->DeleteGlobalRef(env, requestTwoArgsReplyClass);
    }
    if (fooDetailsClass) {
        (*env)->DeleteGlobalRef(env, fooDetailsClass);
    }
    if (requestNoArgsClass) {
        (*env)->DeleteGlobalRef(env, requestNoArgsClass);
    }
    if (requestTwoArgsClass) {
        (*env)->DeleteGlobalRef(env, requestTwoArgsClass);
    }
    if (requestNoArgsReplyClass) {
        (*env)->DeleteGlobalRef(env, requestNoArgsReplyClass);
    }
    if (requestSingleArgReplyClass) {
        (*env)->DeleteGlobalRef(env, requestSingleArgReplyClass);
    }
    if (requestSingleArgClass) {
        (*env)->DeleteGlobalRef(env, requestSingleArgClass);
    }
    if (callbackExceptionClass) {
        (*env)->DeleteGlobalRef(env, callbackExceptionClass);
    }
}

// List of supported API messages used for verification
//todo api_verification

// JNI bindings
//todo jni_implementations

// Message handlers
//todo msg_handlers

// Registration of message handlers in vlib
//todo handler_registration
