package io.fd.vpp.jvpp.core;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import java.util.Set;
import java.util.logging.Logger;
import java.util.logging.Level;
import io.fd.vpp.jvpp.callback.JVppCallback;
import io.fd.vpp.jvpp.VppConnection;
import io.fd.vpp.jvpp.JVppRegistry;

/**
 * <p>Default implementation of JVpp interface.
 * <br>It was generated by jvpp_java_impl_gen.py based on ['test.api.json'].
 */
public final class JVppCoreImpl implements io.fd.vpp.jvpp.core.JVppCore {

    private final static Logger LOG = Logger.getLogger(JVppCoreImpl.class.getName());
    private static final String LIBNAME = "libjvpp_core.so";

    // FIXME using NativeLibraryLoader makes load fail could not find (WantInterfaceEventsReply).
    static {
        try {
            loadLibrary();
        } catch (Exception e) {
            LOG.severe("Can't find jvpp jni library: " + LIBNAME);
            throw new ExceptionInInitializerError(e);
        }
    }

    private static void loadStream(final InputStream is) throws IOException {
        final Set<PosixFilePermission> perms = PosixFilePermissions.fromString("rwxr-x---");
        final Path p = Files.createTempFile(LIBNAME, null, PosixFilePermissions.asFileAttribute(perms));
        try {
            Files.copy(is, p, StandardCopyOption.REPLACE_EXISTING);

            try {
                Runtime.getRuntime().load(p.toString());
            } catch (UnsatisfiedLinkError e) {
                throw new IOException("Failed to load library " + p, e);
            }
        } finally {
            try {
                Files.deleteIfExists(p);
            } catch (IOException e) {
            }
        }
    }

    private static void loadLibrary() throws IOException {
        try (final InputStream is = JVppCoreImpl.class.getResourceAsStream('/' + LIBNAME)) {
            if (is == null) {
                throw new IOException("Failed to open library resource " + LIBNAME);
            }
            loadStream(is);
        }
    }

    private VppConnection connection;
    private JVppRegistry registry;

    private static native void init0(final JVppCallback callback, final long queueAddress, final int clientIndex);
    @Override
    public void init(final JVppRegistry registry, final JVppCallback callback, final long queueAddress, final int clientIndex) {
        this.registry = java.util.Objects.requireNonNull(registry, "registry should not be null");
        this.connection = java.util.Objects.requireNonNull(registry.getConnection(), "connection should not be null");
        connection.checkActive();
        init0(callback, queueAddress, clientIndex);
    }

    private static native void close0();
    @Override
    public void close() {
        close0();
    }

    @Override
    public int send(io.fd.vpp.jvpp.dto.JVppRequest request) throws io.fd.vpp.jvpp.VppInvocationException {
        return request.send(this);
    }

    @Override
    public final int controlPing(final io.fd.vpp.jvpp.dto.ControlPing controlPing) throws io.fd.vpp.jvpp.VppInvocationException {
        return registry.controlPing(JVppCoreImpl.class);
    }

    private static native int requestNoArgs0() throws io.fd.vpp.jvpp.VppInvocationException;
    public final int requestNoArgs() throws io.fd.vpp.jvpp.VppInvocationException {
        connection.checkActive();
        LOG.fine("Sending RequestNoArgs event message");
        int result=requestNoArgs0();
        if(result<0){
            throw new io.fd.vpp.jvpp.VppInvocationException("requestNoArgs", result);
        }
        return result;
    }

    private static native int requestTwoArgs0(io.fd.vpp.jvpp.core.dto.RequestTwoArgs request);
    public final int requestTwoArgs(io.fd.vpp.jvpp.core.dto.RequestTwoArgs request) throws io.fd.vpp.jvpp.VppInvocationException {
        java.util.Objects.requireNonNull(request, "Null request object");
        connection.checkActive();
        if (LOG.isLoggable(Level.FINE)) {
            LOG.fine(String.format("Sending RequestTwoArgs event message: %s", request));
        }
        int result=requestTwoArgs0(request);
        if (result<0){
            throw new io.fd.vpp.jvpp.VppInvocationException("requestTwoArgs", result);
        }
        return result;
    }

    private static native int requestSingleArg0(io.fd.vpp.jvpp.core.dto.RequestSingleArg request);
    public final int requestSingleArg(io.fd.vpp.jvpp.core.dto.RequestSingleArg request) throws io.fd.vpp.jvpp.VppInvocationException {
        java.util.Objects.requireNonNull(request, "Null request object");
        connection.checkActive();
        if (LOG.isLoggable(Level.FINE)) {
            LOG.fine(String.format("Sending RequestSingleArg event message: %s", request));
        }
        int result=requestSingleArg0(request);
        if (result<0){
            throw new io.fd.vpp.jvpp.VppInvocationException("requestSingleArg", result);
        }
        return result;
    }
}
