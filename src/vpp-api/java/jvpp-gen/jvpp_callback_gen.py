#!/usr/bin/env python2
#
# Copyright (c) 2018 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
from string import Template

from jvpp_json_parser import is_request


_CALLBACK_TEMPLATE = Template("""package $plugin_package.callback;

/**
 * <p>Represents callback for plugin's api message.
 * <br>It was generated by jvpp_callback_gen.py based on $json_filename.
 */
public interface ${name}Callback extends io.fd.vpp.jvpp.callback.JVppCallback {

    void on ${name}(io.fd.vpp.jvpp.core.dto.${name} reply);
}
""")

_GLOBAL_CALLBACK_TEMPLATE = Template("""package $plugin_package.callback;

/**
 * <p>Global aggregated callback interface.
 * <br>It was generated by callback_gen.py based on $inputfile
 * <br>(python representation of api file generated by vppapigen).
 */
public interface JVpp${plugin_name}GlobalCallback extends io.fd.vpp.jvpp.callback.ControlPingCallback, $callbacks {
}
""")


class JavaIfcGenerator(object):
    def __init__(self, model, logger):
        self.model = model
        self.logger = logger

    def generate(self):
        model = self.model
        self.logger.debug("Generating Callback interfaces for %s" % model.json_api_files)
        plugin_package = model.plugin_package
        methods = []
        for msg in model.messages:
            callback_name = "%sCallback" % msg.java_name
            # todo
            # if util.is_control_ping(camel_case_name_with_suffix):
            #     # Skip control_ping managed by jvpp registry.
            #     continue
            # if util.is_dump(func['name']) or util.is_request(func['name'], func_list):
            #    continue
            if is_request(msg):
                continue
            _CALLBACK_TEMPLATE.substitute(
                name=callback_name,

            )

        plugin_name = model.plugin_java_name
        jvpp_interface = _JVPP_IFC_TEMPLATE.substitute(
            plugin_package=plugin_package,
            json_filename=model.json_api_files,
            plugin_name=plugin_name,
            methods="\n".join(methods)
        )
        with open('JVpp%s.java' % plugin_name, "w") as f:
            f.write(jvpp_interface)
