#!/usr/bin/env python2
#
# Copyright (c) 2018 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
from string import Template

from jvpp_json_parser import is_request, is_dump


def _is_control_ping(java_name):
    return java_name.lower().startswith("controlping")

_CALLBACK_TEMPLATE = Template("""package $plugin_package.callback;

/**
 * <p>Represents callback for plugin's api message.
 * <br>It was generated by jvpp_callback_gen.py based on $json_filename.
 */
public interface ${name}Callback extends io.fd.vpp.jvpp.callback.JVppCallback {

    void on${name}(io.fd.vpp.jvpp.core.dto.${name} reply);
}
""")

_GLOBAL_CALLBACK_TEMPLATE = Template("""package $plugin_package.callback;

/**
 * <p>Global aggregated callback interface.
 * <br>It was generated by jvpp_callback_gen.py based on $json_filename.
 */
public interface JVpp${plugin_name}GlobalCallback extends io.fd.vpp.jvpp.callback.ControlPingCallback,
    $callbacks {
}
""")


class CallbackGenerator(object):
    def __init__(self, model, logger):
        self.model = model
        self.logger = logger

    def generate(self):
        model = self.model
        json_filename = model.json_api_files
        self.logger.debug("Generating Callback interfaces for %s" % json_filename)
        plugin_package = model.plugin_package

        callbacks = []
        for msg in model.messages:
            name = msg.java_name_upper
            if _is_control_ping(name):
                # Skip control_ping managed by jvpp registry.
                continue
            if is_dump(msg) or is_request(msg):
                continue

            callbacks.append("%s.callback.%sCallback" % (plugin_package, name))
            callback = _CALLBACK_TEMPLATE.substitute(
                plugin_package=plugin_package,
                json_filename=json_filename,
                name=name)

            with open("%sCallback.java" % name, "w") as f:
                f.write(callback)

        plugin_name = model.plugin_java_name
        with open("JVpp%sGlobalCallback.java" % plugin_name, "w") as f:
            f.write(_GLOBAL_CALLBACK_TEMPLATE.substitute(
                plugin_package=plugin_package,
                json_filename=json_filename,
                plugin_name=plugin_name,
                callbacks=",\n    ".join(callbacks)
            ))
