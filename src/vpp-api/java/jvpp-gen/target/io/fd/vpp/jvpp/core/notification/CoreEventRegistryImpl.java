
package io.fd.vpp.jvpp.core.notification;

/**
 * <p>Notification registry delegating notification processing to registered callbacks.
 * <br>It was generated by notification_gen.py based on ['test.api.json'].
 */
public final class CoreEventRegistryImpl implements CoreEventRegistry, GlobalCoreEventCallback {

    // TODO add a special NotificationCallback interface and only allow those to be registered
    private final java.util.concurrent.ConcurrentMap<Class<?>, io.fd.vpp.jvpp.callback.JVppCallback> registeredCallbacks =
        new java.util.concurrent.ConcurrentHashMap<>();
    private static java.util.logging.Logger LOG = java.util.logging.Logger.getLogger(CoreEventRegistryImpl.class.getName());

    
    public java.lang.AutoCloseable registerRequestNoArgsReplyCallback(final io.fd.vpp.jvpp.core.callback.RequestNoArgsReplyCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.RequestNoArgsReply.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.RequestNoArgsReply.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.RequestNoArgsReply.class);
    }

    public java.lang.AutoCloseable registerRequestSingleArgReplyCallback(final io.fd.vpp.jvpp.core.callback.RequestSingleArgReplyCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.RequestSingleArgReply.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.RequestSingleArgReply.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.RequestSingleArgReply.class);
    }

    public java.lang.AutoCloseable registerRequestTwoArgsReplyCallback(final io.fd.vpp.jvpp.core.callback.RequestTwoArgsReplyCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.RequestTwoArgsReply.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.RequestTwoArgsReply.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.RequestTwoArgsReply.class);
    }

    public java.lang.AutoCloseable registerRequestWithSingleArrayReplyCallback(final io.fd.vpp.jvpp.core.callback.RequestWithSingleArrayReplyCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.RequestWithSingleArrayReply.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.RequestWithSingleArrayReply.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.RequestWithSingleArrayReply.class);
    }

    public java.lang.AutoCloseable registerRequestWithArraysReplyCallback(final io.fd.vpp.jvpp.core.callback.RequestWithArraysReplyCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.RequestWithArraysReply.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.RequestWithArraysReply.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.RequestWithArraysReply.class);
    }

    public java.lang.AutoCloseable registerRequestWithVariableLengthArrayReplyCallback(final io.fd.vpp.jvpp.core.callback.RequestWithVariableLengthArrayReplyCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.RequestWithVariableLengthArrayReply.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.RequestWithVariableLengthArrayReply.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.RequestWithVariableLengthArrayReply.class);
    }

    public java.lang.AutoCloseable registerFooDetailsCallback(final io.fd.vpp.jvpp.core.callback.FooDetailsCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.FooDetails.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.FooDetails.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.FooDetails.class);
    }

    public java.lang.AutoCloseable registerRequestWithCustomTypeReplyCallback(final io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeReplyCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeReply.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeReply.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeReply.class);
    }

    public java.lang.AutoCloseable registerRequestWithCustomTypeArrayReplyCallback(final io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeArrayReplyCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeArrayReply.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeArrayReply.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeArrayReply.class);
    }

    public java.lang.AutoCloseable registerRequestWithCustomTypeVlaReplyCallback(final io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeVlaReplyCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeVlaReply.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeVlaReply.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeVlaReply.class);
    }

    public java.lang.AutoCloseable registerFooEventCallback(final io.fd.vpp.jvpp.core.callback.FooEventCallback callback){
        if(null != registeredCallbacks.putIfAbsent(io.fd.vpp.jvpp.core.dto.FooEvent.class, callback)){
            throw new IllegalArgumentException("Callback for " + io.fd.vpp.jvpp.core.dto.FooEvent.class +
                "notification already registered");
        }
        return () -> registeredCallbacks.remove(io.fd.vpp.jvpp.core.dto.FooEvent.class);
    }

    
    @Override
    public void onRequestNoArgsReply(
        final io.fd.vpp.jvpp.core.dto.RequestNoArgsReply notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestNoArgsReply event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.RequestNoArgsReply.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.RequestNoArgsReplyCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.RequestNoArgsReply.class))
                .onRequestNoArgsReply(notification);
        }
    }

    @Override
    public void onRequestSingleArgReply(
        final io.fd.vpp.jvpp.core.dto.RequestSingleArgReply notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestSingleArgReply event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.RequestSingleArgReply.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.RequestSingleArgReplyCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.RequestSingleArgReply.class))
                .onRequestSingleArgReply(notification);
        }
    }

    @Override
    public void onRequestTwoArgsReply(
        final io.fd.vpp.jvpp.core.dto.RequestTwoArgsReply notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestTwoArgsReply event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.RequestTwoArgsReply.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.RequestTwoArgsReplyCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.RequestTwoArgsReply.class))
                .onRequestTwoArgsReply(notification);
        }
    }

    @Override
    public void onRequestWithSingleArrayReply(
        final io.fd.vpp.jvpp.core.dto.RequestWithSingleArrayReply notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithSingleArrayReply event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.RequestWithSingleArrayReply.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.RequestWithSingleArrayReplyCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.RequestWithSingleArrayReply.class))
                .onRequestWithSingleArrayReply(notification);
        }
    }

    @Override
    public void onRequestWithArraysReply(
        final io.fd.vpp.jvpp.core.dto.RequestWithArraysReply notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithArraysReply event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.RequestWithArraysReply.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.RequestWithArraysReplyCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.RequestWithArraysReply.class))
                .onRequestWithArraysReply(notification);
        }
    }

    @Override
    public void onRequestWithVariableLengthArrayReply(
        final io.fd.vpp.jvpp.core.dto.RequestWithVariableLengthArrayReply notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithVariableLengthArrayReply event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.RequestWithVariableLengthArrayReply.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.RequestWithVariableLengthArrayReplyCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.RequestWithVariableLengthArrayReply.class))
                .onRequestWithVariableLengthArrayReply(notification);
        }
    }

    @Override
    public void onFooDetails(
        final io.fd.vpp.jvpp.core.dto.FooDetails notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received FooDetails event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.FooDetails.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.FooDetailsCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.FooDetails.class))
                .onFooDetails(notification);
        }
    }

    @Override
    public void onRequestWithCustomTypeReply(
        final io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeReply notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithCustomTypeReply event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeReply.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeReplyCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeReply.class))
                .onRequestWithCustomTypeReply(notification);
        }
    }

    @Override
    public void onRequestWithCustomTypeArrayReply(
        final io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeArrayReply notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithCustomTypeArrayReply event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeArrayReply.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeArrayReplyCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeArrayReply.class))
                .onRequestWithCustomTypeArrayReply(notification);
        }
    }

    @Override
    public void onRequestWithCustomTypeVlaReply(
        final io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeVlaReply notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithCustomTypeVlaReply event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeVlaReply.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeVlaReplyCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeVlaReply.class))
                .onRequestWithCustomTypeVlaReply(notification);
        }
    }

    @Override
    public void onFooEvent(
        final io.fd.vpp.jvpp.core.dto.FooEvent notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received FooEvent event message: %s", notification));
        }
        final io.fd.vpp.jvpp.callback.JVppCallback jVppCallback = registeredCallbacks.get(io.fd.vpp.jvpp.core.dto.FooEvent.class);
        if (null != jVppCallback) {
            ((io.fd.vpp.jvpp.core.callback.FooEventCallback) registeredCallbacks
                .get(io.fd.vpp.jvpp.core.dto.FooEvent.class))
                .onFooEvent(notification);
        }
    }


    @Override
    public void close() {
        registeredCallbacks.clear();
    }

    @Override
    public void onError(io.fd.vpp.jvpp.VppCallbackException ex) {
        java.util.logging.Logger LOG = java.util.logging.Logger.getLogger(CoreEventRegistryImpl.class.getName());
        LOG.log(java.util.logging.Level.WARNING, String.format("Received onError exception: call=%s, context=%d, retval=%d%n", ex.getMethodName(),
            ex.getCtxId(), ex.getErrorCode()), ex);
    }
}
