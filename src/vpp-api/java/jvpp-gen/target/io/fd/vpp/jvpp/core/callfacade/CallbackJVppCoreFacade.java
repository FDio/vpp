
package io.fd.vpp.jvpp.core.callfacade;

/**
 * <p>Default implementation of CallbackCoreJVpp interface.
 * <br>It was generated by jvpp_callback_facade_gen.py based on ['test.api.json'].
 */
public final class CallbackJVppCoreFacade implements CallbackJVppCore {

    private final io.fd.vpp.jvpp.core.JVppCore jvpp;
    private final java.util.Map<Integer, io.fd.vpp.jvpp.callback.JVppCallback> callbacks;
    private final io.fd.vpp.jvpp.core.notification.CoreEventRegistryImpl eventRegistry = new io.fd.vpp.jvpp.core.notification.CoreEventRegistryImpl();
    /**
     * <p>Create CallbackJVppCoreFacade object for provided JVpp instance.
     * Constructor internally creates CallbackJVppFacadeCallback class for processing callbacks
     * and then connects to provided JVpp instance
     *
     * @param jvpp provided io.fd.vpp.jvpp.JVpp instance
     *
     * @throws java.io.IOException in case instance cannot connect to JVPP
     */
    public CallbackJVppCoreFacade(final io.fd.vpp.jvpp.JVppRegistry registry, final io.fd.vpp.jvpp.core.JVppCore jvpp) throws java.io.IOException {
        this.jvpp = java.util.Objects.requireNonNull(jvpp,"jvpp is null");
        this.callbacks = new java.util.HashMap<>();
        java.util.Objects.requireNonNull(registry, "JVppRegistry should not be null");
        registry.register(jvpp, new CallbackJVppCoreFacadeCallback(this.callbacks, eventRegistry));
    }

    @Override
    public io.fd.vpp.jvpp.core.notification.CoreEventRegistry getEventRegistry() {
        return eventRegistry;
    }

    @Override
    public void close() throws Exception {
        jvpp.close();
    }

    // TODO add send()

    public final void requestNoArgs(io.fd.vpp.jvpp.core.callback.RequestNoArgsReplyCallback callback) throws io.fd.vpp.jvpp.VppInvocationException {
        synchronized (callbacks) {
            callbacks.put(jvpp.requestNoArgs(request), callback);
        }
    }

    public final void requestSingleArg(io.fd.vpp.jvpp.core.dto.RequestSingleArg request, io.fd.vpp.jvpp.core.callback.RequestSingleArgReplyCallback callback) throws io.fd.vpp.jvpp.VppInvocationException {
        synchronized (callbacks) {
            callbacks.put(jvpp.requestSingleArg(request), callback);
        }
    }

    public final void requestTwoArgs(io.fd.vpp.jvpp.core.dto.RequestTwoArgs request, io.fd.vpp.jvpp.core.callback.RequestTwoArgsReplyCallback callback) throws io.fd.vpp.jvpp.VppInvocationException {
        synchronized (callbacks) {
            callbacks.put(jvpp.requestTwoArgs(request), callback);
        }
    }

    public final void requestWithSingleArray(io.fd.vpp.jvpp.core.dto.RequestWithSingleArray request, io.fd.vpp.jvpp.core.callback.RequestWithSingleArrayReplyCallback callback) throws io.fd.vpp.jvpp.VppInvocationException {
        synchronized (callbacks) {
            callbacks.put(jvpp.requestWithSingleArray(request), callback);
        }
    }

    public final void requestWithArrays(io.fd.vpp.jvpp.core.dto.RequestWithArrays request, io.fd.vpp.jvpp.core.callback.RequestWithArraysReplyCallback callback) throws io.fd.vpp.jvpp.VppInvocationException {
        synchronized (callbacks) {
            callbacks.put(jvpp.requestWithArrays(request), callback);
        }
    }

    public final void requestWithVariableLengthArray(io.fd.vpp.jvpp.core.dto.RequestWithVariableLengthArray request, io.fd.vpp.jvpp.core.callback.RequestWithVariableLengthArrayReplyCallback callback) throws io.fd.vpp.jvpp.VppInvocationException {
        synchronized (callbacks) {
            callbacks.put(jvpp.requestWithVariableLengthArray(request), callback);
        }
    }

    public final void fooDump(io.fd.vpp.jvpp.core.dto.FooDump request, io.fd.vpp.jvpp.core.callback.FooDetailsCallback callback) throws io.fd.vpp.jvpp.VppInvocationException {
        synchronized (callbacks) {
            callbacks.put(jvpp.fooDump(request), callback);
        }
    }

    public final void requestWithCustomType(io.fd.vpp.jvpp.core.dto.RequestWithCustomType request, io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeReplyCallback callback) throws io.fd.vpp.jvpp.VppInvocationException {
        synchronized (callbacks) {
            callbacks.put(jvpp.requestWithCustomType(request), callback);
        }
    }

    public final void requestWithCustomTypeArray(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeArray request, io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeArrayReplyCallback callback) throws io.fd.vpp.jvpp.VppInvocationException {
        synchronized (callbacks) {
            callbacks.put(jvpp.requestWithCustomTypeArray(request), callback);
        }
    }

    public final void requestWithCustomTypeVla(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeVla request, io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeVlaReplyCallback callback) throws io.fd.vpp.jvpp.VppInvocationException {
        synchronized (callbacks) {
            callbacks.put(jvpp.requestWithCustomTypeVla(request), callback);
        }
    }

}
