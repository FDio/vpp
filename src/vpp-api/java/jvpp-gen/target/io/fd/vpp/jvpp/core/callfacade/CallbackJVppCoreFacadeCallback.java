
package io.fd.vpp.jvpp.core.callfacade;

/**
 * <p>Implementation of JVppGlobalCallback interface for Java Callback API.
 * <br>It was generated by jvpp_callback_facade_gen.py based on ['test.api.json'].
 */
public final class CallbackJVppCoreFacadeCallback implements io.fd.vpp.jvpp.core.callback.JVppCoreGlobalCallback {

    private final java.util.Map<Integer, io.fd.vpp.jvpp.callback.JVppCallback> requests;
    private final io.fd.vpp.jvpp.core.notification.GlobalCoreEventCallback eventCallback;
    private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger(CallbackJVppCoreFacadeCallback.class.getName());

    public CallbackJVppCoreFacadeCallback(final java.util.Map<Integer, io.fd.vpp.jvpp.callback.JVppCallback> requestMap,
                                      final io.fd.vpp.jvpp.core.notification.GlobalCoreEventCallback eventCallback) {
        this.requests = requestMap;
        this.eventCallback = eventCallback;
    }

    @Override
    public void onError(io.fd.vpp.jvpp.VppCallbackException reply) {

        io.fd.vpp.jvpp.callback.JVppCallback failedCall;
        synchronized(requests) {
            failedCall = requests.remove(reply.getCtxId());
        }

        if(failedCall != null) {
            try {
                failedCall.onError(reply);
            } catch(RuntimeException ex) {
                ex.addSuppressed(reply);
                LOG.log(java.util.logging.Level.WARNING, String.format("Callback: %s failed while handling exception: %s", failedCall, reply), ex);
            }
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void onControlPingReply(final io.fd.vpp.jvpp.dto.ControlPingReply reply) {

        io.fd.vpp.jvpp.callback.ControlPingCallback callback;
        final int replyId = reply.context;
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.callback.ControlPingCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onControlPingReply(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onRequestNoArgsReply(final io.fd.vpp.jvpp.core.dto.RequestNoArgsReply reply) {

        io.fd.vpp.jvpp.core.callback.RequestNoArgsReplyCallback callback;
        final int replyId = reply.context;
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestNoArgsReply event message: %s", reply));
        }
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.core.callback.RequestNoArgsReplyCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onRequestNoArgsReply(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onRequestSingleArgReply(final io.fd.vpp.jvpp.core.dto.RequestSingleArgReply reply) {

        io.fd.vpp.jvpp.core.callback.RequestSingleArgReplyCallback callback;
        final int replyId = reply.context;
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestSingleArgReply event message: %s", reply));
        }
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.core.callback.RequestSingleArgReplyCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onRequestSingleArgReply(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onRequestTwoArgsReply(final io.fd.vpp.jvpp.core.dto.RequestTwoArgsReply reply) {

        io.fd.vpp.jvpp.core.callback.RequestTwoArgsReplyCallback callback;
        final int replyId = reply.context;
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestTwoArgsReply event message: %s", reply));
        }
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.core.callback.RequestTwoArgsReplyCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onRequestTwoArgsReply(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onRequestWithSingleArrayReply(final io.fd.vpp.jvpp.core.dto.RequestWithSingleArrayReply reply) {

        io.fd.vpp.jvpp.core.callback.RequestWithSingleArrayReplyCallback callback;
        final int replyId = reply.context;
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithSingleArrayReply event message: %s", reply));
        }
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.core.callback.RequestWithSingleArrayReplyCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onRequestWithSingleArrayReply(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onRequestWithArraysReply(final io.fd.vpp.jvpp.core.dto.RequestWithArraysReply reply) {

        io.fd.vpp.jvpp.core.callback.RequestWithArraysReplyCallback callback;
        final int replyId = reply.context;
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithArraysReply event message: %s", reply));
        }
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.core.callback.RequestWithArraysReplyCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onRequestWithArraysReply(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onRequestWithVariableLengthArrayReply(final io.fd.vpp.jvpp.core.dto.RequestWithVariableLengthArrayReply reply) {

        io.fd.vpp.jvpp.core.callback.RequestWithVariableLengthArrayReplyCallback callback;
        final int replyId = reply.context;
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithVariableLengthArrayReply event message: %s", reply));
        }
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.core.callback.RequestWithVariableLengthArrayReplyCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onRequestWithVariableLengthArrayReply(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onFooDetails(final io.fd.vpp.jvpp.core.dto.FooDetails reply) {

        io.fd.vpp.jvpp.core.callback.FooDetailsCallback callback;
        final int replyId = reply.context;
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received FooDetails event message: %s", reply));
        }
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.core.callback.FooDetailsCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onFooDetails(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onRequestWithCustomTypeReply(final io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeReply reply) {

        io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeReplyCallback callback;
        final int replyId = reply.context;
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithCustomTypeReply event message: %s", reply));
        }
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeReplyCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onRequestWithCustomTypeReply(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onRequestWithCustomTypeArrayReply(final io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeArrayReply reply) {

        io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeArrayReplyCallback callback;
        final int replyId = reply.context;
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithCustomTypeArrayReply event message: %s", reply));
        }
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeArrayReplyCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onRequestWithCustomTypeArrayReply(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onRequestWithCustomTypeVlaReply(final io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeVlaReply reply) {

        io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeVlaReplyCallback callback;
        final int replyId = reply.context;
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received RequestWithCustomTypeVlaReply event message: %s", reply));
        }
        synchronized(requests) {
            callback = (io.fd.vpp.jvpp.core.callback.RequestWithCustomTypeVlaReplyCallback) requests.remove(replyId);
        }

        if(callback != null) {
            callback.onRequestWithCustomTypeVlaReply(reply);
        }
    }


    @Override
    @SuppressWarnings("unchecked")
    public void onFooEvent(io.fd.vpp.jvpp.core.dto.FooEvent notification) {
        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
            LOG.fine(String.format("Received FooEvent event message: %s", notification));
        }
        eventCallback.onFooEvent(notification);
    }

}
