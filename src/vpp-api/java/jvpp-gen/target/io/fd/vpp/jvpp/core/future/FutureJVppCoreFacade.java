
package io.fd.vpp.jvpp.core.future;

/**
 * <p>Implementation of FutureJVpp based on AbstractFutureJVppInvoker
 * <br>It was generated by jvpp_future_facade_gen.py based on ['test.api.json'].
 */
public class FutureJVppCoreFacade extends io.fd.vpp.jvpp.future.AbstractFutureJVppInvoker implements FutureJVppCore {

    private final io.fd.vpp.jvpp.core.notification.CoreEventRegistryImpl eventRegistry = new io.fd.vpp.jvpp.core.notification.CoreEventRegistryImpl();

    /**
     * <p>Create FutureJVppCoreFacade object for provided JVpp instance.
     * Constructor internally creates FutureJVppFacadeCallback class for processing callbacks
     * and then connects to provided JVpp instance
     *
     * @param jvpp provided io.fd.vpp.jvpp.JVpp instance
     *
     * @throws java.io.IOException in case instance cannot connect to JVPP
     */
    public FutureJVppCoreFacade(final io.fd.vpp.jvpp.JVppRegistry registry, final io.fd.vpp.jvpp.JVpp jvpp) throws java.io.IOException {
        super(jvpp, registry, new java.util.HashMap<>());
        java.util.Objects.requireNonNull(registry, "JVppRegistry should not be null");
        registry.register(jvpp, new FutureJVppCoreFacadeCallback(getRequests(), eventRegistry));
    }

    @Override
    public io.fd.vpp.jvpp.core.notification.CoreEventRegistry getEventRegistry() {
        return eventRegistry;
    }


    @Override
    public java.util.concurrent.CompletionStage<io.fd.vpp.jvpp.core.dto.RequestNoArgsReply> requestNoArgs(io.fd.vpp.jvpp.core.dto.RequestNoArgs request) {
        return send(request);
    }

    @Override
    public java.util.concurrent.CompletionStage<io.fd.vpp.jvpp.core.dto.RequestSingleArgReply> requestSingleArg(io.fd.vpp.jvpp.core.dto.RequestSingleArg request) {
        return send(request);
    }

    @Override
    public java.util.concurrent.CompletionStage<io.fd.vpp.jvpp.core.dto.RequestTwoArgsReply> requestTwoArgs(io.fd.vpp.jvpp.core.dto.RequestTwoArgs request) {
        return send(request);
    }

    @Override
    public java.util.concurrent.CompletionStage<io.fd.vpp.jvpp.core.dto.RequestWithSingleArrayReply> requestWithSingleArray(io.fd.vpp.jvpp.core.dto.RequestWithSingleArray request) {
        return send(request);
    }

    @Override
    public java.util.concurrent.CompletionStage<io.fd.vpp.jvpp.core.dto.RequestWithArraysReply> requestWithArrays(io.fd.vpp.jvpp.core.dto.RequestWithArrays request) {
        return send(request);
    }

    @Override
    public java.util.concurrent.CompletionStage<io.fd.vpp.jvpp.core.dto.RequestWithVariableLengthArrayReply> requestWithVariableLengthArray(io.fd.vpp.jvpp.core.dto.RequestWithVariableLengthArray request) {
        return send(request);
    }

    @Override
    public java.util.concurrent.CompletionStage<io.fd.vpp.jvpp.core.dto.FooDetailsReplyDump> fooDump(io.fd.vpp.jvpp.core.dto.FooDump request) {
        return send(request, new io.fd.vpp.jvpp.core.dto.FooDetailsReplyDump());
    }

    @Override
    public java.util.concurrent.CompletionStage<io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeReply> requestWithCustomType(io.fd.vpp.jvpp.core.dto.RequestWithCustomType request) {
        return send(request);
    }

    @Override
    public java.util.concurrent.CompletionStage<io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeArrayReply> requestWithCustomTypeArray(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeArray request) {
        return send(request);
    }

    @Override
    public java.util.concurrent.CompletionStage<io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeVlaReply> requestWithCustomTypeVla(io.fd.vpp.jvpp.core.dto.RequestWithCustomTypeVla request) {
        return send(request);
    }

}
