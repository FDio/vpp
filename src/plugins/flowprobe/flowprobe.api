/* Define a simple enable-disable binary API to control the feature */

/** \file
    This file defines the vpp control-plane API messages
    used to control the flowprobe plugin
*/

option version = "2.0.0";
import "vnet/ip/ip_types.api";
import "vnet/ethernet/ethernet_types.api";
import "plugins/flowprobe/flowprobe_types.api";
import "vpp/api/vpe_types.api";

/** \brief Enable / disable per-packet IPFIX recording on an interface
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - add address if non-zero, else delete
    @param is_ipv6 - if non-zero the address is ipv6, else ipv4
    @param sw_if_index - index of the interface
*/
autoreply manual_print define flowprobe_tx_interface_add_del
{
  /* Client identifier, set from api_main.my_client_index */
  u32 client_index;

  /* Arbitrary context, so client can match reply to request */
  u32 context;

  /* Enable / disable the feature */
  u8 is_add;
  u8 which;  /* 0 = ipv4, 1 = l2, 2 = ipv6 */

  /* Interface handle */
  u32 sw_if_index;
};

autoreply define flowprobe_params
{
  u32 client_index;
  u32 context;
  u8 record_l2;
  u8 record_l3;
  u8 record_l4;
  u32 active_timer [default=0xffffffff];  /* ~0 is use default, 0 is off */
  u32 passive_timer [default=0xffffffff]; /* ~0 is use default, 0 is off */
};

define flowprobe_dump
{
  u32 client_index;
  u32 context;
};

typedef flowprobe_detail
{
  u32 rx_sw_if_index;
  u32 tx_sw_if_index;
  vl_api_mac_address_t src_mac;
  vl_api_mac_address_t dst_mac;
  u16 ethertype;
  vl_api_address_t src_address;
  vl_api_address_t dst_address;
  u8 protocol;
  u16 src_port;
  u16 dst_port;
  vl_api_flowprobe_variant_t which;
};

define flowprobe_details
{
  vl_api_flowprobe_detail_t key;
};

define flowprobe_stats_dump
{
  u32 client_index;
  u32 context;
};

define flowprobe_stats_details
{
  vl_api_flowprobe_detail_t key;
  u64 packetcount;
  u64 octetcount;
  vl_api_timestamp_t flow_start;
  vl_api_timestamp_t flow_end;
  vl_api_timestamp_t last_updated;
  vl_api_timestamp_t last_exported;
  u32 passive_timer_handle;
  u16 tcp_flags;
};
