/* Define a simple enable-disable binary API to control the feature */

/** \file
    This file defines the vpp control-plane API messages
    used to control the flowprobe plugin
*/

option version = "1.0.0";

import "vnet/interface_types.api";

enum flowprobe_which_flags : u8
{
  FLOWPROBE_WHICH_FLAG_IP4 = 0x1,
  FLOWPROBE_WHICH_FLAG_L2  = 0x2,
  FLOWPROBE_WHICH_FLAG_IP6 = 0x4,
};

enum flowprobe_record_flags : u8
{
  FLOWPROBE_RECORD_FLAG_L2 = 0x1,
  FLOWPROBE_RECORD_FLAG_L3 = 0x2,
  FLOWPROBE_RECORD_FLAG_L4 = 0x4,
};

/** \brief Enable / disable per-packet IPFIX recording on an interface
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - add address if non-zero, else delete
    @param which - flags indicating forwarding path
    @param sw_if_index - index of the interface
*/
autoreply manual_print define flowprobe_tx_interface_add_del
{
  /* Client identifier, set from api_main.my_client_index */
  u32 client_index;

  /* Arbitrary context, so client can match reply to request */
  u32 context;

  /* Enable / disable the feature */
  bool is_add;
  vl_api_flowprobe_which_flags_t which;

  /* Interface handle */
  vl_api_interface_index_t sw_if_index;
  option vat_help = "<intfc> [disable]";
};

autoreply define flowprobe_params
{
  u32 client_index;
  u32 context;
  vl_api_flowprobe_record_flags_t record_flags;
  u32 active_timer;  /* ~0 is off, 0 is default */
  u32 passive_timer; /* ~0 is off, 0 is default */
  option vat_help = "record <[l2] [l3] [l4]> [active <timer> passive <timer>]";
};
