option version = "1.0.0";
import "vnet/ip/ip_types.api";

/** \brief Configure Load-Balancer global parameters (unlike the CLI, both ip4_src_address and ip6_src_address need to be specified.
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param ip4_src_address - IPv4 address to be used as source for IPv4 traffic(applicable in GRE4/GRE6/NAT4/NAT6 mode only).
    @param ip6_src_address - IPv6 address to be used as source for IPv6 traffic(applicable in GRE4/GRE6/NAT4/NAT6 mode only).
    @param sticky_buckets_per_core - Number of buckets *per worker thread* in the
           established flow table (must be power of 2).
    @param flow_timeout - Time in seconds after which, if no packet is received
           for a given flow, the flow is removed from the established flow table.
*/
autoreply define lb_conf
{
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t ip4_src_address;
  vl_api_ip6_address_t ip6_src_address;
  u32 sticky_buckets_per_core;
  u32 flow_timeout;
};

/** \brief Add a virtual address (or prefix)
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param ip_prefix - IP address (IPv4 in lower order 32 bits).
    @param prefix_length - IP prefix length (96 + 'IPv4 prefix length' for IPv4).
    @param protocol - tcp or udp.
    @param port - destination port. (0) means 'all-port VIP'
    @param encap - Encap is ip4 GRE(0) or ip6 GRE(1) or L3DSR(2) or NAT4(3) or NAT6(4).
    @param dscp - DSCP bit corresponding to VIP(applicable in L3DSR mode only).
    @param type - service type(applicable in NAT4/NAT6 mode only).
    @param target_port - Pod's port corresponding to specific service(applicable in NAT4/NAT6 mode only).
    @param node_port - Node's port(applicable in NAT4/NAT6 mode only).
    @param new_flows_table_length - Size of the new connections flow table used
           for this VIP (must be power of 2).
    @param is_del - The VIP should be removed.
*/
autoreply define lb_add_del_vip {
  u32 client_index;
  u32 context;
  u8 ip_prefix[16];
  u8 prefix_length;
  u8 protocol;
  u16 port;
  u8 encap;
  u8 dscp;
  u8 type;
  u16 target_port;
  u16 node_port;
  u32 new_flows_table_length;
  u8 is_del;
};

/** \brief Add an application server for a given VIP
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param vip_ip_prefix - VIP IP address (IPv4 in lower order 32 bits).
    @param vip_prefix_length - VIP IP prefix length (96 + 'IPv4 prefix length' for IPv4).
    @param protocol - tcp or udp.
    @param port - destination port.
    @param as_address - The application server address (IPv4 in lower order 32 bits).
    @param is_del - The AS should be removed.
    @param is_flush - The sessions related to this AS should be flushed.
*/
autoreply define lb_add_del_as {
  u32 client_index;
  u32 context;
  u8 vip_ip_prefix[16];
  u8 vip_prefix_length;
  u8 protocol;
  u16 port;
  u8 as_address[16];
  u8 is_del;
  u8 is_flush;
};

/** \brief Flush a given vip
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param ip_prefix - IP address (IPv4 in lower order 32 bits).
    @param prefix_length - IP prefix length (96 + 'IPv4 prefix length' for IPv4).
    @param protocol - tcp or udp.
    @param port - destination port.
*/
autoreply define lb_flush_vip {
  u32 client_index;
  u32 context;
  u8 ip_prefix[16];
  u8 prefix_length;
  u8 protocol;
  u16 port;
};
