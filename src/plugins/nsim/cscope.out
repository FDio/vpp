cscope 15 /scratch/daw/lf/vpp.24451/src/plugins/nsim               0000318876
	@node.c

17 
	~<vlib/vlib.h
>

18 
	~<v√t/v√t.h
>

19 
	~<v√t/pg/pg.h
>

20 
	~<vµö‰a/îr‹.h
>

21 
	~<nsim/nsim.h
>

25 
f64
 
	mexpúes
;

26 
u32
 
	mtx_sw_if_ödex
;

27 
	mis_dr›
;

28 
	mis_lo°
;

29 } 
	tnsim_åa˚_t
;

31 #i‚de‡
CLIB_MARCH_VARIANT


34 
u8
 *

35 
	$f‹m©_nsim_åa˚
 (
u8
 * 
s
, 
va_li°
 * 
¨gs
)

37 
	`CLIB_UNUSED
 (
vlib_maö_t
 * 
vm
Ë
	`va_¨g
 (*
¨gs
, vlib_main_t *);

38 
	`CLIB_UNUSED
 (
vlib_node_t
 * 
node
Ë
	`va_¨g
 (*
¨gs
, vlib_node_t *);

39 
nsim_åa˚_t
 *
t
 = 
	`va_¨g
 (*
¨gs
,Çsim_trace_t *);

41 i‡(
t
->
is_dr›
)

42 
s
 = 
	`f‹m©
 (s, "NSIM: dr›≥d, %s", 
t
->
is_lo°
 ?

45 
s
 = 
	`f‹m©
 (s, "NSIM:ÅxÅime %.6f sw_if_index %d",

46 
t
->
expúes
,Å->
tx_sw_if_ödex
);

48  
s
;

49 
	}
}

51 
vlib_node_ªgi°øti⁄_t
 
	gnsim_node
;

54 
	#f‹óch_nsim_îr‹
 \

55 
	`_
(
BUFFERED
, "Packets buffered") \

56 
	`_
(
DROPPED
, "Packets dropped dueÅoÜack of space") \

57 
	`_
(
LOSS
, "Nëw‹kÜos†simuœti⁄ dr›Öackës")

	)

61 
	#_
(
sym
,
°r
Ë
NSIM_ERROR_
##sym,

	)

62 
	mf‹óch_nsim_îr‹


63 #unde‡
_


64 
	mNSIM_N_ERROR
,

65 } 
	tnsim_îr‹_t
;

67 #i‚de‡
CLIB_MARCH_VARIANT


68 *
	gnsim_îr‹_°rögs
[] = {

69 
	#_
(
sym
,
°rög
Ë°rög,

	)

70 
f‹óch_nsim_îr‹


71 #unde‡
_


77 
	mNSIM_NEXT_DROP
,

78 
	mNSIM_N_NEXT
,

79 } 
	tnsim_√xt_t
;

81 
Æways_ölöe
 
uw‹d


82 
	$nsim_ölöe
 (
vlib_maö_t
 * 
vm
,

83 
vlib_node_ru¡ime_t
 * 
node
, 
vlib_‰ame_t
 * 
‰ame
, 
is_åa˚
,

84 
is_¸oss_c⁄√˘
)

86 
nsim_maö_t
 *
nsm
 = &
nsim_maö
;

87 
u32
 
n_À·_‰om
, *
‰om
;

88 
u32
 *
to_√xt
, 
n_À·_to_√xt
;

89 
u32
 
dr›s
[
VLIB_FRAME_SIZE
], *
dr›
;

90 
vlib_buf„r_t
 *
bufs
[
VLIB_FRAME_SIZE
], **
b
;

91 
u8
 
is_dr›
[4];

92 
u16
 
√xts
[
VLIB_FRAME_SIZE
], *
√xt
;

93 
u32
 
my_thªad_ödex
 = 
vm
->
thªad_ödex
;

94 
nsim_whìl_t
 *
wp
 = 
nsm
->
whìl_by_thªad
[
my_thªad_ödex
];

95 
f64
 
now
 = 
	`vlib_time_now
 (
vm
);

96 
f64
 
expúes
 = 
now
 + 
nsm
->
dñay
;

97 
f64
 
∫d
[4];

98 
u32
 
no_buf„r_îr‹
 = 
node
->
îr‹s
[
NSIM_ERROR_DROPPED
];

99 
u32
 
loss_îr‹
 = 
node
->
îr‹s
[
NSIM_ERROR_LOSS
];

100 
u32
 
buf„ªd
 = 0;

101 
nsim_whìl_íåy_t
 *
ï
 = 0;

103 
	`ASSERT
 (
wp
);

105 
‰om
 = 
	`vlib_‰ame_ve˘‹_¨gs
 (
‰ame
);

106 
n_À·_‰om
 = 
‰ame
->
n_ve˘‹s
;

108 
	`vlib_gë_buf„rs
 (
vm
, 
‰om
, 
bufs
, 
n_À·_‰om
);

109 
b
 = 
bufs
;

110 
√xt
 = 
√xts
;

111 
dr›
 = 
dr›s
;

113 
n_À·_‰om
 >= 8)

115 
	`vlib_¥e„tch_buf„r_hódî
 (
b
[4], 
STORE
);

116 
	`vlib_¥e„tch_buf„r_hódî
 (
b
[5], 
STORE
);

117 
	`vlib_¥e„tch_buf„r_hódî
 (
b
[6], 
STORE
);

118 
	`vlib_¥e„tch_buf„r_hódî
 (
b
[7], 
STORE
);

120 
	`mem£t
 (&
is_dr›
, 0,  (is_drop));

121 
√xt
[0] =Çext[1] =Çext[2] =Çext[3] = 
NSIM_NEXT_DROP
;

122 i‡(
	`PREDICT_FALSE
 (
wp
->
cursize
 + 4 >wp->
whìl_size
))

123 
¶ow_∑th
;

124 i‡(
	`PREDICT_FALSE
 (
nsm
->
dr›_‰a˘i⁄
 != 0.0))

126 
∫d
[0] = 
	`øndom_f64
 (&
nsm
->
£ed
);

127 
∫d
[1] = 
	`øndom_f64
 (&
nsm
->
£ed
);

128 
∫d
[2] = 
	`øndom_f64
 (&
nsm
->
£ed
);

129 
∫d
[3] = 
	`øndom_f64
 (&
nsm
->
£ed
);

131 i‡(
∫d
[0] <
nsm
->
dr›_‰a˘i⁄
)

133 
b
[0]->
îr‹
 = 
loss_îr‹
;

134 
is_dr›
[0] = 1;

136 i‡(
∫d
[1] <
nsm
->
dr›_‰a˘i⁄
)

138 
b
[1]->
îr‹
 = 
loss_îr‹
;

139 
is_dr›
[1] = 1;

141 i‡(
∫d
[2] <
nsm
->
dr›_‰a˘i⁄
)

143 
b
[2]->
îr‹
 = 
loss_îr‹
;

144 
is_dr›
[2] = 1;

146 i‡(
∫d
[3] <
nsm
->
dr›_‰a˘i⁄
)

148 
b
[3]->
îr‹
 = 
loss_îr‹
;

149 
is_dr›
[3] = 1;

153 i‡(
	`PREDICT_TRUE
 (
is_dr›
[0] == 0))

155 
ï
 = 
wp
->
íåõs
 + wp->
èû
;

156 
wp
->
èû
++;

157 i‡(
wp
->
èû
 =wp->
whìl_size
)

158 
wp
->
èû
 = 0;

159 
wp
->
cursize
++;

161 
ï
->
tx_time
 = 
expúes
;

162 
ï
->
rx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[0])->
sw_if_ödex
[
VLIB_RX
];

163 i‡(
is_¸oss_c⁄√˘
)

165 
ï
->
tx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[0])->
sw_if_ödex
[
VLIB_TX
] =

166 (
	`v√t_buf„r
 (
b
[0])->
sw_if_ödex
[
VLIB_RX
] ==

167 
nsm
->
sw_if_ödex0
Ë?Çsm->
sw_if_ödex1
 :Çsm->sw_if_index0;

168 
ï
->
ouçut_√xt_ödex
 =

169 (
ï
->
tx_sw_if_ödex
 ==

170 
nsm
->
sw_if_ödex0
) ?Çsm->

171 
ouçut_√xt_ödex0
 : 
nsm
->
ouçut_√xt_ödex1
;

175 
ï
->
tx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[0])->
sw_if_ödex
[
VLIB_TX
];

176 
ï
->
ouçut_√xt_ödex
 =

177 
nsm
->
ouçut_√xt_ödex_by_sw_if_ödex
[
ï
->
tx_sw_if_ödex
];

179 
ï
->
buf„r_ödex
 = 
‰om
[0];

180 
buf„ªd
++;

183 i‡(
is_åa˚
)

185 i‡(
b
[1]->
Êags
 & 
VLIB_BUFFER_IS_TRACED
)

187 
nsim_åa˚_t
 *
t
 = 
	`vlib_add_åa˚
 (
vm
, 
node
, 
b
[1],  (*t));

188 
t
->
expúes
 =Éxpires;

189 
t
->
is_dr›
 = is_drop[1];

190 
t
->
is_lo°
 = 
b
[1]->
îr‹
 =
loss_îr‹
;

191 
t
->
tx_sw_if_ödex
 = (
is_dr›
[1] =0Ë? 
ï
->tx_sw_if_index : 0;

195 i‡(
	`PREDICT_TRUE
 (
is_dr›
[1] == 0))

197 
ï
 = 
wp
->
íåõs
 + wp->
èû
;

198 
wp
->
èû
++;

199 i‡(
wp
->
èû
 =wp->
whìl_size
)

200 
wp
->
èû
 = 0;

201 
wp
->
cursize
++;

203 
ï
->
tx_time
 = 
expúes
;

204 
ï
->
rx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[1])->
sw_if_ödex
[
VLIB_RX
];

205 i‡(
is_¸oss_c⁄√˘
)

207 
ï
->
tx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[1])->
sw_if_ödex
[
VLIB_TX
] =

208 (
	`v√t_buf„r
 (
b
[1])->
sw_if_ödex
[
VLIB_RX
] ==

209 
nsm
->
sw_if_ödex0
Ë?Çsm->
sw_if_ödex1
 :Çsm->sw_if_index0;

210 
ï
->
ouçut_√xt_ödex
 =

211 (
ï
->
tx_sw_if_ödex
 ==

212 
nsm
->
sw_if_ödex0
) ?Çsm->

213 
ouçut_√xt_ödex0
 : 
nsm
->
ouçut_√xt_ödex1
;

217 
ï
->
tx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[1])->
sw_if_ödex
[
VLIB_TX
];

218 
ï
->
ouçut_√xt_ödex
 =

219 
nsm
->
ouçut_√xt_ödex_by_sw_if_ödex
[
ï
->
tx_sw_if_ödex
];

221 
ï
->
buf„r_ödex
 = 
‰om
[1];

222 
buf„ªd
++;

225 i‡(
is_åa˚
)

227 i‡(
b
[2]->
Êags
 & 
VLIB_BUFFER_IS_TRACED
)

229 
nsim_åa˚_t
 *
t
 = 
	`vlib_add_åa˚
 (
vm
, 
node
, 
b
[2],  (*t));

230 
t
->
expúes
 =Éxpires;

231 
t
->
is_dr›
 = is_drop[2];

232 
t
->
is_lo°
 = 
b
[2]->
îr‹
 =
loss_îr‹
;

233 
t
->
tx_sw_if_ödex
 = (
is_dr›
[2] =0Ë? 
ï
->tx_sw_if_index : 0;

236 i‡(
	`PREDICT_TRUE
 (
is_dr›
[2] == 0))

238 
ï
 = 
wp
->
íåõs
 + wp->
èû
;

239 
wp
->
èû
++;

240 i‡(
wp
->
èû
 =wp->
whìl_size
)

241 
wp
->
èû
 = 0;

242 
wp
->
cursize
++;

244 
ï
->
tx_time
 = 
expúes
;

245 
ï
->
rx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[2])->
sw_if_ödex
[
VLIB_RX
];

246 i‡(
is_¸oss_c⁄√˘
)

248 
ï
->
tx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[2])->
sw_if_ödex
[
VLIB_TX
] =

249 (
	`v√t_buf„r
 (
b
[2])->
sw_if_ödex
[
VLIB_RX
] ==

250 
nsm
->
sw_if_ödex0
Ë?Çsm->
sw_if_ödex1
 :Çsm->sw_if_index0;

251 
ï
->
ouçut_√xt_ödex
 =

252 (
ï
->
tx_sw_if_ödex
 ==

253 
nsm
->
sw_if_ödex0
) ?Çsm->

254 
ouçut_√xt_ödex0
 : 
nsm
->
ouçut_√xt_ödex1
;

258 
ï
->
tx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[2])->
sw_if_ödex
[
VLIB_TX
];

259 
ï
->
ouçut_√xt_ödex
 =

260 
nsm
->
ouçut_√xt_ödex_by_sw_if_ödex
[
ï
->
tx_sw_if_ödex
];

262 
ï
->
buf„r_ödex
 = 
‰om
[2];

263 
buf„ªd
++;

266 i‡(
is_åa˚
)

268 i‡(
b
[2]->
Êags
 & 
VLIB_BUFFER_IS_TRACED
)

270 
nsim_åa˚_t
 *
t
 = 
	`vlib_add_åa˚
 (
vm
, 
node
, 
b
[2],  (*t));

271 
t
->
expúes
 =Éxpires;

272 
t
->
is_dr›
 = is_drop[2];

273 
t
->
is_lo°
 = 
b
[2]->
îr‹
 =
loss_îr‹
;

274 
t
->
tx_sw_if_ödex
 = (
is_dr›
[2] =0Ë? 
ï
->tx_sw_if_index : 0;

277 i‡(
	`PREDICT_TRUE
 (
is_dr›
[3] == 0))

279 
ï
 = 
wp
->
íåõs
 + wp->
èû
;

280 
wp
->
èû
++;

281 i‡(
wp
->
èû
 =wp->
whìl_size
)

282 
wp
->
èû
 = 0;

283 
wp
->
cursize
++;

285 
ï
->
tx_time
 = 
expúes
;

286 
ï
->
rx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[3])->
sw_if_ödex
[
VLIB_RX
];

287 i‡(
is_¸oss_c⁄√˘
)

289 
ï
->
tx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[3])->
sw_if_ödex
[
VLIB_TX
] =

290 (
	`v√t_buf„r
 (
b
[3])->
sw_if_ödex
[
VLIB_RX
] ==

291 
nsm
->
sw_if_ödex0
Ë?Çsm->
sw_if_ödex1
 :Çsm->sw_if_index0;

292 
ï
->
ouçut_√xt_ödex
 =

293 (
ï
->
tx_sw_if_ödex
 ==

294 
nsm
->
sw_if_ödex0
) ?Çsm->

295 
ouçut_√xt_ödex0
 : 
nsm
->
ouçut_√xt_ödex1
;

299 
ï
->
tx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[3])->
sw_if_ödex
[
VLIB_TX
];

300 
ï
->
ouçut_√xt_ödex
 =

301 
nsm
->
ouçut_√xt_ödex_by_sw_if_ödex
[
ï
->
tx_sw_if_ödex
];

303 
ï
->
buf„r_ödex
 = 
‰om
[3];

304 
buf„ªd
++;

307 i‡(
is_åa˚
)

309 i‡(
b
[3]->
Êags
 & 
VLIB_BUFFER_IS_TRACED
)

311 
nsim_åa˚_t
 *
t
 = 
	`vlib_add_åa˚
 (
vm
, 
node
, 
b
[3],  (*t));

312 
t
->
expúes
 =Éxpires;

313 
t
->
is_dr›
 = is_drop[3];

314 
t
->
is_lo°
 = 
b
[3]->
îr‹
 =
loss_îr‹
;

315 
t
->
tx_sw_if_ödex
 = (
is_dr›
[3] =0Ë? 
ï
->tx_sw_if_index : 0;

319 i‡(
	`PREDICT_FALSE
 (
is_dr›
[0]))

320 *
dr›
++ = 
‰om
[0];

321 i‡(
	`PREDICT_FALSE
 (
is_dr›
[1]))

322 *
dr›
++ = 
‰om
[1];

323 i‡(
	`PREDICT_FALSE
 (
is_dr›
[2]))

324 *
dr›
++ = 
‰om
[2];

325 i‡(
	`PREDICT_FALSE
 (
is_dr›
[3]))

326 *
dr›
++ = 
‰om
[3];

328 
b
 += 4;

329 
√xt
 += 4;

330 
‰om
 += 4;

331 
n_À·_‰om
 -= 4;

334 
¶ow_∑th
:

336 
n_À·_‰om
 > 0)

338 
√xt
[0] = 
NSIM_NEXT_DROP
;

339 
is_dr›
[0] = 0;

340 i‡(
	`PREDICT_TRUE
 (
wp
->
cursize
 < wp->
whìl_size
))

342 i‡(
	`PREDICT_FALSE
 (
nsm
->
dr›_‰a˘i⁄
 != 0.0))

345 
∫d
[0] = 
	`øndom_f64
 (&
nsm
->
£ed
);

347 i‡(
∫d
[0] <
nsm
->
dr›_‰a˘i⁄
)

349 
b
[0]->
îr‹
 = 
loss_îr‹
;

350 
is_dr›
[0] = 1;

351 
do_åa˚
;

355 
ï
 = 
wp
->
íåõs
 + wp->
èû
;

356 
wp
->
èû
++;

357 i‡(
wp
->
èû
 =wp->
whìl_size
)

358 
wp
->
èû
 = 0;

359 
wp
->
cursize
++;

361 
ï
->
tx_time
 = 
expúes
;

362 
ï
->
rx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[0])->
sw_if_ödex
[
VLIB_RX
];

363 i‡(
is_¸oss_c⁄√˘
)

365 
ï
->
tx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[0])->
sw_if_ödex
[
VLIB_TX
] =

366 (
	`v√t_buf„r
 (
b
[0])->
sw_if_ödex
[
VLIB_RX
] ==

367 
nsm
->
sw_if_ödex0
Ë?Çsm->
sw_if_ödex1
 :Çsm->sw_if_index0;

368 
ï
->
ouçut_√xt_ödex
 =

369 (
ï
->
tx_sw_if_ödex
 ==

370 
nsm
->
sw_if_ödex0
) ?Çsm->

371 
ouçut_√xt_ödex0
 : 
nsm
->
ouçut_√xt_ödex1
;

375 
ï
->
tx_sw_if_ödex
 = 
	`v√t_buf„r
 (
b
[0])->
sw_if_ödex
[
VLIB_TX
];

376 
ï
->
ouçut_√xt_ödex
 =

377 
nsm
->
ouçut_√xt_ödex_by_sw_if_ödex
[
ï
->
tx_sw_if_ödex
];

379 
ï
->
buf„r_ödex
 = 
‰om
[0];

380 
buf„ªd
++;

384 
b
[0]->
îr‹
 = 
no_buf„r_îr‹
;

385 
is_dr›
[0] = 1;

388 
do_åa˚
:

389 i‡(
is_åa˚
)

391 i‡(
b
[0]->
Êags
 & 
VLIB_BUFFER_IS_TRACED
)

393 
nsim_åa˚_t
 *
t
 = 
	`vlib_add_åa˚
 (
vm
, 
node
, 
b
[0],  (*t));

394 
t
->
expúes
 =Éxpires;

395 
t
->
is_dr›
 = is_drop[0];

396 
t
->
is_lo°
 = 
b
[0]->
îr‹
 =
loss_îr‹
;

397 
t
->
tx_sw_if_ödex
 = (
is_dr›
[0] =0Ë? 
ï
->tx_sw_if_index : 0;

401 
b
 += 1;

402 
√xt
 += 1;

403 i‡(
	`PREDICT_FALSE
 (
is_dr›
[0]))

405 
dr›
[0] = 
‰om
[0];

406 
dr›
++;

408 
‰om
++;

409 
n_À·_‰om
 -= 1;

411 i‡(
	`PREDICT_FALSE
 (
dr›
 > 
dr›s
))

413 
u32
 
n_À·_to_dr›
 = 
dr›
 - 
dr›s
;

414 
dr›
 = 
dr›s
;

416 
n_À·_to_dr›
 > 0)

418 
u32
 
this_c›y_size
;

419 
	`vlib_gë_√xt_‰ame
 (
vm
, 
node
, 
NSIM_NEXT_DROP
, 
to_√xt
,

420 
n_À·_to_√xt
);

421 
this_c›y_size
 = 
	`˛ib_mö
 (
n_À·_to_dr›
, 
n_À·_to_√xt
);

422 
	`˛ib_mem˝y_Á°
 (
to_√xt
, 
dr›
, 
this_c›y_size
 *  (
u32
));

423 
n_À·_to_√xt
 -
this_c›y_size
;

424 
	`vlib_put_√xt_‰ame
 (
vm
, 
node
, 
NSIM_NEXT_DROP
, 
n_À·_to_√xt
);

425 
dr›
 +
this_c›y_size
;

426 
n_À·_to_dr›
 -
this_c›y_size
;

429 
	`vlib_node_ö¸emít_cou¡î
 (
vm
, 
node
->
node_ödex
,

430 
NSIM_ERROR_BUFFERED
, 
buf„ªd
);

431  
‰ame
->
n_ve˘‹s
;

432 
	}
}

434 
	$VLIB_NODE_FN
 (
nsim_node
Ë(
vlib_maö_t
 * 
vm
, 
vlib_node_ru¡ime_t
 * 
node
,

435 
vlib_‰ame_t
 * 
‰ame
)

437 i‡(
	`PREDICT_FALSE
 (
node
->
Êags
 & 
VLIB_NODE_FLAG_TRACE
))

438  
	`nsim_ölöe
 (
vm
, 
node
, 
‰ame
,

441  
	`nsim_ölöe
 (
vm
, 
node
, 
‰ame
,

443 
	}
}

446 #i‚de‡
CLIB_MARCH_VARIANT


447 
VLIB_REGISTER_NODE
 (
nsim_node
) =

449 .
«me
 = "nsim",

450 .
	gve˘‹_size
 =  (
u32
),

451 .
	gf‹m©_åa˚
 = 
f‹m©_nsim_åa˚
,

452 .
	gty≥
 = 
VLIB_NODE_TYPE_INTERNAL
,

454 .
	gn_îr‹s
 = 
ARRAY_LEN
(
nsim_îr‹_°rögs
),

455 .
	gîr‹_°rögs
 = 
nsim_îr‹_°rögs
,

457 .
	gn_√xt_nodes
 = 
NSIM_N_NEXT
,

460 .
	g√xt_nodes
 = {

461 [
NSIM_NEXT_DROP
] = "error-drop",

467 
	$VLIB_NODE_FN
 (
nsim_„©uª_node
Ë(
vlib_maö_t
 * 
vm
,

468 
vlib_node_ru¡ime_t
 * 
node
,

469 
vlib_‰ame_t
 * 
‰ame
)

471 i‡(
	`PREDICT_FALSE
 (
node
->
Êags
 & 
VLIB_NODE_FLAG_TRACE
))

472  
	`nsim_ölöe
 (
vm
, 
node
, 
‰ame
,

475  
	`nsim_ölöe
 (
vm
, 
node
, 
‰ame
,

477 
	}
}

480 #i‚de‡
CLIB_MARCH_VARIANT


481 
VLIB_REGISTER_NODE
 (
nsim_„©uª_node
) =

483 .
«me
 = "nsim-output-feature",

484 .
	gve˘‹_size
 =  (
u32
),

485 .
	gf‹m©_åa˚
 = 
f‹m©_nsim_åa˚
,

486 .
	gty≥
 = 
VLIB_NODE_TYPE_INTERNAL
,

488 .
	gn_îr‹s
 = 
ARRAY_LEN
(
nsim_îr‹_°rögs
),

489 .
	gîr‹_°rögs
 = 
nsim_îr‹_°rögs
,

491 .
	gn_√xt_nodes
 = 
NSIM_N_NEXT
,

494 .
	g√xt_nodes
 = {

495 [
NSIM_NEXT_DROP
] = "error-drop",

	@nsim.c

24 
	~<v√t/v√t.h
>

25 
	~<v√t/∂ugö/∂ugö.h
>

26 
	~<nsim/nsim.h
>

28 
	~<vlib≠i/≠i.h
>

29 
	~<vlibmem‹y/≠i.h
>

30 
	~<vµ/≠p/vîsi⁄.h
>

33 
	~<nsim/nsim.≠i_íum.h
>

34 
	~<nsim/nsim.≠i_ty≥s.h
>

36 
	#REPLY_MSG_ID_BASE
 
nsm
->
msg_id_ba£


	)

37 
	~<vlib≠i/≠i_hñ≥r_ma¸os.h
>

39 
nsim_maö_t
 
	gnsim_maö
;

44 
	$nsim_¸oss_c⁄√˘_íabÀ_dißbÀ
 (
nsim_maö_t
 * 
nsm
, 
u32
 
sw_if_ödex0
,

45 
u32
 
sw_if_ödex1
, 
íabÀ_dißbÀ
)

47 
v√t_sw_öãrÁ˚_t
 *
sw
;

48 
v√t_hw_öãrÁ˚_t
 *
hw
;

49 
rv
 = 0;

51 i‡(
nsm
->
is_c⁄figuªd
 == 0)

52  
VNET_API_ERROR_CANNOT_ENABLE_DISABLE_FEATURE
;

55 i‡(
	`poﬁ_is_‰ì_ödex
 (
nsm
->
v√t_maö
->
öãrÁ˚_maö
.
sw_öãrÁ˚s
,

56 
sw_if_ödex0
))

57  
VNET_API_ERROR_INVALID_SW_IF_INDEX
;

59 i‡(
	`poﬁ_is_‰ì_ödex
 (
nsm
->
v√t_maö
->
öãrÁ˚_maö
.
sw_öãrÁ˚s
,

60 
sw_if_ödex1
))

61  
VNET_API_ERROR_INVALID_SW_IF_INDEX
;

64 
sw
 = 
	`v√t_gë_sw_öãrÁ˚
 (
nsm
->
v√t_maö
, 
sw_if_ödex0
);

65 i‡(
sw
->
ty≥
 !
VNET_SW_INTERFACE_TYPE_HARDWARE
)

66  
VNET_API_ERROR_INVALID_SW_IF_INDEX
;

68 
sw
 = 
	`v√t_gë_sw_öãrÁ˚
 (
nsm
->
v√t_maö
, 
sw_if_ödex1
);

69 i‡(
sw
->
ty≥
 !
VNET_SW_INTERFACE_TYPE_HARDWARE
)

70  
VNET_API_ERROR_INVALID_SW_IF_INDEX
;

73 
hw
 = 
	`v√t_gë_hw_öãrÁ˚
 (
nsm
->
v√t_maö
, 
sw_if_ödex0
);

74 
nsm
->
ouçut_√xt_ödex0
 =

75 
	`vlib_node_add_√xt
 (
nsm
->
vlib_maö
,

76 
nsim_öput_node
.
ödex
, 
hw
->
ouçut_node_ödex
);

78 
hw
 = 
	`v√t_gë_hw_öãrÁ˚
 (
nsm
->
v√t_maö
, 
sw_if_ödex1
);

79 
nsm
->
ouçut_√xt_ödex1
 =

80 
	`vlib_node_add_√xt
 (
nsm
->
vlib_maö
,

81 
nsim_öput_node
.
ödex
, 
hw
->
ouçut_node_ödex
);

83 
nsm
->
sw_if_ödex0
 = sw_if_index0;

84 
nsm
->
sw_if_ödex1
 = sw_if_index1;

86 
	`v√t_„©uª_íabÀ_dißbÀ
 ("device-input", "nsim",

87 
sw_if_ödex0
, 
íabÀ_dißbÀ
, 0, 0);

88 
	`v√t_„©uª_íabÀ_dißbÀ
 ("device-input", "nsim",

89 
sw_if_ödex1
, 
íabÀ_dißbÀ
, 0, 0);

91  
rv
;

92 
	}
}

95 
	$nsim_ouçut_„©uª_íabÀ_dißbÀ
 (
nsim_maö_t
 * 
nsm
, 
u32
 
sw_if_ödex
,

96 
íabÀ_dißbÀ
)

98 
v√t_sw_öãrÁ˚_t
 *
sw
;

99 
v√t_hw_öãrÁ˚_t
 *
hw
;

100 
rv
 = 0;

102 i‡(
nsm
->
is_c⁄figuªd
 == 0)

103  
VNET_API_ERROR_CANNOT_ENABLE_DISABLE_FEATURE
;

106 i‡(
	`poﬁ_is_‰ì_ödex
 (
nsm
->
v√t_maö
->
öãrÁ˚_maö
.
sw_öãrÁ˚s
,

107 
sw_if_ödex
))

108  
VNET_API_ERROR_INVALID_SW_IF_INDEX
;

111 
sw
 = 
	`v√t_gë_sw_öãrÁ˚
 (
nsm
->
v√t_maö
, 
sw_if_ödex
);

112 i‡(
sw
->
ty≥
 !
VNET_SW_INTERFACE_TYPE_HARDWARE
)

113  
VNET_API_ERROR_INVALID_SW_IF_INDEX
;

116 
hw
 = 
	`v√t_gë_hw_öãrÁ˚
 (
nsm
->
v√t_maö
, 
sw_if_ödex
);

117 
	`vec_vÆid©e_öô_em±y
 (
nsm
->
ouçut_√xt_ödex_by_sw_if_ödex
, 
sw_if_ödex
,

120 
nsm
->
ouçut_√xt_ödex_by_sw_if_ödex
[
sw_if_ödex
] =

121 
	`vlib_node_add_√xt
 (
nsm
->
vlib_maö
, 
nsim_öput_node
.
ödex
,

122 
hw
->
tx_node_ödex
);

124 
	`v√t_„©uª_íabÀ_dißbÀ
 ("interface-output", "nsim-output-feature",

125 
sw_if_ödex
, 
íabÀ_dißbÀ
, 0, 0);

126  
rv
;

127 
	}
}

130 
	$nsim_c⁄figuª
 (
nsim_maö_t
 * 
nsm
, 
f64
 
b™dwidth
, f64 
dñay
, f64 
∑ckë_size
,

131 
f64
 
dr›_‰a˘i⁄
)

133 
u64
 
tŸÆ_buf„r_size_ö_byãs
, 
≥r_w‹kî_buf„r_size
;

134 
u64
 
whìl_¶Ÿs_≥r_w‹kî
;

135 
i
;

136 
num_w‹kîs
 = 
	`vlib_num_w‹kîs
 ();

137 
u32
 
∑gesize
 = 
	`gë∑gesize
 ();

138 
vlib_maö_t
 *
vm
 = 
nsm
->
vlib_maö
;

140 i‡(
b™dwidth
 == 0.0)

141  
VNET_API_ERROR_INVALID_VALUE
;

143 i‡(
dñay
 == 0.0)

144  
VNET_API_ERROR_INVALID_VALUE_2
;

146 i‡(
∑ckë_size
 < 64.0 ||Öacket_size > 9000.0)

147  
VNET_API_ERROR_INVALID_VALUE_3
;

150 i‡(
nsm
->
is_c⁄figuªd
)

152 
i
 = 0; i < 
	`vec_Àn
 (
nsm
->
whìl_by_thªad
); i++)

154 
nsim_whìl_t
 *
wp
 = 
nsm
->
whìl_by_thªad
[
i
];

155 
	`munm≠
 (
wp
, 
nsm
->
mm≠_size
);

156 
nsm
->
whìl_by_thªad
[
i
] = 0;

160 
nsm
->
dñay
 = delay;

161 
nsm
->
dr›_‰a˘i⁄
 = drop_fraction;

164 
tŸÆ_buf„r_size_ö_byãs
 = ((
dñay
 * 
b™dwidth
) / 8.0) + 0.5;

170 i‡(
num_w‹kîs
)

171 
≥r_w‹kî_buf„r_size
 = 
tŸÆ_buf„r_size_ö_byãs
 / 
num_w‹kîs
;

173 
≥r_w‹kî_buf„r_size
 = 
tŸÆ_buf„r_size_ö_byãs
;

175 
whìl_¶Ÿs_≥r_w‹kî
 = 
≥r_w‹kî_buf„r_size
 / 
∑ckë_size
;

176 
whìl_¶Ÿs_≥r_w‹kî
++;

179 
nsm
->
b™dwidth
 = bandwidth;

180 
nsm
->
∑ckë_size
 =Öacket_size;

182 
	`vec_vÆid©e
 (
nsm
->
whìl_by_thªad
, 
num_w‹kîs
);

185 
i
 = (!
nsm
->
pﬁl_maö_thªad
 && 
num_w‹kîs
) ? 1 : 0;

186 
	`˛ib_w¨nög
 ("DAWÇsm->pﬁl_maö_thªad = %d", 
nsm
->
pﬁl_maö_thªad
);

187 ; 
i
 < 
num_w‹kîs
 + 1; i++)

189 
nsim_whìl_t
 *
wp
;

191 
nsm
->
mm≠_size
 =  (
nsim_whìl_t
)

192 + 
whìl_¶Ÿs_≥r_w‹kî
 *  (
nsim_whìl_íåy_t
);

194 
nsm
->
mm≠_size
 +
∑gesize
 - 1;

195 
nsm
->
mm≠_size
 &~(
∑gesize
 - 1);

197 
wp
 = 
	`˛ib_mem_vm_Æloc
 (
nsm
->
mm≠_size
);

198 
	`ASSERT
 (
wp
 != 0);

199 
wp
->
whìl_size
 = 
whìl_¶Ÿs_≥r_w‹kî
;

200 
wp
->
cursize
 = 0;

201 
wp
->
hód
 = 0;

202 
wp
->
èû
 = 0;

203 
wp
->
íåõs
 = (*) (wp + 1);

204 
nsm
->
whìl_by_thªad
[
i
] = 
wp
;

207 
	`vlib_w‹kî_thªad_b¨rõr_sync
 (
vm
);

210 
i
 = (!
nsm
->
pﬁl_maö_thªad
 && 
num_w‹kîs
) ? 1 : 0;

211 ; 
i
 < 
num_w‹kîs
 + 1; i++)

213 
vlib_maö_t
 *
this_vm
 = 
vlib_maös
[
i
];

215 
	`vlib_node_£t_°©e
 (
this_vm
, 
nsim_öput_node
.
ödex
,

216 
VLIB_NODE_STATE_POLLING
);

219 
	`vlib_w‹kî_thªad_b¨rõr_ªÀa£
 (
vm
);

221 
nsm
->
is_c⁄figuªd
 = 1;

223 
	}
}

228 
˛ib_îr‹_t
 *

229 
	$nsim_¸oss_c⁄√˘_íabÀ_dißbÀ_comm™d_‚
 (
vlib_maö_t
 * 
vm
,

230 
unf‹m©_öput_t
 * 
öput
,

231 
vlib_˛i_comm™d_t
 * 
cmd
)

233 
nsim_maö_t
 *
nsm
 = &
nsim_maö
;

234 
unf‹m©_öput_t
 
_löe_öput
, *
löe_öput
 = &_line_input;

235 
u32
 
sw_if_ödex0
 = ~0;

236 
u32
 
sw_if_ödex1
 = ~0;

237 
íabÀ_dißbÀ
 = 1;

238 
u32
 
tmp
;

239 
rv
;

242 i‡(!
	`unf‹m©_u£r
 (
öput
, 
unf‹m©_löe_öput
, 
löe_öput
))

245 
	`unf‹m©_check_öput
 (
löe_öput
Ë!
UNFORMAT_END_OF_INPUT
)

247 i‡(
	`unf‹m©
 (
löe_öput
, "disable"))

248 
íabÀ_dißbÀ
 = 0;

249 i‡(
	`unf‹m©
 (
löe_öput
, "%U", 
unf‹m©_v√t_sw_öãrÁ˚
,

250 
nsm
->
v√t_maö
, &
tmp
))

252 i‡(
sw_if_ödex0
 == ~0)

253 
sw_if_ödex0
 = 
tmp
;

255 
sw_if_ödex1
 = 
tmp
;

261 
	`unf‹m©_‰ì
 (
löe_öput
);

263 i‡(
sw_if_ödex0
 =~0 || 
sw_if_ödex1
 == ~0)

264  
	`˛ib_îr‹_ªtu∫
 (0, "Please specifyÅwo interfaces...");

266 
rv
 = 
	`nsim_¸oss_c⁄√˘_íabÀ_dißbÀ
 (
nsm
, 
sw_if_ödex0
,

267 
sw_if_ödex1
, 
íabÀ_dißbÀ
);

269 
rv
)

274 
VNET_API_ERROR_CANNOT_ENABLE_DISABLE_FEATURE
:

275  
	`˛ib_îr‹_ªtu∫
 (0, "Not configured,Ölease 'setÇsim' first");

277 
VNET_API_ERROR_INVALID_SW_IF_INDEX
:

278  
˛ib_îr‹_ªtu∫


282 
VNET_API_ERROR_UNIMPLEMENTED
:

283  
	`˛ib_îr‹_ªtu∫
 (0,

288  
	`˛ib_îr‹_ªtu∫
 (0, "nsim_íabÀ_dißbÀÑëu∫ed %d", 
rv
);

291 
	}
}

293 
˛ib_îr‹_t
 *

294 
	$nsim_c⁄fig
 (
vlib_maö_t
 * 
vm
, 
unf‹m©_öput_t
 * 
öput
)

296 
nsim_maö_t
 *
nsm
 = &
nsim_maö
;

298 
	`unf‹m©_check_öput
 (
öput
Ë!
UNFORMAT_END_OF_INPUT
)

300 i‡(
	`unf‹m©
 (
öput
, "poll-main-thread"))

302 
nsm
->
pﬁl_maö_thªad
 = 1;

306  
	`˛ib_îr‹_ªtu∫
 (0, "unknown input '%U'",

307 
f‹m©_unf‹m©_îr‹
, 
öput
);

311 
	}
}

313 
VLIB_CONFIG_FUNCTION
 (
nsim_c⁄fig
, "nsim");

332 
VLIB_CLI_COMMAND
 (
nsim_íabÀ_dißbÀ_comm™d
, ) =

334 .
∑th
 = "nsim cross-connectÉnable-disable",

335 .
	gsh‹t_hñp
 =

338 .
	gfun˘i⁄
 = 
nsim_¸oss_c⁄√˘_íabÀ_dißbÀ_comm™d_‚
,

343 
	gvl_≠i_nsim_¸oss_c⁄√˘_íabÀ_dißbÀ_t_h™dÀr


344 (
vl_≠i_nsim_¸oss_c⁄√˘_íabÀ_dißbÀ_t
 * 
	gmp
)

346 
vl_≠i_nsim_¸oss_c⁄√˘_íabÀ_dißbÀ_ª∂y_t
 *
	grmp
;

347 
nsim_maö_t
 *
	gnsm
 = &
nsim_maö
;

348 
	grv
;

349 
u32
 
	gsw_if_ödex0
, 
	gsw_if_ödex1
;

351 
	gsw_if_ödex0
 = 
˛ib_√t_to_ho°_u32
 (
mp
->
sw_if_ödex0
);

352 
	gsw_if_ödex1
 = 
˛ib_√t_to_ho°_u32
 (
mp
->
sw_if_ödex1
);

354 i‡(!
v√t_sw_if_ödex_is_≠i_vÆid
 (
sw_if_ödex0
))

356 
	grv
 = 
VNET_API_ERROR_INVALID_SW_IF_INDEX
;

357 
	gbad_sw_if_ödex
;

359 i‡(!
v√t_sw_if_ödex_is_≠i_vÆid
 (
sw_if_ödex1
))

361 
	grv
 = 
VNET_API_ERROR_INVALID_SW_IF_INDEX_2
;

362 
	gbad_sw_if_ödex
;

365 
	grv
 = 
nsim_¸oss_c⁄√˘_íabÀ_dißbÀ
 (
nsm
, 
sw_if_ödex0
, 
sw_if_ödex1
,

366 (Ë(
mp
->
íabÀ_dißbÀ
));

368 
	gBAD_SW_IF_INDEX_LABEL
;

369 
REPLY_MACRO
 (
VL_API_NSIM_CROSS_CONNECT_ENABLE_DISABLE_REPLY
);

373 
	gvl_≠i_nsim_ouçut_„©uª_íabÀ_dißbÀ_t_h™dÀr


374 (
vl_≠i_nsim_ouçut_„©uª_íabÀ_dißbÀ_t
 * 
	gmp
)

376 
vl_≠i_nsim_ouçut_„©uª_íabÀ_dißbÀ_ª∂y_t
 *
	grmp
;

377 
nsim_maö_t
 *
	gnsm
 = &
nsim_maö
;

378 
	grv
;

379 
VALIDATE_SW_IF_INDEX
 (
mp
);

381 
	grv
 = 
nsim_ouçut_„©uª_íabÀ_dißbÀ
 (
nsm
, 
¡ohl
 (
mp
->
sw_if_ödex
),

382 (Ë(
mp
->
íabÀ_dißbÀ
));

384 
	gBAD_SW_IF_INDEX_LABEL
;

385 
REPLY_MACRO
 (
VL_API_NSIM_OUTPUT_FEATURE_ENABLE_DISABLE_REPLY
);

390 
	$vl_≠i_nsim_c⁄figuª_t_h™dÀr
 (
vl_≠i_nsim_c⁄figuª_t
 * 
mp
)

392 
vl_≠i_nsim_c⁄figuª_ª∂y_t
 *
rmp
;

393 
nsim_maö_t
 *
nsm
 = &
nsim_maö
;

394 
f64
 
dñay
, 
b™dwidth
, 
∑ckë_size
, 
dr›_‰a˘i⁄
;

395 
u32
 
∑ckës_≥r_dr›
;

396 
rv
;

398 
dñay
 = ((
f64
Ë(
	`¡ohl
 (
mp
->
dñay_ö_u£c
))) * 1e-6;

399 
b™dwidth
 = (
f64
Ë(
	`˛ib_√t_to_ho°_u64
 (
mp
->
b™dwidth_ö_bôs_≥r_£c⁄d
));

400 
∑ckë_size
 = (
f64
Ë(
	`¡ohl
 (
mp
->
avîage_∑ckë_size
));

402 
∑ckës_≥r_dr›
 = 
	`¡ohl
 (
mp
->packets_per_drop);

403 i‡(
∑ckës_≥r_dr›
 > 0)

404 
dr›_‰a˘i⁄
 = 1.0 / (
f64
Ë(
∑ckës_≥r_dr›
);

406 
dr›_‰a˘i⁄
 = 0.0;

408 
rv
 = 
	`nsim_c⁄figuª
 (
nsm
, 
b™dwidth
, 
dñay
, 
∑ckë_size
, 
dr›_‰a˘i⁄
);

410 
	`REPLY_MACRO
 (
VL_API_NSIM_CONFIGURE_REPLY
);

411 
	}
}

417 
˛ib_îr‹_t
 *

418 
	$nsim_ouçut_„©uª_íabÀ_dißbÀ_comm™d_‚
 (
vlib_maö_t
 * 
vm
,

419 
unf‹m©_öput_t
 * 
öput
,

420 
vlib_˛i_comm™d_t
 * 
cmd
)

422 
nsim_maö_t
 *
nsm
 = &
nsim_maö
;

423 
unf‹m©_öput_t
 
_löe_öput
, *
löe_öput
 = &_line_input;

424 
u32
 
sw_if_ödex
 = ~0;

425 
íabÀ_dißbÀ
 = 1;

426 
rv
;

429 i‡(!
	`unf‹m©_u£r
 (
öput
, 
unf‹m©_löe_öput
, 
löe_öput
))

432 
	`unf‹m©_check_öput
 (
löe_öput
Ë!
UNFORMAT_END_OF_INPUT
)

434 i‡(
	`unf‹m©
 (
löe_öput
, "disable"))

435 
íabÀ_dißbÀ
 = 0;

436 i‡(
	`unf‹m©
 (
löe_öput
, "%U", 
unf‹m©_v√t_sw_öãrÁ˚
,

437 
nsm
->
v√t_maö
, &
sw_if_ödex
))

441 
˛ib_îr‹_t
 *
îr‹
 = 
	`˛ib_îr‹_ªtu∫
 (0, "unknown input `%U'",

442 
f‹m©_unf‹m©_îr‹
,

443 
löe_öput
);

444 
	`unf‹m©_‰ì
 (
löe_öput
);

445  
îr‹
;

449 
	`unf‹m©_‰ì
 (
löe_öput
);

451 i‡(
sw_if_ödex
 == ~0)

452  
	`˛ib_îr‹_ªtu∫
 (0, "Please specify one interface...");

454 
rv
 = 
	`nsim_ouçut_„©uª_íabÀ_dißbÀ
 (
nsm
, 
sw_if_ödex
, 
íabÀ_dißbÀ
);

456 
rv
)

461 
VNET_API_ERROR_CANNOT_ENABLE_DISABLE_FEATURE
:

462  
	`˛ib_îr‹_ªtu∫
 (0, "Not configured,Ölease 'setÇsim' first");

464 
VNET_API_ERROR_INVALID_SW_IF_INDEX
:

465  
˛ib_îr‹_ªtu∫


469 
VNET_API_ERROR_UNIMPLEMENTED
:

470  
	`˛ib_îr‹_ªtu∫
 (0,

475  
˛ib_îr‹_ªtu∫


476 (0, "nsim_ouçut_„©uª_íabÀ_dißbÀÑëu∫ed %d", 
rv
);

479 
	}
}

495 
VLIB_CLI_COMMAND
 (
nsim_ouçut_„©uª_íabÀ_dißbÀ_comm™d
, ) =

497 .
∑th
 = "nsim output-featureÉnable-disable",

498 .
	gsh‹t_hñp
 =

500 .
	gfun˘i⁄
 = 
nsim_ouçut_„©uª_íabÀ_dißbÀ_comm™d_‚
,

504 
	~<nsim/nsim.≠i.c
>

505 
˛ib_îr‹_t
 *

506 
	$nsim_öô
 (
vlib_maö_t
 * 
vm
)

508 
nsim_maö_t
 *
nsm
 = &
nsim_maö
;

510 
nsm
->
vlib_maö
 = 
vm
;

511 
nsm
->
v√t_maö
 = 
	`v√t_gë_maö
 ();

514 
nsm
->
msg_id_ba£
 = 
	`£tup_mesßge_id_èbÀ
 ();

517 
	}
}

519 
VLIB_INIT_FUNCTION
 (
nsim_öô
);

522 
VNET_FEATURE_INIT
 (
nsim
, ) =

524 .
¨c_«me
 = "device-input",

525 .
	gnode_«me
 = "nsim",

526 .
	gruns_bef‹e
 = 
VNET_FEATURES
 ("ethernet-input"),

531 
VNET_FEATURE_INIT
 (
nsim_„©uª
, ) =

533 .
¨c_«me
 = "interface-output",

534 .
	gnode_«me
 = "nsim-output-feature",

535 .
	gruns_bef‹e
 = 
VNET_FEATURES
 ("interface-tx"),

540 
VLIB_PLUGIN_REGISTER
 () =

542 .
vîsi⁄
 = 
VPP_BUILD_VER
,

543 .
	gdes¸ùti⁄
 = "Network Delay Simulator",

547 
uw‹d


548 
	$unf‹m©_dñay
 (
unf‹m©_öput_t
 * 
öput
, 
va_li°
 * 
¨gs
)

550 
f64
 *
ªsu…
 = 
	`va_¨g
 (*
¨gs
, f64 *);

551 
f64
 
tmp
;

553 i‡(
	`unf‹m©
 (
öput
, "%‡us", &
tmp
))

554 *
ªsu…
 = 
tmp
 * 1e-6;

555 i‡(
	`unf‹m©
 (
öput
, "%‡ms", &
tmp
))

556 *
ªsu…
 = 
tmp
 * 1e-3;

557 i‡(
	`unf‹m©
 (
öput
, "%‡£c", &
tmp
))

558 *
ªsu…
 = 
tmp
;

563 
	}
}

565 
uw‹d


566 
	$unf‹m©_b™dwidth
 (
unf‹m©_öput_t
 * 
öput
, 
va_li°
 * 
¨gs
)

568 
f64
 *
ªsu…
 = 
	`va_¨g
 (*
¨gs
, f64 *);

569 
f64
 
tmp
;

571 i‡(
	`unf‹m©
 (
öput
, "%‡gbô", &
tmp
))

572 *
ªsu…
 = 
tmp
 * 1e9;

573 i‡(
	`unf‹m©
 (
öput
, "%‡gbyã", &
tmp
))

574 *
ªsu…
 = 
tmp
 * 8e9;

578 
	}
}

580 
˛ib_îr‹_t
 *

581 
	$£t_nsim_comm™d_‚
 (
vlib_maö_t
 * 
vm
,

582 
unf‹m©_öput_t
 * 
öput
, 
vlib_˛i_comm™d_t
 * 
cmd
)

584 
nsim_maö_t
 *
nsm
 = &
nsim_maö
;

585 
f64
 
dñay
, 
b™dwidth
;

586 
f64
 
∑ckë_size
 = 1500.0;

587 
f64
 
dr›_‰a˘i⁄
 = 0.0;

588 
u32
 
∑ckës_≥r_dr›
;

589 
u32
 
num_w‹kîs
 = 
	`vlib_num_w‹kîs
 ();

590 
rv
;

592 
	`unf‹m©_check_öput
 (
öput
Ë!
UNFORMAT_END_OF_INPUT
)

594 i‡(
	`unf‹m©
 (
öput
, "dñay %U", 
unf‹m©_dñay
, &
dñay
))

596 i‡(
	`unf‹m©
 (
öput
, "b™dwidth %U", 
unf‹m©_b™dwidth
,

597 &
b™dwidth
))

599 i‡(
	`unf‹m©
 (
öput
, "∑ckë-sizê%f", &
∑ckë_size
))

601 i‡(
	`unf‹m©
 (
öput
, "∑ckës-≥r-dr› %d", &
∑ckës_≥r_dr›
))

603 i‡(
∑ckës_≥r_dr›
 > 0)

604 
dr›_‰a˘i⁄
 = 1.0 / ((
f64
Ë
∑ckës_≥r_dr›
);

606 i‡(
	`unf‹m©
 (
öput
, "dr›-‰a˘i⁄ %f", &
dr›_‰a˘i⁄
))

608 i‡(
dr›_‰a˘i⁄
 < 0.0 || drop_fraction > 1.0)

609  
˛ib_îr‹_ªtu∫


612 i‡(
	`unf‹m©
 (
öput
, "poll-main-thread"))

613 
nsm
->
pﬁl_maö_thªad
 = 1;

618 
rv
 = 
	`nsim_c⁄figuª
 (
nsm
, 
b™dwidth
, 
dñay
, 
∑ckë_size
, 
dr›_‰a˘i⁄
);

620 
rv
)

622 
VNET_API_ERROR_INVALID_VALUE
:

623  
	`˛ib_îr‹_ªtu∫
 (0, "övÆid b™dwidth %.2f", 
b™dwidth
);

625 
VNET_API_ERROR_INVALID_VALUE_2
:

626  
	`˛ib_îr‹_ªtu∫
 (0, "övÆid dñay %.2f", 
dñay
);

628 
VNET_API_ERROR_INVALID_VALUE_3
:

629  
	`˛ib_îr‹_ªtu∫
 (0, "övÆidÖackë sizê%.2f", 
∑ckë_size
);

632  
	`˛ib_îr‹_ªtu∫
 (0, "îr‹ %d", 
rv
);

638 
	`vlib_˛i_ouçut
 (
vm
, "ConfiguredÜink delay %.2f ms, %.2f msÑound-trip",

639 
nsm
->
dñay
 * 1e3, 2.0 *Çsm->delay * 1e3);

640 i‡(
nsm
->
dr›_‰a˘i⁄
 > 0.0)

641 
	`vlib_˛i_ouçut
 (
vm
, "... simulatingáÇetwork drop fraction of %.5f",

642 
nsm
->
dr›_‰a˘i⁄
);

645 i‡(
num_w‹kîs
)

646 
	`vlib_˛i_ouçut
 (
vm
, "Sim uses %llu bytesÖerÅhread, %llu bytesÅotal",

647 
nsm
->
mm≠_size
,Çsm->mm≠_sizê* 
num_w‹kîs
);

649 
	`vlib_˛i_ouçut
 (
vm
, "Sim u£†%Œu byã†tŸÆ", 
nsm
->
mm≠_size
);

652 
	}
}

671 
VLIB_CLI_COMMAND
 (
£t_nsim_comm™d
, ) =

673 .
∑th
 = "setÇsim",

674 .
	gsh‹t_hñp
 = "setÇsim delay <time> bandwidth <bps>Öacket-size <nbytes>\n"

676 .
	gfun˘i⁄
 = 
£t_nsim_comm™d_‚
,

681 
˛ib_îr‹_t
 *

682 
	$show_nsim_comm™d_‚
 (
vlib_maö_t
 * 
vm
,

683 
unf‹m©_öput_t
 * 
öput
, 
vlib_˛i_comm™d_t
 * 
cmd
)

685 
nsim_maö_t
 *
nsm
 = &
nsim_maö
;

686 
u32
 
num_w‹kîs
 = 
	`vlib_num_w‹kîs
 ();

687 
vîbo£
 = 0;

689 i‡(
nsm
->
is_c⁄figuªd
 == 0)

690  
	`˛ib_îr‹_ªtu∫
 (0, "Network simulatorÇot configured");

692 i‡(
nsm
->
sw_if_ödex0
 == 0)

693  
	`˛ib_îr‹_ªtu∫
 (0, "Network simulatorÇotÉnabled");

695 i‡(
	`unf‹m©
 (
öput
, "verbose"))

696 
vîbo£
 = 1;

698 
	`vlib_˛i_ouçut
 (
vm
, "Network simulator cross-connects %Uánd %U",

699 
f‹m©_v√t_sw_if_ödex_«me
,

700 
nsm
->
v√t_maö
,Çsm->
sw_if_ödex0
,

701 
f‹m©_v√t_sw_if_ödex_«me
,

702 
nsm
->
v√t_maö
,Çsm->
sw_if_ödex1
);

704 
	`vlib_˛i_ouçut
 (
vm
,

706 
nsm
->
dñay
 * 1e3, 2.0 *Çsm->delay * 1e3);

708 i‡(
nsm
->
dr›_‰a˘i⁄
 > 0.0)

709 
	`vlib_˛i_ouçut
 (
vm
, "... simulatingáÇetwork drop fraction of %.5f",

710 
nsm
->
dr›_‰a˘i⁄
);

712 i‡(
vîbo£
)

715 
	`vlib_˛i_ouçut
 (
vm
, " Configured bandwidth: %.2f gbit/sec",

716 
nsm
->
b™dwidth
 / 1e9);

717 
	`vlib_˛i_ouçut
 (
vm
, " C⁄figuªdÖackë size: %f", 
nsm
->
∑ckë_size
);

718 i‡(
num_w‹kîs
)

719 
vlib_˛i_ouçut


720 (
vm
, " Sim uses %llu bytesÖerÅhread, %llu bytesÅotal",

721 
nsm
->
mm≠_size
,Çsm->mm≠_sizê* 
num_w‹kîs
);

723 
	`vlib_˛i_ouçut
 (
vm
, " Sim u£†%Œu byã†tŸÆ", 
nsm
->
mm≠_size
);

727 
	}
}

746 
VLIB_CLI_COMMAND
 (
show_nsim_comm™d
, ) =

748 .
∑th
 = "showÇsim",

749 .
	gsh‹t_hñp
 = "DisplayÇetwork delay simulator configuration",

750 .
	gfun˘i⁄
 = 
show_nsim_comm™d_‚
,

	@nsim.h

18 #i‚de‡
__ö˛uded_nsim_h__


19 
	#__ö˛uded_nsim_h__


	)

21 
	~<v√t/v√t.h
>

22 
	~<v√t/ù/ù.h
>

23 
	~<v√t/ëhî√t/ëhî√t.h
>

25 
	~<vµö‰a/hash.h
>

26 
	~<vµö‰a/îr‹.h
>

30 
f64
 
	mtx_time
;

31 
u32
 
	mrx_sw_if_ödex
;

32 
u32
 
	mtx_sw_if_ödex
;

33 
u32
 
	mouçut_√xt_ödex
;

34 
u32
 
	mbuf„r_ödex
;

35 
u32
 
	m∑d
;

36 } 
	tnsim_whìl_íåy_t
;

40 
u32
 
	mwhìl_size
;

41 
u32
 
	mcursize
;

42 
u32
 
	mhód
;

43 
u32
 
	mèû
;

44 
nsim_whìl_íåy_t
 *
	míåõs
;

45 
CLIB_CACHE_LINE_ALIGN_MARK
 (
∑d
);

46 } 
	tnsim_whìl_t
;

51 
u16
 
	mmsg_id_ba£
;

54 
u32
 
	msw_if_ödex0
, 
	msw_if_ödex1
;

55 
u32
 
	mouçut_√xt_ödex0
, 
	mouçut_√xt_ödex1
;

58 
u32
 *
	mouçut_√xt_ödex_by_sw_if_ödex
;

61 
u32
 
	m£ed
;

64 
nsim_whìl_t
 **
	mwhìl_by_thªad
;

67 
f64
 
	mdñay
;

68 
f64
 
	mb™dwidth
;

69 
f64
 
	m∑ckë_size
;

70 
f64
 
	mdr›_‰a˘i⁄
;

71 
u32
 
	mpﬁl_maö_thªad
;

73 
u64
 
	mmm≠_size
;

76 
	mis_c⁄figuªd
;

79 
vlib_maö_t
 *
	mvlib_maö
;

80 
v√t_maö_t
 *
	mv√t_maö
;

81 } 
	tnsim_maö_t
;

83 
nsim_maö_t
 
nsim_maö
;

85 
vlib_node_ªgi°øti⁄_t
 
nsim_node
;

86 
vlib_node_ªgi°øti⁄_t
 
nsim_öput_node
;

	@nsim_input.c

18 
	~<vlib/vlib.h
>

19 
	~<v√t/v√t.h
>

20 
	~<v√t/pg/pg.h
>

21 
	~<vµö‰a/îr‹.h
>

22 
	~<nsim/nsim.h
>

26 
f64
 
	mexpúed
;

27 
u32
 
	m√xt_ödex
;

28 } 
	tnsim_tx_åa˚_t
;

30 #i‚de‡
CLIB_MARCH_VARIANT


32 
u8
 *

33 
	$f‹m©_nsim_tx_åa˚
 (
u8
 * 
s
, 
va_li°
 * 
¨gs
)

35 
	`CLIB_UNUSED
 (
vlib_maö_t
 * 
vm
Ë
	`va_¨g
 (*
¨gs
, vlib_main_t *);

36 
	`CLIB_UNUSED
 (
vlib_node_t
 * 
node
Ë
	`va_¨g
 (*
¨gs
, vlib_node_t *);

37 
nsim_tx_åa˚_t
 *
t
 = 
	`va_¨g
 (*
¨gs
,Çsim_tx_trace_t *);

39 
s
 = 
	`f‹m©
 (s, "NSIM:Åxáà%.6‡√xt_ödex %d", 
t
->
expúed
,Å->
√xt_ödex
);

40  
s
;

41 
	}
}

44 
	#f‹óch_nsim_tx_îr‹
 \

45 
	`_
(
TRANSMITTED
, "Packë†å™smôãd")

	)

49 
	#_
(
sym
,
°r
Ë
NSIM_TX_ERROR_
##sym,

	)

50 
	mf‹óch_nsim_tx_îr‹


51 #unde‡
_


52 
	mNSIM_TX_N_ERROR
,

53 } 
	tnsim_tx_îr‹_t
;

55 #i‚de‡
CLIB_MARCH_VARIANT


56 *
	gnsim_tx_îr‹_°rögs
[] = {

57 
	#_
(
sym
,
°rög
Ë°rög,

	)

58 
f‹óch_nsim_tx_îr‹


59 #unde‡
_


65 
	mNSIM_NEXT_DROP
,

66 
	mNSIM_N_NEXT
,

67 } 
	tnsim_√xt_t
;

69 
Æways_ölöe
 
uw‹d


70 
	$nsim_öput_ölöe
 (
vlib_maö_t
 * 
vm
, 
vlib_node_ru¡ime_t
 * 
node
,

71 
vlib_‰ame_t
 * 
f
, 
is_åa˚
)

73 
nsim_maö_t
 *
nsm
 = &
nsim_maö
;

74 
u32
 
my_thªad_ödex
 = 
vm
->
thªad_ödex
;

75 
nsim_whìl_t
 *
wp
 = 
nsm
->
whìl_by_thªad
[
my_thªad_ödex
];

76 
f64
 
now
 = 
	`vlib_time_now
 (
vm
);

77 
uw‹d
 
n_tx_∑ckës
 = 0;

78 
u32
 
bi0
, 
√xt0
;

79 
u32
 *
to_√xt
;

80 
u32
 
√xt_ödex
;

81 
u32
 
n_À·_to_√xt
;

82 
nsim_whìl_íåy_t
 *
ï
;

85 i‡(
wp
->
cursize
 == 0)

89 
ï
 = 
wp
->
íåõs
 + wp->
hód
;

90 i‡(
ï
->
tx_time
 > 
now
)

91  
n_tx_∑ckës
;

93 
√xt_ödex
 = 
node
->
ˇched_√xt_ödex
;

96 
wp
->
cursize
 && 
ï
->
tx_time
 <
now
)

98 
vlib_buf„r_t
 *
b0
;

100 
	`vlib_gë_√xt_‰ame
 (
vm
, 
node
, 
√xt_ödex
, 
to_√xt
, 
n_À·_to_√xt
);

102 
n_À·_to_√xt
 > 0)

105 i‡((((
uw‹d
Ë
ï
Ë& (
CLIB_CACHE_LINE_BYTES
 - 1)) == 0)

106 
	`CLIB_PREFETCH
 ((
ï
 + 2), 
CLIB_CACHE_LINE_BYTES
, 
LOAD
);

108 
bi0
 = 
ï
->
buf„r_ödex
;

110 
to_√xt
[0] = 
bi0
;

111 
to_√xt
 += 1;

112 
n_À·_to_√xt
 -= 1;

114 
√xt0
 = 
ï
->
ouçut_√xt_ödex
;

117 
	`vlib_vÆid©e_buf„r_íqueue_x1
 (
vm
, 
node
, 
√xt_ödex
,

118 
to_√xt
, 
n_À·_to_√xt
,

119 
bi0
, 
√xt0
);

121 
wp
->
hód
++;

122 i‡(
wp
->
hód
 =wp->
whìl_size
)

123 
wp
->
hód
 = 0;

124 
wp
->
cursize
--;

125 
ï
 = 
wp
->
íåõs
 + wp->
hód
;

126 
n_tx_∑ckës
++;

128 i‡(
is_åa˚
)

130 
b0
 = 
	`vlib_gë_buf„r
 (
vm
, 
bi0
);

131 i‡(
b0
->
Êags
 & 
VLIB_BUFFER_IS_TRACED
)

133 
nsim_tx_åa˚_t
 *
t
 =

134 
	`vlib_add_åa˚
 (
vm
, 
node
, 
b0
,  (*
t
));

135 
t
->
expúed
 = 
now
;

136 
t
->
√xt_ödex
 = 
√xt0
;

141 i‡(
	`PREDICT_FALSE
 (
wp
->
cursize
 == 0))

145 
	`vlib_put_√xt_‰ame
 (
vm
, 
node
, 
√xt_ödex
, 
n_À·_to_√xt
);

148 i‡(
ï
->
tx_time
 > 
now
)

151 
	`vlib_node_ö¸emít_cou¡î
 (
vm
, 
node
->
node_ödex
,

152 
NSIM_TX_ERROR_TRANSMITTED
, 
n_tx_∑ckës
);

153  
n_tx_∑ckës
;

154 
	}
}

156 
	$VLIB_NODE_FN
 (
nsim_öput_node
Ë(
vlib_maö_t
 * 
vm
, 
vlib_node_ru¡ime_t
 * 
node
,

157 
vlib_‰ame_t
 * 
‰ame
)

159 i‡(
	`PREDICT_FALSE
 (
node
->
Êags
 & 
VLIB_NODE_FLAG_TRACE
))

160  
	`nsim_öput_ölöe
 (
vm
, 
node
, 
‰ame
, 1 );

162  
	`nsim_öput_ölöe
 (
vm
, 
node
, 
‰ame
, 0 );

164 
	}
}

167 #i‚de‡
CLIB_MARCH_VARIANT


168 
VLIB_REGISTER_NODE
 (
nsim_öput_node
) =

170 .
ty≥
 = 
VLIB_NODE_TYPE_INPUT
,

171 .
	g«me
 = "nsim-wheel",

174 .
	g°©e
 = 
VLIB_NODE_STATE_DISABLED
,

176 .
	gf‹m©_åa˚
 = 
f‹m©_nsim_tx_åa˚
,

178 .
	gn_îr‹s
 = 
NSIM_TX_N_ERROR
,

179 .
	gîr‹_°rögs
 = 
nsim_tx_îr‹_°rögs
,

	@nsim_test.c

17 
	~<v©/v©.h
>

18 
	~<vlib≠i/≠i.h
>

19 
	~<vlibmem‹y/≠i.h
>

20 
	~<vµö‰a/îr‹.h
>

22 
uw‹d
 
unf‹m©_sw_if_ödex
 (
unf‹m©_öput_t
 * 
öput
, 
va_li°
 * 
¨gs
);

25 
	~<nsim/nsim.≠i_íum.h
>

26 
	~<nsim/nsim.≠i_ty≥s.h
>

31 
u16
 
	mmsg_id_ba£
;

32 
v©_maö_t
 *
	mv©_maö
;

33 } 
	tnsim_ã°_maö_t
;

35 
nsim_ã°_maö_t
 
	gnsim_ã°_maö
;

37 
	#__∂ugö_msg_ba£
 
nsim_ã°_maö
.
msg_id_ba£


	)

38 
	~<vlib≠i/v©_hñ≥r_ma¸os.h
>

41 
	$≠i_nsim_¸oss_c⁄√˘_íabÀ_dißbÀ
 (
v©_maö_t
 * 
vam
)

43 
unf‹m©_öput_t
 *
i
 = 
vam
->
öput
;

44 
íabÀ_dißbÀ
 = 1;

45 
u32
 
sw_if_ödex0
 = ~0;

46 
u32
 
sw_if_ödex1
 = ~0;

47 
u32
 
tmp
;

48 
vl_≠i_nsim_¸oss_c⁄√˘_íabÀ_dißbÀ_t
 *
mp
;

49 
ªt
;

52 
	`unf‹m©_check_öput
 (
i
Ë!
UNFORMAT_END_OF_INPUT
)

54 i‡(
	`unf‹m©
 (
i
, "%U", 
unf‹m©_sw_if_ödex
, 
vam
, &
tmp
))

56 i‡(
sw_if_ödex0
 == ~0)

57 
sw_if_ödex0
 = 
tmp
;

59 
sw_if_ödex1
 = 
tmp
;

61 i‡(
	`unf‹m©
 (
i
, "sw_if_ödex %d", &
tmp
))

63 i‡(
sw_if_ödex0
 == ~0)

64 
sw_if_ödex0
 = 
tmp
;

66 
sw_if_ödex1
 = 
tmp
;

68 i‡(
	`unf‹m©
 (
i
, "disable"))

69 
íabÀ_dißbÀ
 = 0;

74 i‡(
sw_if_ödex0
 =~0 || 
sw_if_ödex1
 == ~0)

76 
	`îrmsg
 ("missing interfaceÇame /Éxplicit sw_if_indexÇumber \n");

81 
	`M
 (
NSIM_CROSS_CONNECT_ENABLE_DISABLE
, 
mp
);

82 
mp
->
sw_if_ödex0
 = 
	`¡ohl
 (sw_if_index0);

83 
mp
->
sw_if_ödex1
 = 
	`¡ohl
 (sw_if_index1);

84 
mp
->
íabÀ_dißbÀ
 =Énable_disable;

87 
	`S
 (
mp
);

90 
	`W
 (
ªt
);

91  
ªt
;

92 
	}
}

95 
	$≠i_nsim_ouçut_„©uª_íabÀ_dißbÀ
 (
v©_maö_t
 * 
vam
)

97 
unf‹m©_öput_t
 *
i
 = 
vam
->
öput
;

98 
íabÀ_dißbÀ
 = 1;

99 
u32
 
sw_if_ödex
 = ~0;

100 
vl_≠i_nsim_ouçut_„©uª_íabÀ_dißbÀ_t
 *
mp
;

101 
ªt
;

104 
	`unf‹m©_check_öput
 (
i
Ë!
UNFORMAT_END_OF_INPUT
)

106 i‡(
	`unf‹m©
 (
i
, "%U", 
unf‹m©_sw_if_ödex
, 
vam
, &
sw_if_ödex
))

108 i‡(
	`unf‹m©
 (
i
, "sw_if_ödex %d", &
sw_if_ödex
))

110 i‡(
	`unf‹m©
 (
i
, "disable"))

111 
íabÀ_dißbÀ
 = 0;

116 i‡(
sw_if_ödex
 == ~0)

118 
	`îrmsg
 ("missing interfaceÇame /Éxplicit sw_if_indexÇumber \n");

123 
	`M
 (
NSIM_OUTPUT_FEATURE_ENABLE_DISABLE
, 
mp
);

124 
mp
->
sw_if_ödex
 = 
	`¡ohl
 (sw_if_index);

125 
mp
->
íabÀ_dißbÀ
 =Énable_disable;

128 
	`S
 (
mp
);

131 
	`W
 (
ªt
);

132  
ªt
;

133 
	}
}

135 
uw‹d


136 
	$unf‹m©_dñay
 (
unf‹m©_öput_t
 * 
öput
, 
va_li°
 * 
¨gs
)

138 
f64
 *
ªsu…
 = 
	`va_¨g
 (*
¨gs
, f64 *);

139 
f64
 
tmp
;

141 i‡(
	`unf‹m©
 (
öput
, "%‡us", &
tmp
))

142 *
ªsu…
 = 
tmp
 * 1e-6;

143 i‡(
	`unf‹m©
 (
öput
, "%‡ms", &
tmp
))

144 *
ªsu…
 = 
tmp
 * 1e-3;

145 i‡(
	`unf‹m©
 (
öput
, "%‡£c", &
tmp
))

146 *
ªsu…
 = 
tmp
;

151 
	}
}

153 
uw‹d


154 
	$unf‹m©_b™dwidth
 (
unf‹m©_öput_t
 * 
öput
, 
va_li°
 * 
¨gs
)

156 
f64
 *
ªsu…
 = 
	`va_¨g
 (*
¨gs
, f64 *);

157 
f64
 
tmp
;

159 i‡(
	`unf‹m©
 (
öput
, "%‡gbô", &
tmp
))

160 *
ªsu…
 = 
tmp
 * 1e9;

161 i‡(
	`unf‹m©
 (
öput
, "%‡gbyã", &
tmp
))

162 *
ªsu…
 = 
tmp
 * 8e9;

166 
	}
}

169 
	$≠i_nsim_c⁄figuª
 (
v©_maö_t
 * 
vam
)

171 
vl_≠i_nsim_c⁄figuª_t
 *
mp
;

172 
unf‹m©_öput_t
 *
i
 = 
vam
->
öput
;

173 
f64
 
dñay
 = 0.0, 
b™dwidth
 = 0.0;

174 
f64
 
∑ckë_size
 = 1500.0;

175 
u32
 
∑ckës_≥r_dr›
 = 0;

176 
ªt
;

178 
	`unf‹m©_check_öput
 (
i
Ë!
UNFORMAT_END_OF_INPUT
)

180 i‡(
	`unf‹m©
 (
i
, "dñay %U", 
unf‹m©_dñay
, &
dñay
))

182 i‡(
	`unf‹m©
 (
i
, "b™dwidth %U", 
unf‹m©_b™dwidth
, &
b™dwidth
))

184 i‡(
	`unf‹m©
 (
i
, "∑ckë-sizê%f", &
∑ckë_size
))

186 i‡(
	`unf‹m©
 (
i
, "∑ckës-≥r-dr› %u", &
∑ckës_≥r_dr›
))

192 i‡(
dñay
 =0.0 || 
b™dwidth
 == 0.0)

194 
	`îrmsg
 ("must specify delayánd bandwidth");

199 
	`M
 (
NSIM_CONFIGURE
, 
mp
);

200 
mp
->
dñay_ö_u£c
 = (
u32
Ë(
dñay
 * 1e6);

201 
mp
->
dñay_ö_u£c
 = 
	`¡ohl
 (mp->delay_in_usec);

202 
mp
->
avîage_∑ckë_size
 = (
u32
Ë(
∑ckë_size
);

203 
mp
->
avîage_∑ckë_size
 = 
	`¡ohl
 (mp->average_packet_size);

204 
mp
->
b™dwidth_ö_bôs_≥r_£c⁄d
 = (
u64
Ë(
b™dwidth
);

205 
mp
->
b™dwidth_ö_bôs_≥r_£c⁄d
 =

206 
	`˛ib_ho°_to_√t_u64
 (
mp
->
b™dwidth_ö_bôs_≥r_£c⁄d
);

207 
mp
->
∑ckës_≥r_dr›
 = 
	`¡ohl
 (packets_per_drop);

210 
	`S
 (
mp
);

213 
	`W
 (
ªt
);

214  
ªt
;

215 
	}
}

217 
	~<nsim/nsim.≠i_ã°.c
>

	@/usr/include/vppinfra/error.h

38 #i‚de‡
ö˛uded_îr‹_h


39 
	#ö˛uded_îr‹_h


	)

41 
	~<vµö‰a/˛ib.h
>

42 
	~<vµö‰a/îr‹_boŸ°øp.h
>

44 #ifde‡
CLIB_UNIX


45 
	~<î∫o.h
>

48 #ifde‡
CLIB_LINUX_KERNEL


49 
	~<löux/î∫o.h
>

52 
	~<°d¨g.h
>

53 
	~<vµö‰a/vec.h
>

56 
	t˛ib_îr‹_h™dÀr_func_t
 (*
	t¨g
, 
	tu8
 * 
	tmsg
, 
	tmsg_Àn
);

57 
˛ib_îr‹_ªgi°î_h™dÀr
 (
˛ib_îr‹_h™dÀr_func_t
 
func
, *
¨g
);

59 
	#˛ib_w¨nög
(
f‹m©
,
¨gs
...) \

60 
	`_˛ib_îr‹
 (
CLIB_ERROR_WARNING
, 
˛ib_îr‹_fun˘i⁄
, 
__LINE__
, 
f‹m©
, ## 
¨gs
)

	)

62 
	#˛ib_îr‹
(
f‹m©
,
¨gs
...) \

63 
	`_˛ib_îr‹
 (
CLIB_ERROR_FATAL
, 
˛ib_îr‹_fun˘i⁄
, 
__LINE__
, 
f‹m©
, ## 
¨gs
)

	)

65 
	#˛ib_unix_îr‹
(
f‹m©
,
¨gs
...) \

66 
	`_˛ib_îr‹
 (
CLIB_ERROR_FATAL
 | 
CLIB_ERROR_ERRNO_VALID
, 
˛ib_îr‹_fun˘i⁄
, 
__LINE__
, 
f‹m©
, ## 
¨gs
)

	)

68 
	#˛ib_unix_w¨nög
(
f‹m©
,
¨gs
...) \

69 
	`_˛ib_îr‹
 (
CLIB_ERROR_WARNING
 | 
CLIB_ERROR_ERRNO_VALID
, 
˛ib_îr‹_fun˘i⁄
, 
__LINE__
, 
f‹m©
, ## 
¨gs
)

	)

72 
	#˛ib_∑nic
(
f‹m©
,
¨gs
...) \

73 
	`_˛ib_îr‹
 (
CLIB_ERROR_ABORT
, (*Ë
˛ib_îr‹_fun˘i⁄
, 
__LINE__
, 
f‹m©
, ## 
¨gs
)

	)

75 
	~<vµö‰a/˛ib_îr‹.h
>

77 
	#˛ib_îr‹_gë_code
(
îr
Ë(”ºË? (îr)->
code
 : 0)

	)

78 
	#˛ib_îr‹_£t_code
(
îr
, 
c
) \

80 i‡(
îr
) \

81 (
îr
)->
code
 = (
c
); \

82 } 0)

	)

84 *
˛ib_îr‹_‰ì_ve˘‹
 (
˛ib_îr‹_t
 * 
îr‹s
);

86 
	#˛ib_îr‹_‰ì
(
e
Ëê
	`˛ib_îr‹_‰ì_ve˘‹
”)

	)

88 
˛ib_îr‹_t
 *
_˛ib_îr‹_ªtu∫
 (˛ib_îr‹_à* 
îr‹s
,

89 
™y
 
code
,

90 
uw‹d
 
Êags
,

91 *
whîe
, *
fmt
, ...);

93 
	#˛ib_îr‹_ªtu∫_code
(
e
,
code
,
Êags
,
¨gs
...) \

94 
	`_˛ib_îr‹_ªtu∫
((
e
),(
code
),(
Êags
),(*)
˛ib_îr‹_fun˘i⁄
,
¨gs
)

	)

96 
	#˛ib_îr‹_¸óã
(
¨gs
...) \

97 
	`˛ib_îr‹_ªtu∫_code
(0,0,0,
¨gs
)

	)

99 
	#˛ib_îr‹_ªtu∫
(
e
,
¨gs
...) \

100 
	`˛ib_îr‹_ªtu∫_code
(
e
,0,0,
¨gs
)

	)

102 
	#˛ib_îr‹_ªtu∫_unix
(
e
,
¨gs
...) \

103 
	`˛ib_îr‹_ªtu∫_code
(
e
,
î∫o
,
CLIB_ERROR_ERRNO_VALID
,
¨gs
)

	)

105 
	#˛ib_îr‹_ªtu∫_Áèl
(
e
,
¨gs
...) \

106 
	`˛ib_îr‹_ªtu∫_code
(
e
,0,
CLIB_ERROR_FATAL
,
¨gs
)

	)

108 
	#˛ib_îr‹_ªtu∫_unix_Áèl
(
e
,
¨gs
...) \

109 
	`˛ib_îr‹_ªtu∫_code
(
e
,
î∫o
,
CLIB_ERROR_ERRNO_VALID
|
CLIB_ERROR_FATAL
,
¨gs
)

	)

111 
˛ib_îr‹_t
 *
_˛ib_îr‹_ªp‹t
 (˛ib_îr‹_à* 
îr‹s
);

113 
	#˛ib_îr‹_ªp‹t
(
e
Ëdÿ{ (eË
	`_˛ib_îr‹_ªp‹t
 (e); } 0)

	)

115 
u8
 *
f‹m©_˛ib_îr‹
 (u8 * 
s
, 
va_li°
 * 
va
);

117 
Æways_ölöe
 
w‹d


118 
	$unix_îr‹_is_Áèl
 (
w‹d
 
îr‹
)

120 #ifde‡
CLIB_UNIX


121 
îr‹
)

123 
EWOULDBLOCK
:

124 
EINTR
:

129 
	}
}

131 
	#IF_ERROR_IS_FATAL_RETURN_ELSE_FREE
(
e
) \

133 i‡(
e
) \

135 i‡(
	`unix_îr‹_is_Áèl
 (
	`˛ib_îr‹_gë_code
 (
e
))) \

136  (
e
); \

138 
	`˛ib_îr‹_‰ì
 (
e
); \

140 } 0)

	)

142 
	#ERROR_RETURN_IF
(
x
) \

144 
˛ib_îr‹_t
 * 
_îr‹_ªtu∫_if
 = (
x
); \

145 i‡(
_îr‹_ªtu∫_if
) \

146  
	`˛ib_îr‹_ªtu∫
 (
_îr‹_ªtu∫_if
, 0); \

147 } 0)

	)

149 
	#ERROR_ASSERT
(
åuth
) \

151 
˛ib_îr‹_t
 * 
_îr‹_as£π
 = 0; \

152 i‡(
CLIB_DEBUG
 > 0 && ! (
åuth
)) \

154 
_îr‹_as£π
 = 
˛ib_îr‹_ªtu∫_Áèl
 \

156 
__FILE__
, \

157 (
uw‹d
Ë
__LINE__
, \

158 
˛ib_îr‹_fun˘i⁄
, \

161 
_îr‹_as£π
; \

162 })

	)

165 
	#CLIB_ERROR_ASSERT
(
åuth
) \

167 
˛ib_îr‹_t
 * 
_îr‹_as£π
 = 0; \

168 i‡(! (
åuth
)) \

170 
_îr‹_as£π
 = \

171 
˛ib_îr‹_ªtu∫_Áèl
 \

173 
__FILE__
, \

174 (
uw‹d
Ë
__LINE__
, \

175 
˛ib_îr‹_fun˘i⁄
, \

178 
_îr‹_as£π
; \

179 })

	)

185 #ifde‡
__COVERITY__


186 #i‚de‡
_Sètic_as£π


187 
	#_Sètic_as£π
(
x
,
y
)

	)

	@/usr/include/vppinfra/hash.h

38 #i‚de‡
ö˛uded_hash_h


39 
	#ö˛uded_hash_h


	)

41 
	~<vµö‰a/îr‹.h
>

42 
	~<vµö‰a/f‹m©.h
>

43 
	~<vµö‰a/vec.h
>

44 
	~<vµö‰a/ve˘‹.h
>

46 
	ghash_hódî
;

48 
	$uw‹d
 (
	thash_key_sum_fun˘i⁄_t
Ë(
	thash_hódî
 *, 
	tuw‹d
 
	tkey
);

49 
	$uw‹d
 (
	thash_key_equÆ_fun˘i⁄_t
)

50 (
	thash_hódî
 *, 
	tuw‹d
 
	tkey1
, uw‹d 
	tkey2
);

53 
	shash_hódî


56 
uw‹d
 
ñts
;

59 
u32
 
Êags
;

62 
	#HASH_FLAG_NO_AUTO_GROW
 (1 << 0)

	)

64 
	#HASH_FLAG_NO_AUTO_SHRINK
 (1 << 1)

	)

66 
	#HASH_FLAG_HASH_NEXT_IN_PROGRESS
 (1 << 2)

	)

68 
u32
 
log2_∑ú_size
;

73 
hash_key_sum_fun˘i⁄_t
 *
key_sum
;

76 
	#KEY_FUNC_NONE
 (0Ë

	)

77 
	#KEY_FUNC_POINTER_UWORD
 (1Ë

	)

78 
	#KEY_FUNC_POINTER_U32
 (2Ë

	)

79 
	#KEY_FUNC_STRING
 (3Ë

	)

80 
	#KEY_FUNC_MEM
 (4Ë

	)

83 
hash_key_equÆ_fun˘i⁄_t
 *
key_equÆ
;

86 
™y
 
u£r
;

89 
f‹m©_fun˘i⁄_t
 *
f‹m©_∑ú
;

92 *
f‹m©_∑ú_¨g
;

96 
uw‹d
 
is_u£r
[0];

97 } 
	thash_t
;

100 
Æways_ölöe
 
uw‹d


101 
	$hash_hódî_byãs
 (*
v
)

103 
hash_t
 *
h
;

104 
uw‹d
 
is_u£r_byãs
 =

105 ( (
h
->
is_u£r
[0]Ë* 
	`vec_Àn
 (
v
)Ë/ 
	`BITS
 (h->is_user[0]);

106   (
h
[0]Ë+ 
is_u£r_byãs
;

107 
	}
}

110 
Æways_ölöe
 
hash_t
 *

111 
	$hash_hódî
 (*
v
)

113  
	`vec_hódî
 (
v
, 
	`hash_hódî_byãs
 (v));

114 
	}
}

117 
Æways_ölöe
 
uw‹d


118 
	$hash_ñts
 (*
v
)

120 
hash_t
 *
h
 = 
	`hash_hódî
 (
v
);

121  
v
 ? 
h
->
ñts
 : 0;

122 
	}
}

125 
Æways_ölöe
 
uw‹d


126 
	$hash_ˇ∑côy
 (*
v
)

128  
	`vec_Àn
 (
v
);

129 
	}
}

132 
Æways_ölöe
 
uw‹d


133 
	$hash_is_u£r
 (*
v
, 
uw‹d
 
i
)

135 
hash_t
 *
h
 = 
	`hash_hódî
 (
v
);

136 
uw‹d
 
i0
 = 
i
 / 
	`BITS
 (
h
->
is_u£r
[0]);

137 
uw‹d
 
i1
 = 
i
 % 
	`BITS
 (
h
->
is_u£r
[0]);

138  (
h
->
is_u£r
[
i0
] & ((
uw‹d
Ë1 << 
i1
)) != 0;

139 
	}
}

142 
Æways_ölöe
 

143 
	$hash_£t_∑ú_f‹m©
 (*
v
,

144 
f‹m©_fun˘i⁄_t
 * 
f‹m©_∑ú
, *
f‹m©_∑ú_¨g
)

146 
hash_t
 *
h
 = 
	`hash_hódî
 (
v
);

147 
h
->
f‹m©_∑ú
 = format_pair;

148 
h
->
f‹m©_∑ú_¨g
 = format_pair_arg;

149 
	}
}

152 
Æways_ölöe
 

153 
	$hash_£t_Êags
 (*
v
, 
uw‹d
 
Êags
)

155 
	`hash_hódî
 (
v
)->
Êags
 |= flags;

156 
	}
}

162 
uw‹d
 
	mkey
;

165 
uw‹d
 
	mvÆue
[0];

166 } 
	thash_∑ú_t
;

176 
hash_∑ú_t
 *
	m∑ús
;

178 
u8
 
	m∑d
[ (
uw‹d
Ë-  (
hash_∑ú_t
 *)];

180 
uw‹d
 
	mÆloc_Àn
;

182 
	thash_∑ú_ödúe˘_t
;

187 
hash_∑ú_t
 
	mdúe˘
;

188 
hash_∑ú_ödúe˘_t
 
	mödúe˘
;

189 } 
	thash_∑ú_uni⁄_t
;

191 
	#LOG2_ALLOC_BITS
 (5)

	)

192 
	#PAIR_BITS
 (
	`BITS
 (
uw‹d
Ë- 
LOG2_ALLOC_BITS
)

	)

195 
Æways_ölöe
 
uw‹d


196 
	$ödúe˘_∑ú_gë_log2_byãs
 (
hash_∑ú_ödúe˘_t
 * 
p
)

198  
p
->
Æloc_Àn
 >> 
PAIR_BITS
;

199 
	}
}

202 
Æways_ölöe
 
uw‹d


203 
	$ödúe˘_∑ú_gë_Àn
 (
hash_∑ú_ödúe˘_t
 * 
p
)

205 i‡(!
p
->
∑ús
)

208  
p
->
Æloc_Àn
 & (((
uw‹d
Ë1 << 
PAIR_BITS
) - 1);

209 
	}
}

212 
Æways_ölöe
 

213 
	$ödúe˘_∑ú_£t
 (
hash_∑ú_ödúe˘_t
 * 
p
, 
uw‹d
 
log2_Æloc
, uw‹d 
Àn
)

215 
	`ASSERT
 (
Àn
 < ((
uw‹d
Ë1 << 
PAIR_BITS
));

216 
	`ASSERT
 (
log2_Æloc
 < ((
uw‹d
Ë1 << 
LOG2_ALLOC_BITS
));

217 
p
->
Æloc_Àn
 = (
log2_Æloc
 << 
PAIR_BITS
Ë| 
Àn
;

218 
	}
}

221 
uw‹d
 *
_hash_gë
 (*
v
, uw‹d 
key
);

224 
hash_∑ú_t
 *
_hash_gë_∑ú
 (*
v
, 
uw‹d
 
key
);

227 *
_hash_un£t
 (*
v
, 
uw‹d
 
key
, *
ﬁd_vÆue
);

230 *
_hash_£t3
 (*
v
, 
uw‹d
 
key
, *
vÆue
, *
ﬁd_vÆue
);

233 *
hash_ªsize
 (*
ﬁd
, 
uw‹d
 
√w_size
);

236 *
hash_dup
 (*
ﬁd
);

239 
uw‹d
 
hash_byãs
 (*
v
);

242 
	#hash_£t3
(
h
,
key
,
vÆue
,
ﬁd_vÆue
) \

244 
uw‹d
 
_v
 = (uw‹dË(
vÆue
); \

245 (
h
Ë
	`_hash_£t3
 ((h), (
uw‹d
Ë(
key
), (*Ë&
_v
, (
ﬁd_vÆue
)); \

246 })

	)

249 
	#hash_gë
(
h
,
key
Ë
	`_hash_gë
 ((h), (
uw‹d
Ë(key))

	)

252 
	#hash_gë_∑ú
(
h
,
key
Ë
	`_hash_gë_∑ú
 ((h), (
uw‹d
Ë(key))

	)

255 
	#hash_£t
(
h
,
key
,
vÆue
Ë
	`hash_£t3
(h,key,vÆue,0)

	)

258 
	#hash_£t1
(
h
,
key
Ë(hË
	`_hash_£t3
(h,(
uw‹d
Ë(key),0,0)

	)

261 
	#hash_un£t
(
h
,
key
Ë((hË
	`_hash_un£t
 ((h), (
uw‹d
Ë(key),0))

	)

264 
	#hash_un£t3
(
h
,
key
,
ﬁd_vÆue
Ë((hË
	`_hash_un£t
 ((h), (
uw‹d
Ë(key), (*Ë(ﬁd_vÆue)))

	)

269 
	#hash_gë_mem
(
h
,
key
Ë
	`_hash_gë
 ((h), 
	`poöãr_to_uw‹d
 (key))

	)

272 
	#hash_gë_∑ú_mem
(
h
,
key
Ë
	`_hash_gë_∑ú
 ((h), 
	`poöãr_to_uw‹d
 (key))

	)

275 
	#hash_£t_mem
(
h
,
key
,
vÆue
Ë
	`hash_£t3
 (h, 
	`poöãr_to_uw‹d
 (key), (vÆue), 0)

	)

278 
Æways_ölöe
 

279 
	$hash_£t_mem_Æloc
 (
uw‹d
 ** 
h
, *
key
, uw‹d 
v
)

281 
size_t
 
ksz
 = 
	`hash_hódî
 (*
h
)->
u£r
;

282 *
c›y
 = 
	`˛ib_mem_Æloc
 (
ksz
);

283 
	`˛ib_mem˝y_Á°
 (
c›y
, 
key
, 
ksz
);

284 
	`hash_£t_mem
 (*
h
, 
c›y
, 
v
);

285 
	}
}

288 
	#hash_£t1_mem
(
h
,
key
Ë
	`hash_£t3
 ((h), 
	`poöãr_to_uw‹d
 (key), 0, 0)

	)

291 
	#hash_un£t_mem
(
h
,
key
Ë((hË
	`_hash_un£t
 ((h), 
	`poöãr_to_uw‹d
 (key),0))

	)

294 
Æways_ölöe
 

295 
	$hash_un£t_mem_‰ì
 (
uw‹d
 ** 
h
, *
key
)

297 
hash_∑ú_t
 *
hp
 = 
	`hash_gë_∑ú_mem
 (*
h
, 
key
);

298 i‡(
	`PREDICT_TRUE
 (
hp
 !
NULL
))

300 
key
 = 
	`uw‹d_to_poöãr
 (
hp
->key, *);

301 
	`hash_un£t_mem
 (*
h
, 
key
);

302 
	`˛ib_mem_‰ì
 (
key
);

304 
	}
}

307 *
_hash_‰ì
 (*
v
);

310 
	#hash_‰ì
(
h
Ë(hË
	`_hash_‰ì
 ((h))

	)

312 
˛ib_îr‹_t
 *
hash_vÆid©e
 (*
v
);

315 
Æways_ölöe
 
uw‹d


316 
	$hash_vÆue_byãs
 (
hash_t
 * 
h
)

318 
hash_∑ú_t
 *
p
;

319  ( (
p
->
vÆue
[0]Ë<< 
h
->
log2_∑ú_size
Ë-  (p->
key
);

320 
	}
}

323 
Æways_ölöe
 
uw‹d


324 
	$hash_∑ú_log2_byãs
 (
hash_t
 * 
h
)

326 
uw‹d
 
log2_byãs
 = 
h
->
log2_∑ú_size
;

327 
	`ASSERT
 (
	`BITS
 (
hash_∑ú_t
) == 32 || BITS (hash_pair_t) == 64);

328 i‡(
	`BITS
 (
hash_∑ú_t
) == 32)

329 
log2_byãs
 += 2;

330 i‡(
	`BITS
 (
hash_∑ú_t
) == 64)

331 
log2_byãs
 += 3;

332  
log2_byãs
;

333 
	}
}

336 
Æways_ölöe
 
uw‹d


337 
	$hash_∑ú_byãs
 (
hash_t
 * 
h
)

339  (
uw‹d
Ë1 << 
	`hash_∑ú_log2_byãs
 (
h
);

340 
	}
}

343 
Æways_ölöe
 *

344 
	$hash_f‹w¨d1
 (
hash_t
 * 
h
, *
v
)

346  (
u8
 *Ë
v
 + 
	`hash_∑ú_byãs
 (
h
);

347 
	}
}

350 
Æways_ölöe
 *

351 
	$hash_f‹w¨d
 (
hash_t
 * 
h
, *
v
, 
uw‹d
 
n
)

353  (
u8
 *Ë
v
 + ((
n
 *  (
hash_∑ú_t
)Ë<< 
h
->
log2_∑ú_size
);

354 
	}
}

373 
	#hash_f‹óch_∑ú
(
p
,
v
,
body
) \

375 
__œbñ__
 
_hash_f‹óch_d⁄e
; \

376 
hash_t
 * 
_h
 = 
	`hash_hódî
 (
v
); \

377 * 
_p
; \

378 
hash_∑ú_t
 * 
_q
, * 
_q_íd
; \

379 
uw‹d
 
_i
, 
_i1
, 
_id
, 
_∑ú_ö¸emít
; \

381 
_p
 = (
v
); \

382 
_i
 = 0; \

383 
_∑ú_ö¸emít
 = 1; \

384 i‡((
v
)) \

385 
_∑ú_ö¸emít
 = 1 << 
_h
->
log2_∑ú_size
; \

386 
_i
 < 
	`hash_ˇ∑côy
 (
v
)) \

388 
_id
 = 
_h
->
is_u£r
[
_i
 / 
	`BITS
 (_h->is_user[0])]; \

389 
_i1
 = 
_i
 + 
	`BITS
 (
_h
->
is_u£r
[0]); \

392 i‡(
_id
 & 1) \

394 
_q
 = 
_p
; \

395 
_q_íd
 = 
_q
 + 
_∑ú_ö¸emít
; \

399 
hash_∑ú_ödúe˘_t
 * 
_pi
 = 
_p
; \

400 
_q
 = 
_pi
->
∑ús
; \

401 i‡(
_h
->
log2_∑ú_size
 > 0) \

402 
_q_íd
 = 
	`hash_f‹w¨d
 (
_h
, 
_q
, 
	`ödúe˘_∑ú_gë_Àn
 (
_pi
)); \

404 
_q_íd
 = 
	`vec_íd
 (
_q
); \

409 
_q
 < 
_q_íd
) \

411 
uw‹d
 
_bªak_ö_body
 = 1; \

412 (
p
Ë
_q
; \

414 
body
; \

415 
_bªak_ö_body
 = 0; \

417 i‡(
_bªak_ö_body
) \

418 
_hash_f‹óch_d⁄e
; \

419 
_q
 +
_∑ú_ö¸emít
; \

422 
_p
 = (
hash_∑ú_t
 *)_∞+ 
_∑ú_ö¸emít
; \

423 
_id
 = _id / 2; \

424 
_i
++; \

425 } 
_i
 < 
_i1
); \

427 
_hash_f‹óch_d⁄e
: \

430 } 0)

	)

442 
	#hash_f‹óch
(
key_v¨
,
vÆue_v¨
,
h
,
body
) \

444 
hash_∑ú_t
 * 
_r
; \

445 
	`hash_f‹óch_∑ú
 (
_r
, (
h
), { \

446 (
key_v¨
Ë(
	`__ty≥of__
 (key_v¨)Ë
_r
->
key
; \

447 (
vÆue_v¨
Ë(
	`__ty≥of__
 (vÆue_v¨)Ë
_r
->
vÆue
[0]; \

448 dÿ{ 
body
; } 0); \

450 } 0)

	)

461 
	#hash_f‹óch_mem
(
key_v¨
,
vÆue_v¨
,
h
,
body
) \

463 
hash_∑ú_t
 * 
_r
; \

464 
	`hash_f‹óch_∑ú
 (
_r
, (
h
), { \

465 (
key_v¨
Ë(
	`__ty≥of__
 (key_v¨)Ë
	`uw‹d_to_poöãr
 (
_r
->
key
, *); \

466 (
vÆue_v¨
Ë(
	`__ty≥of__
 (vÆue_v¨)Ë
_r
->
vÆue
[0]; \

467 dÿ{ 
body
; } 0); \

469 } 0)

	)

478 
uw‹d
 
	mi
, 
	mj
, 
	mf
;

479 } 
	thash_√xt_t
;

481 
hash_∑ú_t
 *
hash_√xt
 (*
v
, 
hash_√xt_t
 * 
hn
);

483 *
_hash_¸óã
 (
uw‹d
 
ñts
, 
hash_t
 * 
h
);

485 
Æways_ölöe
 

486 
	$hash_£t_vÆue_byãs
 (
hash_t
 * 
h
, 
uw‹d
 
vÆue_byãs
)

488 
hash_∑ú_t
 *
p
;

489 
h
->
log2_∑ú_size
 =

490 
	`max_log2
 (( (
p
->
key
Ë+ 
vÆue_byãs
 +  (p->key) -

491 1Ë/  (
p
->
key
));

492 
	}
}

494 
	#hash_¸óã2
(
_ñts
,
_u£r
,
_vÆue_byãs
, \

495 
_key_sum
,
_key_equÆ
, \

496 
_f‹m©_∑ú
,
_f‹m©_∑ú_¨g
) \

498 
hash_t
 
_h
; \

499 
	`˛ib_mem£t
 (&
_h
, 0,  (_h)); \

500 
_h
.
u£r
 = (
_u£r
); \

501 
_h
.
key_sum
 = (
hash_key_sum_fun˘i⁄_t
 *Ë(
_key_sum
); \

502 
_h
.
key_equÆ
 = (
_key_equÆ
); \

503 
	`hash_£t_vÆue_byãs
 (&
_h
, (
_vÆue_byãs
)); \

504 
_h
.
f‹m©_∑ú
 = (
f‹m©_fun˘i⁄_t
 *Ë(
_f‹m©_∑ú
); \

505 
_h
.
f‹m©_∑ú_¨g
 = (
_f‹m©_∑ú_¨g
); \

506 
	`_hash_¸óã
 ((
_ñts
), &
_h
); \

507 })

	)

513 
	#hash_mix_°ï
(
a
,
b
,
c
,
s0
,
s1
,
s2
) \

515 (
a
Ë-(
b
Ë+ (
c
); (aË^(cË>> (
s0
); \

516 (
b
Ë-(
c
Ë+ (
a
); (bË^◊Ë<< (
s1
); \

517 (
c
Ë-(
a
Ë+ (
b
); (cË^(bË>> (
s2
); \

518 } 0)

	)

520 
	#hash_mix32_°ï_1
(
a
,
b
,
c
Ë
	`hash_mix_°ï
◊,b,c,13,8,13)

	)

521 
	#hash_mix32_°ï_2
(
a
,
b
,
c
Ë
	`hash_mix_°ï
◊,b,c,12,16,5)

	)

522 
	#hash_mix32_°ï_3
(
a
,
b
,
c
Ë
	`hash_mix_°ï
◊,b,c,3,10,15)

	)

524 
	#hash_mix64_°ï_1
(
a
,
b
,
c
Ë
	`hash_mix_°ï
◊,b,c,43,9,8)

	)

525 
	#hash_mix64_°ï_2
(
a
,
b
,
c
Ë
	`hash_mix_°ï
◊,b,c,38,23,5)

	)

526 
	#hash_mix64_°ï_3
(
a
,
b
,
c
Ë
	`hash_mix_°ï
◊,b,c,35,49,11)

	)

527 
	#hash_mix64_°ï_4
(
a
,
b
,
c
Ë
	`hash_mix_°ï
◊,b,c,12,18,22)

	)

531 
	#hash_mix64
(
a0
,
b0
,
c0
) \

533 
	`hash_mix64_°ï_1
 (
a0
, 
b0
, 
c0
); \

534 
	`hash_mix64_°ï_2
 (
a0
, 
b0
, 
c0
); \

535 
	`hash_mix64_°ï_3
 (
a0
, 
b0
, 
c0
); \

536 
	`hash_mix64_°ï_4
 (
a0
, 
b0
, 
c0
); \

538 

	)

539 
	#hash_mix32
(
a0
,
b0
,
c0
) \

541 
	`hash_mix32_°ï_1
 (
a0
, 
b0
, 
c0
); \

542 
	`hash_mix32_°ï_2
 (
a0
, 
b0
, 
c0
); \

543 
	`hash_mix32_°ï_3
 (
a0
, 
b0
, 
c0
); \

545 

	)

548 
Æways_ölöe
 
uw‹d


549 
	$hash32_rŸ©e_À·
 (
u32
 
x
, u32 
i
)

551  (
x
 << 
i
Ë| (x >> (
	`BITS
 (i) - i));

552 
	}
}

554 
	#hash_v3_mix32
(
a
,
b
,
c
) \

556 (
a
Ë-(
c
); (aË^
	`hash32_rŸ©e_À·
 ((c), 4); (cË+(
b
); \

557 (
b
Ë-(
a
); (bË^
	`hash32_rŸ©e_À·
 (◊), 6); (aË+(
c
); \

558 (
c
Ë-(
b
); (cË^
	`hash32_rŸ©e_À·
 ((b), 8); (bË+(
a
); \

559 (
a
Ë-(
c
); (aË^
	`hash32_rŸ©e_À·
 ((c),16); (cË+(
b
); \

560 (
b
Ë-(
a
); (bË^
	`hash32_rŸ©e_À·
 (◊),19); (aË+(
c
); \

561 (
c
Ë-(
b
); (cË^
	`hash32_rŸ©e_À·
 ((b), 4); (bË+(
a
); \

562 } 0)

	)

564 
	#hash_v3_föÆize32
(
a
,
b
,
c
) \

566 (
c
Ë^(
b
); (cË-
	`hash32_rŸ©e_À·
 ((b), 14); \

567 (
a
Ë^(
c
); (aË-
	`hash32_rŸ©e_À·
 ((c), 11); \

568 (
b
Ë^(
a
); (bË-
	`hash32_rŸ©e_À·
 ((a), 25); \

569 (
c
Ë^(
b
); (cË-
	`hash32_rŸ©e_À·
 ((b), 16); \

570 (
a
Ë^(
c
); (aË-
	`hash32_rŸ©e_À·
 ((c), 4); \

571 (
b
Ë^(
a
); (bË-
	`hash32_rŸ©e_À·
 ((a), 14); \

572 (
c
Ë^(
b
); (cË-
	`hash32_rŸ©e_À·
 ((b), 24); \

573 } 0)

	)

577 
	#hash_v3_mix32_°ï1
(
a
,
b
,
c
) \

579 (
a
Ë-(
c
); (aË^
	`hash32_rŸ©e_À·
 ((c), 4); (cË+(
b
); \

580 (
b
Ë-(
a
); (bË^
	`hash32_rŸ©e_À·
 (◊), 6); (aË+(
c
); \

581 } 0)

	)

583 
	#hash_v3_mix32_°ï2
(
a
,
b
,
c
) \

585 (
c
Ë-(
b
); (cË^
	`hash32_rŸ©e_À·
 ((b), 8); (bË+(
a
); \

586 (
a
Ë-(
c
); (aË^
	`hash32_rŸ©e_À·
 ((c),16); (cË+(
b
); \

587 } 0)

	)

589 
	#hash_v3_mix32_°ï3
(
a
,
b
,
c
) \

591 (
b
Ë-(
a
); (bË^
	`hash32_rŸ©e_À·
 (◊),19); (aË+(
c
); \

592 (
c
Ë-(
b
); (cË^
	`hash32_rŸ©e_À·
 ((b), 4); (bË+(
a
); \

593 } 0)

	)

595 
	#hash_v3_föÆize32_°ï1
(
a
,
b
,
c
) \

597 (
c
Ë^(
b
); (cË-
	`hash32_rŸ©e_À·
 ((b), 14); \

598 (
a
Ë^(
c
); (aË-
	`hash32_rŸ©e_À·
 ((c), 11); \

599 } 0)

	)

601 
	#hash_v3_föÆize32_°ï2
(
a
,
b
,
c
) \

603 (
b
Ë^(
a
); (bË-
	`hash32_rŸ©e_À·
 ((a), 25); \

604 (
c
Ë^(
b
); (cË-
	`hash32_rŸ©e_À·
 ((b), 16); \

605 } 0)

	)

607 
	#hash_v3_föÆize32_°ï3
(
a
,
b
,
c
) \

609 (
a
Ë^(
c
); (aË-
	`hash32_rŸ©e_À·
 ((c), 4); \

610 (
b
Ë^(
a
); (bË-
	`hash32_rŸ©e_À·
 ((a), 14); \

611 (
c
Ë^(
b
); (cË-
	`hash32_rŸ©e_À·
 ((b), 24); \

612 } 0)

	)

615 
	#hash_v3_mix_°ï_1_u32x
(
a
,
b
,
c
) \

617 (
a
Ë-(
c
); (aË^
	`u32x_úŸ©e_À·
 ((c), 4); (cË+(
b
); \

618 (
b
Ë-(
a
); (bË^
	`u32x_úŸ©e_À·
 (◊), 6); (aË+(
c
); \

619 (
c
Ë-(
b
); (cË^
	`u32x_úŸ©e_À·
 ((b), 8); (bË+(
a
); \

620 } 0)

	)

622 
	#hash_v3_mix_°ï_2_u32x
(
a
,
b
,
c
) \

624 (
a
Ë-(
c
); (aË^
	`u32x_úŸ©e_À·
 ((c),16); (cË+(
b
); \

625 (
b
Ë-(
a
); (bË^
	`u32x_úŸ©e_À·
 (◊),19); (aË+(
c
); \

626 (
c
Ë-(
b
); (cË^
	`u32x_úŸ©e_À·
 ((b), 4); (bË+(
a
); \

627 } 0)

	)

629 
	#hash_v3_föÆize_°ï_1_u32x
(
a
,
b
,
c
) \

631 (
c
Ë^(
b
); (cË-
	`u32x_úŸ©e_À·
 ((b), 14); \

632 (
a
Ë^(
c
); (aË-
	`u32x_úŸ©e_À·
 ((c), 11); \

633 (
b
Ë^(
a
); (bË-
	`u32x_úŸ©e_À·
 ((a), 25); \

634 } 0)

	)

636 
	#hash_v3_föÆize_°ï_2_u32x
(
a
,
b
,
c
) \

638 (
c
Ë^(
b
); (cË-
	`u32x_úŸ©e_À·
 ((b), 16); \

639 (
a
Ë^(
c
); (aË-
	`u32x_úŸ©e_À·
 ((c), 4); \

640 (
b
Ë^(
a
); (bË-
	`u32x_úŸ©e_À·
 ((a), 14); \

641 (
c
Ë^(
b
); (cË-
	`u32x_úŸ©e_À·
 ((b), 24); \

642 } 0)

	)

644 
	#hash_v3_mix_u32x
(
a
,
b
,
c
) \

646 
	`hash_v3_mix_°ï_1_u32x
(
a
,
b
,
c
); \

647 
	`hash_v3_mix_°ï_2_u32x
(
a
,
b
,
c
); \

648 } 0)

	)

650 
	#hash_v3_föÆize_u32x
(
a
,
b
,
c
) \

652 
	`hash_v3_föÆize_°ï_1_u32x
(
a
,
b
,
c
); \

653 
	`hash_v3_föÆize_°ï_2_u32x
(
a
,
b
,
c
); \

654 } 0)

	)

656 
uw‹d
 
hash_mem‹y
 (*
p
, 
w‹d
 
n_byãs
, uw‹d 
°©e
);

658 
uw‹d
 
mem_key_sum
 (
hash_t
 * 
h
, uw‹d 
key
);

659 
uw‹d
 
mem_key_equÆ
 (
hash_t
 * 
h
, uw‹d 
key1
, uw‹d 
key2
);

661 
	#hash_¸óã_mem
(
ñts
,
key_byãs
,
vÆue_byãs
) \

662 
	`hash_¸óã2
((
ñts
),(
key_byãs
),(
vÆue_byãs
),
mem_key_sum
,
mem_key_equÆ
,0,0)

	)

664 
uw‹d
 
vec_key_sum
 (
hash_t
 * 
h
, uw‹d 
key
);

665 
uw‹d
 
vec_key_equÆ
 (
hash_t
 * 
h
, uw‹d 
key1
, uw‹d 
key2
);

666 
u8
 *
vec_key_f‹m©_∑ú
 (u8 * 
s
, 
va_li°
 * 
¨gs
);

668 
	#hash_¸óã_vec
(
ñts
,
key_byãs
,
vÆue_byãs
) \

669 
	`hash_¸óã2
((
ñts
),(
key_byãs
),(
vÆue_byãs
),\

670 
vec_key_sum
,
vec_key_equÆ
,
vec_key_f‹m©_∑ú
,0)

	)

672 
uw‹d
 
°rög_key_sum
 (
hash_t
 * 
h
, uw‹d 
key
);

673 
uw‹d
 
°rög_key_equÆ
 (
hash_t
 * 
h
, uw‹d 
key1
, uw‹d 
key2
);

674 
u8
 *
°rög_key_f‹m©_∑ú
 (u8 * 
s
, 
va_li°
 * 
¨gs
);

684 
	#hash_¸óã_shmem
(
ñts
,
key_byãs
,
vÆue_byãs
) \

685 
	`hash_¸óã2
((
ñts
),(
key_byãs
),(
vÆue_byãs
), \

686 (
hash_key_sum_fun˘i⁄_t
 *Ë
KEY_FUNC_MEM
, \

687 (
hash_key_equÆ_fun˘i⁄_t
 *)
KEY_FUNC_MEM
, \

688 0, 0)

	)

690 
	#hash_¸óã_°rög
(
ñts
,
vÆue_byãs
) \

691 
	`hash_¸óã2
((
ñts
),0,(
vÆue_byãs
), \

692 (
hash_key_sum_fun˘i⁄_t
 *Ë
KEY_FUNC_STRING
, \

693 (
hash_key_equÆ_fun˘i⁄_t
 *)
KEY_FUNC_STRING
, \

694 0, 0)

	)

696 
	#hash_¸óã
(
ñts
,
vÆue_byãs
) \

697 
	`hash_¸óã2
((
ñts
),0,(
vÆue_byãs
), \

698 (
hash_key_sum_fun˘i⁄_t
 *Ë
KEY_FUNC_NONE
, \

699 (
hash_key_equÆ_fun˘i⁄_t
 *Ë
KEY_FUNC_NONE
, \

700 0,0)

	)

702 
	#hash_¸óã_uw‹d
(
ñts
,
vÆue_byãs
) \

703 
	`hash_¸óã2
((
ñts
),0,(
vÆue_byãs
), \

704 (
hash_key_sum_fun˘i⁄_t
 *Ë
KEY_FUNC_POINTER_UWORD
, \

705 (
hash_key_equÆ_fun˘i⁄_t
 *Ë
KEY_FUNC_POINTER_UWORD
, \

706 0,0)

	)

708 
	#hash_¸óã_u32
(
ñts
,
vÆue_byãs
) \

709 
	`hash_¸óã2
((
ñts
),0,(
vÆue_byãs
), \

710 (
hash_key_sum_fun˘i⁄_t
 *Ë
KEY_FUNC_POINTER_U32
, \

711 (
hash_key_equÆ_fun˘i⁄_t
 *Ë
KEY_FUNC_POINTER_U32
, \

712 0,0)

	)

714 
u8
 *
f‹m©_hash
 (u8 * 
s
, 
va_li°
 * 
va
);

718 
unf‹m©_fun˘i⁄_t
 
	gunf‹m©_hash_vec_°rög
;

719 
unf‹m©_fun˘i⁄_t
 
	gunf‹m©_hash_°rög
;

722 
ã°_hash_maö
 (
unf‹m©_öput_t
 * 
öput
);

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

50 #i‚de‡
__îr‹_t_deföed


51 
	#__îr‹_t_deföed
 1

	)

52 
	tîr‹_t
;

57 
__END_DECLS


	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/vppinfra/clib.h

38 #i‚de‡
ö˛uded_˛ib_h


39 
	#ö˛uded_˛ib_h


	)

41 
	~<vµö‰a/c⁄fig.h
>

44 #i‡! 
deföed
 (
CLIB_STANDALONE
Ë&& ! deföed (
CLIB_LINUX_KERNEL
)

45 
	#CLIB_UNIX


	)

48 
	~<vµö‰a/ty≥s.h
>

49 
	~<vµö‰a/©omics.h
>

53 #i‚de‡
CLIB_DEBUG


54 
	#CLIB_DEBUG
 0

	)

57 #i‚de‡
NULL


58 
	#NULL
 ((*Ë0)

	)

61 
	#BITS
(
x
Ë(8*(x))

	)

62 
	#ARRAY_LEN
(
x
Ë( (x)/ (x[0]))

	)

64 
	#_STRUCT_FIELD
(
t
,
f
Ë((— *Ë0)->f)

	)

65 
	#STRUCT_OFFSET_OF
(
t
,
f
Ë((
uw‹d
Ë& 
	`_STRUCT_FIELD
 (t, f))

	)

66 
	#STRUCT_BIT_OFFSET_OF
(
t
,
f
Ë(
	`BITS
(
u8
Ë* (
uw‹d
Ë& 
	`_STRUCT_FIELD
 (t, f))

	)

67 
	#STRUCT_SIZE_OF
(
t
,
f
Ë( (
	`_STRUCT_FIELD
 (t, f)))

	)

68 
	#STRUCT_BITS_OF
(
t
,
f
Ë(
	`BITS
 (
	`_STRUCT_FIELD
 (t, f)))

	)

69 
	#STRUCT_ARRAY_LEN
(
t
,
f
Ë
	`ARRAY_LEN
 (
	`_STRUCT_FIELD
 (t, f))

	)

70 
	#STRUCT_MARK
(
m¨k
Ë
u8
 m¨k[0]

	)

71 
	#STRUCT_MARK_PTR
(
v
, 
f
Ë&(v)->
	)
f

74 
	#STRUCT_STRIDE_OF
(
t
,
f
) \

75 –((
uw‹d
Ë& (((
t
 *Ë0)[1].
f
)) \

76 - ((
uw‹d
Ë& (((
t
 *Ë0)[0].
f
)))

	)

78 
	#STRUCT_OFFSET_OF_VAR
(
v
,
f
Ë((
uw‹d
Ë(&(v)->fË- (uw‹dË(v))

	)

81 
	#CLIB_PACKED
(
x
Ëx 
	`__©åibuã__
 ((
∑cked
))

	)

82 
	#CLIB_UNUSED
(
x
Ëx 
	`__©åibuã__
 ((
unu£d
))

	)

85 
	#CLIB_ALIGN_MARK
(
«me
, 
Æignmít
Ë
u8
Çame[0] 
	`__©åibuã__
((
	`Æig√d
◊lignmít)))

	)

88 
	#CLIB_STRING_MACRO
(
x
Ë#x

	)

90 
	#__˛ib_unu£d
 
	`__©åibuã__
 ((
unu£d
))

	)

91 
	#__˛ib_wók
 
	`__©åibuã__
 ((
wók
))

	)

92 
	#__˛ib_∑cked
 
	`__©åibuã__
 ((
∑cked
))

	)

93 
	#__˛ib_c⁄°ru˘‹
 
	`__©åibuã__
 ((
c⁄°ru˘‹
))

	)

95 
	#√vî_ölöe
 
	`__©åibuã__
 ((
__noölöe__
))

	)

97 #i‡
CLIB_DEBUG
 > 0

98 
	#Æways_ölöe
 
ölöe


	)

99 
	#°©ic_Æways_ölöe
 
ölöe


	)

101 
	#Æways_ölöe
 
ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

102 
	#°©ic_Æways_ölöe
 
ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

108 
	#CLIB_PAD_FROM_TO
(
‰om
,
to
Ë
u8
 
∑d_
##‰om[—oË- (‰om)]

	)

111 
	#PREDICT_FALSE
(
x
Ë
	`__buûtö_ex≥˘
((x),0)

	)

112 
	#PREDICT_TRUE
(
x
Ë
	`__buûtö_ex≥˘
((x),1)

	)

115 
	#CLIB_MEMORY_BARRIER
(Ë
	`__sync_synchr⁄ize
 ()

	)

117 #i‡
__x86_64__


118 
	#CLIB_MEMORY_STORE_BARRIER
(Ë
	`__buûtö_ü32_s„n˚
 ()

	)

120 
	#CLIB_MEMORY_STORE_BARRIER
(Ë
	`__sync_synchr⁄ize
 ()

	)

124 
	#INIT_FUNCTION
(
de˛
) \

125 
de˛
 
	`__©åibuã
 ((
c⁄°ru˘‹
)); \

126 
de˛


	)

129 
	#EXIT_FUNCTION
(
de˛
) \

130 
de˛
 
	`__©åibuã
 ((
de°ru˘‹
)); \

131 
de˛


	)

134 #i‡
uw‹d_bôs
 == 64

135 
	#cou¡_Àadög_zîos
(
x
Ë
	`__buûtö_˛zŒ
 (x)

	)

136 
	#cou¡_åaûög_zîos
(
x
Ë
	`__buûtö_˘zŒ
 (x)

	)

138 
	#cou¡_Àadög_zîos
(
x
Ë
	`__buûtö_˛zl
 (x)

	)

139 
	#cou¡_åaûög_zîos
(
x
Ë
	`__buûtö_˘zl
 (x)

	)

142 #i‡
deföed
 (
cou¡_Àadög_zîos
)

143 
Æways_ölöe
 
uw‹d


144 
	$mö_log2
 (
uw‹d
 
x
)

146 
uw‹d
 
n
;

147 
n
 = 
	`cou¡_Àadög_zîos
 (
x
);

148  
	`BITS
 (
uw‹d
Ë- 
n
 - 1;

149 
	}
}

151 
Æways_ölöe
 
uw‹d


152 
	$mö_log2
 (
uw‹d
 
x
)

154 
uw‹d
 
a
 = 
x
, 
b
 = 
	`BITS
 (uw‹dË/ 2, 
c
 = 0, 
r
 = 0;

157 
	#_
 \

159 
c
 = 
a
 >> 
b
; \

160 i‡(
c
Ë
a
 = c; \

161 i‡(
c
Ë
r
 +
b
; \

162 
b
 /= 2; \

163 }

	)

165 i‡(
	`BITS
 (
uw‹d
) > 32)

166 
_
;

167 
_
;

168 
_
;

169 
_
;

170 #unde‡
_


173 i‡(
	`BITS
 (
uw‹d
) > 32)

175 c⁄° 
u64
 
èbÀ
 = 0x3333333322221104LL;

176 
uw‹d
 
t
 = (
èbÀ
 >> (4 * 
a
)) & 0xf;

177 
r
 = 
t
 < 4 ?Ñ +Å : ~0;

181 c⁄° 
u32
 
èbÀ
 = 0x22221104;

182 
uw‹d
 
t
 = (
a
 & 8Ë? 3 : ((
èbÀ
 >> (4 *á)) & 0xf);

183 
r
 = 
t
 < 4 ?Ñ +Å : ~0;

186  
r
;

187 
	}
}

190 
Æways_ölöe
 
uw‹d


191 
	$max_log2
 (
uw‹d
 
x
)

193 
uw‹d
 
l
 = 
	`mö_log2
 (
x
);

194 i‡(
x
 > ((
uw‹d
Ë1 << 
l
))

195 
l
++;

196  
l
;

197 
	}
}

199 
Æways_ölöe
 
u64


200 
	$mö_log2_u64
 (
u64
 
x
)

202 i‡(
	`BITS
 (
uw‹d
) == 64)

203  
	`mö_log2
 (
x
);

206 
uw‹d
 
l
, 
y
;

207 
y
 = 
x
;

208 
l
 = 0;

209 i‡(
y
 == 0)

211 
l
 += 32;

212 
x
 >>= 32;

214 
l
 +
	`mö_log2
 (
x
);

215  
l
;

217 
	}
}

219 
Æways_ölöe
 
uw‹d


220 
	$pow2_mask
 (
uw‹d
 
x
)

222  ((
uw‹d
Ë1 << 
x
) - (uword) 1;

223 
	}
}

225 
Æways_ölöe
 
uw‹d


226 
	$max_pow2
 (
uw‹d
 
x
)

228 
w‹d
 
y
 = (w‹dË1 << 
	`mö_log2
 (
x
);

229 i‡(
x
 > 
y
)

230 
y
 *= 2;

231  
y
;

232 
	}
}

234 
Æways_ölöe
 
uw‹d


235 
	$is_pow2
 (
uw‹d
 
x
)

237  0 =(
x
 & (x - 1));

238 
	}
}

240 
Æways_ölöe
 
uw‹d


241 
	$round_pow2
 (
uw‹d
 
x
, uw‹d 
pow2
)

243  (
x
 + 
pow2
 - 1) & ~(pow2 - 1);

244 
	}
}

246 
Æways_ölöe
 
u64


247 
	$round_pow2_u64
 (
u64
 
x
, u64 
pow2
)

249  (
x
 + 
pow2
 - 1) & ~(pow2 - 1);

250 
	}
}

252 
Æways_ölöe
 
uw‹d


253 
	$fú°_£t
 (
uw‹d
 
x
)

255  
x
 & -x;

256 
	}
}

258 
Æways_ölöe
 
uw‹d


259 
	$log2_fú°_£t
 (
uw‹d
 
x
)

261 
uw‹d
 
ªsu…
;

262 #ifde‡
cou¡_åaûög_zîos


263 
ªsu…
 = 
	`cou¡_åaûög_zîos
 (
x
);

265 
ªsu…
 = 
	`mö_log2
 (
	`fú°_£t
 (
x
));

267  
ªsu…
;

268 
	}
}

270 
Æways_ölöe
 
f64


271 
	$Êt_round_down
 (
f64
 
x
)

273  (Ë
x
;

274 
	}
}

276 
Æways_ölöe
 
w‹d


277 
	$Êt_round_√¨e°
 (
f64
 
x
)

279  (
w‹d
Ë(
x
 + .5);

280 
	}
}

282 
Æways_ölöe
 
f64


283 
	$Êt_round_to_mu…ùÀ
 (
f64
 
x
, f64 
f
)

285  
f
 * 
	`Êt_round_√¨e°
 (
x
 / f);

286 
	}
}

288 
	#˛ib_max
(
x
,
y
) \

290 
	`__ty≥of__
 (
x
Ë
_x
 = (x); \

291 
	`__ty≥of__
 (
y
Ë
_y
 = (y); \

292 
_x
 > 
_y
 ? _x : _y; \

293 })

	)

295 
	#˛ib_mö
(
x
,
y
) \

297 
	`__ty≥of__
 (
x
Ë
_x
 = (x); \

298 
	`__ty≥of__
 (
y
Ë
_y
 = (y); \

299 
_x
 < 
_y
 ? _x : _y; \

300 })

	)

302 
	#˛ib_abs
(
x
) \

304 
	`__ty≥of__
 (
x
Ë
_x
 = (x); \

305 
_x
 < 0 ? -_x : _x; \

306 })

	)

309 #i‚de‡
CLIB_UNIX


310 
˛ib_°™dÆ⁄e_öô
 (*
mem‹y
, 
uw‹d
 
mem‹y_byãs
);

312 
qs‹t
 (*
ba£
, 
uw‹d
 
n
, uw‹d 
size
,

317 
uw‹d


318 
	`˛ib_backåa˚
 (
uw‹d
 * 
ˇŒîs
, uw‹d 
max_ˇŒîs
, uw‹d 
n_‰ames_to_skù
);

	@/usr/include/vppinfra/clib_error.h

16 #i‚de‡
ö˛uded_˛ib_îr‹_h


17 
	#ö˛uded_˛ib_îr‹_h


	)

19 
	~<vµö‰a/ty≥s.h
>

24 
u8
 *
	mwh©
;

27 c⁄° 
u8
 *
	mwhîe
;

29 
uw‹d
 
	mÊags
;

32 
™y
 
	mcode
;

33 } 
	t˛ib_îr‹_t
;

	@/usr/include/vppinfra/error_bootstrap.h

38 #i‚de‡
ö˛uded_îr‹_boŸ°øp_h


39 
	#ö˛uded_îr‹_boŸ°øp_h


	)

44 
	~<vµö‰a/˛ib.h
>

48 
	mCLIB_ERROR_FATAL
 = 1 << 0,

49 
	mCLIB_ERROR_ABORT
 = 1 << 1,

50 
	mCLIB_ERROR_WARNING
 = 1 << 2,

51 
	mCLIB_ERROR_ERRNO_VALID
 = 1 << 16,

52 
	mCLIB_ERROR_NO_RATE_LIMIT
 = 1 << 17,

56 
	#˛ib_îr‹_fun˘i⁄
 ((*Ë
__FUNCTION__
)

	)

58 #i‚de‡
CLIB_ASSERT_ENABLE


59 
	#CLIB_ASSERT_ENABLE
 (
CLIB_DEBUG
 > 0)

	)

65 
_˛ib_îr‹
 (
code
,

66 *
fun˘i⁄_«me
,

67 
uw‹d
 
löe_numbî
, *
f‹m©
, ...);

69 
	#ASSERT
(
åuth
) \

71 i‡(
CLIB_ASSERT_ENABLE
 && ! (
åuth
)) \

73 
	`_˛ib_îr‹
 (
CLIB_ERROR_ABORT
, 0, 0, \

75 
__FILE__
, \

76 (
uw‹d
Ë
__LINE__
, \

77 
˛ib_îr‹_fun˘i⁄
, \

80 } 0)

	)

82 #i‡
deföed
(
__˛™g__
)

83 
	#STATIC_ASSERT
(
åuth
,...)

	)

85 
	#STATIC_ASSERT
(
åuth
,...Ë
	`_Sètic_as£π
—ruth, 
__VA_ARGS__
)

	)

88 
	#STATIC_ASSERT_SIZEOF
(
d
, 
s
) \

89 
	`STATIC_ASSERT
 ( (
d
Ë=
s
, "Sizêo‡" #d " mu° bê" #†" byãs")

	)

91 
	#STATIC_ASSERT_SIZEOF_ELT
(
d
, 
e
, 
s
) \

92 
	`STATIC_ASSERT
 ( (((
d
 *)0)->
e
Ë=
s
, "Sizêo‡" #d "." #ê" mu° bê" #†" byãs")

	)

94 
	#STATIC_ASSERT_OFFSET_OF
(
s
, 
e
, 
o
) \

95 
	`STATIC_ASSERT
 (
	`STRUCT_OFFSET_OF
(
s
,
e
Ë=
o
, "Off£ào‡" #†"." #ê" mu° bê" #o)

	)

97 
	#STATIC_ASSERT_FITS_IN
(
s
, 
e
, 
o
) \

98 
	`STATIC_ASSERT
 (
	`STRUCT_OFFSET_OF
(
s
,
e
Ë<(
o
 - (((s *)0)->e)), \

99 #†"." #ê" d€†nŸ fô i¡ÿ" #ÿ" byãs")

	)

102 
	#ASSERT_AND_PANIC
(
åuth
) \

104 i‡(
CLIB_ASSERT_ENABLE
 && ! (
åuth
)) \

105 
	`os_∑nic
 (); \

106 } 0)

	)

	@/usr/include/vppinfra/format.h

38 #i‚de‡
ö˛uded_f‹m©_h


39 
	#ö˛uded_f‹m©_h


	)

41 
	~<°d¨g.h
>

43 
	~<vµö‰a/˛ib.h
>

44 
	~<vµö‰a/vec.h
>

45 
	~<vµö‰a/îr‹.h
>

46 
	~<vµö‰a/°rög.h
>

48 
	gu8
 *(
	tf‹m©_fun˘i⁄_t
Ë(
	tu8
 * 
	ts
, 
	tva_li°
 * 
	t¨gs
);

50 
u8
 *
va_f‹m©
 (u8 * 
s
, c⁄° *
f‹m©
, 
va_li°
 * 
¨gs
);

51 
u8
 *
f‹m©
 (u8 * 
s
, const *format, ...);

53 #ifde‡
CLIB_UNIX


55 
	~<°dio.h
>

60 
	#FILE
 

	)

61 
	#°dö
 ((
FILE
 *Ë0)

	)

62 
	#°dout
 ((
FILE
 *Ë1)

	)

63 
	#°dîr
 ((
FILE
 *Ë2)

	)

67 
w‹d
 
va_ff‹m©
 (
FILE
 * 
f
, *
fmt
, 
va_li°
 * 
va
);

68 
w‹d
 
ff‹m©
 (
FILE
 * 
f
, *
fmt
, ...);

69 
w‹d
 
fdf‹m©
 (
fd
, *
fmt
, ...);

71 
Æways_ölöe
 
u32


72 
	$f‹m©_gë_ödít
 (
u8
 * 
s
)

74 
u32
 
ödít
 = 0;

75 
u8
 *
∆
;

77 i‡(!
s
)

78  
ödít
;

80 
∆
 = 
	`vec_íd
 (
s
) - 1;

81 
∆
 >
s
)

83 i‡(*
∆
-- == '\n')

85 
ödít
++;

87  
ödít
;

88 
	}
}

90 
	#_
(
f
Ë
u8
 * 
	`f
 (u8 * 
s
, 
va_li°
 * 
va
)

	)

93 
_
(
f‹m©_vec32
);

94 
_
(
f‹m©_vec_uw‹d
);

95 
_
(
f‹m©_ascii_byãs
);

96 
_
(
f‹m©_hex_byãs
);

97 
_
(
f‹m©_hex_byãs_no_wøp
);

98 
_
(
f‹m©_whôe_•a˚
);

99 
_
(
f‹m©_f64
);

100 
_
(
f‹m©_time_öãrvÆ
);

102 #ifde‡
CLIB_UNIX


104 
_
(
f‹m©_addªss_Ámûy
);

105 
_
(
f‹m©_unix_¨phrd
);

106 
_
(
f‹m©_unix_öãrÁ˚_Êags
);

107 
_
(
f‹m©_√tw‹k_addªss
);

108 
_
(
f‹m©_√tw‹k_¥Ÿocﬁ
);

109 
_
(
f‹m©_√tw‹k_p‹t
);

110 
_
(
f‹m©_sockaddr
);

111 
_
(
f‹m©_ù4_tos_byã
);

112 
_
(
f‹m©_ù4_∑ckë
);

113 
_
(
f‹m©_icmp4_ty≥_™d_code
);

114 
_
(
f‹m©_ëhî√t_∑ckë
);

115 
_
(
f‹m©_ho°«me
);

116 
_
(
f‹m©_timevÆ
);

117 
_
(
f‹m©_time_Êﬂt
);

118 
_
(
f‹m©_sig«l
);

119 
_
(
f‹m©_uc⁄ãxt_pc
);

120 
_
(
f‹m©_∑ge_m≠
);

123 #unde‡
_


127 
	s_unf‹m©_öput_t


130 
u8
 *
	mbuf„r
;

133 
uw‹d
 
	mödex
;

137 
uw‹d
 *
	mbuf„r_m¨ks
;

141 
uw‹d
 (*
fûl_buf„r
Ë(
_unf‹m©_öput_t
 * 
	mi
);

145 
	#UNFORMAT_END_OF_INPUT
 (~0)

	)

146 
	#UNFORMAT_MORE_INPUT
 0

	)

149 *
	mfûl_buf„r_¨g
;

150 } 
	tunf‹m©_öput_t
;

152 
Æways_ölöe
 

153 
	$unf‹m©_öô
 (
unf‹m©_öput_t
 * 
i
,

154 
	$uw‹d
 (*
fûl_buf„r
Ë(
unf‹m©_öput_t
 *),

155 *
fûl_buf„r_¨g
)

157 
	`˛ib_mem£t
 (
i
, 0,  (i[0]));

158 
i
->
fûl_buf„r
 = fill_buffer;

159 
i
->
fûl_buf„r_¨g
 = fill_buffer_arg;

160 
	}
}

162 
Æways_ölöe
 

163 
	$unf‹m©_‰ì
 (
unf‹m©_öput_t
 * 
i
)

165 
	`vec_‰ì
 (
i
->
buf„r
);

166 
	`vec_‰ì
 (
i
->
buf„r_m¨ks
);

167 
	`˛ib_mem£t
 (
i
, 0,  (i[0]));

168 
	}
}

170 
Æways_ölöe
 
uw‹d


171 
	$unf‹m©_check_öput
 (
unf‹m©_öput_t
 * 
i
)

174 
uw‹d
 
	`_unf‹m©_fûl_öput
 (
unf‹m©_öput_t
 * 
i
);

176 i‡(
i
->
ödex
 >
	`vec_Àn
 (i->
buf„r
Ë&& i->ödex !
UNFORMAT_END_OF_INPUT
)

177 
	`_unf‹m©_fûl_öput
 (
i
);

179  
i
->
ödex
;

180 
	}
}

183 
Æways_ölöe
 
uw‹d


184 
	$unf‹m©_is_eof
 (
unf‹m©_öput_t
 * 
öput
)

186  
	`unf‹m©_check_öput
 (
öput
Ë=
UNFORMAT_END_OF_INPUT
;

187 
	}
}

191 
Æways_ölöe
 
uw‹d


192 
	$unf‹m©_gë_öput
 (
unf‹m©_öput_t
 * 
öput
)

194 
uw‹d
 
i
 = 
	`unf‹m©_check_öput
 (
öput
);

195 i‡(
i
 < 
	`vec_Àn
 (
öput
->
buf„r
))

197 
öput
->
ödex
 = 
i
 + 1;

198 
i
 = 
öput
->
buf„r
[i];

200  
i
;

201 
	}
}

204 
Æways_ölöe
 

205 
	$unf‹m©_put_öput
 (
unf‹m©_öput_t
 * 
öput
)

207 
öput
->
ödex
 -= 1;

208 
	}
}

211 
Æways_ölöe
 
uw‹d


212 
	$unf‹m©_≥ek_öput
 (
unf‹m©_öput_t
 * 
öput
)

214 
uw‹d
 
c
 = 
	`unf‹m©_gë_öput
 (
öput
);

215 i‡(
c
 !
UNFORMAT_END_OF_INPUT
)

216 
	`unf‹m©_put_öput
 (
öput
);

217  
c
;

218 
	}
}

221 
Æways_ölöe
 

222 
	$unf‹m©_skù_löe
 (
unf‹m©_öput_t
 * 
i
)

224 
uw‹d
 
c
;

226 (
c
 = 
	`unf‹m©_gë_öput
 (
i
)Ë!
UNFORMAT_END_OF_INPUT
 && c != '\n')

228 
	}
}

230 
uw‹d
 
unf‹m©_skù_whôe_•a˚
 (
unf‹m©_öput_t
 * 
öput
);

233 
	$uw‹d
 (
	tunf‹m©_fun˘i⁄_t
Ë(
	tunf‹m©_öput_t
 * 
	töput
,

234 
	tva_li°
 * 
	t¨gs
);

239 
uw‹d
 
	`unf‹m©
 (
unf‹m©_öput_t
 * 
i
, c⁄° *
fmt
, ...);

243 
uw‹d
 
	`unf‹m©_u£r
 (
unf‹m©_öput_t
 * 
öput
, 
unf‹m©_fun˘i⁄_t
 * 
func
,

247 
uw‹d
 
	`va_unf‹m©
 (
unf‹m©_öput_t
 * 
i
, c⁄° *
fmt
, 
va_li°
 * 
¨gs
);

250 
	`unf‹m©_öô_comm™d_löe
 (
unf‹m©_öput_t
 * 
öput
, *
¨gv
[]);

253 
	`unf‹m©_öô_°rög
 (
unf‹m©_öput_t
 * 
öput
,

254 *
°rög
, 
°rög_Àn
);

256 
Æways_ölöe
 

257 
	$unf‹m©_öô_c°rög
 (
unf‹m©_öput_t
 * 
öput
, *
°rög
)

259 
	`unf‹m©_öô_°rög
 (
öput
, 
°rög
, 
	`°æí
 (string));

260 
	}
}

263 
unf‹m©_öô_ve˘‹
 (
unf‹m©_öput_t
 * 
öput
, 
u8
 * 
ve˘‹_°rög
);

267 
u8
 *
f‹m©_unf‹m©_îr‹
 (u8 * 
s
, 
va_li°
 * 
va
);

269 
	#unf‹m©_∑r£_îr‹
(
öput
) \

270 
	`˛ib_îr‹_ªtu∫
 (0, "∑r£Éº‹ `%U'", 
f‹m©_unf‹m©_îr‹
, 
öput
)

	)

273 
u8
 *
f‹m©_unf‹m©_öput
 (u8 * 
s
, 
va_li°
 * 
va
);

277 
unf‹m©_fun˘i⁄_t
 
	gunf‹m©_öput
;

280 
unf‹m©_fun˘i⁄_t
 
	gunf‹m©_löe
;

283 
unf‹m©_fun˘i⁄_t
 
	gunf‹m©_löe_öput
;

286 
unf‹m©_fun˘i⁄_t
 
	gunf‹m©_tokí
;

289 
unf‹m©_fun˘i⁄_t
 
	gunf‹m©_hex_°rög
;

293 
unf‹m©_fun˘i⁄_t
 
	gunf‹m©_eof
;

296 
unf‹m©_fun˘i⁄_t
 
	gunf‹m©_mem‹y_size
;

299 
u8
 *
f‹m©_mem‹y_size
 (u8 * 
s
, 
va_li°
 * 
va
);

302 
u8
 *
f‹m©_c_idítifõr
 (u8 * 
s
, 
va_li°
 * 
va
);

305 
u8
 *
f‹m©_hexdump
 (u8 * 
s
, 
va_li°
 * 
va
);

308 #ifde‡
CLIB_UNIX


310 
unf‹m©_öô_˛ib_fûe
 (
unf‹m©_öput_t
 * 
öput
, 
fûe_des¸ùt‹
);

314 
uw‹d
 
unf‹m©_öô_unix_ív
 (
unf‹m©_öput_t
 * 
öput
, *
v¨
);

317 
unf‹m©_fun˘i⁄_t
 
	gunf‹m©_unix_gid
;

320 
uw‹d
 
unf‹m©_d©a_size
 (
unf‹m©_öput_t
 * 
öput
, 
va_li°
 * 
¨gs
);

323 
ã°_f‹m©_maö
 (
unf‹m©_öput_t
 * 
öput
);

324 
ã°_unf‹m©_maö
 (
unf‹m©_öput_t
 * 
öput
);

328 
ã°_vec_maö
 (
unf‹m©_öput_t
 * 
öput
);

	@/usr/include/vppinfra/vec.h

38 #i‚de‡
ö˛uded_vec_h


39 
	#ö˛uded_vec_h


	)

41 
	~<vµö‰a/˛ib.h
>

42 
	~<vµö‰a/mem.h
>

43 
	~<vµö‰a/°rög.h
>

44 
	~<vµö‰a/vec_boŸ°øp.h
>

101 *
vec_ªsize_Æloˇã_mem‹y
 (*
v
,

102 
w‹d
 
Àngth_ö¸emít
,

103 
uw‹d
 
d©a_byãs
,

104 
uw‹d
 
hódî_byãs
, uw‹d 
d©a_Æign
);

116 
	#_vec_ªsize
(
V
,
L
,
DB
,
HB
,
A
) \

117 
	`_vec_ªsize_ölöe
(
V
,
L
,
DB
,
HB
,
	`˛ib_max
((
	`__Æignof__
((V)[0])),(
A
)))

	)

119 
Æways_ölöe
 *

120 
	$_vec_ªsize_ölöe
 (*
v
,

121 
w‹d
 
Àngth_ö¸emít
,

122 
uw‹d
 
d©a_byãs
, uw‹d 
hódî_byãs
, uw‹d 
d©a_Æign
)

124 
vec_hódî_t
 *
vh
 = 
	`_vec_föd
 (
v
);

125 
uw‹d
 
√w_d©a_byãs
, 
Æig√d_hódî_byãs
;

127 
Æig√d_hódî_byãs
 = 
	`vec_hódî_byãs
 (
hódî_byãs
);

129 
√w_d©a_byãs
 = 
d©a_byãs
 + 
Æig√d_hódî_byãs
;

131 i‡(
	`PREDICT_TRUE
 (
v
 != 0))

133 *
p
 = 
v
 - 
Æig√d_hódî_byãs
;

136 
	`ASSERT
 (
	`˛ib_mem_is_hóp_obje˘
 (
p
));

139 i‡(
√w_d©a_byãs
 <
	`˛ib_mem_size
 (
p
))

141 
	`CLIB_MEM_UNPOISON
 (
v
, 
d©a_byãs
);

142 
vh
->
Àn
 +
Àngth_ö¸emít
;

143  
v
;

148  
	`vec_ªsize_Æloˇã_mem‹y
 (
v
, 
Àngth_ö¸emít
, 
d©a_byãs
,

149 
hódî_byãs
,

150 
	`˛ib_max
 ( (
vec_hódî_t
),

151 
d©a_Æign
));

152 
	}
}

164 
Æways_ölöe
 

165 
	$_vec_ªsize_wûl_ex∑nd
 (*
v
,

166 
w‹d
 
Àngth_ö¸emít
,

167 
uw‹d
 
d©a_byãs
, uw‹d 
hódî_byãs
,

168 
uw‹d
 
d©a_Æign
)

170 
uw‹d
 
√w_d©a_byãs
, 
Æig√d_hódî_byãs
;

172 
Æig√d_hódî_byãs
 = 
	`vec_hódî_byãs
 (
hódî_byãs
);

174 
√w_d©a_byãs
 = 
d©a_byãs
 + 
Æig√d_hódî_byãs
;

176 i‡(
	`PREDICT_TRUE
 (
v
 != 0))

178 *
p
 = 
v
 - 
Æig√d_hódî_byãs
;

181 
	`ASSERT
 (
	`˛ib_mem_is_hóp_obje˘
 (
p
));

184 i‡(
√w_d©a_byãs
 <
	`˛ib_mem_size
 (
p
))

188 
	}
}

197 
uw‹d
 
˛ib_mem_is_vec_h
 (*
v
, uw‹d 
hódî_byãs
);

206 
Æways_ölöe
 
uw‹d


207 
	$˛ib_mem_is_vec
 (*
v
)

209  
	`˛ib_mem_is_vec_h
 (
v
, 0);

210 
	}
}

213 
	#_v
(
v¨
Ë
_vec_
##
	)
var

227 
	#vec_ªsize_ha
(
V
,
N
,
H
,
A
) \

229 
w‹d
 
	`_v
(
n
Ë(
N
); \

230 
w‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

231 
V
 = 
	`_vec_ªsize
 ((V), 
	`_v
(
n
), (_v(
l
Ë+ _v“)Ë*  ((V)[0]), (
H
), (
A
)); \

232 } 0)

	)

243 
	#vec_ªsize
(
V
,
N
Ë
	`vec_ªsize_ha
(V,N,0,0)

	)

256 
	#vec_ªsize_Æig√d
(
V
,
N
,
A
Ë
	`vec_ªsize_ha
(V,N,0,A)

	)

267 
	#vec_Æloc_ha
(
V
,
N
,
H
,
A
) \

269 
uw‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

270 
	`vec_ªsize_ha
 (
V
, 
N
, 
H
, 
A
); \

271 
	`_vec_Àn
 (
V
Ë
	`_v
(
l
); \

272 } 0)

	)

281 
	#vec_Æloc
(
V
,
N
Ë
	`vec_Æloc_ha
(V,N,0,0)

	)

290 
	#vec_Æloc_Æig√d
(
V
,
N
,
A
Ë
	`vec_Æloc_ha
(V,N,0,A)

	)

299 
	#vec_√w_ha
(
T
,
N
,
H
,
A
) \

301 
w‹d
 
	`_v
(
n
Ë(
N
); \

302 
	`_vec_ªsize
 ((
T
 *Ë0, 
	`_v
(
n
), _v“Ë*  (T), (
H
), (
A
)); \

303 })

	)

312 
	#vec_√w
(
T
,
N
Ë
	`vec_√w_ha
(T,N,0,0)

	)

321 
	#vec_√w_Æig√d
(
T
,
N
,
A
Ë
	`vec_√w_ha
(T,N,0,A)

	)

329 
	#vec_‰ì_h
(
V
,
H
) \

331 i‡(
V
) \

333 
	`˛ib_mem_‰ì
 (
	`vec_hódî
 ((
V
), (
H
))); \

334 
V
 = 0; \

336 } 0)

	)

342 
	#vec_‰ì
(
V
Ë
	`vec_‰ì_h
(V,0)

	)

348 
	#vec_‰ì_hódî
(
h
Ë
	`˛ib_mem_‰ì
 (h)

	)

359 
	#vec_dup_ha
(
V
,
H
,
A
) \

361 
	`__ty≥of__
 ((
V
)[0]Ë* 
	`_v
(
v
) = 0; \

362 
uw‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

363 i‡(
	`_v
(
l
) > 0) \

365 
	`vec_ªsize_ha
 (
	`_v
(
v
), _v(
l
), (
H
), (
A
)); \

366 
	`˛ib_mem˝y_Á°
 (
	`_v
(
v
), (
V
), _v(
l
) *  ((V)[0]));\

368 
	`_v
(
v
); \

369 })

	)

376 
	#vec_dup
(
V
Ë
	`vec_dup_ha
(V,0,0)

	)

385 
	#vec_dup_Æig√d
(
V
,
A
Ë
	`vec_dup_ha
(V,0,A)

	)

393 
	#vec_c›y
(
DST
,
SRC
Ë
	`˛ib_mem˝y_Á°
 (DST, SRC, 
	`vec_Àn
 (DST) * \

394  ((
DST
)[0]))

	)

402 
	#vec_˛⁄e
(
NEW_V
,
OLD_V
) \

404 (
NEW_V
) = 0; \

405 (
NEW_V
Ë
	`_vec_ªsize
 ((NEW_V), 
	`vec_Àn
 (
OLD_V
), \

406 
	`vec_Àn
 (
OLD_V
Ë*  ((
NEW_V
)[0]), (0), (0)); \

407 } 0)

	)

418 
	#vec_vÆid©e_ha
(
V
,
I
,
H
,
A
) \

420 
	`STATIC_ASSERT
(
A
==0 || ((A % (
V
[0]))==0) || (((V[0]) % A) == 0),\

422 
w‹d
 
	`_v
(
i
Ë(
I
); \

423 
w‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

424 i‡(
	`_v
(
i
Ë>_v(
l
)) \

426 
	`vec_ªsize_ha
 ((
V
), 1 + (
	`_v
(
i
Ë- _v(
l
)), (
H
), (
A
)); \

429 
	`˛ib_mem£t
 ((
V
Ë+ 
	`_v
(
l
), 0, (1 + (_v(
i
) - _v(l))) *  ((V)[0])); \

431 } 0)

	)

440 
	#vec_vÆid©e
(
V
,
I
Ë
	`vec_vÆid©e_ha
(V,I,0,0)

	)

451 
	#vec_vÆid©e_Æig√d
(
V
,
I
,
A
Ë
	`vec_vÆid©e_ha
(V,I,0,A)

	)

463 
	#vec_vÆid©e_öô_em±y_ha
(
V
,
I
,
INIT
,
H
,
A
) \

465 
w‹d
 
	`_v
(
i
Ë(
I
); \

466 
w‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

467 i‡(
	`_v
(
i
Ë>_v(
l
)) \

469 
	`vec_ªsize_ha
 ((
V
), 1 + (
	`_v
(
i
Ë- _v(
l
)), (
H
), (
A
)); \

470 
	`_v
(
l
Ë<_v(
i
)) \

472 (
V
)[
	`_v
(
l
)] = (
INIT
); \

473 
	`_v
(
l
)++; \

476 } 0)

	)

487 
	#vec_vÆid©e_öô_em±y
(
V
,
I
,
INIT
) \

488 
	`vec_vÆid©e_öô_em±y_ha
(
V
,
I
,
INIT
,0,0)

	)

499 
	#vec_vÆid©e_öô_em±y_Æig√d
(
V
,
I
,
INIT
,
A
) \

500 
	`vec_vÆid©e_öô_em±y_ha
(
V
,
I
,
INIT
,0,
A
)

	)

510 
	#vec_add1_ha
(
V
,
E
,
H
,
A
) \

512 
w‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

513 
V
 = 
	`_vec_ªsize
 ((V), 1, (
	`_v
(
l
Ë+ 1Ë*  ((V)[0]), (
H
), (
A
)); \

514 (
V
)[
	`_v
(
l
)] = (
E
); \

515 } 0)

	)

523 
	#vec_add1
(
V
,
E
Ë
	`vec_add1_ha
(V,E,0,0)

	)

532 
	#vec_add1_Æig√d
(
V
,
E
,
A
Ë
	`vec_add1_ha
(V,E,0,A)

	)

544 
	#vec_add2_ha
(
V
,
P
,
N
,
H
,
A
) \

546 
w‹d
 
	`_v
(
n
Ë(
N
); \

547 
w‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

548 
V
 = 
	`_vec_ªsize
 ((V), 
	`_v
(
n
), (_v(
l
Ë+ _v“)Ë*  ((V)[0]), (
H
), (
A
)); \

549 
P
 = (
V
Ë+ 
	`_v
(
l
); \

550 } 0)

	)

561 
	#vec_add2
(
V
,
P
,
N
Ë
	`vec_add2_ha
(V,P,N,0,0)

	)

573 
	#vec_add2_Æig√d
(
V
,
P
,
N
,
A
Ë
	`vec_add2_ha
(V,P,N,0,A)

	)

584 
	#vec_add_ha
(
V
,
E
,
N
,
H
,
A
) \

586 
w‹d
 
	`_v
(
n
Ë(
N
); \

587 
w‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

588 
V
 = 
	`_vec_ªsize
 ((V), 
	`_v
(
n
), (_v(
l
Ë+ _v“)Ë*  ((V)[0]), (
H
), (
A
)); \

589 
	`˛ib_mem˝y_Á°
 ((
V
Ë+ 
	`_v
(
l
), (
E
), _v(
n
) *  ((V)[0])); \

590 } 0)

	)

599 
	#vec_add
(
V
,
E
,
N
Ë
	`vec_add_ha
(V,E,N,0,0)

	)

609 
	#vec_add_Æig√d
(
V
,
E
,
N
,
A
Ë
	`vec_add_ha
(V,E,N,0,A)

	)

616 
	#vec_p›
(
V
) \

618 
uw‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

619 
	`ASSERT
 (
	`_v
(
l
) > 0); \

620 
	`_v
(
l
) -= 1; \

621 
	`_vec_Àn
 (
V
Ë
	`_v
 (
l
); \

622 (
V
)[
	`_v
(
l
)]; \

623 })

	)

632 
	#vec_p›2
(
V
,
E
) \

634 
uw‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

635 i‡(
	`_v
(
l
Ë> 0Ë(
E
Ë
	`vec_p›
 (
V
); \

636 
	`_v
(
l
) > 0; \

637 })

	)

650 
	#vec_ö£π_öô_em±y_ha
(
V
,
N
,
M
,
INIT
,
H
,
A
) \

652 
w‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

653 
w‹d
 
	`_v
(
n
Ë(
N
); \

654 
w‹d
 
	`_v
(
m
Ë(
M
); \

655 
V
 = 
	`_vec_ªsize
 ((V), \

656 
	`_v
(
n
), \

657 (
	`_v
(
l
Ë+ _v(
n
))*((
V
)[0]), \

658 (
H
), (
A
)); \

659 
	`ASSERT
 (
	`_v
(
m
Ë<_v(
l
)); \

660 
	`memmove
 ((
V
Ë+ 
	`_v
(
m
Ë+ _v(
n
), \

661 (
V
Ë+ 
	`_v
(
m
), \

662 (
	`_v
(
l
Ë- _v(
m
)Ë*  ((
V
)[0])); \

663 
	`˛ib_mem£t
 ((
V
Ë+ 
	`_v
(
m
), 
INIT
, _v(
n
) *  ((V)[0])); \

664 } 0)

	)

676 
	#vec_ö£π_ha
(
V
,
N
,
M
,
H
,
A
Ë
	`vec_ö£π_öô_em±y_ha
(V,N,M,0,H,A)

	)

686 
	#vec_ö£π
(
V
,
N
,
M
Ë
	`vec_ö£π_ha
(V,N,M,0,0)

	)

697 
	#vec_ö£π_Æig√d
(
V
,
N
,
M
,
A
Ë
	`vec_ö£π_ha
(V,N,M,0,A)

	)

709 
	#vec_ö£π_öô_em±y
(
V
,
N
,
M
,
INIT
) \

710 
	`vec_ö£π_öô_em±y_ha
(
V
,
N
,
M
,
INIT
,0,0)

	)

723 
	#vec_ö£π_öô_em±y_Æig√d
(
V
,
N
,
M
,
INIT
,
A
) \

724 
	`vec_ö£π_öô_em±y_ha
(
V
,
N
,
M
,
INIT
,0,
A
)

	)

738 
	#vec_ö£π_ñts_ha
(
V
,
E
,
N
,
M
,
H
,
A
) \

740 
w‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

741 
w‹d
 
	`_v
(
n
Ë(
N
); \

742 
w‹d
 
	`_v
(
m
Ë(
M
); \

743 
V
 = 
	`_vec_ªsize
 ((V), \

744 
	`_v
(
n
), \

745 (
	`_v
(
l
Ë+ _v(
n
))*((
V
)[0]), \

746 (
H
), (
A
)); \

747 
	`ASSERT
 (
	`_v
(
m
Ë<_v(
l
)); \

748 
	`memmove
 ((
V
Ë+ 
	`_v
(
m
Ë+ _v(
n
), \

749 (
V
Ë+ 
	`_v
(
m
), \

750 (
	`_v
(
l
Ë- _v(
m
)Ë*  ((
V
)[0])); \

751 
	`˛ib_mem˝y_Á°
 ((
V
Ë+ 
	`_v
(
m
), (
E
), \

752 
	`_v
(
n
Ë*  ((
V
)[0])); \

753 } 0)

	)

764 
	#vec_ö£π_ñts
(
V
,
E
,
N
,
M
Ë
	`vec_ö£π_ñts_ha
(V,E,N,M,0,0)

	)

776 
	#vec_ö£π_ñts_Æig√d
(
V
,
E
,
N
,
M
,
A
Ë
	`vec_ö£π_ñts_ha
(V,E,N,M,0,A)

	)

785 
	#vec_dñëe
(
V
,
N
,
M
) \

787 
w‹d
 
	`_v
(
l
Ë
	`vec_Àn
 (
V
); \

788 
w‹d
 
	`_v
(
n
Ë(
N
); \

789 
w‹d
 
	`_v
(
m
Ë(
M
); \

791 i‡(
	`_v
(
l
Ë- _v(
n
Ë- _v(
m
) > 0) \

792 
	`memmove
 ((
V
Ë+ 
	`_v
(
m
), (VË+ _v(mË+ _v(
n
), \

793 (
	`_v
(
l
Ë- _v(
n
Ë- _v(
m
)Ë*  ((
V
)[0])); \

795 i‡(
	`_v
(
n
) > 0) \

796 
	`˛ib_mem£t
 ((
V
Ë+ 
	`_v
(
l
Ë- _v(
n
), 0, _v(n) *  ((V)[0])); \

797 
	`_vec_Àn
 (
V
Ë-
	`_v
(
n
); \

798 
	`CLIB_MEM_POISON
(
	`vec_íd
(
V
), 
	`_v
(
n
) *  ((V)[0])); \

799 } 0)

	)

806 
	#vec_dñ1
(
v
,
i
) \

808 
uw‹d
 
_vec_dñ_l
 = 
	`_vec_Àn
 (
v
) - 1; \

809 
uw‹d
 
_vec_dñ_i
 = (
i
); \

810 i‡(
_vec_dñ_i
 < 
_vec_dñ_l
) \

811 (
v
)[
_vec_dñ_i
] = (v)[
_vec_dñ_l
]; \

812 
	`_vec_Àn
 (
v
Ë
_vec_dñ_l
; \

813 
	`CLIB_MEM_POISON
(
	`vec_íd
(
v
),  ((v)[0])); \

814 } 0)

	)

821 
	#vec_≠≥nd
(
v1
,
v2
) \

823 
uw‹d
 
	`_v
(
l1
Ë
	`vec_Àn
 (
v1
); \

824 
uw‹d
 
	`_v
(
l2
Ë
	`vec_Àn
 (
v2
); \

826 
v1
 = 
	`_vec_ªsize
 ((v1), 
	`_v
(
l2
), \

827 (
	`_v
(
l1
Ë+ _v(
l2
)Ë*  ((
v1
)[0]), 0, 0); \

828 
	`˛ib_mem˝y_Á°
 ((
v1
Ë+ 
	`_v
(
l1
), (
v2
), _v(
l2
) *  ((v2)[0])); \

829 } 0)

	)

837 
	#vec_≠≥nd_Æig√d
(
v1
,
v2
,
Æign
) \

839 
uw‹d
 
	`_v
(
l1
Ë
	`vec_Àn
 (
v1
); \

840 
uw‹d
 
	`_v
(
l2
Ë
	`vec_Àn
 (
v2
); \

842 
v1
 = 
	`_vec_ªsize
 ((v1), 
	`_v
(
l2
), \

843 (
	`_v
(
l1
Ë+ _v(
l2
)Ë*  ((
v1
)[0]), 0, 
Æign
); \

844 
	`˛ib_mem˝y_Á°
 ((
v1
Ë+ 
	`_v
(
l1
), (
v2
), _v(
l2
) *  ((v2)[0])); \

845 } 0)

	)

852 
	#vec_¥ïíd
(
v1
,
v2
) \

854 
uw‹d
 
	`_v
(
l1
Ë
	`vec_Àn
 (
v1
); \

855 
uw‹d
 
	`_v
(
l2
Ë
	`vec_Àn
 (
v2
); \

857 
v1
 = 
	`_vec_ªsize
 ((v1), 
	`_v
(
l2
), \

858 (
	`_v
(
l1
Ë+ _v(
l2
)Ë*  ((
v1
)[0]), 0, 0); \

859 
	`memmove
 ((
v1
Ë+ 
	`_v
(
l2
), (v1), _v(
l1
) *  ((v1)[0])); \

860 
	`˛ib_mem˝y_Á°
 ((
v1
), (
v2
), 
	`_v
(
l2
) *  ((v2)[0])); \

861 } 0)

	)

869 
	#vec_¥ïíd_Æig√d
(
v1
,
v2
,
Æign
) \

871 
uw‹d
 
	`_v
(
l1
Ë
	`vec_Àn
 (
v1
); \

872 
uw‹d
 
	`_v
(
l2
Ë
	`vec_Àn
 (
v2
); \

874 
v1
 = 
	`_vec_ªsize
 ((v1), 
	`_v
(
l2
), \

875 (
	`_v
(
l1
Ë+ _v(
l2
)Ë*  ((
v1
)[0]), 0, 
Æign
); \

876 
	`memmove
 ((
v1
Ë+ 
	`_v
(
l2
), (v1), _v(
l1
) *  ((v1)[0])); \

877 
	`˛ib_mem˝y_Á°
 ((
v1
), (
v2
), 
	`_v
(
l2
) *  ((v2)[0])); \

878 } 0)

	)

884 
	#vec_zîo
(
v¨
) \

886 i‡(
v¨
) \

887 
	`˛ib_mem£t
 ((
v¨
), 0, 
	`vec_Àn
 (var) *  ((var)[0])); \

888 } 0)

	)

894 
	#vec_£t
(
v
,
vÆ
) \

896 
w‹d
 
	`_v
(
i
); \

897 
	`__ty≥of__
 ((
v
)[0]Ë
_vÆ
 = (
vÆ
); \

898 
	`_v
(
i
Ë0; _v(iË< 
	`vec_Àn
 (
v
); _v(i)++) \

899 (
v
)[
	`_v
(
i
)] = 
_vÆ
; \

900 } 0)

	)

902 #ifde‡
CLIB_UNIX


903 
	~<°dlib.h
>

912 
	#vec_is_equÆ
(
v1
,
v2
) \

913 (
	`vec_Àn
 (
v1
Ë=vec_À¿(
v2
Ë&& ! 
	`memcmp
 ((v1), (v2), vec_À¿(v1Ë*  ((v1)[0])))

	)

922 
	#vec_cmp
(
v1
,
v2
) \

924 
w‹d
 
	`_v
(
i
), _v(
cmp
), _v(
l
); \

925 
	`_v
(
l
Ë
	`˛ib_mö
 (
	`vec_Àn
 (
v1
), vec_À¿(
v2
)); \

926 
	`_v
(
cmp
) = 0; \

927 
	`_v
(
i
Ë0; _v(iË< _v(
l
); _v(i)++) { \

928 
	`_v
(
cmp
Ë(
v1
)[_v(
i
)] - (
v2
)[_v(i)]; \

929 i‡(
	`_v
(
cmp
)) \

932 i‡(
	`_v
(
cmp
Ë=0 && _v(
l
) > 0) \

933 
	`_v
(
cmp
Ë
	`vec_Àn
(
v1
Ë- vec_Àn(
v2
); \

934 (
	`_v
(
cmp
) < 0 ? -1 : (_v(cmp) > 0 ? +1 : 0)); \

935 })

	)

943 
	#vec_£¨ch
(
v
,
E
) \

945 
w‹d
 
	`_v
(
i
) = 0; \

946 
	`_v
(
i
Ë< 
	`vec_Àn
(
v
)) \

948 i‡((
v
)[
	`_v
(
i
)] =
E
) \

950 
	`_v
(
i
)++; \

952 i‡(
	`_v
(
i
Ë=
	`vec_Àn
(
v
)) \

953 
	`_v
(
i
) = ~0; \

954 
	`_v
(
i
); \

955 })

	)

964 
	#vec_£¨ch_wôh_fun˘i⁄
(
v
,
E
,
‚
) \

966 
w‹d
 
	`_v
(
i
) = 0; \

967 
	`_v
(
i
Ë< 
	`vec_Àn
(
v
)) \

969 i‡(0 !
	`‚
(&(
v
)[
	`_v
(
i
)], (
E
))) \

971 
	`_v
(
i
)++; \

973 i‡(
	`_v
(
i
Ë=
	`vec_Àn
(
v
)) \

974 
	`_v
(
i
) = ~0; \

975 
	`_v
(
i
); \

976 })

	)

983 
	#vec_s‹t_wôh_fun˘i⁄
(
vec
,
f
) \

985 
	`qs‹t
 (
vec
, 
	`vec_Àn
 (vec),  (vec[0]), (*Ë(
f
)); \

986 } 0)

	)

994 
	#vec_vÆid©e_öô_c_°rög
(
V
, 
S
, 
L
) \

996 
	`vec_ª£t_Àngth
 (
V
); \

997 
	`vec_vÆid©e
 ((
V
), (
L
)); \

998 i‡((
S
Ë&& (
L
)) \

999 
	`˛ib_mem˝y_Á°
 ((
V
), (
S
), (
L
)); \

1000 (
V
)[(
L
)] = 0; \

1001 } 0)

	)

1009 
	#vec_c_°rög_is_ãrmö©ed
(
V
) \

1010 (((
V
Ë!0Ë&& (
	`vec_Àn
 (VË!0Ë&& ((V)[vec_À¿((V)Ë- 1] =0))

	)

1017 
	#vec_ãrmö©e_c_°rög
(
V
) \

1019 
u32
 
vl
 = 
	`vec_Àn
 ((
V
)); \

1020 i‡(!
	`vec_c_°rög_is_ãrmö©ed
(
V
)) \

1022 
	`vec_vÆid©e
 ((
V
), 
vl
); \

1023 (
V
)[
vl
] = 0; \

1025 } 0)

	)

	@/usr/include/vppinfra/vector.h

38 #i‚de‡
ö˛uded_˛ib_ve˘‹_h


39 
	#ö˛uded_˛ib_ve˘‹_h


	)

41 
	~<vµö‰a/˛ib.h
>

45 #i‡
deföed
 (
__MMX__
Ë|| deföed (
__IWMMXT__
Ë|| deföed (
__Ørch64__
) \

46 || 
	$deföed
 (
__i686__
)

47 
	#CLIB_HAVE_VEC64


	)

50 #i‡
	`deföed
 (
__Ørch64__
Ë&& deföed(
__ARM_NEON
Ë|| deföed (
__i686__
)

51 
	#CLIB_HAVE_VEC128


	)

54 #i‡
	`deföed
 (
__SSE4_2__
Ë&& 
__GNUC__
 >= 4

55 
	#CLIB_HAVE_VEC128


	)

58 #i‡
	`deföed
 (
__ALTIVEC__
)

59 
	#CLIB_HAVE_VEC128


	)

62 #i‡
	`deföed
 (
__AVX2__
)

63 
	#CLIB_HAVE_VEC256


	)

64 #i‡
	`deföed
 (
__˛™g__
Ë&& 
__˛™g_maj‹__
 < 4

65 #unde‡
CLIB_HAVE_VEC256


69 #i‡
	`deföed
 (
__AVX512F__
)

70 
	#CLIB_HAVE_VEC512


	)

74 #ifde‡
CLIB_HAVE_VEC128


75 
	#CLIB_HAVE_VEC64


	)

78 
	#_ve˘‹_size
(
n
Ë
	`__©åibuã__
 ((
	`ve˘‹_size
 (n)))

	)

79 
	#_ve˘‹_size_u«lig√d
(
n
Ë
	`__©åibuã__
 ((
	`ve˘‹_size
 (n), 
	`__Æig√d__
 (1)))

	)

81 
	#f‹óch_vec64i
 
	`_
(
i
,8,8Ë_(i,16,4Ë_(i,32,2)

	)

82 
	#f‹óch_vec64u
 
	`_
(
u
,8,8Ë_(u,16,4Ë_(u,32,2)

	)

83 
	#f‹óch_vec64f
 
	`_
(
f
,32,2)

	)

84 
	#f‹óch_vec128i
 
	`_
(
i
,8,16Ë_(i,16,8Ë_(i,32,4Ë_(i,64,2)

	)

85 
	#f‹óch_vec128u
 
	`_
(
u
,8,16Ë_(u,16,8Ë_(u,32,4Ë_(u,64,2)

	)

86 
	#f‹óch_vec128f
 
	`_
(
f
,32,4Ë_(f,64,2)

	)

87 
	#f‹óch_vec256i
 
	`_
(
i
,8,32Ë_(i,16,16Ë_(i,32,8Ë_(i,64,4)

	)

88 
	#f‹óch_vec256u
 
	`_
(
u
,8,32Ë_(u,16,16Ë_(u,32,8Ë_(u,64,4)

	)

89 
	#f‹óch_vec256f
 
	`_
(
f
,32,8Ë_(f,64,4)

	)

90 
	#f‹óch_vec512i
 
	`_
(
i
,8,64Ë_(i,16,32Ë_(i,32,16Ë_(i,64,8)

	)

91 
	#f‹óch_vec512u
 
	`_
(
u
,8,64Ë_(u,16,32Ë_(u,32,16Ë_(u,64,8)

	)

92 
	#f‹óch_vec512f
 
	`_
(
f
,32,16Ë_(f,64,8)

	)

94 #i‡
	`deföed
 (
CLIB_HAVE_VEC512
)

95 
	#f‹óch_öt_vec
 
f‹óch_vec64i
 
f‹óch_vec128i
 
f‹óch_vec256i
 
f‹óch_vec512i


	)

96 
	#f‹óch_uöt_vec
 
f‹óch_vec64u
 
f‹óch_vec128u
 
f‹óch_vec256u
 
f‹óch_vec512u


	)

97 
	#f‹óch_Êﬂt_vec
 
f‹óch_vec64f
 
f‹óch_vec128f
 
f‹óch_vec256f
 
f‹óch_vec512f


	)

98 #ñi‡
	`deföed
 (
CLIB_HAVE_VEC256
)

99 
	#f‹óch_öt_vec
 
f‹óch_vec64i
 
f‹óch_vec128i
 
f‹óch_vec256i


	)

100 
	#f‹óch_uöt_vec
 
f‹óch_vec64u
 
f‹óch_vec128u
 
f‹óch_vec256u


	)

101 
	#f‹óch_Êﬂt_vec
 
f‹óch_vec64f
 
f‹óch_vec128f
 
f‹óch_vec256f


	)

103 
	#f‹óch_öt_vec
 
f‹óch_vec64i
 
f‹óch_vec128i


	)

104 
	#f‹óch_uöt_vec
 
f‹óch_vec64u
 
f‹óch_vec128u


	)

105 
	#f‹óch_Êﬂt_vec
 
f‹óch_vec64f
 
f‹óch_vec128f


	)

108 
	#f‹óch_vec
 
f‹óch_öt_vec
 
f‹óch_uöt_vec
 
f‹óch_Êﬂt_vec


	)

113 
	#_
(
t
,
s
,
c
) \

114 
t
##
	ts
 
	tt
##s##
	tx
##
	tc
 
	t_ve˘‹_size
 (s/8*c); \

115 
t
##
	ts
 
	tt
##s##
	tx
##
	tc
##
	tu
 
	t_ve˘‹_size_u«lig√d
 (s/8*c); \

117 
t
##
s
##
x
##
c
 
as_
##t##s##x##c; \

118 
t
##
s
 
as_
##t##s[
c
]; \

119 } 
	tt
##
	ts
##
	tx
##
	tc
##
	t_uni⁄_t
;

	)

121 
f‹óch_vec64i
 
f‹óch_vec64u
 
f‹óch_vec64f


122 
f‹óch_vec128i
 
f‹óch_vec128u
 
f‹óch_vec128f


123 
f‹óch_vec256i
 
f‹óch_vec256u
 
f‹óch_vec256f


124 
f‹óch_vec512i
 
f‹óch_vec512u
 
f‹óch_vec512f


125 #unde‡
_


128 #i‚de‡
CLIB_VECTOR_WORD_BITS


129 #ifde‡
CLIB_HAVE_VEC128


130 
	#CLIB_VECTOR_WORD_BITS
 128

	)

132 
	#CLIB_VECTOR_WORD_BITS
 64

	)

137 #i‡
CLIB_VECTOR_WORD_BITS
 == 128

138 
i8
 
	ti8x
 
	t_ve˘‹_size
 (16);

139 
i16
 
	ti16x
 
	t_ve˘‹_size
 (16);

140 
i32
 
	ti32x
 
	t_ve˘‹_size
 (16);

141 
i64
 
	ti64x
 
	t_ve˘‹_size
 (16);

142 
u8
 
	tu8x
 
	t_ve˘‹_size
 (16);

143 
u16
 
	tu16x
 
	t_ve˘‹_size
 (16);

144 
u32
 
	tu32x
 
	t_ve˘‹_size
 (16);

145 
u64
 
	tu64x
 
	t_ve˘‹_size
 (16);

147 #i‡
CLIB_VECTOR_WORD_BITS
 == 64

148 
i8
 
	ti8x
 
	t_ve˘‹_size
 (8);

149 
i16
 
	ti16x
 
	t_ve˘‹_size
 (8);

150 
i32
 
	ti32x
 
	t_ve˘‹_size
 (8);

151 
i64
 
	ti64x
 
	t_ve˘‹_size
 (8);

152 
u8
 
	tu8x
 
	t_ve˘‹_size
 (8);

153 
u16
 
	tu16x
 
	t_ve˘‹_size
 (8);

154 
u32
 
	tu32x
 
	t_ve˘‹_size
 (8);

155 
u64
 
	tu64x
 
	t_ve˘‹_size
 (8);

158 #unde‡
_ve˘‹_size


160 
	#VECTOR_WORD_TYPE
(
t
Ët##
x


	)

161 
	#VECTOR_WORD_TYPE_LEN
(
t
Ë( (
	`VECTOR_WORD_TYPE
—)Ë/  (t))

	)

163 #i‡
	`deföed
 (
__SSE4_2__
Ë&& 
__GNUC__
 >= 4

164 
	~<vµö‰a/ve˘‹_s£42.h
>

167 #i‡
	`deföed
 (
__AVX2__
)

168 
	~<vµö‰a/ve˘‹_avx2.h
>

171 #i‡
	`deföed
 (
__AVX512F__
)

172 
	~<vµö‰a/ve˘‹_avx512.h
>

175 #i‡
	`deföed
 (
__ALTIVEC__
)

176 
	~<vµö‰a/ve˘‹_Ætivec.h
>

179 #i‡
	`deföed
 (
__Ørch64__
)

180 
	~<vµö‰a/ve˘‹_√⁄.h
>

183 #i‡(
	`deföed
(
CLIB_HAVE_VEC128
Ë|| deföed(
CLIB_HAVE_VEC64
))

184 
	~<vµö‰a/ve˘‹_funcs.h
>

188 #i‚de‡
CLIB_VEC128_SPLAT_DEFINED


189 
	#_
(
t
, 
s
, 
c
) \

190 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

191 
t
##
s
##
x
##
c
##
	`_•œt
 (t##s x) \

193 
t
##
s
##
x
##
c
 
r
; \

194 
i
; \

196 
i
 = 0; i < 
c
; i++) \

197 
r
[
i
] = 
x
; \

199  
r
; \

200 
	}

	)
}

201 
f‹óch_vec128i
 
	gf‹óch_vec128u


202 #unde‡
_


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

961 #ifde‡
__USE_XOPEN


963 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 #ifde‡
__USE_XOPEN2KXSI


971 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

974 #ifde‡
__USE_XOPEN_EXTENDED


979 
	$gø¡±
 (
__fd
Ë
__THROW
;

983 
	$u∆ock±
 (
__fd
Ë
__THROW
;

988 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

991 #ifde‡
__USE_GNU


995 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

996 
__THROW
 
	`__n⁄nuŒ
 ((2));

999 
	`gë±
 ();

1002 #ifde‡
__USE_MISC


1006 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1013 
	$ây¶Ÿ
 (Ë
__THROW
;

1016 
	~<bôs/°dlib-Êﬂt.h
>

1019 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1020 
	~<bôs/°dlib.h
>

1022 #ifde‡
__LDBL_COMPAT


1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/vppinfra/atomics.h

17 #i‚de‡
ö˛uded_˛ib_©omics_h


18 
	#ö˛uded_˛ib_©omics_h


	)

23 
	#˛ib_©omic_„tch_add
(
a
, 
b
Ë
	`__sync_„tch_™d_add
◊, b)

	)

24 
	#˛ib_©omic_„tch_sub
(
a
, 
b
Ë
	`__sync_„tch_™d_sub
◊, b)

	)

25 
	#˛ib_©omic_„tch_™d
(
a
, 
b
Ë
	`__sync_„tch_™d_™d
◊, b)

	)

26 
	#˛ib_©omic_„tch_x‹
(
a
, 
b
Ë
	`__sync_„tch_™d_x‹
◊, b)

	)

27 
	#˛ib_©omic_„tch_‹
(
a
, 
b
Ë
	`__sync_„tch_™d_‹
◊, b)

	)

28 
	#˛ib_©omic_„tch_«nd
(
a
, 
b
Ë
	`__sync_„tch_«nd
◊, b)

	)

30 
	#˛ib_©omic_add_„tch
(
a
, 
b
Ë
	`__sync_add_™d_„tch
◊, b)

	)

31 
	#˛ib_©omic_sub_„tch
(
a
, 
b
Ë
	`__sync_sub_™d_„tch
◊, b)

	)

32 
	#˛ib_©omic_™d_„tch
(
a
, 
b
Ë
	`__sync_™d_™d_„tch
◊, b)

	)

33 
	#˛ib_©omic_x‹_„tch
(
a
, 
b
Ë
	`__sync_x‹_™d_„tch
◊, b)

	)

34 
	#˛ib_©omic_‹_„tch
(
a
, 
b
Ë
	`__sync_‹_™d_„tch
◊, b)

	)

35 
	#˛ib_©omic_«nd_„tch
(
a
, 
b
Ë
	`__sync_«nd_™d_„tch
◊, b)

	)

37 
	#˛ib_©omic_cmp_™d_sw≠
(
addr
,
ﬁd
,
√w
Ë
	`__sync_vÆ_com∑ª_™d_sw≠
◊ddr, old,Çew)

	)

38 
	#˛ib_©omic_boﬁ_cmp_™d_sw≠
(
addr
,
ﬁd
,
√w
Ë
	`__sync_boﬁ_com∑ª_™d_sw≠
◊ddr, old,Çew)

	)

40 
	#˛ib_©omic_cmp_™d_sw≠_acq_ªœx_n
(
addr
,
exp
,
√w
,
wók
Ë
	`__©omic_com∑ª_exch™ge_n
 (◊ddr), (exp), (√w), (wók), 
__ATOMIC_ACQUIRE
, 
__ATOMIC_RELAXED
)

	)

42 
	#˛ib_©omic_ã°_™d_£t
(
a
Ë
	`__©omic_exch™ge_n
◊, 1, 
__ATOMIC_ACQUIRE
)

	)

43 
	#˛ib_©omic_ªÀa£
(
a
Ë
	`__©omic_°‹e_n
◊, 0, 
__ATOMIC_RELEASE
)

	)

45 
	#˛ib_©omic_„n˚_ªl
(Ë
	`__©omic_thªad_„n˚
(
__ATOMIC_RELEASE
);

	)

47 
	#˛ib_©omic_lﬂd_ªœx_n
(
a
Ë
	`__©omic_lﬂd_n
(◊), 
__ATOMIC_RELAXED
)

	)

48 
	#˛ib_©omic_lﬂd_acq_n
(
a
Ë
	`__©omic_lﬂd_n
(◊), 
__ATOMIC_ACQUIRE
)

	)

49 
	#˛ib_©omic_°‹e_ªl_n
(
a
, 
b
Ë
	`__©omic_°‹e_n
 (◊), (b), 
__ATOMIC_RELEASE
)

	)

51 
	#˛ib_©omic_sw≠_acq_n
(
a
, 
b
Ë
	`__©omic_exch™ge_n
 (◊), (b), 
__ATOMIC_ACQUIRE
)

	)

52 
	#˛ib_©omic_sw≠_ªl_n
(
a
, 
b
Ë
	`__©omic_exch™ge_n
 (◊), (b), 
__ATOMIC_RELEASE
)

	)

54 
	#˛ib_©omic_„tch_add_ªl
(
a
, 
b
Ë
	`__©omic_„tch_add
(◊), (b), 
__ATOMIC_RELEASE
)

	)

55 
	#˛ib_©omic_„tch_sub_ªl
(
a
, 
b
Ë
	`__©omic_„tch_sub
(◊), (b), 
__ATOMIC_RELEASE
)

	)

	@/usr/include/vppinfra/mem.h

38 #i‚de‡
_ö˛uded_˛ib_mem_h


39 
	#_ö˛uded_˛ib_mem_h


	)

41 
	~<°d¨g.h
>

42 
	~<uni°d.h
>

43 
	~<sys/mm™.h
>

45 
	~<vµö‰a/˛ib.h
>

46 
	~<vµö‰a/˛ib_îr‹.h
>

48 #i‡
USE_DLMALLOC
 == 0

49 
	~<vµö‰a/mhóp_boŸ°øp.h
>

51 
	~<vµö‰a/dlmÆloc.h
>

54 
	~<vµö‰a/os.h
>

55 
	~<vµö‰a/°rög.h
>

56 
	~<vµö‰a/ßnôizî.h
>

58 
	#CLIB_MAX_MHEAPS
 256

	)

61 *
˛ib_≥r_˝u_mhóps
[
CLIB_MAX_MHEAPS
];

63 
Æways_ölöe
 

64 
	$˛ib_mem_£t_thªad_ödex
 ()

71 
i
;

72 i‡(
__os_thªad_ödex
 != 0)

74 
i
 = 0; i < 
	`ARRAY_LEN
 (
˛ib_≥r_˝u_mhóps
); i++)

75 i‡(
	`˛ib_©omic_boﬁ_cmp_™d_sw≠
 (&
˛ib_≥r_˝u_mhóps
[
i
],

76 0, 
˛ib_≥r_˝u_mhóps
[0]))

78 
	`os_£t_thªad_ödex
 (
i
);

81 
	`ASSERT
 (
__os_thªad_ödex
 > 0);

82 
	}
}

84 
Æways_ölöe
 *

85 
	$˛ib_mem_gë_≥r_˝u_hóp
 ()

87 
˝u
 = 
	`os_gë_thªad_ödex
 ();

88  
˛ib_≥r_˝u_mhóps
[
˝u
];

89 
	}
}

91 
Æways_ölöe
 *

92 
	$˛ib_mem_£t_≥r_˝u_hóp
 (
u8
 * 
√w_hóp
)

94 
˝u
 = 
	`os_gë_thªad_ödex
 ();

95 *
ﬁd
 = 
˛ib_≥r_˝u_mhóps
[
˝u
];

96 
˛ib_≥r_˝u_mhóps
[
˝u
] = 
√w_hóp
;

97  
ﬁd
;

98 
	}
}

100 
Æways_ölöe
 
uw‹d


101 
	$˛ib_mem_size_nocheck
 (*
p
)

103 #i‡
USE_DLMALLOC
 == 0

104 
mhóp_ñt_t
 *
e
 = 
	`mhóp_u£r_poöãr_to_ñt
 (
p
);

105  
	`mhóp_ñt_d©a_byãs
 (
e
);

107  
	`m•a˚_ußbÀ_size_wôh_dñè
 (
p
);

109 
	}
}

112 
Æways_ölöe
 *

113 
	$˛ib_mem_Æloc_Æig√d_©_off£t
 (
uw‹d
 
size
, uw‹d 
Æign
, uw‹d 
Æign_off£t
,

114 
os_out_of_mem‹y_⁄_Áûuª
)

116 *
hóp
, *
p
;

117 
uw‹d
 
˝u
;

119 i‡(
Æign_off£t
 > 
Æign
)

121 i‡(
Æign
 > 0)

122 
Æign_off£t
 %
Æign
;

124 
Æign_off£t
 = 
Æign
;

127 
˝u
 = 
	`os_gë_thªad_ödex
 ();

128 
hóp
 = 
˛ib_≥r_˝u_mhóps
[
˝u
];

130 #i‡
USE_DLMALLOC
 == 0

131 
uw‹d
 
off£t
;

132 
hóp
 = 
	`mhóp_gë_Æig√d
 (hóp, 
size
, 
Æign
, 
Æign_off£t
, &
off£t
);

133 
˛ib_≥r_˝u_mhóps
[
˝u
] = 
hóp
;

134 i‡(
	`PREDICT_TRUE
 (
off£t
 != ~0))

135 
p
 = 
hóp
 + 
off£t
;

137 
p
 = 
	`m•a˚_gë_Æig√d
 (
hóp
, 
size
, 
Æign
, 
Æign_off£t
);

140 i‡(
	`PREDICT_FALSE
 (0 =
p
))

142 i‡(
os_out_of_mem‹y_⁄_Áûuª
)

143 
	`os_out_of_mem‹y
 ();

147 
	`CLIB_MEM_UNPOISON
 (
p
, 
size
);

148  
p
;

149 
	}
}

152 
Æways_ölöe
 *

153 
	$˛ib_mem_Æloc
 (
uw‹d
 
size
)

155  
	`˛ib_mem_Æloc_Æig√d_©_off£t
 (
size
, 1,

158 
	}
}

160 
Æways_ölöe
 *

161 
	$˛ib_mem_Æloc_Æig√d
 (
uw‹d
 
size
, uw‹d 
Æign
)

163  
	`˛ib_mem_Æloc_Æig√d_©_off£t
 (
size
, 
Æign
, 0,

165 
	}
}

168 
Æways_ölöe
 *

169 
	$˛ib_mem_Æloc_‹_nuŒ
 (
uw‹d
 
size
)

171  
	`˛ib_mem_Æloc_Æig√d_©_off£t
 (
size
, 1,

174 
	}
}

176 
Æways_ölöe
 *

177 
	$˛ib_mem_Æloc_Æig√d_‹_nuŒ
 (
uw‹d
 
size
, uw‹d 
Æign
)

179  
	`˛ib_mem_Æloc_Æig√d_©_off£t
 (
size
, 
Æign
, 0,

181 
	}
}

187 
	#˛ib_mem_Æloc_Æig√d_no_Áû
(
size
,
Æign
) \

189 
uw‹d
 
_˛ib_mem_Æloc_size
 = (
size
); \

190 * 
_˛ib_mem_Æloc_p
; \

191 
_˛ib_mem_Æloc_p
 = 
	`˛ib_mem_Æloc_Æig√d
 (
_˛ib_mem_Æloc_size
, (
Æign
)); \

192 i‡(! 
_˛ib_mem_Æloc_p
) \

193 
	`˛ib_∑nic
 ("ÁûedÅÿÆloˇã %d byãs", 
_˛ib_mem_Æloc_size
); \

194 
_˛ib_mem_Æloc_p
; \

195 })

	)

197 
	#˛ib_mem_Æloc_no_Áû
(
size
Ë
	`˛ib_mem_Æloc_Æig√d_no_Áû
(size,1)

	)

200 
	#˛ib_mem_Æloc_°ack
(
byãs
Ë
	`__buûtö_Æloˇ
(byãs)

	)

202 
Æways_ölöe
 
uw‹d


203 
	$˛ib_mem_is_hóp_obje˘
 (*
p
)

205 #i‡
USE_DLMALLOC
 == 0

206 *
hóp
 = 
	`˛ib_mem_gë_≥r_˝u_hóp
 ();

207 
uw‹d
 
off£t
 = (uw‹dË
p
 - (uw‹dË
hóp
;

208 
mhóp_ñt_t
 *
e
, *
n
;

210 i‡(
off£t
 >
	`vec_Àn
 (
hóp
))

213 
e
 = 
	`mhóp_ñt_©_uoff£t
 (
hóp
, 
off£t
);

214 
n
 = 
	`mhóp_√xt_ñt
 (
e
);

217  
e
->
n_u£r_d©a
 =
n
->
¥ev_n_u£r_d©a
;

219 *
hóp
 = 
	`˛ib_mem_gë_≥r_˝u_hóp
 ();

221  
	`m•a˚_is_hóp_obje˘
 (
hóp
, 
p
);

223 
	}
}

225 
Æways_ölöe
 

226 
	$˛ib_mem_‰ì
 (*
p
)

228 
u8
 *
hóp
 = 
	`˛ib_mem_gë_≥r_˝u_hóp
 ();

231 
	`ASSERT
 (
	`˛ib_mem_is_hóp_obje˘
 (
p
));

233 
	`CLIB_MEM_POISON
 (
p
, 
	`˛ib_mem_size_nocheck
 (p));

235 #i‡
USE_DLMALLOC
 == 0

236 
	`mhóp_put
 (
hóp
, (
u8
 *Ë
p
 - heap);

238 
	`m•a˚_put
 (
hóp
, 
p
);

240 
	}
}

242 
Æways_ölöe
 *

243 
	$˛ib_mem_ªÆloc
 (*
p
, 
uw‹d
 
√w_size
, uw‹d 
ﬁd_size
)

246 *
q
 = 
	`˛ib_mem_Æloc
 (
√w_size
);

247 i‡(
q
)

249 
uw‹d
 
c›y_size
;

250 i‡(
ﬁd_size
 < 
√w_size
)

251 
c›y_size
 = 
ﬁd_size
;

253 
c›y_size
 = 
√w_size
;

254 
	`˛ib_mem˝y_Á°
 (
q
, 
p
, 
c›y_size
);

255 
	`˛ib_mem_‰ì
 (
p
);

257  
q
;

258 
	}
}

260 
Æways_ölöe
 
uw‹d


261 
	$˛ib_mem_size
 (*
p
)

263 
	`ASSERT
 (
	`˛ib_mem_is_hóp_obje˘
 (
p
));

264  
	`˛ib_mem_size_nocheck
 (
p
);

265 
	}
}

267 
Æways_ölöe
 

268 
	$˛ib_mem_‰ì_s
 (*
p
)

270 
uw‹d
 
size
 = 
	`˛ib_mem_size
 (
p
);

271 
	`CLIB_MEM_UNPOISON
 (
p
, 
size
);

272 
	`mem£t_s_ölöe
 (
p
, 
size
, 0, size);

273 
	`˛ib_mem_‰ì
 (
p
);

274 
	}
}

276 
Æways_ölöe
 *

277 
	$˛ib_mem_gë_hóp
 ()

279  
	`˛ib_mem_gë_≥r_˝u_hóp
 ();

280 
	}
}

282 
Æways_ölöe
 *

283 
	$˛ib_mem_£t_hóp
 (*
hóp
)

285  
	`˛ib_mem_£t_≥r_˝u_hóp
 (
hóp
);

286 
	}
}

288 *
˛ib_mem_öô
 (*
hóp
, 
uw‹d
 
size
);

289 *
˛ib_mem_öô_thªad_ß„
 (*
mem‹y
, 
uw‹d
 
mem‹y_size
);

291 
˛ib_mem_exô
 ();

293 
uw‹d
 
˛ib_mem_gë_∑ge_size
 ();

295 
˛ib_mem_vÆid©e
 ();

297 
˛ib_mem_åa˚
 (
íabÀ
);

299 
˛ib_mem_is_åa˚d
 ();

304 
uw‹d
 
	mobje˘_cou¡
;

308 
uw‹d
 
	mbyãs_tŸÆ
, 
	mbyãs_u£d
, 
	mbyãs_‰ì
;

312 
uw‹d
 
	mbyãs_ovîhód
;

315 
uw‹d
 
	mbyãs_‰ì_ª˛aimed
;

319 
uw‹d
 
	mbyãs_u£d_sbrk
;

320 
uw‹d
 
	mbyãs_u£d_mm≠
;

323 
uw‹d
 
	mbyãs_max
;

324 } 
	t˛ib_mem_ußge_t
;

326 
˛ib_mem_ußge
 (
˛ib_mem_ußge_t
 * 
ußge
);

328 
u8
 *
f‹m©_˛ib_mem_ußge
 (u8 * 
s
, 
va_li°
 * 
¨gs
);

331 
Æways_ölöe
 *

332 
	$˛ib_mem_vm_Æloc
 (
uw‹d
 
size
)

334 *
mm≠_addr
;

335 
uw‹d
 
Êags
 = 
MAP_PRIVATE
;

337 #ifde‡
MAP_ANONYMOUS


338 
Êags
 |
MAP_ANONYMOUS
;

341 
mm≠_addr
 = 
	`mm≠
 (0, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 
Êags
, -1, 0);

342 i‡(
mm≠_addr
 == (*) -1)

343 
mm≠_addr
 = 0;

345  
mm≠_addr
;

346 
	}
}

348 
Æways_ölöe
 

349 
	$˛ib_mem_vm_‰ì
 (*
addr
, 
uw‹d
 
size
)

351 
	`munm≠
 (
addr
, 
size
);

352 
	}
}

354 
Æways_ölöe
 *

355 
	$˛ib_mem_vm_unm≠
 (*
addr
, 
uw‹d
 
size
)

357 *
mm≠_addr
;

358 
uw‹d
 
Êags
 = 
MAP_PRIVATE
 | 
MAP_FIXED
;

364 
mm≠_addr
 = 
	`mm≠
 (
addr
, 
size
, 
PROT_NONE
, 
Êags
, -1, 0);

365 i‡(
mm≠_addr
 == (*) -1)

366 
mm≠_addr
 = 0;

368  
mm≠_addr
;

369 
	}
}

371 
Æways_ölöe
 *

372 
	$˛ib_mem_vm_m≠
 (*
addr
, 
uw‹d
 
size
)

374 *
mm≠_addr
;

375 
uw‹d
 
Êags
 = 
MAP_PRIVATE
 | 
MAP_FIXED
 | 
MAP_ANONYMOUS
;

377 
mm≠_addr
 = 
	`mm≠
 (
addr
, 
size
, (
PROT_READ
 | 
PROT_WRITE
), 
Êags
, -1, 0);

378 i‡(
mm≠_addr
 == (*) -1)

379 
mm≠_addr
 = 0;

381  
mm≠_addr
;

382 
	}
}

386 
	#CLIB_MEM_VM_F_SHARED
 (1 << 0)

	)

387 
	#CLIB_MEM_VM_F_HUGETLB
 (1 << 1)

	)

388 
	#CLIB_MEM_VM_F_NUMA_PREFER
 (1 << 2)

	)

389 
	#CLIB_MEM_VM_F_NUMA_FORCE
 (1 << 3)

	)

390 
	#CLIB_MEM_VM_F_HUGETLB_PREALLOC
 (1 << 4)

	)

391 
	#CLIB_MEM_VM_F_LOCKED
 (1 << 5)

	)

392 
u32
 
	mÊags
;

403 *
	m«me
;

404 
uw‹d
 
	msize
;

405 
	mnuma_node
;

406 *
	maddr
;

407 
	mfd
;

408 
	mlog2_∑ge_size
;

409 
	mn_∑ges
;

410 
uw‹d
 
	mªque°ed_va
;

411 } 
	t˛ib_mem_vm_Æloc_t
;

413 
˛ib_îr‹_t
 *
˛ib_mem_¸óã_fd
 (*
«me
, *
fdp
);

414 
˛ib_îr‹_t
 *
˛ib_mem_¸óã_hugëlb_fd
 (*
«me
, *
fdp
);

415 
˛ib_îr‹_t
 *
˛ib_mem_vm_ext_Æloc
 (
˛ib_mem_vm_Æloc_t
 * 
a
);

416 
˛ib_mem_vm_ext_‰ì
 (
˛ib_mem_vm_Æloc_t
 * 
a
);

417 
u64
 
˛ib_mem_gë_fd_∑ge_size
 (
fd
);

418 
uw‹d
 
˛ib_mem_gë_deÁu…_hugïage_size
 ();

419 
˛ib_mem_gë_fd_log2_∑ge_size
 (
fd
);

420 
u64
 *
˛ib_mem_vm_gë_∑ddr
 (*
mem
, 
log2_∑ge_size
, 
n_∑ges
);

424 
uw‹d
 
	msize
;

425 
	mfd
;

426 
uw‹d
 
	mªque°ed_va
;

427 *
	maddr
;

428 } 
	t˛ib_mem_vm_m≠_t
;

430 
˛ib_îr‹_t
 *
˛ib_mem_vm_ext_m≠
 (
˛ib_mem_vm_m≠_t
 * 
a
);

431 
˛ib_mem_vm_øndomize_va
 (
uw‹d
 * 
ªque°ed_va
, 
u32
 
log2_∑ge_size
);

432 
mhóp_åa˚
 (*
v
, 
íabÀ
);

433 
uw‹d
 
˛ib_mem_åa˚_íabÀ_dißbÀ
 (uw‹d 
íabÀ
);

434 
˛ib_mem_åa˚
 (
íabÀ
);

436 
	~<vµö‰a/îr‹.h
>

	@/usr/include/vppinfra/string.h

44 #i‚de‡
ö˛uded_˛ib_°rög_h


45 
	#ö˛uded_˛ib_°rög_h


	)

47 
	~<vµö‰a/˛ib.h
>

48 
	~<vµö‰a/ve˘‹.h
>

50 #ifde‡
CLIB_LINUX_KERNEL


51 
	~<löux/°rög.h
>

54 #ifde‡
CLIB_UNIX


55 
	~<°rög.h
>

58 #ifde‡
CLIB_STANDALONE


59 
	~<vµö‰a/°™dÆ⁄e_°rög.h
>

62 #i‡
_x86_64_


63 
	~<x86öåö.h
>

67 
˛ib_memsw≠
 (*
_a
, *
_b
, 
uw‹d
 
byãs
);

73 #i‚de‡
__COVERITY__


74 #i‡
__AVX512F__


75 
	~<vµö‰a/mem˝y_avx512.h
>

76 #ñi‡
__AVX2__


77 
	~<vµö‰a/mem˝y_avx2.h
>

78 #ñi‡
__SSSE3__


79 
	~<vµö‰a/mem˝y_s£3.h
>

81 
	#˛ib_mem˝y_Á°
(
a
,
b
,
c
Ë
	`mem˝y
◊,b,c)

	)

84 
	#˛ib_mem˝y_Á°
(
a
,
b
,
c
Ë
	`mem˝y
◊,b,c)

	)

89 #i‚de‡
EOK


90 
	#EOK
 0

	)

92 #i‚de‡
EINVAL


93 
	#EINVAL
 22

	)

95 #i‚de‡
ESRCH


96 
	#ESRCH
 3

	)

98 #i‚de‡
EOVERFLOW


99 
	#EOVERFLOW
 75

	)

111 
	#CLIB_STRING_MACRO_MAX
 4096

	)

113 
	tî∫o_t
;

114 
uw‹d
 
	trsize_t
;

116 
˛ib_c11_viﬁ©i⁄
 (c⁄° *
s
);

117 
î∫o_t
 
mem˝y_s
 (*
__ª°ri˘__
 
de°
, 
rsize_t
 
dmax
,

118 c⁄° *
__ª°ri˘__
 
§c
, 
rsize_t
 
n
);

120 
Æways_ölöe
 
î∫o_t


121 
	$mem˝y_s_ölöe
 (*
__ª°ri˘__
 
de°
, 
rsize_t
 
dmax
,

122 c⁄° *
__ª°ri˘__
 
§c
, 
rsize_t
 
n
)

124 
uw‹d
 
low
, 
hi
;

125 
u8
 
bad
;

131 i‡(
	`__buûtö_c⁄°™t_p
 (
n
))

133 
	`˛ib_mem˝y_Á°
 (
de°
, 
§c
, 
n
);

134  
EOK
;

143 
bad
 = (
de°
 =0Ë+ (
§c
 =0Ë+ (
n
 > 
dmax
) + (dest == src) + (n == 0);

144 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

147 i‡(
n
 == 0)

148  
EOK
;

149 i‡(
de°
 =
NULL
)

150 
	`˛ib_c11_viﬁ©i⁄
 ("dest NULL");

151 i‡(
§c
 =
NULL
)

152 
	`˛ib_c11_viﬁ©i⁄
 ("src NULL");

153 i‡(
n
 > 
dmax
)

154 
	`˛ib_c11_viﬁ©i⁄
 ("n > dmax");

155 i‡(
de°
 =
§c
)

156 
	`˛ib_c11_viﬁ©i⁄
 ("dest == src");

157  
EINVAL
;

161 
low
 = (
uw‹d
Ë(
§c
 < 
de°
 ? src : dest);

162 
hi
 = (
uw‹d
Ë(
§c
 < 
de°
 ? dest : src);

164 i‡(
	`PREDICT_FALSE
 (
low
 + (
n
 - 1Ë>
hi
))

166 
	`˛ib_c11_viﬁ©i⁄
 ("src/dest overlap");

167  
EINVAL
;

170 
	`˛ib_mem˝y_Á°
 (
de°
, 
§c
, 
n
);

171  
EOK
;

172 
	}
}

180 
	#˛ib_mem˝y
(
d
,
s
,
n
Ë
	`mem˝y_s_ölöe
(d,n,s,n)

	)

182 
î∫o_t
 
mem£t_s
 (*
s
, 
rsize_t
 
smax
, 
c
,Ñsize_à
n
);

184 
Æways_ölöe
 
î∫o_t


185 
	$mem£t_s_ölöe
 (*
s
, 
rsize_t
 
smax
, 
c
,Ñsize_à
n
)

187 
u8
 
bad
;

189 
bad
 = (
s
 =0Ë+ (
n
 > 
smax
);

191 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

193 i‡(
s
 == 0)

194 
	`˛ib_c11_viﬁ©i⁄
 ("s NULL");

195 i‡(
n
 > 
smax
)

196 
	`˛ib_c11_viﬁ©i⁄
 ("n > smax");

197  (
EINVAL
);

199 
	`mem£t
 (
s
, 
c
, 
n
);

200  (
EOK
);

201 
	}
}

214 
	#˛ib_mem£t
(
s
,
c
,
n
Ë
	`mem£t_s_ölöe
(s,n,c,n)

	)

216 
°©ic_Æways_ölöe
 

217 
	$˛ib_mem˝y_À
 (
u8
 * 
d°
, u8 * 
§c
, u8 
Àn
, u8 
max_Àn
)

219 #i‡
	`deföed
 (
CLIB_HAVE_VEC256
)

220 
u8x32
 
s0
, 
s1
, 
d0
, 
d1
;

221 
u8x32
 
mask
 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,

224 
u8x32
 
lv
 = 
	`u8x32_•œt
 (
Àn
);

225 
u8x32
 
add
 = 
	`u8x32_•œt
 (32);

227 
s0
 = 
	`u8x32_lﬂd_u«lig√d
 (
§c
);

228 
s1
 = 
	`u8x32_lﬂd_u«lig√d
 (
§c
 + 32);

229 
d0
 = 
	`u8x32_lﬂd_u«lig√d
 (
d°
);

230 
d1
 = 
	`u8x32_lﬂd_u«lig√d
 (
d°
 + 32);

232 
d0
 = 
	`u8x32_bÀnd
 (d0, 
s0
, 
	`u8x32_is_gª©î
 (
lv
, 
mask
));

233 
	`u8x32_°‹e_u«lig√d
 (
d0
, 
d°
);

235 i‡(
max_Àn
 <= 32)

238 
mask
 +
add
;

239 
d1
 = 
	`u8x32_bÀnd
 (d1, 
s1
, 
	`u8x32_is_gª©î
 (
lv
, 
mask
));

240 
	`u8x32_°‹e_u«lig√d
 (
d1
, 
d°
 + 32);

242 #ñi‡
	`deföed
 (
CLIB_HAVE_VEC128
)

243 
u8x16
 
s0
, 
s1
, 
s2
, 
s3
, 
d0
, 
d1
, 
d2
, 
d3
;

244 
u8x16
 
mask
 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

245 
u8x16
 
lv
 = 
	`u8x16_•œt
 (
Àn
);

246 
u8x16
 
add
 = 
	`u8x16_•œt
 (16);

248 
s0
 = 
	`u8x16_lﬂd_u«lig√d
 (
§c
);

249 
s1
 = 
	`u8x16_lﬂd_u«lig√d
 (
§c
 + 16);

250 
s2
 = 
	`u8x16_lﬂd_u«lig√d
 (
§c
 + 32);

251 
s3
 = 
	`u8x16_lﬂd_u«lig√d
 (
§c
 + 48);

252 
d0
 = 
	`u8x16_lﬂd_u«lig√d
 (
d°
);

253 
d1
 = 
	`u8x16_lﬂd_u«lig√d
 (
d°
 + 16);

254 
d2
 = 
	`u8x16_lﬂd_u«lig√d
 (
d°
 + 32);

255 
d3
 = 
	`u8x16_lﬂd_u«lig√d
 (
d°
 + 48);

257 
d0
 = 
	`u8x16_bÀnd
 (d0, 
s0
, 
	`u8x16_is_gª©î
 (
lv
, 
mask
));

258 
	`u8x16_°‹e_u«lig√d
 (
d0
, 
d°
);

260 i‡(
max_Àn
 <= 16)

263 
mask
 +
add
;

264 
d1
 = 
	`u8x16_bÀnd
 (d1, 
s1
, 
	`u8x16_is_gª©î
 (
lv
, 
mask
));

265 
	`u8x16_°‹e_u«lig√d
 (
d1
, 
d°
 + 16);

267 i‡(
max_Àn
 <= 32)

270 
mask
 +
add
;

271 
d2
 = 
	`u8x16_bÀnd
 (d2, 
s2
, 
	`u8x16_is_gª©î
 (
lv
, 
mask
));

272 
	`u8x16_°‹e_u«lig√d
 (
d2
, 
d°
 + 32);

274 
mask
 +
add
;

275 
d3
 = 
	`u8x16_bÀnd
 (d3, 
s3
, 
	`u8x16_is_gª©î
 (
lv
, 
mask
));

276 
	`u8x16_°‹e_u«lig√d
 (
d3
, 
d°
 + 48);

278 
	`memmove
 (
d°
, 
§c
, 
Àn
);

280 
	}
}

282 
°©ic_Æways_ölöe
 

283 
	$˛ib_mem˝y_À64
 (
u8
 * 
d°
, u8 * 
§c
, u8 
Àn
)

285 
	`˛ib_mem˝y_À
 (
d°
, 
§c
, 
Àn
, 64);

286 
	}
}

288 
°©ic_Æways_ölöe
 

289 
	$˛ib_mem˝y_À32
 (
u8
 * 
d°
, u8 * 
§c
, u8 
Àn
)

291 
	`˛ib_mem˝y_À
 (
d°
, 
§c
, 
Àn
, 32);

292 
	}
}

294 
°©ic_Æways_ölöe
 

295 
	$˛ib_mem£t_u64
 (*
p
, 
u64
 
vÆ
, 
uw‹d
 
cou¡
)

297 
u64
 *
±r
 = 
p
;

298 #i‡
	`deföed
(
CLIB_HAVE_VEC512
)

299 
u64x8
 
v512
 = 
	`u64x8_•œt
 (
vÆ
);

300 
cou¡
 >= 8)

302 
	`u64x8_°‹e_u«lig√d
 (
v512
, 
±r
);

303 
±r
 += 8;

304 
cou¡
 -= 8;

306 i‡(
cou¡
 == 0)

309 #i‡
	`deföed
(
CLIB_HAVE_VEC256
)

310 
u64x4
 
v256
 = 
	`u64x4_•œt
 (
vÆ
);

311 
cou¡
 >= 4)

313 
	`u64x4_°‹e_u«lig√d
 (
v256
, 
±r
);

314 
±r
 += 4;

315 
cou¡
 -= 4;

317 i‡(
cou¡
 == 0)

320 
cou¡
 >= 4)

322 
±r
[0] =Öå[1] =Öå[2] =Öå[3] = 
vÆ
;

323 
±r
 += 4;

324 
cou¡
 -= 4;

327 
cou¡
--)

328 
±r
++[0] = 
vÆ
;

329 
	}
}

331 
°©ic_Æways_ölöe
 

332 
	$˛ib_mem£t_u32
 (*
p
, 
u32
 
vÆ
, 
uw‹d
 
cou¡
)

334 
u32
 *
±r
 = 
p
;

335 #i‡
	`deföed
(
CLIB_HAVE_VEC512
)

336 
u32x16
 
v512
 = 
	`u32x16_•œt
 (
vÆ
);

337 
cou¡
 >= 16)

339 
	`u32x16_°‹e_u«lig√d
 (
v512
, 
±r
);

340 
±r
 += 16;

341 
cou¡
 -= 16;

343 i‡(
cou¡
 == 0)

346 #i‡
	`deföed
(
CLIB_HAVE_VEC256
)

347 
u32x8
 
v256
 = 
	`u32x8_•œt
 (
vÆ
);

348 
cou¡
 >= 8)

350 
	`u32x8_°‹e_u«lig√d
 (
v256
, 
±r
);

351 
±r
 += 8;

352 
cou¡
 -= 8;

354 i‡(
cou¡
 == 0)

357 #i‡
	`deföed
(
CLIB_HAVE_VEC128
Ë&& deföed(
CLIB_HAVE_VEC128_UNALIGNED_LOAD_STORE
)

358 
u32x4
 
v128
 = 
	`u32x4_•œt
 (
vÆ
);

359 
cou¡
 >= 4)

361 
	`u32x4_°‹e_u«lig√d
 (
v128
, 
±r
);

362 
±r
 += 4;

363 
cou¡
 -= 4;

366 
cou¡
 >= 4)

368 
±r
[0] =Öå[1] =Öå[2] =Öå[3] = 
vÆ
;

369 
±r
 += 4;

370 
cou¡
 -= 4;

373 
cou¡
--)

374 
±r
++[0] = 
vÆ
;

375 
	}
}

377 
°©ic_Æways_ölöe
 

378 
	$˛ib_mem£t_u16
 (*
p
, 
u16
 
vÆ
, 
uw‹d
 
cou¡
)

380 
u16
 *
±r
 = 
p
;

381 #i‡
	`deföed
(
CLIB_HAVE_VEC512
)

382 
u16x32
 
v512
 = 
	`u16x32_•œt
 (
vÆ
);

383 
cou¡
 >= 32)

385 
	`u16x32_°‹e_u«lig√d
 (
v512
, 
±r
);

386 
±r
 += 32;

387 
cou¡
 -= 32;

389 i‡(
cou¡
 == 0)

392 #i‡
	`deföed
(
CLIB_HAVE_VEC256
)

393 
u16x16
 
v256
 = 
	`u16x16_•œt
 (
vÆ
);

394 
cou¡
 >= 16)

396 
	`u16x16_°‹e_u«lig√d
 (
v256
, 
±r
);

397 
±r
 += 16;

398 
cou¡
 -= 16;

400 i‡(
cou¡
 == 0)

403 #i‡
	`deföed
(
CLIB_HAVE_VEC128
Ë&& deföed(
CLIB_HAVE_VEC128_UNALIGNED_LOAD_STORE
)

404 
u16x8
 
v128
 = 
	`u16x8_•œt
 (
vÆ
);

405 
cou¡
 >= 8)

407 
	`u16x8_°‹e_u«lig√d
 (
v128
, 
±r
);

408 
±r
 += 8;

409 
cou¡
 -= 8;

412 
cou¡
 >= 4)

414 
±r
[0] =Öå[1] =Öå[2] =Öå[3] = 
vÆ
;

415 
±r
 += 4;

416 
cou¡
 -= 4;

419 
cou¡
--)

420 
±r
++[0] = 
vÆ
;

421 
	}
}

423 
°©ic_Æways_ölöe
 

424 
	$˛ib_mem£t_u8
 (*
p
, 
u8
 
vÆ
, 
uw‹d
 
cou¡
)

426 
u8
 *
±r
 = 
p
;

427 #i‡
	`deföed
(
CLIB_HAVE_VEC512
)

428 
u8x64
 
v512
 = 
	`u8x64_•œt
 (
vÆ
);

429 
cou¡
 >= 64)

431 
	`u8x64_°‹e_u«lig√d
 (
v512
, 
±r
);

432 
±r
 += 64;

433 
cou¡
 -= 64;

435 i‡(
cou¡
 == 0)

438 #i‡
	`deföed
(
CLIB_HAVE_VEC256
)

439 
u8x32
 
v256
 = 
	`u8x32_•œt
 (
vÆ
);

440 
cou¡
 >= 32)

442 
	`u8x32_°‹e_u«lig√d
 (
v256
, 
±r
);

443 
±r
 += 32;

444 
cou¡
 -= 32;

446 i‡(
cou¡
 == 0)

449 #i‡
	`deföed
(
CLIB_HAVE_VEC128
Ë&& deföed(
CLIB_HAVE_VEC128_UNALIGNED_LOAD_STORE
)

450 
u8x16
 
v128
 = 
	`u8x16_•œt
 (
vÆ
);

451 
cou¡
 >= 16)

453 
	`u8x16_°‹e_u«lig√d
 (
v128
, 
±r
);

454 
±r
 += 16;

455 
cou¡
 -= 16;

458 
cou¡
 >= 4)

460 
±r
[0] =Öå[1] =Öå[2] =Öå[3] = 
vÆ
;

461 
±r
 += 4;

462 
cou¡
 -= 4;

465 
cou¡
--)

466 
±r
++[0] = 
vÆ
;

467 
	}
}

469 
°©ic_Æways_ölöe
 
uw‹d


470 
	$˛ib_cou¡_equÆ_u64
 (
u64
 * 
d©a
, 
uw‹d
 
max_cou¡
)

472 
uw‹d
 
cou¡
;

473 
u64
 
fú°
;

475 i‡(
max_cou¡
 == 1)

477 i‡(
d©a
[0] != data[1])

480 
cou¡
 = 0;

481 
fú°
 = 
d©a
[0];

483 #i‡
	`deföed
(
CLIB_HAVE_VEC256
)

484 
u64x4
 
•œt
 = 
	`u64x4_•œt
 (
fú°
);

487 
u64
 
bmp
;

488 
bmp
 = 
	`u8x32_msb_mask
 ((
u8x32
Ë(
	`u64x4_lﬂd_u«lig√d
 (
d©a
Ë=
•œt
));

489 i‡(
bmp
 != 0xffffffff)

491 
cou¡
 +
	`cou¡_åaûög_zîos
 (~
bmp
) / 8;

492  
	`˛ib_mö
 (
cou¡
, 
max_cou¡
);

495 
d©a
 += 4;

496 
cou¡
 += 4;

498 i‡(
cou¡
 >
max_cou¡
)

499  
max_cou¡
;

502 
cou¡
 += 2;

503 
d©a
 += 2;

504 
cou¡
 + 3 < 
max_cou¡
 &&

505 ((
d©a
[0] ^ 
fú°
) | (data[1] ^ first) |

506 (
d©a
[2] ^ 
fú°
) | (data[3] ^ first)) == 0)

508 
d©a
 += 4;

509 
cou¡
 += 4;

511 
cou¡
 < 
max_cou¡
 && (
d©a
[0] =
fú°
))

513 
d©a
 += 1;

514 
cou¡
 += 1;

516  
cou¡
;

517 
	}
}

519 
°©ic_Æways_ölöe
 
uw‹d


520 
	$˛ib_cou¡_equÆ_u32
 (
u32
 * 
d©a
, 
uw‹d
 
max_cou¡
)

522 
uw‹d
 
cou¡
;

523 
u32
 
fú°
;

525 i‡(
max_cou¡
 == 1)

527 i‡(
d©a
[0] != data[1])

530 
cou¡
 = 0;

531 
fú°
 = 
d©a
[0];

533 #i‡
	`deföed
(
CLIB_HAVE_VEC256
)

534 
u32x8
 
•œt
 = 
	`u32x8_•œt
 (
fú°
);

537 
u64
 
bmp
;

538 
bmp
 = 
	`u8x32_msb_mask
 ((
u8x32
Ë(
	`u32x8_lﬂd_u«lig√d
 (
d©a
Ë=
•œt
));

539 i‡(
bmp
 != 0xffffffff)

541 
cou¡
 +
	`cou¡_åaûög_zîos
 (~
bmp
) / 4;

542  
	`˛ib_mö
 (
cou¡
, 
max_cou¡
);

545 
d©a
 += 8;

546 
cou¡
 += 8;

548 i‡(
cou¡
 >
max_cou¡
)

549  
max_cou¡
;

551 #ñi‡
	`deföed
(
CLIB_HAVE_VEC128
Ë&& deföed(
CLIB_HAVE_VEC128_MSB_MASK
)

552 
u32x4
 
•œt
 = 
	`u32x4_•œt
 (
fú°
);

555 
u64
 
bmp
;

556 
bmp
 = 
	`u8x16_msb_mask
 ((
u8x16
Ë(
	`u32x4_lﬂd_u«lig√d
 (
d©a
Ë=
•œt
));

557 i‡(
bmp
 != 0xffff)

559 
cou¡
 +
	`cou¡_åaûög_zîos
 (~
bmp
) / 4;

560  
	`˛ib_mö
 (
cou¡
, 
max_cou¡
);

563 
d©a
 += 4;

564 
cou¡
 += 4;

566 i‡(
cou¡
 >
max_cou¡
)

567  
max_cou¡
;

570 
cou¡
 += 2;

571 
d©a
 += 2;

572 
cou¡
 + 3 < 
max_cou¡
 &&

573 ((
d©a
[0] ^ 
fú°
) | (data[1] ^ first) |

574 (
d©a
[2] ^ 
fú°
) | (data[3] ^ first)) == 0)

576 
d©a
 += 4;

577 
cou¡
 += 4;

579 
cou¡
 < 
max_cou¡
 && (
d©a
[0] =
fú°
))

581 
d©a
 += 1;

582 
cou¡
 += 1;

584  
cou¡
;

585 
	}
}

587 
°©ic_Æways_ölöe
 
uw‹d


588 
	$˛ib_cou¡_equÆ_u16
 (
u16
 * 
d©a
, 
uw‹d
 
max_cou¡
)

590 
uw‹d
 
cou¡
;

591 
u16
 
fú°
;

593 i‡(
max_cou¡
 == 1)

595 i‡(
d©a
[0] != data[1])

598 
cou¡
 = 0;

599 
fú°
 = 
d©a
[0];

601 #i‡
	`deföed
(
CLIB_HAVE_VEC256
)

602 
u16x16
 
•œt
 = 
	`u16x16_•œt
 (
fú°
);

605 
u64
 
bmp
;

606 
bmp
 = 
	`u8x32_msb_mask
 ((
u8x32
Ë(
	`u16x16_lﬂd_u«lig√d
 (
d©a
Ë=
•œt
));

607 i‡(
bmp
 != 0xffffffff)

609 
cou¡
 +
	`cou¡_åaûög_zîos
 (~
bmp
) / 2;

610  
	`˛ib_mö
 (
cou¡
, 
max_cou¡
);

613 
d©a
 += 16;

614 
cou¡
 += 16;

616 i‡(
cou¡
 >
max_cou¡
)

617  
max_cou¡
;

619 #ñi‡
	`deföed
(
CLIB_HAVE_VEC128
Ë&& deföed(
CLIB_HAVE_VEC128_MSB_MASK
)

620 
u16x8
 
•œt
 = 
	`u16x8_•œt
 (
fú°
);

623 
u64
 
bmp
;

624 
bmp
 = 
	`u8x16_msb_mask
 ((
u8x16
Ë(
	`u16x8_lﬂd_u«lig√d
 (
d©a
Ë=
•œt
));

625 i‡(
bmp
 != 0xffff)

627 
cou¡
 +
	`cou¡_åaûög_zîos
 (~
bmp
) / 2;

628  
	`˛ib_mö
 (
cou¡
, 
max_cou¡
);

631 
d©a
 += 8;

632 
cou¡
 += 8;

634 i‡(
cou¡
 >
max_cou¡
)

635  
max_cou¡
;

638 
cou¡
 += 2;

639 
d©a
 += 2;

640 
cou¡
 + 3 < 
max_cou¡
 &&

641 ((
d©a
[0] ^ 
fú°
) | (data[1] ^ first) |

642 (
d©a
[2] ^ 
fú°
) | (data[3] ^ first)) == 0)

644 
d©a
 += 4;

645 
cou¡
 += 4;

647 
cou¡
 < 
max_cou¡
 && (
d©a
[0] =
fú°
))

649 
d©a
 += 1;

650 
cou¡
 += 1;

652  
cou¡
;

653 
	}
}

655 
°©ic_Æways_ölöe
 
uw‹d


656 
	$˛ib_cou¡_equÆ_u8
 (
u8
 * 
d©a
, 
uw‹d
 
max_cou¡
)

658 
uw‹d
 
cou¡
;

659 
u8
 
fú°
;

661 i‡(
max_cou¡
 == 1)

663 i‡(
d©a
[0] != data[1])

666 
cou¡
 = 0;

667 
fú°
 = 
d©a
[0];

669 #i‡
	`deföed
(
CLIB_HAVE_VEC256
)

670 
u8x32
 
•œt
 = 
	`u8x32_•œt
 (
fú°
);

673 
u64
 
bmp
;

674 
bmp
 = 
	`u8x32_msb_mask
 ((
u8x32
Ë(
	`u8x32_lﬂd_u«lig√d
 (
d©a
Ë=
•œt
));

675 i‡(
bmp
 != 0xffffffff)

677 
cou¡
 +
	`cou¡_åaûög_zîos
 (~
bmp
);

678  
	`˛ib_mö
 (
cou¡
, 
max_cou¡
);

681 
d©a
 += 32;

682 
cou¡
 += 32;

684 i‡(
cou¡
 >
max_cou¡
)

685  
max_cou¡
;

687 #ñi‡
	`deföed
(
CLIB_HAVE_VEC128
Ë&& deföed(
CLIB_HAVE_VEC128_MSB_MASK
)

688 
u8x16
 
•œt
 = 
	`u8x16_•œt
 (
fú°
);

691 
u64
 
bmp
;

692 
bmp
 = 
	`u8x16_msb_mask
 ((
u8x16
Ë(
	`u8x16_lﬂd_u«lig√d
 (
d©a
Ë=
•œt
));

693 i‡(
bmp
 != 0xffff)

695 
cou¡
 +
	`cou¡_åaûög_zîos
 (~
bmp
);

696  
	`˛ib_mö
 (
cou¡
, 
max_cou¡
);

699 
d©a
 += 16;

700 
cou¡
 += 16;

702 i‡(
cou¡
 >
max_cou¡
)

703  
max_cou¡
;

706 
cou¡
 += 2;

707 
d©a
 += 2;

708 
cou¡
 + 3 < 
max_cou¡
 &&

709 ((
d©a
[0] ^ 
fú°
) | (data[1] ^ first) |

710 (
d©a
[2] ^ 
fú°
) | (data[3] ^ first)) == 0)

712 
d©a
 += 4;

713 
cou¡
 += 4;

715 
cou¡
 < 
max_cou¡
 && (
d©a
[0] =
fú°
))

717 
d©a
 += 1;

718 
cou¡
 += 1;

720  
cou¡
;

721 
	}
}

737 
	#˛ib_memcmp
(
s1
,
s2
,
m1
) \

738 ({ 
__diff
 = 0; \

739 
	`memcmp_s_ölöe
 (
s1
, 
m1
, 
s2
, m1, &
__diff
); \

740 
__diff
; \

741 })

	)

743 
î∫o_t
 
memcmp_s
 (c⁄° *
s1
, 
rsize_t
 
s1max
, c⁄° *
s2
,

744 
rsize_t
 
s2max
, *
diff
);

746 
Æways_ölöe
 
î∫o_t


747 
	$memcmp_s_ölöe
 (c⁄° *
s1
, 
rsize_t
 
s1max
, c⁄° *
s2
,Ñsize_à
s2max
,

748 *
diff
)

750 
u8
 
bad
;

752 
bad
 = (
s1
 =0Ë+ (
s2
 =0Ë+ (
diff
 =0Ë+ (
s2max
 > 
s1max
) + (s2max == 0) +

753 (
s1max
 == 0);

755 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

757 i‡(
s1
 =
NULL
)

758 
	`˛ib_c11_viﬁ©i⁄
 ("s1 NULL");

759 i‡(
s2
 =
NULL
)

760 
	`˛ib_c11_viﬁ©i⁄
 ("s2 NULL");

761 i‡(
diff
 =
NULL
)

762 
	`˛ib_c11_viﬁ©i⁄
 ("diff NULL");

763 i‡(
s2max
 > 
s1max
)

764 
	`˛ib_c11_viﬁ©i⁄
 ("s2max > s1max");

765 i‡(
s2max
 == 0)

766 
	`˛ib_c11_viﬁ©i⁄
 ("s2max 0");

767 i‡(
s1max
 == 0)

768 
	`˛ib_c11_viﬁ©i⁄
 ("s1max 0");

769  
EINVAL
;

772 i‡(
	`PREDICT_FALSE
 (
s1
 =
s2
))

774 *
diff
 = 0;

775  
EOK
;

778 *
diff
 = 
	`memcmp
 (
s1
, 
s2
, 
s2max
);

779  
EOK
;

780 
	}
}

785 
	#˛ib_°∫Àn
(
s
,
m
Ë
	`°∫Àn_s_ölöe
(s,m)

	)

787 
size_t
 
°∫Àn_s
 (c⁄° *
s
, size_à
maxsize
);

789 
Æways_ölöe
 
size_t


790 
	$°∫Àn_s_ölöe
 (c⁄° *
s
, 
size_t
 
maxsize
)

792 
u8
 
bad
;

794 
bad
 = (
s
 =0Ë+ (
maxsize
 == 0);

795 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

797 i‡(
s
 == 0)

798 
	`˛ib_c11_viﬁ©i⁄
 ("s NULL");

799 i‡(
maxsize
 == 0)

800 
	`˛ib_c11_viﬁ©i⁄
 ("maxsize 0");

803  
	`°∫Àn
 (
s
, 
maxsize
);

804 
	}
}

826 
	#˛ib_°rcmp
(
s1
,
s2
) \

827 ({ 
__ödiˇt‹
 = 0; \

828 
	`°rcmp_s_ölöe
 (
s1
, 
CLIB_STRING_MACRO_MAX
, 
s2
, &
__ödiˇt‹
); \

829 
__ödiˇt‹
; \

830 })

	)

832 
î∫o_t
 
°rcmp_s
 (c⁄° *
s1
, 
rsize_t
 
s1max
, c⁄° *
s2
,

833 *
ödiˇt‹
);

835 
Æways_ölöe
 
î∫o_t


836 
	$°rcmp_s_ölöe
 (c⁄° *
s1
, 
rsize_t
 
s1max
, c⁄° *
s2
,

837 *
ödiˇt‹
)

839 
u8
 
bad
;

841 
bad
 = (
ödiˇt‹
 =0Ë+ (
s1
 =0Ë+ (
s2
 =0Ë+ (
s1max
 == 0) +

842 (
s1
 && 
s1max
 && s1[
	`˛ib_°∫Àn
 (s1, s1max)] != '\0');

844 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

846 i‡(
ödiˇt‹
 =
NULL
)

847 
	`˛ib_c11_viﬁ©i⁄
 ("indicator NULL");

848 i‡(
s1
 =
NULL
)

849 
	`˛ib_c11_viﬁ©i⁄
 ("s1 NULL");

850 i‡(
s2
 =
NULL
)

851 
	`˛ib_c11_viﬁ©i⁄
 ("s2 NULL");

852 i‡(
s1max
 == 0)

853 
	`˛ib_c11_viﬁ©i⁄
 ("s1max 0");

854 i‡(
s1
 && 
s1max
 && s1[
	`˛ib_°∫Àn
 (s1, s1max)] != '\0')

855 
	`˛ib_c11_viﬁ©i⁄
 ("s1 unterminated");

856  
EINVAL
;

859 *
ödiˇt‹
 = 
	`°rcmp
 (
s1
, 
s2
);

860  
EOK
;

861 
	}
}

880 
	#˛ib_°∫cmp
(
s1
,
s2
,
n
) \

881 ({ 
__ödiˇt‹
 = 0; \

882 
	`°∫cmp_s_ölöe
 (
s1
, 
CLIB_STRING_MACRO_MAX
, 
s2
, 
n
, &
__ödiˇt‹
); \

883 
__ödiˇt‹
; \

884 })

	)

886 
î∫o_t
 
°∫cmp_s
 (c⁄° *
s1
, 
rsize_t
 
s1max
, c⁄° *
s2
,Ñsize_à
n
,

887 *
ödiˇt‹
);

889 
Æways_ölöe
 
î∫o_t


890 
	$°∫cmp_s_ölöe
 (c⁄° *
s1
, 
rsize_t
 
s1max
, c⁄° *
s2
,Ñsize_à
n
,

891 *
ödiˇt‹
)

893 
u8
 
bad
;

894 
u8
 
s1_gª©î_s1max
 = (
s1
 && 
s1max
 && 
n
 > 
	`˛ib_°∫Àn
 (s1, s1max));

896 i‡(
	`PREDICT_FALSE
 (
s1_gª©î_s1max
 && 
ödiˇt‹
))

903 
	`˛ib_c11_viﬁ©i⁄
 ("nÉxceeds s1Üength");

904 *
ödiˇt‹
 = 
	`°∫cmp
 (
s1
, 
s2
, 
n
);

905  
EINVAL
;

908 
bad
 = (
s1
 =0Ë+ (
s2
 =0Ë+ (
ödiˇt‹
 =0Ë+ (
s1max
 == 0) +

909 (
s1
 && 
s1max
 && s1[
	`˛ib_°∫Àn
 (s1, s1max)] !'\0'Ë+ 
s1_gª©î_s1max
;

911 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

913 i‡(
ödiˇt‹
 =
NULL
)

914 
	`˛ib_c11_viﬁ©i⁄
 ("indicator NULL");

915 i‡(
s1
 =
NULL
)

916 
	`˛ib_c11_viﬁ©i⁄
 ("s1 NULL");

917 i‡(
s2
 =
NULL
)

918 
	`˛ib_c11_viﬁ©i⁄
 ("s2 NULL");

919 i‡(
s1max
 == 0)

920 
	`˛ib_c11_viﬁ©i⁄
 ("s1max 0");

921 i‡(
s1
 && 
s1max
 && s1[
	`˛ib_°∫Àn
 (s1, s1max)] != '\0')

922 
	`˛ib_c11_viﬁ©i⁄
 ("s1 unterminated");

923 i‡(
s1_gª©î_s1max
)

924 
	`˛ib_c11_viﬁ©i⁄
 ("nÉxceeds s1Üength");

925  
EINVAL
;

928 *
ödiˇt‹
 = 
	`°∫cmp
 (
s1
, 
s2
, 
n
);

929  
EOK
;

930 
	}
}

938 
	#˛ib_°r˝y
(
d
,
s
Ë
	`°r˝y_s_ölöe
(d,
CLIB_STRING_MACRO_MAX
,s)

	)

940 
î∫o_t
 
°r˝y_s
 (*
__ª°ri˘__
 
de°
, 
rsize_t
 
dmax
,

941 c⁄° *
__ª°ri˘__
 
§c
);

943 
Æways_ölöe
 
î∫o_t


944 
	$°r˝y_s_ölöe
 (*
__ª°ri˘__
 
de°
, 
rsize_t
 
dmax
,

945 c⁄° *
__ª°ri˘__
 
§c
)

947 
u8
 
bad
;

948 
uw‹d
 
low
, 
hi
;

949 
size_t
 
n
;

951 
bad
 = (
de°
 =0Ë+ (
dmax
 =0Ë+ (
§c
 == 0);

952 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

954 i‡(
de°
 == 0)

955 
	`˛ib_c11_viﬁ©i⁄
 ("dest NULL");

956 i‡(
§c
 == 0)

957 
	`˛ib_c11_viﬁ©i⁄
 ("src NULL");

958 i‡(
dmax
 == 0)

959 
	`˛ib_c11_viﬁ©i⁄
 ("dmax 0");

960  
EINVAL
;

963 
n
 = 
	`˛ib_°∫Àn
 (
§c
, 
dmax
);

964 i‡(
	`PREDICT_FALSE
 (
n
 >
dmax
))

966 
	`˛ib_c11_viﬁ©i⁄
 ("notÉnough space for dest");

967  (
EINVAL
);

970 i‡(
	`PREDICT_FALSE
 (
n
 == 0))

971  
EOK
;

974 
low
 = (
uw‹d
Ë(
§c
 < 
de°
 ? src : dest);

975 
hi
 = (
uw‹d
Ë(
§c
 < 
de°
 ? dest : src);

977 i‡(
	`PREDICT_FALSE
 (
low
 + (
n
 - 1Ë>
hi
))

979 
	`˛ib_c11_viﬁ©i⁄
 ("src/dest overlap");

980  
EINVAL
;

983 
	`˛ib_mem˝y_Á°
 (
de°
, 
§c
, 
n
);

984 
de°
[
n
] = '\0';

985  
EOK
;

986 
	}
}

995 
	#˛ib_°∫˝y
(
d
,
s
,
n
Ë
	`°∫˝y_s_ölöe
(d,
CLIB_STRING_MACRO_MAX
,s,n)

	)

997 
î∫o_t


998 
°∫˝y_s
 (*
__ª°ri˘__
 
de°
, 
rsize_t
 
dmax
,

999 c⁄° *
__ª°ri˘__
 
§c
, 
rsize_t
 
n
);

1001 
Æways_ölöe
 
î∫o_t


1002 
	$°∫˝y_s_ölöe
 (*
__ª°ri˘__
 
de°
, 
rsize_t
 
dmax
,

1003 c⁄° *
__ª°ri˘__
 
§c
, 
rsize_t
 
n
)

1005 
u8
 
bad
;

1006 
uw‹d
 
low
, 
hi
;

1007 
rsize_t
 
m
;

1008 
î∫o_t
 
°©us
 = 
EOK
;

1010 
bad
 = (
de°
 =0Ë+ (
dmax
 =0Ë+ (
§c
 =0Ë+ (
n
 == 0);

1011 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

1014 i‡(
n
 == 0)

1015  
EOK
;

1016 i‡(
de°
 == 0)

1017 
	`˛ib_c11_viﬁ©i⁄
 ("dest NULL");

1018 i‡(
§c
 == 0)

1019 
	`˛ib_c11_viﬁ©i⁄
 ("src NULL");

1020 i‡(
dmax
 == 0)

1021 
	`˛ib_c11_viﬁ©i⁄
 ("dmax 0");

1022  
EINVAL
;

1025 i‡(
	`PREDICT_FALSE
 (
n
 >
dmax
))

1028 
	`˛ib_c11_viﬁ©i⁄
 ("n >= dmax");

1029 
m
 = 
	`˛ib_°∫Àn
 (
§c
, 
dmax
);

1030 i‡(
m
 >
dmax
)

1033 
m
 = 
dmax
 - 1;

1034 
°©us
 = 
EOVERFLOW
;

1039 
m
 = 
	`˛ib_°∫Àn
 (
§c
, 
n
);

1042 
low
 = (
uw‹d
Ë(
§c
 < 
de°
 ? src : dest);

1043 
hi
 = (
uw‹d
Ë(
§c
 < 
de°
 ? dest : src);

1050 i‡(
	`PREDICT_FALSE
 (
low
 + (
m
 - 1Ë>
hi
))

1052 
m
 = 
	`˛ib_°∫Àn
 (
§c
, m);

1054 i‡(
low
 + (
m
 - 1Ë>
hi
)

1056 
	`˛ib_c11_viﬁ©i⁄
 ("src/dest overlap");

1057  
EINVAL
;

1061 
	`˛ib_mem˝y_Á°
 (
de°
, 
§c
, 
m
);

1062 
de°
[
m
] = '\0';

1063  
°©us
;

1064 
	}
}

1074 
	#˛ib_°rˇt
(
d
,
s
Ë
	`°rˇt_s_ölöe
(d,
CLIB_STRING_MACRO_MAX
,s)

	)

1076 
î∫o_t
 
°rˇt_s
 (*
__ª°ri˘__
 
de°
, 
rsize_t
 
dmax
,

1077 c⁄° *
__ª°ri˘__
 
§c
);

1079 
Æways_ölöe
 
î∫o_t


1080 
	$°rˇt_s_ölöe
 (*
__ª°ri˘__
 
de°
, 
rsize_t
 
dmax
,

1081 c⁄° *
__ª°ri˘__
 
§c
)

1083 
u8
 
bad
;

1084 
uw‹d
 
low
, 
hi
;

1085 
size_t
 
m
, 
n
, 
de°_size
;

1087 
bad
 = (
de°
 =0Ë+ (
dmax
 =0Ë+ (
§c
 == 0);

1088 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

1090 i‡(
de°
 == 0)

1091 
	`˛ib_c11_viﬁ©i⁄
 ("dest NULL");

1092 i‡(
§c
 == 0)

1093 
	`˛ib_c11_viﬁ©i⁄
 ("src NULL");

1094 i‡(
dmax
 == 0)

1095 
	`˛ib_c11_viﬁ©i⁄
 ("dmax 0");

1096  
EINVAL
;

1099 
de°_size
 = 
	`˛ib_°∫Àn
 (
de°
, 
dmax
);

1100 
m
 = 
dmax
 - 
de°_size
;

1101 
n
 = 
	`˛ib_°∫Àn
 (
§c
, 
m
);

1102 i‡(
	`PREDICT_FALSE
 (
n
 >
m
))

1104 
	`˛ib_c11_viﬁ©i⁄
 ("notÉnough space for dest");

1105  
EINVAL
;

1109 i‡(
	`PREDICT_FALSE
 (
n
 == 0))

1110  
EOK
;

1113 
low
 = (
uw‹d
Ë(
§c
 < 
de°
 ? src : dest);

1114 
hi
 = (
uw‹d
Ë(
§c
 < 
de°
 ? dest : src);

1116 i‡(
	`PREDICT_FALSE
 (
low
 + (
n
 - 1Ë>
hi
))

1118 
	`˛ib_c11_viﬁ©i⁄
 ("src/dest overlap");

1119  
EINVAL
;

1122 
	`˛ib_mem˝y_Á°
 (
de°
 + 
de°_size
, 
§c
, 
n
);

1123 
de°
[
de°_size
 + 
n
] = '\0';

1124  
EOK
;

1125 
	}
}

1135 
	#˛ib_°∫ˇt
(
d
,
s
,
n
Ë
	`°∫ˇt_s_ölöe
(d,
CLIB_STRING_MACRO_MAX
,s,n)

	)

1137 
î∫o_t
 
°∫ˇt_s
 (*
__ª°ri˘__
 
de°
, 
rsize_t
 
dmax
,

1138 c⁄° *
__ª°ri˘__
 
§c
, 
rsize_t
 
n
);

1140 
Æways_ölöe
 
î∫o_t


1141 
	$°∫ˇt_s_ölöe
 (*
__ª°ri˘__
 
de°
, 
rsize_t
 
dmax
,

1142 c⁄° *
__ª°ri˘__
 
§c
, 
rsize_t
 
n
)

1144 
u8
 
bad
;

1145 
uw‹d
 
low
, 
hi
;

1146 
size_t
 
m
, 
de°_size
, 
Ælowed_size
;

1147 
î∫o_t
 
°©us
 = 
EOK
;

1149 
bad
 = (
de°
 =0Ë+ (
§c
 =0Ë+ (
dmax
 =0Ë+ (
n
 == 0);

1150 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

1153 i‡(
n
 == 0)

1154  
EOK
;

1155 i‡(
de°
 == 0)

1156 
	`˛ib_c11_viﬁ©i⁄
 ("dest NULL");

1157 i‡(
§c
 == 0)

1158 
	`˛ib_c11_viﬁ©i⁄
 ("src NULL");

1159 i‡(
dmax
 == 0)

1160 
	`˛ib_c11_viﬁ©i⁄
 ("dmax 0");

1161  
EINVAL
;

1165 
low
 = (
uw‹d
Ë(
§c
 < 
de°
 ? src : dest);

1166 
hi
 = (
uw‹d
Ë(
§c
 < 
de°
 ? dest : src);

1168 i‡(
	`PREDICT_FALSE
 (
low
 + (
n
 - 1Ë>
hi
))

1170 
	`˛ib_c11_viﬁ©i⁄
 ("src/dest overlap");

1171  
EINVAL
;

1174 
de°_size
 = 
	`˛ib_°∫Àn
 (
de°
, 
dmax
);

1175 
Ælowed_size
 = 
dmax
 - 
de°_size
;

1177 i‡(
	`PREDICT_FALSE
 (
Ælowed_size
 == 0))

1179 
	`˛ib_c11_viﬁ©i⁄
 ("no spaceÜeft in dest");

1180  (
EINVAL
);

1183 i‡(
	`PREDICT_FALSE
 (
n
 >
Ælowed_size
))

1190 
m
 = 
	`˛ib_°∫Àn
 (
§c
, 
Ælowed_size
);

1191 i‡(
m
 >
Ælowed_size
)

1193 
m
 = 
Ælowed_size
 - 1;

1194 
°©us
 = 
EOVERFLOW
;

1198 
m
 = 
	`˛ib_°∫Àn
 (
§c
, 
n
);

1200 
	`˛ib_mem˝y_Á°
 (
de°
 + 
de°_size
, 
§c
, 
m
);

1201 
de°
[
de°_size
 + 
m
] = '\0';

1202  
°©us
;

1203 
	}
}

1214 
	#˛ib_°πok
(
s1
,
s2
,
p
) \

1215 ({ 
rsize_t
 
__s1max
 = 
CLIB_STRING_MACRO_MAX
; \

1216 
	`°πok_s_ölöe
 (
s1
, &
__s1max
, 
s2
, 
p
); \

1217 })

	)

1219 *
°πok_s
 (*
__ª°ri˘__
 
s1
, 
rsize_t
 * __ª°ri˘__ 
s1max
,

1220 c⁄° *
__ª°ri˘__
 
s2
, **__ª°ri˘__ 
±r
);

1222 
Æways_ölöe
 *

1223 
	$°πok_s_ölöe
 (*
__ª°ri˘__
 
s1
, 
rsize_t
 * __ª°ri˘__ 
s1max
,

1224 c⁄° *
__ª°ri˘__
 
s2
, **__ª°ri˘__ 
±r
)

1226 
	#STRTOK_DELIM_MAX_LEN
 16

	)

1227 
u8
 
bad
;

1228 c⁄° *
±
;

1229 *
±okí
;

1230 
uw‹d
 
dÀn
, 
¶í
;

1232 
bad
 = (
s1max
 =0Ë+ (
s2
 =0Ë+ (
±r
 == 0) +

1233 ((
s1
 =0Ë&& 
±r
 && (*ptr == 0));

1234 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

1236 i‡(
s2
 =
NULL
)

1237 
	`˛ib_c11_viﬁ©i⁄
 ("s2 NULL");

1238 i‡(
s1max
 =
NULL
)

1239 
	`˛ib_c11_viﬁ©i⁄
 ("s1max is NULL");

1240 i‡(
±r
 =
NULL
)

1241 
	`˛ib_c11_viﬁ©i⁄
 ("ptr is NULL");

1243 i‡((
s1
 =0Ë&& 
±r
 && (*ptr == 0))

1244 
	`˛ib_c11_viﬁ©i⁄
 ("s1ándÖtr contentsáre NULL");

1248 i‡(
s1
 == 0)

1249 
s1
 = *
±r
;

1254 
dÀn
 = *
s1max
;

1255 
±okí
 = 0;

1256 *
s1
 !'\0' && !
±okí
)

1258 i‡(
	`PREDICT_FALSE
 (
dÀn
 == 0))

1260 *
±r
 = 0;

1261 
	`˛ib_c11_viﬁ©i⁄
 ("s1 unterminated");

1269 
¶í
 = 
STRTOK_DELIM_MAX_LEN
;

1270 
±
 = 
s2
;

1271 *
±
 != '\0')

1273 i‡(
	`PREDICT_FALSE
 (
¶í
 == 0))

1275 *
±r
 = 0;

1276 
	`˛ib_c11_viﬁ©i⁄
 ("s2 unterminated");

1279 
¶í
--;

1280 i‡(*
s1
 =*
±
)

1282 
±okí
 = 0;

1287 
±
++;

1288 
±okí
 = 
s1
;

1291 
s1
++;

1292 
dÀn
--;

1299 i‡(
±okí
 == 0)

1301 *
s1max
 = 
dÀn
;

1302  (
±okí
);

1308 *
s1
 != '\0')

1310 i‡(
dÀn
 == 0)

1312 *
±r
 = 0;

1313 
	`˛ib_c11_viﬁ©i⁄
 ("s1 unterminated");

1317 
¶í
 = 
STRTOK_DELIM_MAX_LEN
;

1318 
±
 = 
s2
;

1319 *
±
 != '\0')

1321 i‡(
¶í
 == 0)

1323 *
±r
 = 0;

1324 
	`˛ib_c11_viﬁ©i⁄
 ("s2 unterminated");

1327 
¶í
--;

1328 i‡(*
s1
 =*
±
)

1334 *
s1
 = '\0';

1335 *
±r
 = (
s1
 + 1);

1336 *
s1max
 = 
dÀn
 - 1;

1337  (
±okí
);

1344 
±
++;

1347 
s1
++;

1348 
dÀn
--;

1351 *
±r
 = 
s1
;

1352 *
s1max
 = 
dÀn
;

1353  (
±okí
);

1354 
	}
}

1366 
	#˛ib_°r°r
(
s1
,
s2
) \

1367 ({ * 
__sub°rög
 = 0; \

1368 
	`°r°r_s_ölöe
 (
s1
, 
CLIB_STRING_MACRO_MAX
, 
s2
, CLIB_STRING_MACRO_MAX, \

1369 &
__sub°rög
); \

1370 
__sub°rög
; \

1371 })

	)

1373 
î∫o_t
 
°r°r_s
 (*
s1
, 
rsize_t
 
s1max
, c⁄° *
s2
,Ñsize_à
s2max
,

1374 **
sub°rög
);

1376 
Æways_ölöe
 
î∫o_t


1377 
	$°r°r_s_ölöe
 (*
s1
, 
rsize_t
 
s1max
, c⁄° *
s2
,Ñsize_à
s2max
,

1378 **
sub°rög
)

1380 
u8
 
bad
;

1381 
size_t
 
s1_size
, 
s2_size
;

1383 
bad
 =

1384 (
s1
 =0Ë+ (
s2
 =0Ë+ (
sub°rög
 =0Ë+ (
s1max
 =0Ë+ (
s2max
 == 0) +

1385 (
s1
 && 
s1max
 && (s1[
	`˛ib_°∫Àn
 (s1, s1max)] != '\0')) +

1386 (
s2
 && 
s2max
 && (s2[
	`˛ib_°∫Àn
 (s2, s2max)] != '\0'));

1387 i‡(
	`PREDICT_FALSE
 (
bad
 != 0))

1389 i‡(
s1
 == 0)

1390 
	`˛ib_c11_viﬁ©i⁄
 ("s1 NULL");

1391 i‡(
s2
 == 0)

1392 
	`˛ib_c11_viﬁ©i⁄
 ("s2 NULL");

1393 i‡(
s1max
 == 0)

1394 
	`˛ib_c11_viﬁ©i⁄
 ("s1max 0");

1395 i‡(
s2max
 == 0)

1396 
	`˛ib_c11_viﬁ©i⁄
 ("s2max 0");

1397 i‡(
sub°rög
 == 0)

1398 
	`˛ib_c11_viﬁ©i⁄
 ("substring NULL");

1399 i‡(
s1
 && 
s1max
 && (s1[
	`˛ib_°∫Àn
 (s1, s1max)] != '\0'))

1400 
	`˛ib_c11_viﬁ©i⁄
 ("s1 unterminated");

1401 i‡(
s2
 && 
s2max
 && (s2[
	`˛ib_°∫Àn
 (s2, 
s1max
)] != '\0'))

1402 
	`˛ib_c11_viﬁ©i⁄
 ("s2 unterminated");

1403  
EINVAL
;

1409 i‡(
	`PREDICT_FALSE
 (*
s2
 ='\0' || 
s1
 == s2))

1411 *
sub°rög
 = 
s1
;

1412  
EOK
;

1418 
s1_size
 = 
	`˛ib_°∫Àn
 (
s1
, 
s1max
);

1419 
s2_size
 = 
	`˛ib_°∫Àn
 (
s2
, 
s2max
);

1420 i‡(
	`PREDICT_FALSE
 (
s2_size
 > 
s1_size
))

1421  
ESRCH
;

1423 *
sub°rög
 = 
	`°r°r
 (
s1
, 
s2
);

1424 i‡(*
sub°rög
 == 0)

1425  
ESRCH
;

1427  
EOK
;

1428 
	}
}

	@/usr/include/vppinfra/types.h

38 #i‚de‡
ö˛uded_˛ib_ty≥s_h


39 
	#ö˛uded_˛ib_ty≥s_h


	)

45 sig√d 
	ti8
;

46 sig√d 
	ti16
;

49 #i‡
deföed
(
CLIB_LINUX_KERNEL
)

51 
	~<asm/ty≥s.h
>

52 
	#CLIB_AVOID_CLASH_WITH_LINUX_TYPES


	)

56 
	tu8
;

57 
	tu16
;

60 #i‡
deföed
 (
__x86_64__
)

61 #i‚de‡
__COVERITY__


62 sig√d 
	ti128
 
	t__©åibuã__
 ((
	tmode
 (
	tTI
)));

63 
	tu128
 
	t__©åibuã__
 ((
	tmode
 (
	tTI
)));

67 #i‡(
deföed
(
i386
Ë|| (deföed(
_mùs
Ë&& 
__mùs
 !64Ë|| deföed(
powîpc
Ë|| deföed (
__SPU__
Ë|| deföed(
__•¨c__
Ë|| deföed(
__¨m__
Ë|| deföed (
__xãnß__
Ë|| deföed(
__TMS320C6X__
))

68 sig√d 
	ti32
;

69 sig√d 
	ti64
;

71 #i‚de‡
CLIB_AVOID_CLASH_WITH_LINUX_TYPES


72 
	tu32
;

73 
	tu64
;

76 #ñi‡
deföed
(
Æpha
Ë|| (deföed(
_mùs
Ë&& 
__mùs
 =64Ë|| deföed(
__x86_64__
Ë|| deföed (
__powîpc64__
Ë|| deföed (
__Ørch64__
)

77 sig√d 
	ti32
;

78 sig√d 
	ti64
;

80 
	#log2_uw‹d_bôs
 6

	)

81 #i‡
deföed
(
_mùs
)

82 
	#˛ib_addªss_bôs
 
_MIPS_SZPTR


	)

84 
	#˛ib_addªss_bôs
 64

	)

87 #i‚de‡
CLIB_AVOID_CLASH_WITH_LINUX_TYPES


88 
	tu32
;

89 
	tu64
;

97 #i‚de‡
log2_uw‹d_bôs


98 
	#log2_uw‹d_bôs
 5

	)

102 
	#uw‹d_bôs
 (1 << 
log2_uw‹d_bôs
)

	)

104 #i‚de‡
˛ib_addªss_bôs


105 
	#˛ib_addªss_bôs
 32

	)

109 #i‡
uw‹d_bôs
 == 64

111 
i64
 
	tw‹d
;

112 
u64
 
	tuw‹d
;

115 
i32
 
	tw‹d
;

116 
u32
 
	tuw‹d
;

120 #i‡
˛ib_addªss_bôs
 == 64

121 
u64
 
	t˛ib_addªss_t
;

123 
u32
 
	t˛ib_addªss_t
;

130 
ölöe
 
__©åibuã__
 ((
Æways_ölöe
)Ë
uw‹d


131 
	$poöãr_to_uw‹d
 (c⁄° *
p
)

133  (
uw‹d
Ë(
˛ib_addªss_t
Ë
p
;

134 
	}
}

136 
	#uw‹d_to_poöãr
(
u
,
ty≥
Ë(—y≥Ë(
˛ib_addªss_t
Ë(u))

	)

139 
w‹d
 
	t™y
;

142 
	tf64
;

143 
	tf32
;

145 
__com∂ex__
 
	tcf32
;

146 
__com∂ex__
 
	tcf64
;

149 
f64
 
	tfw‹d
;

155 
	#˛ib_mem_u«lig√d
(
poöãr
,
ty≥
) \

156 (((°ru˘ { 
	`CLIB_PACKED
 (
ty≥
 
_d©a
); } *Ë(
poöãr
))->_d©a)

	)

160 
	#˛ib_mem_Æig√d
(
addr
,
ty≥
,
Æign
) \

162 
ty≥
 
_d©a
 \

163 
	`__©åibuã__
 ((
	`Æig√d
 (
Æign
), 
∑cked
)); \

164 } *Ë(
addr
))->
_d©a
)

	)

	@/usr/include/vppinfra/vec_bootstrap.h

38 #i‚de‡
ö˛uded_˛ib_vec_boŸ°øp_h


39 
	#ö˛uded_˛ib_vec_boŸ°øp_h


	)

57 #i‡
CLIB_VEC64
 > 0

58 
u64
 
	mÀn
;

60 
u32
 
	mÀn
;

61 
u32
 
	mdlmÆloc_hódî_off£t
;

63 
u8
 
	mve˘‹_d©a
[0];

64 } 
	tvec_hódî_t
;

74 
	#_vec_föd
(
v
Ë((
vec_hódî_t
 *Ë(vË- 1)

	)

76 
	#_vec_round_size
(
s
) \

77 (((
s
Ë+  (
uw‹d
Ë- 1Ë&~ ( (uw‹dË- 1))

	)

79 
Æways_ölöe
 
uw‹d


80 
	$vec_hódî_byãs
 (
uw‹d
 
hódî_byãs
)

82  
	`round_pow2
 (
hódî_byãs
 +  (
vec_hódî_t
),

83  (
vec_hódî_t
));

84 
	}
}

92 
Æways_ölöe
 *

93 
	$vec_hódî
 (*
v
, 
uw‹d
 
hódî_byãs
)

95  
v
 - 
	`vec_hódî_byãs
 (
hódî_byãs
);

96 
	}
}

104 
Æways_ölöe
 *

105 
	$vec_hódî_íd
 (*
v
, 
uw‹d
 
hódî_byãs
)

107  
v
 + 
	`vec_hódî_byãs
 (
hódî_byãs
);

108 
	}
}

110 
Æways_ölöe
 
uw‹d


111 
	$vec_Æig√d_hódî_byãs
 (
uw‹d
 
hódî_byãs
, uw‹d 
Æign
)

113  
	`round_pow2
 (
hódî_byãs
 +  (
vec_hódî_t
), 
Æign
);

114 
	}
}

116 
Æways_ölöe
 *

117 
	$vec_Æig√d_hódî
 (*
v
, 
uw‹d
 
hódî_byãs
, uw‹d 
Æign
)

119  
v
 - 
	`vec_Æig√d_hódî_byãs
 (
hódî_byãs
, 
Æign
);

120 
	}
}

122 
Æways_ölöe
 *

123 
	$vec_Æig√d_hódî_íd
 (*
v
, 
uw‹d
 
hódî_byãs
, uw‹d 
Æign
)

125  
v
 + 
	`vec_Æig√d_hódî_byãs
 (
hódî_byãs
, 
Æign
);

126 
	}
}

135 
	#_vec_Àn
(
v
Ë(
	`_vec_föd
(v)->
Àn
)

	)

143 
	#vec_Àn
(
v
Ë((vË? 
	`_vec_Àn
(vË: 0)

	)

147 
	#vec_byãs
(
v
Ë(
	`vec_Àn
 (vË*  (v[0]))

	)

151 
	#vec_ˇ∑côy
(
v
,
b
) \

153 * 
_vec_ˇ∑côy_v
 = (*Ë(
v
); \

154 
uw‹d
 
_vec_ˇ∑côy_b
 = (
b
); \

155 
_vec_ˇ∑côy_b
 =  (
vec_hódî_t
Ë+ 
	`_vec_round_size
 (_vec_capacity_b); \

156 
_vec_ˇ∑côy_v
 ? 
	`˛ib_mem_size
 (_vec_ˇ∑côy_v - 
_vec_ˇ∑côy_b
) : 0; \

157 })

	)

160 
	#vec_max_Àn
(
v
Ë(
	`vec_ˇ∑côy
(v,0Ë/  (v[0]))

	)

163 #i‚de‡
__COVERITY__


164 
	#vec_£t_Àn
(
v
, 
l
) do { \

165 
	`ASSERT
(
v
); \

166 
	`ASSERT
((
l
Ë<
	`vec_max_Àn
(
v
)); \

167 
	`CLIB_MEM_POISON_LEN
((*)(
v
), 
	`_vec_Àn
(vË* ((v)[0]), (
l
) * ((v)[0])); \

168 
	`_vec_Àn
(
v
Ë(
l
); \

169 } 0)

	)

171 
	#vec_£t_Àn
(
v
, 
l
) do { \

172 
	`_vec_Àn
(
v
Ë(
l
); \

173 } 0)

	)

179 
	#vec_ª£t_Àngth
(
v
Ëdÿ{ i‡(vË
	`vec_£t_Àn
 (v, 0); } 0)

	)

182 
	#vec_íd
(
v
Ë((vË+ 
	`vec_Àn
 (v))

	)

185 
	#vec_is_membî
(
v
,
e
Ë(”Ë>(vË&& (eË< 
	`vec_íd
 (v))

	)

188 
	#vec_ñt_©_ödex
(
v
,
i
) \

190 
	`ASSERT
 ((
i
Ë< 
	`vec_Àn
 (
v
)); \

191 (
v
Ë+ (
i
); \

192 })

	)

195 
	#vec_ñt
(
v
,
i
Ë(
	`vec_ñt_©_ödex
(v,i))[0]

	)

198 
	#vec_f‹óch
(
v¨
,
vec
Ëv¨ = (vec); v¨ < 
	`vec_íd
 (vec); v¨++)

	)

201 
	#vec_f‹óch_backw¨ds
(
v¨
,
vec
) \

202 
v¨
 = 
	`vec_íd
 (
vec
Ë- 1; v¨ >(vec); v¨--)

	)

205 
	#vec_f‹óch_ödex
(
v¨
,
v
Ë(v¨Ë0; (v¨Ë< 
	`vec_Àn
 (v); (v¨)++)

	)

208 
	#vec_f‹óch_ödex_backw¨ds
(
v¨
,
v
) \

209 (
v¨
Ë
	`vec_Àn
((
v
)Ë- 1; (v¨Ë>0; (v¨)--)

	)

	@/usr/include/vppinfra/vector_altivec.h

38 #i‚de‡
ö˛uded_ve˘‹_Ætivec_h


39 
	#ö˛uded_ve˘‹_Ætivec_h


	)

42 
	#_
(
t
,
ti
,
Ã
,
f
) \

43 
Æways_ölöe
 
t
Å##
_
##
	`Ã
 (à
x
,Å 
y
) \

44 {  (
t
Ë
__buûtö_Ætivec_
##
	`f
 ((
ti
Ë
x
, (tiË
y
); } \

46 
Æways_ölöe
 
t
Å##
_i
##
	`Ã
 (à
x
, 
i
) \

48 
t
 
j
 = {
i
,i,i,i}; \

49  
t
##
_
##
	`Ã
 (
x
, 
j
); \

50 }

	)

52 
_
(
u16x8
, 
i16x8
, 
shi·_À·
, 
v¶h
);

53 
_
(
u32x4
, 
i32x4
, 
shi·_À·
, 
v¶w
);

54 
_
(
u16x8
, 
i16x8
, 
shi·_right
, 
v§h
);

55 
_
(
u32x4
, 
i32x4
, 
shi·_right
, 
v§w
);

56 
_
(
i16x8
, i16x8, 
shi·_right
, 
v§ah
);

57 
_
(
i32x4
, i32x4, 
shi·_right
, 
v§aw
);

58 
_
(
u16x8
, 
i16x8
, 
rŸ©e_À·
, 
væh
);

59 
_
(
i16x8
, i16x8, 
rŸ©e_À·
, 
væh
);

60 
_
(
u32x4
, 
i32x4
, 
rŸ©e_À·
, 
væw
);

61 
_
(
i32x4
, i32x4, 
rŸ©e_À·
, 
væw
);

63 #unde‡
_


65 
	#_
(
t
,
ô
,
Ã
,
f
) \

66 
Æways_ölöe
 
t
Å##
_w‹d_shi·_
##
	`Ã
 (à
x
, 
n_w‹ds
) \

68 
i32x4
 
n_bôs
 = {0,0,0,
n_w‹ds
 * 
	`BITS
 (
ô
)}; \

69  (
t
Ë
__buûtö_Ætivec_
##
	`f
 ((
i32x4
Ë
x
, 
n_bôs
); \

70 }

	)

72 
	$_
(
u32x4
, 
u32
, 
À·
, 
v¶o
)

73 
	$_
(
i32x4
, 
i32
, 
À·
, 
v¶o
)

74 
	$_
(
u32x4
, 
u32
, 
right
, 
v§o
)

75 
	$_
(
i32x4
, 
i32
, 
right
, 
v§o
)

76 
	$_
(
u16x8
, 
u16
, 
À·
, 
v¶o
)

77 
	$_
(
i16x8
, 
i16
, 
À·
, 
v¶o
)

78 
	$_
(
u16x8
, 
u16
, 
right
, 
v§o
Ë
	$_
(
i16x8
, 
i16
, 
right
, 
v§o
)

79 #unde‡
_


80 
Æways_ölöe


81 
u32


82 
	$u32x4_gë0
 (
u32x4
 
x
)

84 
u32x4_uni⁄_t
 
y
;

85 
y
.
as_u32x4
 = 
x
;

86  
y
.
as_u32
[3];

87 
	}
}

90 
	#_
(
t
,
ô
,
lh
,
f
) \

91 
Æways_ölöe
 
t
Å##
_öãæóve_
##
	`lh
 (à
x
,Å 
y
) \

92 {  (
t
Ë
__buûtö_Ætivec_
##
	`f
 ((
ô
Ë
x
, (ôË
y
); }

	)

94 
	$_
(
u32x4
, 
i32x4
, 
lo
, 
vmrglw
)

95 
	$_
(
i32x4
, i32x4, 
lo
, 
vmrglw
)

96 
	$_
(
u16x8
, 
i16x8
, 
lo
, 
vmrglh
)

97 
	$_
(
i16x8
, i16x8, 
lo
, 
vmrglh
)

98 
	$_
(
u32x4
, 
i32x4
, 
hi
, 
vmrghw
)

99 
	$_
(
i32x4
, i32x4, 
hi
, 
vmrghw
)

100 
	$_
(
u16x8
, 
i16x8
, 
hi
, 
vmrghh
Ë
	$_
(
i16x8
, i16x8, 
hi
, 
vmrghh
)

101 #unde‡
_


103 #i‚de‡
__˝lu•lus


104 
	#_
(
t
) \

105 
Æways_ölöe
 
t
##
	`_°‹e_u«lig√d
 (à
x
,Å * 
a
) \

106 { 
	`˛ib_mem_u«lig√d
 (
a
, 
t
Ë
x
; 
	}
} \

107 
Æways_ölöe
 
t
Å##
	`_lﬂd_u«lig√d
 (à* 
a
) \

108 {  
	`˛ib_mem_u«lig√d
 (
a
, 
t
); }

	)

109 
	$_
(
u8x16
Ë
	$_
(
u16x8
Ë
	$_
(
u32x4
Ë
	$_
(
u64x2
Ë
	$_
(
i8x16
Ë
	$_
(
i16x8
Ë
	$_
(
i32x4
Ë
	$_
(
i64x2
)

110 #unde‡
_


112 
	#_sig√d_bö›
(
n
,
m
,
f
,
g
) \

114 
Æways_ölöe
 
u
##
n
##
x
##
m
 \

115 
u
##
n
##
x
##
m
##
_
##
	`f
 (u##n##x##m x, u##n##x##m 
y
) \

116 {  (
u
##
n
##
x
##
m
Ë
__buûtö_Ætivec_
##
	`g
 ((
i
##n##x##mËx, (i##n##x##mË
y
); 
	}
} \

119 
Æways_ölöe
 
i
##
n
##
x
##
m
 \

120 
i
##
n
##
x
##
m
##
_
##
	`f
 (i##n##x##m x, i##n##x##m 
y
) \

121 {  (
i
##
n
##
x
##
m
Ë
__buûtö_Ætivec_
##
	`g
 ((i##n##x##mËx, (i##n##x##mË
y
); }

	)

123 
	$_sig√d_bö›
 (16, 8, 
is_equÆ
, 
vcm≥quh
)

124 
	$_sig√d_bö›
 (32, 4, 
is_equÆ
, 
vcm≥quw
)

125 #unde‡
_sig√d_bö›


126 
Æways_ölöe
 
u16x8
 
	$u16x8_is_zîo
 (
u16x8
 
x
)

128 
u16x8
 
zîo
 = { 0 };

129  
	`u16x8_is_equÆ
 (
x
, 
zîo
);

130 
	}
}

132 
Æways_ölöe
 
u32


133 
	$u32x4_zîo_byã_mask
 (
u32x4
 
x
)

135 
u32x4
 
cmp
 = 
	`u32x4_is_zîo
 (
x
);

136 
u32x4
 
tmp
 = { 0x000f, 0x00f0, 0x0f00, 0xf000, };

137 
cmp
 &
tmp
;

138 
cmp
 |
	`u32x4_w‹d_shi·_right
 (cmp, 2);

139 
cmp
 |
	`u32x4_w‹d_shi·_right
 (cmp, 1);

140  
	`u32x4_gë0
 (
cmp
);

141 
	}
}

	@/usr/include/vppinfra/vector_avx2.h

16 #i‚de‡
ö˛uded_ve˘‹_avx2_h


17 
	#ö˛uded_ve˘‹_avx2_h


	)

19 
	~<vµö‰a/˛ib.h
>

20 
	~<x86öåö.h
>

23 
	#f‹óch_avx2_vec256i
 \

24 
	`_
(
i
,8,32,
ïi8
Ë_(i,16,16,
ïi16
Ë_(i,32,8,
ïi32
Ë_(i,64,4,
ïi64
)

	)

25 
	#f‹óch_avx2_vec256u
 \

26 
	`_
(
u
,8,32,
ïi8
Ë_(u,16,16,
ïi16
Ë_(u,32,8,
ïi32
Ë_(u,64,4,
ïi64
)

	)

27 
	#f‹óch_avx2_vec256f
 \

28 
	`_
(
f
,32,8,
ps
Ë_(f,64,4,
pd
)

	)

30 
	#_mm256_£t1_ïi64
 
_mm256_£t1_ïi64x


	)

34 
	#_
(
t
, 
s
, 
c
, 
i
) \

35 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

36 
t
##
s
##
x
##
c
##
	`_•œt
 (t##s x) \

37 {  (
t
##
s
##
x
##
c
Ë
_mm256_£t1_
##
	`i
 (x); } \

39 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

40 
t
##
s
##
x
##
c
##
	`_lﬂd_u«lig√d
 (*
p
) \

41 {  (
t
##
s
##
x
##
c
Ë
	`_mm256_lﬂdu_si256
 (
p
); } \

43 
°©ic_Æways_ölöe
 \

44 
t
##
s
##
x
##
c
##
	`_°‹e_u«lig√d
 (t##s##x##¯
v
, *
p
) \

45 { 
	`_mm256_°‹eu_si256
 ((
__m256i
 *Ë
p
, (__m256iË
v
); } \

47 
°©ic_Æways_ölöe
 \

48 
t
##
s
##
x
##
c
##
	`_is_Æl_zîo
 (t##s##x##c x) \

49 {  
	`_mm256_ã°z_si256
 ((
__m256i
Ë
x
, (__m256i) x); } \

51 
°©ic_Æways_ölöe
 \

52 
t
##
s
##
x
##
c
##
	`_is_equÆ
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

53 {  
t
##
s
##
x
##
c
##
	`_is_Æl_zîo
 (
a
 ^ 
b
); } \

55 
°©ic_Æways_ölöe
 \

56 
t
##
s
##
x
##
c
##
	`_is_Æl_equÆ
 (t##s##x##¯
v
,Å##s x) \

57 {  
t
##
s
##
x
##
c
##
	`_is_equÆ
 (
v
,Å##s##x##c##
	`_•œt
 (x)); } \

59 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

60 
t
##
s
##
x
##
c
##
	`_öãæóve_lo
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

61 {  (
t
##
s
##
x
##
c
Ë
_mm256_u≈acklo_
##
	`i
 ((
__m256i
Ë
a
, (__m256iË
b
); } \

63 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

64 
t
##
s
##
x
##
c
##
	`_öãæóve_hi
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

65 {  (
t
##
s
##
x
##
c
Ë
_mm256_u≈ackhi_
##
	`i
 ((
__m256i
Ë
a
, (__m256iË
b
); } \

66 

	)

68 
f‹óch_avx2_vec256i
 
	gf‹óch_avx2_vec256u


69 #unde‡
_


72 
Æways_ölöe
 
u32x8


73 
	$u32x8_≥rmuã
 (
u32x8
 
v
, u32x8 
idx
)

75  (
u32x8
Ë
	`_mm256_≥rmuãv¨8x32_ïi32
 ((
__m256i
Ë
v
, (__m256iË
idx
);

76 
	}
}

80 
	#_
(
t1
,
t2
) \

81 
Æways_ölöe
 
t1
 \

82 
t2
##
	`_exåa˘_lo
 (t2 
v
) \

83 {  (
t1
Ë
	`_mm256_exåa˘i128_si256
 ((
__m256i
Ë
v
, 0); } \

85 
Æways_ölöe
 
t1
 \

86 
t2
##
	`_exåa˘_hi
 (t2 
v
) \

87 {  (
t1
Ë
	`_mm256_exåa˘i128_si256
 ((
__m256i
Ë
v
, 1); } \

89 
Æways_ölöe
 
t2
 \

90 
t2
##
	`_ö£π_lo
 (t2 
v1
, 
t1
 
v2
) \

91 {  (
t2
Ë
	`_mm256_ö£πi128_si256
 ((
__m256i
Ë
v1
, (
__m128i
Ë
v2
, 0); }\

93 
Æways_ölöe
 
t2
 \

94 
t2
##
	`_ö£π_hi
 (t2 
v1
, 
t1
 
v2
) \

95 {  (
t2
Ë
	`_mm256_ö£πi128_si256
 ((
__m256i
Ë
v1
, (
__m128i
Ë
v2
, 1); }\

96 

	)

97 
	$_
(
u8x16
, 
u8x32
)

98 
	$_
(
u16x8
, 
u16x16
)

99 
	$_
(
u32x4
, 
u32x8
)

100 
	$_
(
u64x2
, 
u64x4
)

101 #unde‡
_


107 
°©ic_Æways_ölöe
 
u32


108 
	$u8x32_msb_mask
 (
u8x32
 
v
)

110  
	`_mm256_movemask_ïi8
 ((
__m256i
Ë
v
);

111 
	}
}

115 
	#_
(
f
,
t
,
i
) \

116 
°©ic_Æways_ölöe
 
t
 \

117 
f
##
_exãnd_to_
##
	`t
 (‡
x
) \

118 {  (
t
Ë
_mm256_cvt
##
	`i
 ((
__m128i
Ë
x
); }

	)

120 
	$_
(
u16x8
, 
u32x8
, 
ïu16_ïi32
)

121 
	$_
(
u16x8
, 
u64x4
, 
ïu16_ïi64
)

122 
	$_
(
u32x4
, 
u64x4
, 
ïu32_ïi64
)

123 
	$_
(
u8x16
, 
u16x16
, 
ïu8_ïi64
)

124 
	$_
(
u8x16
, 
u32x8
, 
ïu8_ïi32
)

125 
	$_
(
u8x16
, 
u64x4
, 
ïu8_ïi64
)

126 
	$_
(
i16x8
, 
i32x8
, 
ïi16_ïi32
)

127 
	$_
(
i16x8
, 
i64x4
, 
ïi16_ïi64
)

128 
	$_
(
i32x4
, 
i64x4
, 
ïi32_ïi64
)

129 
	$_
(
i8x16
, 
i16x16
, 
ïi8_ïi64
)

130 
	$_
(
i8x16
, 
i32x8
, 
ïi8_ïi32
)

131 
	$_
(
i8x16
, 
i64x4
, 
ïi8_ïi64
)

132 #unde‡
_


135 
°©ic_Æways_ölöe
 
u32x8


136 
	$u32x8_byã_sw≠
 (
u32x8
 
v
)

138 
u8x32
 
sw≠
 = {

142  (
u32x8
Ë
	`_mm256_shufÊe_ïi8
 ((
__m256i
Ë
v
, (__m256iË
sw≠
);

143 
	}
}

145 
°©ic_Æways_ölöe
 
u16x16


146 
	$u16x16_byã_sw≠
 (
u16x16
 
v
)

148 
u8x32
 
sw≠
 = {

152  (
u16x16
Ë
	`_mm256_shufÊe_ïi8
 ((
__m256i
Ë
v
, (__m256iË
sw≠
);

153 
	}
}

155 
°©ic_Æways_ölöe
 
u32x8


156 
	$u32x8_hadd
 (
u32x8
 
v1
, u32x8 
v2
)

158  (
u32x8
Ë
	`_mm256_hadd_ïi32
 ((
__m256i
Ë
v1
, (__m256iË
v2
);

159 
	}
}

161 
°©ic_Æways_ölöe
 
u16x16


162 
	$u16x16_mask_œ°
 (
u16x16
 
v
, 
u8
 
n_œ°
)

164 c⁄° 
u16x16
 
masks
[17] = {

184 
	`ASSERT
 (
n_œ°
 < 17);

186  
v
 & 
masks
[16 - 
n_œ°
];

187 
	}
}

189 
°©ic_Æways_ölöe
 
f32x8


190 
	$f32x8_‰om_u32x8
 (
u32x8
 
v
)

192  (
f32x8
Ë
	`_mm256_cvãpi32_ps
 ((
__m256i
Ë
v
);

193 
	}
}

195 
°©ic_Æways_ölöe
 
u32x8


196 
	$u32x8_‰om_f32x8
 (
f32x8
 
v
)

198  (
u32x8
Ë
	`_mm256_cvâps_ïi32
 ((
__m256
Ë
v
);

199 
	}
}

201 
	#u32x8_bÀnd
(
a
,
b
,
m
) \

202 (
u32x8
Ë
	`_mm256_bÀnd_ïi32
 ((
__m256i
Ë
a
, (__m256iË
b
, 
m
)

	)

204 
	#u16x16_bÀnd
(
v1
, 
v2
, 
mask
) \

205 (
u16x16
Ë
	`_mm256_bÀnd_ïi16
 ((
__m256i
Ë(
v1
), (__m256iË(
v2
), 
mask
)

	)

207 
°©ic_Æways_ölöe
 
u64x4


208 
	$u64x4_g©hî
 (*
p0
, *
p1
, *
p2
, *
p3
)

210 
u64x4
 
r
 = {

211 *(
u64
 *Ë
p0
, *(u64 *Ë
p1
, *(u64 *Ë
p2
, *(u64 *Ë
p3


213  
r
;

214 
	}
}

216 
°©ic_Æways_ölöe
 
u32x8


217 
	$u32x8_g©hî
 (*
p0
, *
p1
, *
p2
, *
p3
, *
p4
, *
p5
,

218 *
p6
, *
p7
)

220 
u32x8
 
r
 = {

221 *(
u32
 *Ë
p0
, *(u32 *Ë
p1
, *(u32 *Ë
p2
, *(u32 *Ë
p3
,

222 *(
u32
 *Ë
p4
, *(u32 *Ë
p5
, *(u32 *Ë
p6
, *(u32 *Ë
p7
,

224  
r
;

225 
	}
}

228 
°©ic_Æways_ölöe
 

229 
	$u64x4_sˇâî
 (
u64x4
 
r
, *
p0
, *
p1
, *
p2
, *
p3
)

231 *(
u64
 *Ë
p0
 = 
r
[0];

232 *(
u64
 *Ë
p1
 = 
r
[1];

233 *(
u64
 *Ë
p2
 = 
r
[2];

234 *(
u64
 *Ë
p3
 = 
r
[3];

235 
	}
}

237 
°©ic_Æways_ölöe
 

238 
	$u32x8_sˇâî
 (
u32x8
 
r
, *
p0
, *
p1
, *
p2
, *
p3
, *
p4
,

239 *
p5
, *
p6
, *
p7
)

241 *(
u32
 *Ë
p0
 = 
r
[0];

242 *(
u32
 *Ë
p1
 = 
r
[1];

243 *(
u32
 *Ë
p2
 = 
r
[2];

244 *(
u32
 *Ë
p3
 = 
r
[3];

245 *(
u32
 *Ë
p4
 = 
r
[4];

246 *(
u32
 *Ë
p5
 = 
r
[5];

247 *(
u32
 *Ë
p6
 = 
r
[6];

248 *(
u32
 *Ë
p7
 = 
r
[7];

249 
	}
}

251 
°©ic_Æways_ölöe
 

252 
	$u64x4_sˇâî_⁄e
 (
u64x4
 
r
, 
ödex
, *
p
)

254 *(
u64
 *Ë
p
 = 
r
[
ödex
];

255 
	}
}

257 
°©ic_Æways_ölöe
 

258 
	$u32x8_sˇâî_⁄e
 (
u32x8
 
r
, 
ödex
, *
p
)

260 *(
u32
 *Ë
p
 = 
r
[
ödex
];

261 
	}
}

263 
°©ic_Æways_ölöe
 
u8x32


264 
	$u8x32_is_gª©î
 (
u8x32
 
v1
, u8x32 
v2
)

266  (
u8x32
Ë
	`_mm256_cmpgt_ïi8
 ((
__m256i
Ë
v1
, (__m256iË
v2
);

267 
	}
}

269 
°©ic_Æways_ölöe
 
u8x32


270 
	$u8x32_bÀnd
 (
u8x32
 
v1
, u8x32 
v2
, u8x32 
mask
)

272  (
u8x32
Ë
	`_mm256_bÀndv_ïi8
 ((
__m256i
Ë
v1
, (__m256iË
v2
,

273 (
__m256i
Ë
mask
);

274 
	}
}

276 
	#u32x8_≥rmuã_œ√s
(
a
, 
b
, 
m
) \

277 (
u32x8
Ë
	`_mm256_≥rmuã2x128_si256
 ((
__m256i
Ë
a
, (__m256iË
b
, 
m
)

	)

278 
	#u64x4_≥rmuã_œ√s
(
a
, 
b
, 
m
) \

279 (
u64x4
Ë
	`_mm256_≥rmuã2x128_si256
 ((
__m256i
Ë
a
, (__m256iË
b
, 
m
)

	)

281 
°©ic_Æways_ölöe
 
u32x8


282 
	$u32x8_mö
 (
u32x8
 
a
, u32x8 
b
)

284  (
u32x8
Ë
	`_mm256_mö_ïu32
 ((
__m256i
Ë
a
, (__m256iË
b
);

285 
	}
}

287 
°©ic_Æways_ölöe
 
u32


288 
	$u32x8_mö_sˇœr
 (
u32x8
 
v
)

290  
	`u32x4_mö_sˇœr
 (
	`u32x4_mö
 (
	`u32x8_exåa˘_lo
 (
v
),

291 
	`u32x8_exåa˘_hi
 (
v
)));

292 
	}
}

294 
°©ic_Æways_ölöe
 

295 
	$u32x8_å™•o£
 (
u32x8
 
a
[8])

297 
u64x4
 
r
[8], 
x
, 
y
;

299 
r
[0] = (
u64x4
Ë
	`u32x8_öãæóve_lo
 (
a
[0],á[1]);

300 
r
[1] = (
u64x4
Ë
	`u32x8_öãæóve_hi
 (
a
[0],á[1]);

301 
r
[2] = (
u64x4
Ë
	`u32x8_öãæóve_lo
 (
a
[2],á[3]);

302 
r
[3] = (
u64x4
Ë
	`u32x8_öãæóve_hi
 (
a
[2],á[3]);

303 
r
[4] = (
u64x4
Ë
	`u32x8_öãæóve_lo
 (
a
[4],á[5]);

304 
r
[5] = (
u64x4
Ë
	`u32x8_öãæóve_hi
 (
a
[4],á[5]);

305 
r
[6] = (
u64x4
Ë
	`u32x8_öãæóve_lo
 (
a
[6],á[7]);

306 
r
[7] = (
u64x4
Ë
	`u32x8_öãæóve_hi
 (
a
[6],á[7]);

308 
x
 = 
	`u64x4_öãæóve_lo
 (
r
[0],Ñ[2]);

309 
y
 = 
	`u64x4_öãæóve_lo
 (
r
[4],Ñ[6]);

310 
a
[0] = 
	`u32x8_≥rmuã_œ√s
 (
x
, 
y
, 0x20);

311 
a
[4] = 
	`u32x8_≥rmuã_œ√s
 (
x
, 
y
, 0x31);

313 
x
 = 
	`u64x4_öãæóve_hi
 (
r
[0],Ñ[2]);

314 
y
 = 
	`u64x4_öãæóve_hi
 (
r
[4],Ñ[6]);

315 
a
[1] = 
	`u32x8_≥rmuã_œ√s
 (
x
, 
y
, 0x20);

316 
a
[5] = 
	`u32x8_≥rmuã_œ√s
 (
x
, 
y
, 0x31);

318 
x
 = 
	`u64x4_öãæóve_lo
 (
r
[1],Ñ[3]);

319 
y
 = 
	`u64x4_öãæóve_lo
 (
r
[5],Ñ[7]);

320 
a
[2] = 
	`u32x8_≥rmuã_œ√s
 (
x
, 
y
, 0x20);

321 
a
[6] = 
	`u32x8_≥rmuã_œ√s
 (
x
, 
y
, 0x31);

323 
x
 = 
	`u64x4_öãæóve_hi
 (
r
[1],Ñ[3]);

324 
y
 = 
	`u64x4_öãæóve_hi
 (
r
[5],Ñ[7]);

325 
a
[3] = 
	`u32x8_≥rmuã_œ√s
 (
x
, 
y
, 0x20);

326 
a
[7] = 
	`u32x8_≥rmuã_œ√s
 (
x
, 
y
, 0x31);

327 
	}
}

329 
°©ic_Æways_ölöe
 

330 
	$u64x4_å™•o£
 (
u64x4
 
a
[8])

332 
u64x4
 
r
[4];

334 
r
[0] = 
	`u64x4_öãæóve_lo
 (
a
[0],á[1]);

335 
r
[1] = 
	`u64x4_öãæóve_hi
 (
a
[0],á[1]);

336 
r
[2] = 
	`u64x4_öãæóve_lo
 (
a
[2],á[3]);

337 
r
[3] = 
	`u64x4_öãæóve_hi
 (
a
[2],á[3]);

339 
a
[0] = 
	`u64x4_≥rmuã_œ√s
 (
r
[0],Ñ[2], 0x20);

340 
a
[1] = 
	`u64x4_≥rmuã_œ√s
 (
r
[1],Ñ[3], 0x20);

341 
a
[2] = 
	`u64x4_≥rmuã_œ√s
 (
r
[0],Ñ[2], 0x31);

342 
a
[3] = 
	`u64x4_≥rmuã_œ√s
 (
r
[1],Ñ[3], 0x31);

343 
	}
}

	@/usr/include/vppinfra/vector_avx512.h

16 #i‚de‡
ö˛uded_ve˘‹_avx512_h


17 
	#ö˛uded_ve˘‹_avx512_h


	)

19 
	~<vµö‰a/˛ib.h
>

20 
	~<x86öåö.h
>

23 
	#f‹óch_avx512_vec512i
 \

24 
	`_
(
i
,8,64,
ïi8
Ë_(i,16,32,
ïi16
Ë_(i,32,16,
ïi32
Ë_(i,64,8,
ïi64
)

	)

25 
	#f‹óch_avx512_vec512u
 \

26 
	`_
(
u
,8,64,
ïi8
Ë_(u,16,32,
ïi16
Ë_(u,32,16,
ïi32
Ë_(u,64,8,
ïi64
)

	)

27 
	#f‹óch_avx512_vec512f
 \

28 
	`_
(
f
,32,8,
ps
Ë_(f,64,4,
pd
)

	)

32 
	#_
(
t
, 
s
, 
c
, 
i
) \

33 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

34 
t
##
s
##
x
##
c
##
	`_•œt
 (t##s x) \

35 {  (
t
##
s
##
x
##
c
Ë
_mm512_£t1_
##
	`i
 (x); } \

37 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

38 
t
##
s
##
x
##
c
##
	`_lﬂd_u«lig√d
 (*
p
) \

39 {  (
t
##
s
##
x
##
c
Ë
	`_mm512_lﬂdu_si512
 (
p
); } \

41 
°©ic_Æways_ölöe
 \

42 
t
##
s
##
x
##
c
##
	`_°‹e_u«lig√d
 (t##s##x##¯
v
, *
p
) \

43 { 
	`_mm512_°‹eu_si512
 ((
__m512i
 *Ë
p
, (__m512iË
v
); } \

45 
°©ic_Æways_ölöe
 \

46 
t
##
s
##
x
##
c
##
	`_is_Æl_zîo
 (t##s##x##¯
v
) \

47 {  (
	`_mm512_ã°_ïi64_mask
 ((
__m512i
Ë
v
, (__m512i) v) == 0); } \

49 
°©ic_Æways_ölöe
 \

50 
t
##
s
##
x
##
c
##
	`_is_equÆ
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

51 {  
t
##
s
##
x
##
c
##
	`_is_Æl_zîo
 (
a
 ^ 
b
); } \

53 
°©ic_Æways_ölöe
 \

54 
t
##
s
##
x
##
c
##
	`_is_Æl_equÆ
 (t##s##x##¯
v
,Å##s x) \

55 {  
t
##
s
##
x
##
c
##
	`_is_equÆ
 (
v
,Å##s##x##c##
	`_•œt
 (x)); } \

57 
°©ic_Æways_ölöe
 
u
##
c
 \

58 
t
##
s
##
x
##
c
##
	`_is_zîo_mask
 (t##s##x##¯
v
) \

59 {  
_mm512_ã°_
##
i
##
	`_mask
 ((
__m512i
Ë
v
, (__m512i) v); } \

61 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

62 
t
##
s
##
x
##
c
##
	`_öãæóve_lo
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

63 {  (
t
##
s
##
x
##
c
Ë
_mm512_u≈acklo_
##
	`i
 ((
__m512i
Ë
a
, (__m512iË
b
); } \

65 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

66 
t
##
s
##
x
##
c
##
	`_öãæóve_hi
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

67 {  (
t
##
s
##
x
##
c
Ë
_mm512_u≈ackhi_
##
	`i
 ((
__m512i
Ë
a
, (__m512iË
b
); } \

68 

	)

70 
f‹óch_avx512_vec512i
 
	gf‹óch_avx512_vec512u


71 #unde‡
_


74 
°©ic_Æways_ölöe
 
u32


75 
	$u16x32_msb_mask
 (
u16x32
 
v
)

77  (
u32
Ë
	`_mm512_movïi16_mask
 ((
__m512i
Ë
v
);

78 
	}
}

80 
°©ic_Æways_ölöe
 
u32x16


81 
	$u32x16_byã_sw≠
 (
u32x16
 
v
)

83 
u8x64
 
sw≠
 = {

89  (
u32x16
Ë
	`_mm512_shufÊe_ïi8
 ((
__m512i
Ë
v
, (__m512iË
sw≠
);

90 
	}
}

92 
°©ic_Æways_ölöe
 
u16x32


93 
	$u16x32_byã_sw≠
 (
u16x32
 
v
)

95 
u8x64
 
sw≠
 = {

101  (
u16x32
Ë
	`_mm512_shufÊe_ïi8
 ((
__m512i
Ë
v
, (__m512iË
sw≠
);

102 
	}
}

104 
°©ic_Æways_ölöe
 
u32x8


105 
	$u32x16_exåa˘_lo
 (
u32x16
 
v
)

107  (
u32x8
Ë
	`_mm512_exåa˘i64x4_ïi64
 ((
__m512i
Ë
v
, 0);

108 
	}
}

110 
°©ic_Æways_ölöe
 
u32x8


111 
	$u32x16_exåa˘_hi
 (
u32x16
 
v
)

113  (
u32x8
Ë
	`_mm512_exåa˘i64x4_ïi64
 ((
__m512i
Ë
v
, 1);

114 
	}
}

116 
°©ic_Æways_ölöe
 
u32


117 
	$u32x16_mö_sˇœr
 (
u32x16
 
v
)

119  
	`u32x8_mö_sˇœr
 (
	`u32x8_mö
 (
	`u32x16_exåa˘_lo
 (
v
),

120 
	`u32x16_exåa˘_hi
 (
v
)));

121 
	}
}

123 
°©ic_Æways_ölöe
 
u32x16


124 
	$u32x16_ö£π_lo
 (
u32x16
 
r
, 
u32x8
 
v
)

126  (
u32x16
Ë
	`_mm512_ö£πi64x4
 ((
__m512i
Ë
r
, (
__m256i
Ë
v
, 0);

127 
	}
}

129 
°©ic_Æways_ölöe
 
u32x16


130 
	$u32x16_ö£π_hi
 (
u32x16
 
r
, 
u32x8
 
v
)

132  (
u32x16
Ë
	`_mm512_ö£πi64x4
 ((
__m512i
Ë
r
, (
__m256i
Ë
v
, 1);

133 
	}
}

135 
°©ic_Æways_ölöe
 
u64x8


136 
	$u64x8_≥rmuã
 (
u64x8
 
a
, u64x8 
b
, u64x8 
mask
)

138  (
u64x8
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 ((
__m512i
Ë
a
, (__m512iË
mask
,

139 (
__m512i
Ë
b
);

140 
	}
}

143 
	#u32x16_ã∫¨y_logic
(
a
, 
b
, 
c
, 
d
) \

144 (
u32x16
Ë
	`_mm512_ã∫¨ylogic_ïi32
 ((
__m512i
Ë
a
, (__m512iË
b
, (__m512iË
c
, 
d
)

	)

146 
°©ic_Æways_ölöe
 

147 
	$u32x16_å™•o£
 (
u32x16
 
m
[16])

149 
__m512i
 
r
[16], 
a
, 
b
, 
c
, 
d
, 
x
, 
y
;

152 
__m512i
 
pm1
 = (__m512iË(
u64x8
) { 0, 1, 8, 9, 4, 5, 12, 13};

153 
__m512i
 
pm2
 = (__m512iË(
u64x8
) { 2, 3, 10, 11, 6, 7, 14, 15};

154 
__m512i
 
pm3
 = (__m512iË(
u64x8
) { 0, 1, 2, 3, 8, 9, 10, 11};

155 
__m512i
 
pm4
 = (__m512iË(
u64x8
) { 4, 5, 6, 7, 12, 13, 14, 15};

158 
r
[0] = 
	`_mm512_u≈acklo_ïi32
 ((
__m512i
Ë
m
[0], (__m512i) m[1]);

159 
r
[1] = 
	`_mm512_u≈acklo_ïi32
 ((
__m512i
Ë
m
[2], (__m512i) m[3]);

160 
r
[2] = 
	`_mm512_u≈acklo_ïi32
 ((
__m512i
Ë
m
[4], (__m512i) m[5]);

161 
r
[3] = 
	`_mm512_u≈acklo_ïi32
 ((
__m512i
Ë
m
[6], (__m512i) m[7]);

162 
r
[4] = 
	`_mm512_u≈acklo_ïi32
 ((
__m512i
Ë
m
[8], (__m512i) m[9]);

163 
r
[5] = 
	`_mm512_u≈acklo_ïi32
 ((
__m512i
Ë
m
[10], (__m512i) m[11]);

164 
r
[6] = 
	`_mm512_u≈acklo_ïi32
 ((
__m512i
Ë
m
[12], (__m512i) m[13]);

165 
r
[7] = 
	`_mm512_u≈acklo_ïi32
 ((
__m512i
Ë
m
[14], (__m512i) m[15]);

167 
r
[8] = 
	`_mm512_u≈ackhi_ïi32
 ((
__m512i
Ë
m
[0], (__m512i) m[1]);

168 
r
[9] = 
	`_mm512_u≈ackhi_ïi32
 ((
__m512i
Ë
m
[2], (__m512i) m[3]);

169 
r
[10] = 
	`_mm512_u≈ackhi_ïi32
 ((
__m512i
Ë
m
[4], (__m512i) m[5]);

170 
r
[11] = 
	`_mm512_u≈ackhi_ïi32
 ((
__m512i
Ë
m
[6], (__m512i) m[7]);

171 
r
[12] = 
	`_mm512_u≈ackhi_ïi32
 ((
__m512i
Ë
m
[8], (__m512i) m[9]);

172 
r
[13] = 
	`_mm512_u≈ackhi_ïi32
 ((
__m512i
Ë
m
[10], (__m512i) m[11]);

173 
r
[14] = 
	`_mm512_u≈ackhi_ïi32
 ((
__m512i
Ë
m
[12], (__m512i) m[13]);

174 
r
[15] = 
	`_mm512_u≈ackhi_ïi32
 ((
__m512i
Ë
m
[14], (__m512i) m[15]);

176 
a
 = 
	`_mm512_u≈acklo_ïi64
 (
r
[0],Ñ[1]);

177 
b
 = 
	`_mm512_u≈acklo_ïi64
 (
r
[2],Ñ[3]);

178 
c
 = 
	`_mm512_u≈acklo_ïi64
 (
r
[4],Ñ[5]);

179 
d
 = 
	`_mm512_u≈acklo_ïi64
 (
r
[6],Ñ[7]);

180 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
a
, 
pm1
, 
b
);

181 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
c
, 
pm1
, 
d
);

182 
m
[0] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

183 
m
[8] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

184 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
a
, 
pm2
, 
b
);

185 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
c
, 
pm2
, 
d
);

186 
m
[4] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

187 
m
[12] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

189 
a
 = 
	`_mm512_u≈acklo_ïi64
 (
r
[8],Ñ[9]);

190 
b
 = 
	`_mm512_u≈acklo_ïi64
 (
r
[10],Ñ[11]);

191 
c
 = 
	`_mm512_u≈acklo_ïi64
 (
r
[12],Ñ[13]);

192 
d
 = 
	`_mm512_u≈acklo_ïi64
 (
r
[14],Ñ[15]);

193 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
a
, 
pm1
, 
b
);

194 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
c
, 
pm1
, 
d
);

195 
m
[2] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

196 
m
[10] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

197 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
a
, 
pm2
, 
b
);

198 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
c
, 
pm2
, 
d
);

199 
m
[6] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

200 
m
[14] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

202 
a
 = 
	`_mm512_u≈ackhi_ïi64
 (
r
[0],Ñ[1]);

203 
b
 = 
	`_mm512_u≈ackhi_ïi64
 (
r
[2],Ñ[3]);

204 
c
 = 
	`_mm512_u≈ackhi_ïi64
 (
r
[4],Ñ[5]);

205 
d
 = 
	`_mm512_u≈ackhi_ïi64
 (
r
[6],Ñ[7]);

206 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
a
, 
pm1
, 
b
);

207 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
c
, 
pm1
, 
d
);

208 
m
[1] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

209 
m
[9] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

210 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
a
, 
pm2
, 
b
);

211 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
c
, 
pm2
, 
d
);

212 
m
[5] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

213 
m
[13] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

215 
a
 = 
	`_mm512_u≈ackhi_ïi64
 (
r
[8],Ñ[9]);

216 
b
 = 
	`_mm512_u≈ackhi_ïi64
 (
r
[10],Ñ[11]);

217 
c
 = 
	`_mm512_u≈ackhi_ïi64
 (
r
[12],Ñ[13]);

218 
d
 = 
	`_mm512_u≈ackhi_ïi64
 (
r
[14],Ñ[15]);

219 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
a
, 
pm1
, 
b
);

220 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
c
, 
pm1
, 
d
);

221 
m
[3] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

222 
m
[11] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

223 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
a
, 
pm2
, 
b
);

224 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
c
, 
pm2
, 
d
);

225 
m
[7] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

226 
m
[15] = (
u32x16
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

227 
	}
}

231 
°©ic_Æways_ölöe
 

232 
	$u64x8_å™•o£
 (
u64x8
 
m
[8])

234 
__m512i
 
r
[8], 
x
, 
y
;

237 
__m512i
 
pm1
 = (__m512iË(
u64x8
) { 0, 1, 8, 9, 4, 5, 12, 13};

238 
__m512i
 
pm2
 = (__m512iË(
u64x8
) { 2, 3, 10, 11, 6, 7, 14, 15};

239 
__m512i
 
pm3
 = (__m512iË(
u64x8
) { 0, 1, 2, 3, 8, 9, 10, 11};

240 
__m512i
 
pm4
 = (__m512iË(
u64x8
) { 4, 5, 6, 7, 12, 13, 14, 15};

243 
r
[0] = 
	`_mm512_u≈acklo_ïi64
 ((
__m512i
Ë
m
[0], (__m512i) m[1]);

244 
r
[1] = 
	`_mm512_u≈acklo_ïi64
 ((
__m512i
Ë
m
[2], (__m512i) m[3]);

245 
r
[2] = 
	`_mm512_u≈acklo_ïi64
 ((
__m512i
Ë
m
[4], (__m512i) m[5]);

246 
r
[3] = 
	`_mm512_u≈acklo_ïi64
 ((
__m512i
Ë
m
[6], (__m512i) m[7]);

247 
r
[4] = 
	`_mm512_u≈ackhi_ïi64
 ((
__m512i
Ë
m
[0], (__m512i) m[1]);

248 
r
[5] = 
	`_mm512_u≈ackhi_ïi64
 ((
__m512i
Ë
m
[2], (__m512i) m[3]);

249 
r
[6] = 
	`_mm512_u≈ackhi_ïi64
 ((
__m512i
Ë
m
[4], (__m512i) m[5]);

250 
r
[7] = 
	`_mm512_u≈ackhi_ïi64
 ((
__m512i
Ë
m
[6], (__m512i) m[7]);

252 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
r
[0], 
pm1
,Ñ[1]);

253 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
r
[2], 
pm1
,Ñ[3]);

254 
m
[0] = (
u64x8
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

255 
m
[4] = (
u64x8
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

256 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
r
[0], 
pm2
,Ñ[1]);

257 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
r
[2], 
pm2
,Ñ[3]);

258 
m
[2] = (
u64x8
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

259 
m
[6] = (
u64x8
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

261 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
r
[4], 
pm1
,Ñ[5]);

262 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
r
[6], 
pm1
,Ñ[7]);

263 
m
[1] = (
u64x8
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

264 
m
[5] = (
u64x8
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

265 
x
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
r
[4], 
pm2
,Ñ[5]);

266 
y
 = 
	`_mm512_≥rmuãx2v¨_ïi64
 (
r
[6], 
pm2
,Ñ[7]);

267 
m
[3] = (
u64x8
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm3
, 
y
);

268 
m
[7] = (
u64x8
Ë
	`_mm512_≥rmuãx2v¨_ïi64
 (
x
, 
pm4
, 
y
);

269 
	}
}

	@/usr/include/vppinfra/vector_funcs.h

38 #i‚de‡
ö˛uded_ve˘‹_funcs_h


39 
	#ö˛uded_ve˘‹_funcs_h


	)

41 
	~<vµö‰a/byã_‹dî.h
>

44 #i‡
CLIB_VECTOR_WORD_BITS
 == 128

45 
	#u8x_add
 
u8x16_add


	)

46 
	#u16x_add
 
u16x8_add


	)

47 
	#u32x_add
 
u32x4_add


	)

48 
	#u64x_add
 
u64x2_add


	)

49 
	#i8x_add
 
i8x16_add


	)

50 
	#i16x_add
 
i16x8_add


	)

51 
	#i32x_add
 
i32x4_add


	)

52 
	#i64x_add
 
i64x2_add


	)

53 
	#u8x_sub
 
u8x16_sub


	)

54 
	#u16x_sub
 
u16x8_sub


	)

55 
	#u32x_sub
 
u32x4_sub


	)

56 
	#u64x_sub
 
u64x2_sub


	)

57 
	#i8x_sub
 
i8x16_sub


	)

58 
	#i16x_sub
 
i16x8_sub


	)

59 
	#i32x_sub
 
i32x4_sub


	)

60 
	#i64x_sub
 
i64x2_sub


	)

63 #i‡
CLIB_VECTOR_WORD_BITS
 == 64

64 
	#u8x_add
 
u8x8_add


	)

65 
	#u16x_add
 
u16x4_add


	)

66 
	#u32x_add
 
u32x2_add


	)

67 
	#i8x_add
 
i8x8_add


	)

68 
	#i16x_add
 
i16x4_add


	)

69 
	#i32x_add
 
i32x2_add


	)

70 
	#u8x_sub
 
u8x8_sub


	)

71 
	#u16x_sub
 
u16x4_sub


	)

72 
	#u32x_sub
 
u32x2_sub


	)

73 
	#i8x_sub
 
i8x8_sub


	)

74 
	#i16x_sub
 
i16x4_sub


	)

75 
	#i32x_sub
 
i32x2_sub


	)

79 #i‡
CLIB_VECTOR_WORD_BITS
 == 128

80 
	#u8x_add_ßtuøã
 
u8x16_add_ßtuøã


	)

81 
	#u16x_add_ßtuøã
 
u16x8_add_ßtuøã


	)

82 
	#i8x_add_ßtuøã
 
i8x16_add_ßtuøã


	)

83 
	#i16x_add_ßtuøã
 
i16x8_add_ßtuøã


	)

84 
	#u8x_sub_ßtuøã
 
u8x16_sub_ßtuøã


	)

85 
	#u16x_sub_ßtuøã
 
u16x8_sub_ßtuøã


	)

86 
	#i8x_sub_ßtuøã
 
i8x16_sub_ßtuøã


	)

87 
	#i16x_sub_ßtuøã
 
i16x8_sub_ßtuøã


	)

90 #i‡
CLIB_VECTOR_WORD_BITS
 == 64

91 
	#u8x_add_ßtuøã
 
u8x8_add_ßtuøã


	)

92 
	#u16x_add_ßtuøã
 
u16x4_add_ßtuøã


	)

93 
	#i8x_add_ßtuøã
 
i8x8_add_ßtuøã


	)

94 
	#i16x_add_ßtuøã
 
i16x4_add_ßtuøã


	)

95 
	#u8x_sub_ßtuøã
 
u8x8_sub_ßtuøã


	)

96 
	#u16x_sub_ßtuøã
 
u16x4_sub_ßtuøã


	)

97 
	#i8x_sub_ßtuøã
 
i8x8_sub_ßtuøã


	)

98 
	#i16x_sub_ßtuøã
 
i16x4_sub_ßtuøã


	)

101 
	#_ve˘‹_öãæóve
(
a
,
b
,
t
) \

103 
t
 
_tmp_lo
 =Å##
	`_öãæóve_lo
 (
a
, 
b
); \

104 
t
 
_tmp_hi
 =Å##
	`_öãæóve_hi
 (
a
, 
b
); \

105 i‡(
CLIB_ARCH_IS_LITTLE_ENDIAN
) \

106 (
a
Ë
_tmp_lo
, (
b
Ë
_tmp_hi
; \

108 (
a
Ë
_tmp_hi
, (
b
Ë
_tmp_lo
; \

109 } 0)

	)

112 
	#u8x16_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
u8x16
)

	)

113 
	#i8x16_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
i8x16
)

	)

114 
	#u16x8_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
u16x8
)

	)

115 
	#i16x8_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
i16x8
)

	)

116 
	#u32x4_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
u32x4
)

	)

117 
	#i32x4_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
i32x4
)

	)

118 
	#u64x2_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
u64x2
)

	)

119 
	#i64x2_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
i64x2
)

	)

122 
	#u8x8_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
u8x8
)

	)

123 
	#i8x8_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
i8x8
)

	)

124 
	#u16x4_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
u16x4
)

	)

125 
	#i16x4_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
i16x4
)

	)

126 
	#u32x2_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
u32x2
)

	)

127 
	#i32x2_öãæóve
(
a
,
b
Ë
	`_ve˘‹_öãæóve
◊,b,
i32x2
)

	)

130 #i‡
CLIB_VECTOR_WORD_BITS
 == 128

131 
	#u8x_öãæóve
 
u8x16_öãæóve


	)

132 
	#u16x_öãæóve
 
u16x8_öãæóve


	)

133 
	#u32x_öãæóve
 
u32x4_öãæóve


	)

134 
	#u64x_öãæóve
 
u64x2_öãæóve


	)

137 #i‡
CLIB_VECTOR_WORD_BITS
 == 64

138 
	#u8x_öãæóve
 
u8x8_öãæóve


	)

139 
	#u16x_öãæóve
 
u16x4_öãæóve


	)

140 
	#u32x_öãæóve
 
u32x2_öãæóve


	)

141 
	#u64x_öãæóve
(
a
,
b
Ë

	)

145 #i‡
CLIB_VECTOR_WORD_BITS
 == 128

146 
	#u8x_shi·_À·
 
u8x16_shi·_À·


	)

147 
	#i8x_shi·_À·
 
i8x16_shi·_À·


	)

148 
	#u16x_shi·_À·
 
u16x8_shi·_À·


	)

149 
	#i16x_shi·_À·
 
i16x8_shi·_À·


	)

150 
	#u32x_shi·_À·
 
u32x4_shi·_À·


	)

151 
	#i32x_shi·_À·
 
i32x4_shi·_À·


	)

152 
	#u64x_shi·_À·
 
u64x2_shi·_À·


	)

153 
	#i64x_shi·_À·
 
i64x2_shi·_À·


	)

154 
	#u8x_shi·_right
 
u8x16_shi·_right


	)

155 
	#i8x_shi·_right
 
i8x16_shi·_right


	)

156 
	#u16x_shi·_right
 
u16x8_shi·_right


	)

157 
	#i16x_shi·_right
 
i16x8_shi·_right


	)

158 
	#u32x_shi·_right
 
u32x4_shi·_right


	)

159 
	#i32x_shi·_right
 
i32x4_shi·_right


	)

160 
	#u64x_shi·_right
 
u64x2_shi·_right


	)

161 
	#i64x_shi·_right
 
i64x2_shi·_right


	)

162 
	#u8x_rŸ©e_À·
 
u8x16_rŸ©e_À·


	)

163 
	#i8x_rŸ©e_À·
 
i8x16_rŸ©e_À·


	)

164 
	#u16x_rŸ©e_À·
 
u16x8_rŸ©e_À·


	)

165 
	#i16x_rŸ©e_À·
 
i16x8_rŸ©e_À·


	)

166 
	#u32x_rŸ©e_À·
 
u32x4_rŸ©e_À·


	)

167 
	#i32x_rŸ©e_À·
 
i32x4_rŸ©e_À·


	)

168 
	#u64x_rŸ©e_À·
 
u64x2_rŸ©e_À·


	)

169 
	#i64x_rŸ©e_À·
 
i64x2_rŸ©e_À·


	)

170 
	#u8x_rŸ©e_right
 
u8x16_rŸ©e_right


	)

171 
	#i8x_rŸ©e_right
 
i8x16_rŸ©e_right


	)

172 
	#u16x_rŸ©e_right
 
u16x8_rŸ©e_right


	)

173 
	#i16x_rŸ©e_right
 
i16x8_rŸ©e_right


	)

174 
	#u32x_rŸ©e_right
 
u32x4_rŸ©e_right


	)

175 
	#i32x_rŸ©e_right
 
i32x4_rŸ©e_right


	)

176 
	#u64x_rŸ©e_right
 
u64x2_rŸ©e_right


	)

177 
	#i64x_rŸ©e_right
 
i64x2_rŸ©e_right


	)

178 
	#u8x_ishi·_À·
 
u8x16_ishi·_À·


	)

179 
	#i8x_ishi·_À·
 
i8x16_ishi·_À·


	)

180 
	#u16x_ishi·_À·
 
u16x8_ishi·_À·


	)

181 
	#i16x_ishi·_À·
 
i16x8_ishi·_À·


	)

182 
	#u32x_ishi·_À·
 
u32x4_ishi·_À·


	)

183 
	#i32x_ishi·_À·
 
i32x4_ishi·_À·


	)

184 
	#u64x_ishi·_À·
 
u64x2_ishi·_À·


	)

185 
	#i64x_ishi·_À·
 
i64x2_ishi·_À·


	)

186 
	#u8x_ishi·_right
 
u8x16_ishi·_right


	)

187 
	#i8x_ishi·_right
 
i8x16_ishi·_right


	)

188 
	#u16x_ishi·_right
 
u16x8_ishi·_right


	)

189 
	#i16x_ishi·_right
 
i16x8_ishi·_right


	)

190 
	#u32x_ishi·_right
 
u32x4_ishi·_right


	)

191 
	#i32x_ishi·_right
 
i32x4_ishi·_right


	)

192 
	#u64x_ishi·_right
 
u64x2_ishi·_right


	)

193 
	#i64x_ishi·_right
 
i64x2_ishi·_right


	)

194 
	#u8x_úŸ©e_À·
 
u8x16_úŸ©e_À·


	)

195 
	#i8x_úŸ©e_À·
 
i8x16_úŸ©e_À·


	)

196 
	#u16x_úŸ©e_À·
 
u16x8_úŸ©e_À·


	)

197 
	#i16x_úŸ©e_À·
 
i16x8_úŸ©e_À·


	)

198 
	#u32x_úŸ©e_À·
 
u32x4_úŸ©e_À·


	)

199 
	#i32x_úŸ©e_À·
 
i32x4_úŸ©e_À·


	)

200 
	#u64x_úŸ©e_À·
 
u64x2_úŸ©e_À·


	)

201 
	#i64x_úŸ©e_À·
 
i64x2_úŸ©e_À·


	)

202 
	#u8x_úŸ©e_right
 
u8x16_úŸ©e_right


	)

203 
	#i8x_úŸ©e_right
 
i8x16_úŸ©e_right


	)

204 
	#u16x_úŸ©e_right
 
u16x8_úŸ©e_right


	)

205 
	#i16x_úŸ©e_right
 
i16x8_úŸ©e_right


	)

206 
	#u32x_úŸ©e_right
 
u32x4_úŸ©e_right


	)

207 
	#i32x_úŸ©e_right
 
i32x4_úŸ©e_right


	)

208 
	#u64x_úŸ©e_right
 
u64x2_úŸ©e_right


	)

209 
	#i64x_úŸ©e_right
 
i64x2_úŸ©e_right


	)

212 #i‡
CLIB_VECTOR_WORD_BITS
 == 64

213 
	#u8x_shi·_À·
 
u8x8_shi·_À·


	)

214 
	#i8x_shi·_À·
 
i8x8_shi·_À·


	)

215 
	#u16x_shi·_À·
 
u16x4_shi·_À·


	)

216 
	#i16x_shi·_À·
 
i16x4_shi·_À·


	)

217 
	#u32x_shi·_À·
 
u32x2_shi·_À·


	)

218 
	#i32x_shi·_À·
 
i32x2_shi·_À·


	)

219 
	#u8x_shi·_right
 
u8x8_shi·_right


	)

220 
	#i8x_shi·_right
 
i8x8_shi·_right


	)

221 
	#u16x_shi·_right
 
u16x4_shi·_right


	)

222 
	#i16x_shi·_right
 
i16x4_shi·_right


	)

223 
	#u32x_shi·_right
 
u32x2_shi·_right


	)

224 
	#i32x_shi·_right
 
i32x2_shi·_right


	)

225 
	#u8x_rŸ©e_À·
 
u8x8_rŸ©e_À·


	)

226 
	#i8x_rŸ©e_À·
 
i8x8_rŸ©e_À·


	)

227 
	#u16x_rŸ©e_À·
 
u16x4_rŸ©e_À·


	)

228 
	#i16x_rŸ©e_À·
 
i16x4_rŸ©e_À·


	)

229 
	#u32x_rŸ©e_À·
 
u32x2_rŸ©e_À·


	)

230 
	#i32x_rŸ©e_À·
 
i32x2_rŸ©e_À·


	)

231 
	#u8x_rŸ©e_right
 
u8x8_rŸ©e_right


	)

232 
	#i8x_rŸ©e_right
 
i8x8_rŸ©e_right


	)

233 
	#u16x_rŸ©e_right
 
u16x4_rŸ©e_right


	)

234 
	#i16x_rŸ©e_right
 
i16x4_rŸ©e_right


	)

235 
	#u32x_rŸ©e_right
 
u32x2_rŸ©e_right


	)

236 
	#i32x_rŸ©e_right
 
i32x2_rŸ©e_right


	)

237 
	#u8x_ishi·_À·
 
u8x8_ishi·_À·


	)

238 
	#i8x_ishi·_À·
 
i8x8_ishi·_À·


	)

239 
	#u16x_ishi·_À·
 
u16x4_ishi·_À·


	)

240 
	#i16x_ishi·_À·
 
i16x4_ishi·_À·


	)

241 
	#u32x_ishi·_À·
 
u32x2_ishi·_À·


	)

242 
	#i32x_ishi·_À·
 
i32x2_ishi·_À·


	)

243 
	#u8x_ishi·_right
 
u8x8_ishi·_right


	)

244 
	#i8x_ishi·_right
 
i8x8_ishi·_right


	)

245 
	#u16x_ishi·_right
 
u16x4_ishi·_right


	)

246 
	#i16x_ishi·_right
 
i16x4_ishi·_right


	)

247 
	#u32x_ishi·_right
 
u32x2_ishi·_right


	)

248 
	#i32x_ishi·_right
 
i32x2_ishi·_right


	)

249 
	#u8x_úŸ©e_À·
 
u8x8_úŸ©e_À·


	)

250 
	#i8x_úŸ©e_À·
 
i8x8_úŸ©e_À·


	)

251 
	#u16x_úŸ©e_À·
 
u16x4_úŸ©e_À·


	)

252 
	#i16x_úŸ©e_À·
 
i16x4_úŸ©e_À·


	)

253 
	#u32x_úŸ©e_À·
 
u32x2_úŸ©e_À·


	)

254 
	#i32x_úŸ©e_À·
 
i32x2_úŸ©e_À·


	)

255 
	#u8x_úŸ©e_right
 
u8x8_úŸ©e_right


	)

256 
	#i8x_úŸ©e_right
 
i8x8_úŸ©e_right


	)

257 
	#u16x_úŸ©e_right
 
u16x4_úŸ©e_right


	)

258 
	#i16x_úŸ©e_right
 
i16x4_úŸ©e_right


	)

259 
	#u32x_úŸ©e_right
 
u32x2_úŸ©e_right


	)

260 
	#i32x_úŸ©e_right
 
i32x2_úŸ©e_right


	)

263 #i‡
CLIB_VECTOR_WORD_BITS
 == 128

264 
	#u8x_•œt
 
u8x16_•œt


	)

265 
	#i8x_•œt
 
i8x16_•œt


	)

266 
	#u16x_•œt
 
u16x8_•œt


	)

267 
	#i16x_•œt
 
i16x8_•œt


	)

268 
	#u32x_•œt
 
u32x4_•œt


	)

269 
	#i32x_•œt
 
i32x4_•œt


	)

270 
	#u64x_•œt
 
u64x2_•œt


	)

271 
	#i64x_•œt
 
i64x2_•œt


	)

274 #i‡
CLIB_VECTOR_WORD_BITS
 == 64

275 
	#u8x_•œt
 
u8x8_•œt


	)

276 
	#i8x_•œt
 
i8x8_•œt


	)

277 
	#u16x_•œt
 
u16x4_•œt


	)

278 
	#i16x_•œt
 
i16x4_•œt


	)

279 
	#u32x_•œt
 
u32x2_•œt


	)

280 
	#i32x_•œt
 
i32x2_•œt


	)

283 
	#u32x4_å™•o£_°ï
(
x
,
y
) \

285 
u32x4
 
_x
 = (
x
); \

286 
u32x4
 
_y
 = (
y
); \

287 (
x
Ë
	`u32x4_öãæóve_lo
 (
_x
, 
_y
); \

288 (
y
Ë
	`u32x4_öãæóve_hi
 (
_x
, 
_y
); \

289 } 0)

	)

292 
	#u32x4_å™•o£
(
x0
,
x1
,
x2
,
x3
) \

294 
u32x4
 
_x0
 = (u32x4Ë(
x0
); \

295 
u32x4
 
_x1
 = (u32x4Ë(
x1
); \

296 
u32x4
 
_x2
 = (u32x4Ë(
x2
); \

297 
u32x4
 
_x3
 = (u32x4Ë(
x3
); \

298 
	`u32x4_å™•o£_°ï
 (
_x0
, 
_x2
); \

299 
	`u32x4_å™•o£_°ï
 (
_x1
, 
_x3
); \

300 
	`u32x4_å™•o£_°ï
 (
_x0
, 
_x1
); \

301 
	`u32x4_å™•o£_°ï
 (
_x2
, 
_x3
); \

302 (
x0
Ë(
u32x4
Ë
_x0
; \

303 (
x1
Ë(
u32x4
Ë
_x1
; \

304 (
x2
Ë(
u32x4
Ë
_x2
; \

305 (
x3
Ë(
u32x4
Ë
_x3
; \

306 } 0)

	)

308 
	#i32x4_å™•o£
(
x0
,
x1
,
x2
,
x3
) \

310 
u32x4
 
_x0
 = (u32x4Ë(
x0
); \

311 
u32x4
 
_x1
 = (u32x4Ë(
x1
); \

312 
u32x4
 
_x2
 = (u32x4Ë(
x2
); \

313 
u32x4
 
_x3
 = (u32x4Ë(
x3
); \

314 
	`u32x4_å™•o£_°ï
 (
_x0
, 
_x2
); \

315 
	`u32x4_å™•o£_°ï
 (
_x1
, 
_x3
); \

316 
	`u32x4_å™•o£_°ï
 (
_x0
, 
_x1
); \

317 
	`u32x4_å™•o£_°ï
 (
_x2
, 
_x3
); \

318 (
x0
Ë(
i32x4
Ë
_x0
; \

319 (
x1
Ë(
i32x4
Ë
_x1
; \

320 (
x2
Ë(
i32x4
Ë
_x2
; \

321 (
x3
Ë(
i32x4
Ë
_x3
; \

322 } 0)

	)

324 #unde‡
_


	@/usr/include/vppinfra/vector_neon.h

16 #i‚de‡
ö˛uded_ve˘‹_√⁄_h


17 
	#ö˛uded_ve˘‹_√⁄_h


	)

18 
	~<¨m_√⁄.h
>

21 
	#u16x8_sub_ßtuøã
(
a
,
b
Ë
	`vsubq_u16
◊,b)

	)

22 
	#i16x8_sub_ßtuøã
(
a
,
b
Ë
	`vsubq_s16
◊,b)

	)

24 
	#vªöãΩªtq_u8_u8
(
a
Ë
	)
a

26 
	#vmövq_u64
(
x
) \

28 
u64
 
x0
 = 
	`vgëq_œ√_u64
(
x
, 0); \

29 
u64
 
x1
 = 
	`vgëq_œ√_u64
(
x
, 1); \

30 
x0
 < 
x1
 ? x0 : x1; \

31 })

	)

34 
Æways_ölöe
 
u32


35 
	$u8x16_com∑ª_byã_mask
 (
u8x16
 
v
)

37 
uöt8x16_t
 
mask
 = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,

41 
uöt8x16_t
 
x
 = 
	`v™dq_u8
 (
v
, 
mask
);

44 
uöt64x2_t
 
x64
 = 
	`v∑ddlq_u32
 (
	`v∑ddlq_u16
 (
	`v∑ddlq_u8
 (
x
)));

46  (
u32
Ë(
	`vgëq_œ√_u64
 (
x64
, 0) + (vgetq_lane_u64 (x64, 1) << 8));

47 
	}
}

50 
	#f‹óch_√⁄_vec128i
 \

51 
	`_
(
i
,8,16,
s8
Ë_(i,16,8,
s16
Ë_(i,32,4,
s32
Ë_(i,64,2,
s64
)

	)

52 
	#f‹óch_√⁄_vec128u
 \

53 
	`_
(
u
,8,16,
u8
Ë_(u,16,8,
u16
Ë_(u,32,4,
u32
Ë_(u,64,2,
u64
)

	)

54 
	#f‹óch_√⁄_vec128f
 \

55 
	`_
(
f
,32,4,
f32
Ë_(f,64,2,
f64
)

	)

57 
	#_
(
t
, 
s
, 
c
, 
i
) \

58 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

59 
t
##
s
##
x
##
c
##
	`_•œt
 (t##s x) \

60 {  (
t
##
s
##
x
##
c
Ë
vdupq_n_
##
	`i
 (x); } \

62 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

63 
t
##
s
##
x
##
c
##
	`_lﬂd_u«lig√d
 (*
p
) \

64 {  (
t
##
s
##
x
##
c
Ë
vld1q_
##
	`i
 (
p
); } \

66 
°©ic_Æways_ölöe
 \

67 
t
##
s
##
x
##
c
##
	`_°‹e_u«lig√d
 (t##s##x##¯
v
, *
p
) \

68 { 
v°1q_
##
	`i
 (
p
, 
v
); } \

70 
°©ic_Æways_ölöe
 \

71 
t
##
s
##
x
##
c
##
	`_is_Æl_zîo
 (t##s##x##c x) \

72 {  !!(
vmövq_u
##
	`s
 (
v˚qq_
##
	`i
 (
vdupq_n_
##i(0), 
x
))); } \

74 
°©ic_Æways_ölöe
 \

75 
t
##
s
##
x
##
c
##
	`_is_equÆ
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

76 {  !!(
vmövq_u
##
	`s
 (
v˚qq_
##
	`i
 (
a
, 
b
))); } \

78 
°©ic_Æways_ölöe
 \

79 
t
##
s
##
x
##
c
##
	`_is_Æl_equÆ
 (t##s##x##¯
v
,Å##s x) \

80 {  
t
##
s
##
x
##
c
##
	`_is_equÆ
 (
v
,Å##s##x##c##
	`_•œt
 (x)); }; \

82 
°©ic_Æways_ölöe
 
u32
 \

83 
t
##
s
##
x
##
c
##
	`_zîo_byã_mask
 (t##s##x##c x) \

84 { 
uöt8x16_t
 
v
 = 
vªöãΩªtq_u8_u
##
	`s
 (
v˚qq_
##
	`i
 (
vdupq_n_
##i(0), 
x
)); \

85  
	`u8x16_com∑ª_byã_mask
 (
v
); } \

87 
°©ic_Æways_ölöe
 
u
##
s
##
x
##
c
 \

88 
t
##
s
##
x
##
c
##
	`_is_gª©î
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

89 {  (
u
##
s
##
x
##
c
Ë
vcgtq_
##
	`i
 (
a
, 
b
); } \

91 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

92 
t
##
s
##
x
##
c
##
	`_bÀnd
 (t##s##x##¯
d°
,Å##s##x##¯
§c
, 
u
##s##x##¯
mask
) \

93 {  (
t
##
s
##
x
##
c
Ë
vb¶q_
##
	`i
 (
mask
, 
§c
, 
d°
); }

	)

95 
f‹óch_√⁄_vec128i
 
	gf‹óch_√⁄_vec128u


97 #unde‡
_


100 
°©ic_Æways_ölöe
 
u16x8


101 
	$u16x8_byã_sw≠
 (
u16x8
 
v
)

103  (
u16x8
Ë
	`vªv16q_u8
 ((
u8x16
Ë
v
);

104 
	}
}

106 
°©ic_Æways_ölöe
 
u8x16


107 
	$u8x16_shufÊe
 (
u8x16
 
v
, u8x16 
m
)

109  (
u8x16
Ë
	`vqtbl1q_u8
 (
v
, 
m
);

110 
	}
}

112 
°©ic_Æways_ölöe
 
u32x4


113 
	$u32x4_hadd
 (
u32x4
 
v1
, u32x4 
v2
)

115  (
u32x4
Ë
	`v∑ddq_u32
 (
v1
, 
v2
);

116 
	}
}

118 
°©ic_Æways_ölöe
 
u64x2


119 
	$u32x4_exãnd_to_u64x2
 (
u32x4
 
v
)

121  
	`vmovl_u32
 (
	`vgë_low_u32
 (
v
));

122 
	}
}

124 
°©ic_Æways_ölöe
 
u64x2


125 
	$u32x4_exãnd_to_u64x2_high
 (
u32x4
 
v
)

127  
	`vmovl_high_u32
 (
v
);

128 
	}
}

131 
°©ic_Æways_ölöe
 
u16


132 
	$u8x16_msb_mask
 (
u8x16
 
v
)

134 
öt8x16_t
 
shi·
 =

137 
uöt8x16_t
 
x
 = 
	`vshlq_u8
 (
	`v™dq_u8
 (
v
, 
	`vdupq_n_u8
 (0x80)), 
shi·
);

140 
uöt64x2_t
 
x64
 = 
	`v∑ddlq_u32
 (
	`v∑ddlq_u16
 (
	`v∑ddlq_u8
 (
x
)));

142  (
u16
Ë(
	`vgëq_œ√_u64
 (
x64
, 0) + (vgetq_lane_u64 (x64, 1) << 8));

143 
	}
}

145 
°©ic_Æways_ölöe
 
u64x2


146 
	$u64x2_g©hî
 (*
p0
, *
p1
)

148 
u64x2
 
r
 = 
	`vdupq_n_u64
 (*(
u64
 *Ë
p0
);

149 
r
 = 
	`v£tq_œ√_u64
 (*(
u64
 *Ë
p1
,Ñ, 1);

150  
r
;

151 
	}
}

153 
°©ic_Æways_ölöe
 
u32x4


154 
	$u32x4_g©hî
 (*
p0
, *
p1
, *
p2
, *
p3
)

156 
u32x4
 
r
 = 
	`vdupq_n_u32
 (*(
u32
 *Ë
p0
);

157 
r
 = 
	`v£tq_œ√_u32
 (*(
u32
 *Ë
p1
,Ñ, 1);

158 
r
 = 
	`v£tq_œ√_u32
 (*(
u32
 *Ë
p2
,Ñ, 2);

159 
r
 = 
	`v£tq_œ√_u32
 (*(
u32
 *Ë
p3
,Ñ, 3);

160  
r
;

161 
	}
}

163 
°©ic_Æways_ölöe
 

164 
	$u64x2_sˇâî
 (
u64x2
 
r
, *
p0
, *
p1
)

166 *(
u64
 *Ë
p0
 = 
	`vgëq_œ√_u64
 (
r
, 0);

167 *(
u64
 *Ë
p1
 = 
	`vgëq_œ√_u64
 (
r
, 1);

168 
	}
}

170 
°©ic_Æways_ölöe
 

171 
	$u32x4_sˇâî
 (
u32x4
 
r
, *
p0
, *
p1
, *
p2
, *
p3
)

173 *(
u32
 *Ë
p0
 = 
	`vgëq_œ√_u32
 (
r
, 0);

174 *(
u32
 *Ë
p1
 = 
	`vgëq_œ√_u32
 (
r
, 1);

175 *(
u32
 *Ë
p2
 = 
	`vgëq_œ√_u32
 (
r
, 2);

176 *(
u32
 *Ë
p3
 = 
	`vgëq_œ√_u32
 (
r
, 3);

177 
	}
}

179 
	#CLIB_HAVE_VEC128_MSB_MASK


	)

181 
	#CLIB_HAVE_VEC128_UNALIGNED_LOAD_STORE


	)

182 
	#CLIB_VEC128_SPLAT_DEFINED


	)

	@/usr/include/vppinfra/vector_sse42.h

38 #i‚de‡
ö˛uded_ve˘‹_s£2_h


39 
	#ö˛uded_ve˘‹_s£2_h


	)

41 
	~<vµö‰a/îr‹_boŸ°øp.h
>

42 
	~<x86öåö.h
>

45 
	#f‹óch_s£42_vec128i
 \

46 
	`_
(
i
,8,16,
ïi8
Ë_(i,16,8,
ïi16
Ë_(i,32,4,
ïi32
Ë_(i,64,2,
ïi64x
)

	)

47 
	#f‹óch_s£42_vec128u
 \

48 
	`_
(
u
,8,16,
ïi8
Ë_(u,16,8,
ïi16
Ë_(u,32,4,
ïi32
Ë_(u,64,2,
ïi64x
)

	)

49 
	#f‹óch_s£42_vec128f
 \

50 
	`_
(
f
,32,4,
ps
Ë_(f,64,2,
pd
)

	)

54 
	#_
(
t
, 
s
, 
c
, 
i
) \

55 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

56 
t
##
s
##
x
##
c
##
	`_•œt
 (t##s x) \

57 {  (
t
##
s
##
x
##
c
Ë
_mm_£t1_
##
	`i
 (x); } \

59 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

60 
t
##
s
##
x
##
c
##
	`_lﬂd_u«lig√d
 (*
p
) \

61 {  (
t
##
s
##
x
##
c
Ë
	`_mm_lﬂdu_si128
 (
p
); } \

63 
°©ic_Æways_ölöe
 \

64 
t
##
s
##
x
##
c
##
	`_°‹e_u«lig√d
 (t##s##x##¯
v
, *
p
) \

65 { 
	`_mm_°‹eu_si128
 ((
__m128i
 *Ë
p
, (__m128iË
v
); } \

67 
°©ic_Æways_ölöe
 \

68 
t
##
s
##
x
##
c
##
	`_is_Æl_zîo
 (t##s##x##c x) \

69 {  
	`_mm_ã°z_si128
 ((
__m128i
Ë
x
, (__m128i) x); } \

71 
°©ic_Æways_ölöe
 \

72 
t
##
s
##
x
##
c
##
	`_is_equÆ
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

73 {  
t
##
s
##
x
##
c
##
	`_is_Æl_zîo
 (
a
 ^ 
b
); } \

75 
°©ic_Æways_ölöe
 \

76 
t
##
s
##
x
##
c
##
	`_is_Æl_equÆ
 (t##s##x##¯
v
,Å##s x) \

77 {  
t
##
s
##
x
##
c
##
	`_is_equÆ
 (
v
,Å##s##x##c##
	`_•œt
 (x)); }; \

78 

	)

79 
f‹óch_s£42_vec128i
 
	gf‹óch_s£42_vec128u


80 #unde‡
_


83 
	#_
(
t
, 
s
, 
c
, 
i
) \

84 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

85 
t
##
s
##
x
##
c
##
	`_mö
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

86 {  (
t
##
s
##
x
##
c
Ë
_mm_mö_
##
	`i
 ((
__m128i
Ë
a
, (__m128iË
b
); } \

88 
°©ic_Æways_ölöe
 
t
##
s
##
x
##
c
 \

89 
t
##
s
##
x
##
c
##
	`_max
 (t##s##x##¯
a
,Å##s##x##¯
b
) \

90 {  (
t
##
s
##
x
##
c
Ë
_mm_max_
##
	`i
 ((
__m128i
Ë
a
, (__m128iË
b
); } \

91 

	)

92 
	$_
(
i
,8,16,
ïi8
Ë
	$_
(
i
,16,8,
ïi16
Ë
	$_
(
i
,32,4,
ïi32
Ë
	$_
(
i
,64,2,
ïi64
)

93 
	$_
(
u
,8,16,
ïu8
Ë
	$_
(
u
,16,8,
ïu16
Ë
	$_
(
u
,32,4,
ïu32
Ë
	$_
(
u
,64,2,
ïu64
)

94 #unde‡
_


97 
	#CLIB_VEC128_SPLAT_DEFINED


	)

98 
	#CLIB_HAVE_VEC128_UNALIGNED_LOAD_STORE


	)

101 
Æways_ölöe
 
u8x16


102 
	$u8x16_öãæóve_hi
 (
u8x16
 
a
, u8x16 
b
)

104  (
u8x16
Ë
	`_mm_u≈ackhi_ïi8
 ((
__m128i
Ë
a
, (__m128iË
b
);

105 
	}
}

107 
Æways_ölöe
 
u8x16


108 
	$u8x16_öãæóve_lo
 (
u8x16
 
a
, u8x16 
b
)

110  (
u8x16
Ë
	`_mm_u≈acklo_ïi8
 ((
__m128i
Ë
a
, (__m128iË
b
);

111 
	}
}

113 
Æways_ölöe
 
u16x8


114 
	$u16x8_öãæóve_hi
 (
u16x8
 
a
, u16x8 
b
)

116  (
u16x8
Ë
	`_mm_u≈ackhi_ïi16
 ((
__m128i
Ë
a
, (__m128iË
b
);

117 
	}
}

119 
Æways_ölöe
 
u16x8


120 
	$u16x8_öãæóve_lo
 (
u16x8
 
a
, u16x8 
b
)

122  (
u16x8
Ë
	`_mm_u≈acklo_ïi16
 ((
__m128i
Ë
a
, (__m128iË
b
);

123 
	}
}

125 
Æways_ölöe
 
u32x4


126 
	$u32x4_öãæóve_hi
 (
u32x4
 
a
, u32x4 
b
)

128  (
u32x4
Ë
	`_mm_u≈ackhi_ïi32
 ((
__m128i
Ë
a
, (__m128iË
b
);

129 
	}
}

131 
Æways_ölöe
 
u32x4


132 
	$u32x4_öãæóve_lo
 (
u32x4
 
a
, u32x4 
b
)

134  (
u32x4
Ë
	`_mm_u≈acklo_ïi32
 ((
__m128i
Ë
a
, (__m128iË
b
);

135 
	}
}

137 
Æways_ölöe
 
u64x2


138 
	$u64x2_öãæóve_hi
 (
u64x2
 
a
, u64x2 
b
)

140  (
u64x2
Ë
	`_mm_u≈ackhi_ïi64
 ((
__m128i
Ë
a
, (__m128iË
b
);

141 
	}
}

143 
Æways_ölöe
 
u64x2


144 
	$u64x2_öãæóve_lo
 (
u64x2
 
a
, u64x2 
b
)

146  (
u64x2
Ë
	`_mm_u≈acklo_ïi64
 ((
__m128i
Ë
a
, (__m128iË
b
);

147 
	}
}

150 
Æways_ölöe
 
u8x8


151 
	$u8x8_öãæóve_hi
 (
u8x8
 
a
, u8x8 
b
)

153  (
u8x8
Ë
	`_m_pu≈ckhbw
 ((
__m64
Ë
a
, (__m64Ë
b
);

154 
	}
}

156 
Æways_ölöe
 
u8x8


157 
	$u8x8_öãæóve_lo
 (
u8x8
 
a
, u8x8 
b
)

159  (
u8x8
Ë
	`_m_pu≈cklbw
 ((
__m64
Ë
a
, (__m64Ë
b
);

160 
	}
}

162 
Æways_ölöe
 
u16x4


163 
	$u16x4_öãæóve_hi
 (
u16x4
 
a
, u16x4 
b
)

165  (
u16x4
Ë
	`_m_pu≈ckhwd
 ((
__m64
Ë
a
, (__m64Ë
b
);

166 
	}
}

168 
Æways_ölöe
 
u16x4


169 
	$u16x4_öãæóve_lo
 (
u16x4
 
a
, u16x4 
b
)

171  (
u16x4
Ë
	`_m_pu≈cklwd
 ((
__m64
Ë
a
, (__m64Ë
b
);

172 
	}
}

174 
Æways_ölöe
 
u32x2


175 
	$u32x2_öãæóve_hi
 (
u32x2
 
a
, u32x2 
b
)

177  (
u32x2
Ë
	`_m_pu≈ckhdq
 ((
__m64
Ë
a
, (__m64Ë
b
);

178 
	}
}

180 
Æways_ölöe
 
u32x2


181 
	$u32x2_öãæóve_lo
 (
u32x2
 
a
, u32x2 
b
)

183  (
u32x2
Ë
	`_m_pu≈ckldq
 ((
__m64
Ë
a
, (__m64Ë
b
);

184 
	}
}

187 
Æways_ölöe
 
u8x16


188 
	$u16x8_∑ck
 (
u16x8
 
lo
, u16x8 
hi
)

190  (
u8x16
Ë
	`_mm_∑ckus_ïi16
 ((
__m128i
Ë
lo
, (__m128iË
hi
);

191 
	}
}

193 
Æways_ölöe
 
i8x16


194 
	$i16x8_∑ck
 (
i16x8
 
lo
, i16x8 
hi
)

196  (
i8x16
Ë
	`_mm_∑cks_ïi16
 ((
__m128i
Ë
lo
, (__m128iË
hi
);

197 
	}
}

199 
Æways_ölöe
 
u16x8


200 
	$u32x4_∑ck
 (
u32x4
 
lo
, u32x4 
hi
)

202  (
u16x8
Ë
	`_mm_∑cks_ïi32
 ((
__m128i
Ë
lo
, (__m128iË
hi
);

203 
	}
}

206 
Æways_ölöe
 
u8x8


207 
	$u16x4_∑ck
 (
u16x4
 
lo
, u16x4 
hi
)

209  (
u8x8
Ë
	`_m_∑ckuswb
 ((
__m64
Ë
lo
, (__m64Ë
hi
);

210 
	}
}

212 
Æways_ölöe
 
i8x8


213 
	$i16x4_∑ck
 (
i16x4
 
lo
, i16x4 
hi
)

215  (
i8x8
Ë
	`_m_∑cksswb
 ((
__m64
Ë
lo
, (__m64Ë
hi
);

216 
	}
}

218 
Æways_ölöe
 
u16x4


219 
	$u32x2_∑ck
 (
u32x2
 
lo
, u32x2 
hi
)

221  (
u16x4
Ë
	`_m_∑ckssdw
 ((
__m64
Ë
lo
, (__m64Ë
hi
);

222 
	}
}

224 
Æways_ölöe
 
i16x4


225 
	$i32x2_∑ck
 (
i32x2
 
lo
, i32x2 
hi
)

227  (
i16x4
Ë
	`_m_∑ckssdw
 ((
__m64
Ë
lo
, (__m64Ë
hi
);

228 
	}
}

230 #i‚de‡
__ICC


231 
Æways_ölöe
 
u64x2


232 
	$u64x2_ªad_lo
 (
u64x2
 
x
, 
u64
 * 
a
)

234  (
u64x2
Ë
	`_mm_lﬂdl_pi
 ((
__m128
Ë
x
, (
__m64
 *Ë
a
);

235 
	}
}

237 
Æways_ölöe
 
u64x2


238 
	$u64x2_ªad_hi
 (
u64x2
 
x
, 
u64
 * 
a
)

240  (
u64x2
Ë
	`_mm_lﬂdh_pi
 ((
__m128
Ë
x
, (
__m64
 *Ë
a
);

241 
	}
}

243 
Æways_ölöe
 

244 
	$u64x2_wrôe_lo
 (
u64x2
 
x
, 
u64
 * 
a
)

246 
	`_mm_°‹ñ_pi
 ((
__m64
 *Ë
a
, (
__m128
Ë
x
);

247 
	}
}

249 
Æways_ölöe
 

250 
	$u64x2_wrôe_hi
 (
u64x2
 
x
, 
u64
 * 
a
)

252 
	`_mm_°‹eh_pi
 ((
__m64
 *Ë
a
, (
__m128
Ë
x
);

253 
	}
}

256 
	#_sig√d_bö›
(
n
,
m
,
f
,
g
) \

258 
Æways_ölöe
 
u
##
n
##
x
##
m
 \

259 
u
##
n
##
x
##
m
##
_
##
	`f
 (u##n##x##m x, u##n##x##m 
y
) \

260 {  (
u
##
n
##
x
##
m
Ë
_mm_
##
g
##
	`n
 ((
__m128i
Ëx, (__m128iË
y
); } \

263 
Æways_ölöe
 
i
##
n
##
x
##
m
 \

264 
i
##
n
##
x
##
m
##
_
##
	`f
 (i##n##x##m x, i##n##x##m 
y
) \

265 {  (
i
##
n
##
x
##
m
Ë
_mm_
##
g
##
	`n
 ((
__m128i
Ëx, (__m128iË
y
); }

	)

267 
	$_sig√d_bö›
 (8, 16, 
add_ßtuøã
, 
adds_ïu
)

268 
	$_sig√d_bö›
 (16, 8, 
add_ßtuøã
, 
adds_ïu
)

269 
	$_sig√d_bö›
 (8, 16, 
sub_ßtuøã
, 
subs_ïu
)

270 
	$_sig√d_bö›
 (16, 8, 
sub_ßtuøã
, 
subs_ïu
)

272 
Æways_ölöe
 
i16x8
 
	$i16x8_mul_lo
 (
i16x8
 
x
, i16x8 
y
)

274  (
i16x8
Ë
	`_mm_muŒo_ïi16
 ((
__m128i
Ë
x
, (__m128iË
y
);

275 
	}
}

277 
Æways_ölöe
 
u16x8


278 
	$u16x8_mul_lo
 (
u16x8
 
x
, u16x8 
y
)

280  (
u16x8
Ë
	`_mm_muŒo_ïi16
 ((
__m128i
Ë
x
, (__m128iË
y
);

281 
	}
}

283 
Æways_ölöe
 
i16x8


284 
	$i16x8_mul_hi
 (
i16x8
 
x
, i16x8 
y
)

286  (
i16x8
Ë
	`_mm_mulhi_ïu16
 ((
__m128i
Ë
x
, (__m128iË
y
);

287 
	}
}

289 
Æways_ölöe
 
u16x8


290 
	$u16x8_mul_hi
 (
u16x8
 
x
, u16x8 
y
)

292  (
u16x8
Ë
	`_mm_mulhi_ïu16
 ((
__m128i
Ë
x
, (__m128iË
y
);

293 
	}
}

297 
	#_
(
p
,
a
,
b
,
c
,
f
) \

298 
Æways_ölöe
 
p
##
a
##
x
##
b
Ö##a##x##b##
_ishi·_
##
	`c
 (p##a##x##b x, 
i
) \

299 {  (
p
##
a
##
x
##
b
Ë
_mm_
##
f
##
i_ïi
##
	`a
 ((
__m128i
Ëx, 
i
); } \

301 
Æways_ölöe
 
p
##
a
##
x
##
b
Ö##a##x##b##
_shi·_
##
	`c
 (p##a##x##b x,Ö##a##x##b 
y
) \

302 {  (
p
##
a
##
x
##
b
Ë
_mm_
##
f
##
_ïi
##
	`a
 ((
__m128i
Ëx, (__m128iË
y
); }

	)

304 
	$_
(
u
, 16, 8, 
À·
, 
¶l
)

305 
	$_
(
u
, 32, 4, 
À·
, 
¶l
)

306 
	$_
(
u
, 64, 2, 
À·
, 
¶l
)

307 
	$_
(
u
, 16, 8, 
right
, 
§l
)

308 
	$_
(
u
, 32, 4, 
right
, 
§l
)

309 
	$_
(
u
, 64, 2, 
right
, 
§l
)

310 
	$_
(
i
, 16, 8, 
À·
, 
¶l
)

311 
	$_
(
i
, 32, 4, 
À·
, 
¶l
)

312 
	$_
(
i
, 64, 2, 
À·
, 
¶l
Ë
	$_
(
i
, 16, 8, 
right
, 
§a
Ë
	$_
(
i
, 32, 4, 
right
, 
§a
)

313 #unde‡
_


315 
Æways_ölöe
 
u16x4


316 
	$u16x4_shi·_À·
 (
u16x4
 
x
, u16x4 
i
)

318  (
u16x4
Ë
	`_m_p¶lw
 ((
__m64
Ë
x
, (__m64Ë
i
);

319 
	}
};

321 
Æways_ölöe
 
u32x2


322 
	$u32x2_shi·_À·
 (
u32x2
 
x
, u32x2 
i
)

324  (
u32x2
Ë
	`_m_p¶ld
 ((
__m64
Ë
x
, (__m64Ë
i
);

325 
	}
};

327 
Æways_ölöe
 
u16x4


328 
	$u16x4_shi·_right
 (
u16x4
 
x
, u16x4 
i
)

330  (
u16x4
Ë
	`_m_p§lw
 ((
__m64
Ë
x
, (__m64Ë
i
);

331 
	}
};

333 
Æways_ölöe
 
u32x2


334 
	$u32x2_shi·_right
 (
u32x2
 
x
, u32x2 
i
)

336  (
u32x2
Ë
	`_m_p§ld
 ((
__m64
Ë
x
, (__m64Ë
i
);

337 
	}
};

339 
Æways_ölöe
 
i16x4


340 
	$i16x4_shi·_À·
 (
i16x4
 
x
, i16x4 
i
)

342  (
i16x4
Ë
	`_m_p¶lw
 ((
__m64
Ë
x
, (__m64Ë
i
);

343 
	}
};

345 
Æways_ölöe
 
i32x2


346 
	$i32x2_shi·_À·
 (
i32x2
 
x
, i32x2 
i
)

348  (
i32x2
Ë
	`_m_p¶ld
 ((
__m64
Ë
x
, (__m64Ë
i
);

349 
	}
};

351 
Æways_ölöe
 
i16x4


352 
	$i16x4_shi·_right
 (
i16x4
 
x
, i16x4 
i
)

354  (
i16x4
Ë
	`_m_p§aw
 ((
__m64
Ë
x
, (__m64Ë
i
);

355 
	}
};

357 
Æways_ölöe
 
i32x2


358 
	$i32x2_shi·_right
 (
i32x2
 
x
, i32x2 
i
)

360  (
i32x2
Ë
	`_m_p§ad
 ((
__m64
Ë
x
, (__m64Ë
i
);

361 
	}
};

363 
	#u8x16_w‹d_shi·_À·
(
a
,
n
Ë(
u8x16
Ë
	`_mm_¶li_si128
((
__m128i
Ëa,Ç)

	)

364 
	#u8x16_w‹d_shi·_right
(
a
,
n
Ë(
u8x16
Ë
	`_mm_§li_si128
((
__m128i
Ëa,Ç)

	)

366 
	#i8x16_w‹d_shi·_À·
(
a
,
n
) \

367 ((
i8x16
Ë
	`u8x16_w‹d_shi·_À·
((
u8x16
Ë(
a
), (
n
)))

	)

368 
	#i8x16_w‹d_shi·_right
(
a
,
n
) \

369 ((
i8x16
Ë
	`u8x16_w‹d_shi·_right
((
u8x16
Ë(
a
), (
n
)))

	)

371 
	#u16x8_w‹d_shi·_À·
(
a
,
n
) \

372 ((
u16x8
Ë
	`u8x16_w‹d_shi·_À·
((
u8x16
Ë(
a
), (
n
Ë*  (
u16
)))

	)

373 
	#i16x8_w‹d_shi·_À·
(
a
,
n
) \

374 ((
u16x8
Ë
	`u8x16_w‹d_shi·_À·
((
u8x16
Ë(
a
), (
n
Ë*  (
u16
)))

	)

375 
	#u16x8_w‹d_shi·_right
(
a
,
n
) \

376 ((
u16x8
Ë
	`u8x16_w‹d_shi·_right
((
u8x16
Ë(
a
), (
n
Ë*  (
u16
)))

	)

377 
	#i16x8_w‹d_shi·_right
(
a
,
n
) \

378 ((
i16x8
Ë
	`u8x16_w‹d_shi·_right
((
u8x16
Ë(
a
), (
n
Ë*  (
u16
)))

	)

380 
	#u32x4_w‹d_shi·_À·
(
a
,
n
) \

381 ((
u32x4
Ë
	`u8x16_w‹d_shi·_À·
((
u8x16
Ë(
a
), (
n
Ë*  (
u32
)))

	)

382 
	#i32x4_w‹d_shi·_À·
(
a
,
n
) \

383 ((
u32x4
Ë
	`u8x16_w‹d_shi·_À·
((
u8x16
Ë(
a
), (
n
Ë*  (
u32
)))

	)

384 
	#u32x4_w‹d_shi·_right
(
a
,
n
) \

385 ((
u32x4
Ë
	`u8x16_w‹d_shi·_right
((
u8x16
Ë(
a
), (
n
Ë*  (
u32
)))

	)

386 
	#i32x4_w‹d_shi·_right
(
a
,
n
) \

387 ((
i32x4
Ë
	`u8x16_w‹d_shi·_right
((
u8x16
Ë(
a
), (
n
Ë*  (
u32
)))

	)

389 
	#u64x2_w‹d_shi·_À·
(
a
,
n
) \

390 ((
u64x2
Ë
	`u8x16_w‹d_shi·_À·
((
u8x16
Ë(
a
), (
n
Ë*  (
u64
)))

	)

391 
	#i64x2_w‹d_shi·_À·
(
a
,
n
) \

392 ((
u64x2
Ë
	`u8x16_w‹d_shi·_À·
((
u8x16
Ë(
a
), (
n
Ë*  (
u64
)))

	)

393 
	#u64x2_w‹d_shi·_right
(
a
,
n
) \

394 ((
u64x2
Ë
	`u8x16_w‹d_shi·_right
((
u8x16
Ë(
a
), (
n
Ë*  (
u64
)))

	)

395 
	#i64x2_w‹d_shi·_right
(
a
,
n
) \

396 ((
i64x2
Ë
	`u8x16_w‹d_shi·_right
((
u8x16
Ë(
a
), (
n
Ë*  (
u64
)))

	)

399 
	#_
(
t
,
n
,
Ã1
,
Ã2
) \

400 
Æways_ölöe
 
t
##
x
##
n
 \

401 
t
##
x
##
n
##
_úŸ©e_
##
	`Ã1
 (t##x##¿
w
, 
i
) \

403 
	`ASSERT
 (
i
 >0 && i <
	`BITS
 (
t
)); \

404  (
t
##
x
##
n
##
_ishi·_
##
	`Ã1
 (
w
, 
i
) \

405 | 
t
##
x
##
n
##
_ishi·_
##
	`Ã2
 (
w
, 
	`BITS
 (tË- 
i
)); \

408 
Æways_ölöe
 
t
##
x
##
n
 \

409 
t
##
x
##
n
##
_rŸ©e_
##
	`Ã1
 (t##x##¿
w
,Å##x##¿
i
) \

411 
t
##
x
##
n
 
j
 =Å##x##n##
	`_•œt
 (
	`BITS
 (t)); \

412  (
t
##
x
##
n
##
_shi·_
##
	`Ã1
 (
w
, 
i
) \

413 | 
t
##
x
##
n
##
_shi·_
##
	`Ã2
 (
w
, 
j
 - 
i
)); \

414 }

	)

416 
_
(
u16
, 8, 
À·
, 
right
);

417 
_
(
u16
, 8, 
right
, 
À·
);

418 
_
(
u32
, 4, 
À·
, 
right
);

419 
_
(
u32
, 4, 
right
, 
À·
);

420 
_
(
u64
, 2, 
À·
, 
right
);

421 
_
(
u64
, 2, 
right
, 
À·
);

423 #unde‡
_


425 #i‚de‡
__˛™g__


426 
	#_
(
t
,
n
,
Ã1
,
Ã2
) \

427 
Æways_ölöe
 
t
##
x
##
n
 \

428 
t
##
x
##
n
##
_w‹d_rŸ©e2_
##
	`Ã1
 (t##x##¿
w0
,Å##x##¿
w1
, 
i
) \

430 
m
 =  (
t
##
x
##
n
) /  (t); \

431 
	`ASSERT
 (
i
 >0 && i < 
m
); \

432  (
t
##
x
##
n
##
_w‹d_shi·_
##
	`Ã1
 (
w0
, 
i
) \

433 | 
t
##
x
##
n
##
_w‹d_shi·_
##
	`Ã2
 (
w1
, 
m
 - 
i
)); \

436 
Æways_ölöe
 
t
##
x
##
n
 \

437 
t
##
x
##
n
##
_w‹d_rŸ©e_
##
	`Ã1
 (t##x##¿
w0
, 
i
) \

438 {  
t
##
x
##
n
##
_w‹d_rŸ©e2_
##
	`Ã1
 (
w0
, w0, 
i
); }

	)

440 
_
(
u8
, 16, 
À·
, 
right
);

441 
_
(
u8
, 16, 
right
, 
À·
);

442 
_
(
u16
, 8, 
À·
, 
right
);

443 
_
(
u16
, 8, 
right
, 
À·
);

444 
_
(
u32
, 4, 
À·
, 
right
);

445 
_
(
u32
, 4, 
right
, 
À·
);

446 
_
(
u64
, 2, 
À·
, 
right
);

447 
_
(
u64
, 2, 
right
, 
À·
);

449 #unde‡
_


452 
	#u32x4_£À˘
(
A
,
MASK
) \

454 
u32x4
 
_x
, 
_y
; \

455 
_x
 = (
A
); \

456 
asm
 volatile ("pshufd %[mask], %[x], %[y]" \

457 : [
y
] "=x" (
_y
) \

458 : [
x
] "x" (
_x
), [
mask
] "i" (
MASK
)); \

459 
_y
; \

460 })

	)

462 
	#u32x4_•œt_w‹d
(
x
,
i
) \

463 
	`u32x4_£À˘
 ((
x
), (((
i
) << (2*0)) \

464 | ((
i
) << (2*1)) \

465 | ((
i
) << (2*2)) \

466 | ((
i
Ë<< (2*3))))

	)

469 
Æways_ölöe
 
u32


470 
	$u32x4_gë0
 (
u32x4
 
x
)

472 
u32
 
ªsu…
;

473 
asm
 vﬁ©ûê("movd %[x], %[ªsu…]": [
ªsu…
] "=r" (result)

474 : [
x
] "x" (x));

475  
ªsu…
;

476 
	}
}

478 
Æways_ölöe
 
u32x4


479 
	$u32x4_£t0
 (
u32
 
x
)

481 
u32x4
 
ªsu…
;

482 
asm
 vﬁ©ûê("movd %[x], %[ªsu…]": [
ªsu…
] "=x" (result)

483 : [
x
] "r" (x));

484  
ªsu…
;

485 
	}
}

487 
Æways_ölöe
 
i32x4


488 
	$i32x4_£t0
 (
i32
 
x
)

490  (
i32x4
Ë
	`u32x4_£t0
 ((
u32
Ë
x
);

491 
	}
}

493 
Æways_ölöe
 
i32


494 
	$i32x4_gë0
 (
i32x4
 
x
)

496  (
i32
Ë
	`u32x4_gë0
 ((
u32x4
Ë
x
);

497 
	}
}

500 
Æways_ölöe
 
u32


501 
	$u8x16_com∑ª_byã_mask
 (
u8x16
 
x
)

503  
	`_mm_movemask_ïi8
 ((
__m128i
Ë
x
);

504 
	}
}

506 
u8
 
u32x4_com∑ª_w‹d_mask_èbÀ
[256];

508 
Æways_ölöe
 
u32


509 
	$u32x4_com∑ª_w‹d_mask
 (
u32x4
 
x
)

511 
u32
 
m
 = 
	`u8x16_com∑ª_byã_mask
 ((
u8x16
Ë
x
);

512  (
u32x4_com∑ª_w‹d_mask_èbÀ
[(
m
 >> 0) & 0xff]

513 | (
u32x4_com∑ª_w‹d_mask_èbÀ
[(
m
 >> 8) & 0xff] << 2));

514 
	}
}

516 
Æways_ölöe
 
u32


517 
	$u8x16_zîo_byã_mask
 (
u8x16
 
x
)

519 
u8x16
 
zîo
 = { 0 };

520  
	`u8x16_com∑ª_byã_mask
 (
x
 =
zîo
);

521 
	}
}

523 
Æways_ölöe
 
u32


524 
	$u16x8_zîo_byã_mask
 (
u16x8
 
x
)

526 
u16x8
 
zîo
 = { 0 };

527  
	`u8x16_com∑ª_byã_mask
 ((
u8x16
Ë(
x
 =
zîo
));

528 
	}
}

530 
Æways_ölöe
 
u32


531 
	$u32x4_zîo_byã_mask
 (
u32x4
 
x
)

533 
u32x4
 
zîo
 = { 0 };

534  
	`u8x16_com∑ª_byã_mask
 ((
u8x16
Ë(
x
 =
zîo
));

535 
	}
}

537 
Æways_ölöe
 
u32


538 
	$u8x16_max_sˇœr
 (
u8x16
 
x
)

540 
x
 = 
	`u8x16_max
 (x, 
	`u8x16_w‹d_shi·_right
 (x, 8));

541 
x
 = 
	`u8x16_max
 (x, 
	`u8x16_w‹d_shi·_right
 (x, 4));

542 
x
 = 
	`u8x16_max
 (x, 
	`u8x16_w‹d_shi·_right
 (x, 2));

543 
x
 = 
	`u8x16_max
 (x, 
	`u8x16_w‹d_shi·_right
 (x, 1));

544  
	`_mm_exåa˘_ïi16
 ((
__m128i
Ë
x
, 0) & 0xff;

545 
	}
}

547 
Æways_ölöe
 
u8


548 
	$u8x16_mö_sˇœr
 (
u8x16
 
x
)

550 
x
 = 
	`u8x16_mö
 (x, 
	`u8x16_w‹d_shi·_right
 (x, 8));

551 
x
 = 
	`u8x16_mö
 (x, 
	`u8x16_w‹d_shi·_right
 (x, 4));

552 
x
 = 
	`u8x16_mö
 (x, 
	`u8x16_w‹d_shi·_right
 (x, 2));

553 
x
 = 
	`u8x16_mö
 (x, 
	`u8x16_w‹d_shi·_right
 (x, 1));

554  
	`_mm_exåa˘_ïi16
 ((
__m128i
Ë
x
, 0) & 0xff;

555 
	}
}

557 
Æways_ölöe
 
i16


558 
	$i16x8_max_sˇœr
 (
i16x8
 
x
)

560 
x
 = 
	`i16x8_max
 (x, 
	`i16x8_w‹d_shi·_right
 (x, 4));

561 
x
 = 
	`i16x8_max
 (x, 
	`i16x8_w‹d_shi·_right
 (x, 2));

562 
x
 = 
	`i16x8_max
 (x, 
	`i16x8_w‹d_shi·_right
 (x, 1));

563  
	`_mm_exåa˘_ïi16
 ((
__m128i
Ë
x
, 0);

564 
	}
}

566 
Æways_ölöe
 
i16


567 
	$i16x8_mö_sˇœr
 (
i16x8
 
x
)

569 
x
 = 
	`i16x8_mö
 (x, 
	`i16x8_w‹d_shi·_right
 (x, 4));

570 
x
 = 
	`i16x8_mö
 (x, 
	`i16x8_w‹d_shi·_right
 (x, 2));

571 
x
 = 
	`i16x8_mö
 (x, 
	`i16x8_w‹d_shi·_right
 (x, 1));

572  
	`_mm_exåa˘_ïi16
 ((
__m128i
Ë
x
, 0);

573 
	}
}

575 
	#u8x16_Æign_right
(
a
, 
b
, 
imm
) \

576 (
u8x16
Ë
	`_mm_Æigƒ_ïi8
 ((
__m128i
Ë
a
, (__m128iË
b
, 
imm
)

	)

578 
°©ic_Æways_ölöe
 
u32


579 
	$u32x4_mö_sˇœr
 (
u32x4
 
v
)

581 
v
 = 
	`u32x4_mö
 (v, (
u32x4
Ë
	`u8x16_Æign_right
 ((
u8x16
) v, (u8x16) v, 8));

582 
v
 = 
	`u32x4_mö
 (v, (
u32x4
Ë
	`u8x16_Æign_right
 ((
u8x16
) v, (u8x16) v, 4));

583  
v
[0];

584 
	}
}

586 
°©ic_Æways_ölöe
 
u32


587 
	$u32x4_max_sˇœr
 (
u32x4
 
v
)

589 
v
 = 
	`u32x4_max
 (v, (
u32x4
Ë
	`u8x16_Æign_right
 ((
u8x16
) v, (u8x16) v, 8));

590 
v
 = 
	`u32x4_max
 (v, (
u32x4
Ë
	`u8x16_Æign_right
 ((
u8x16
) v, (u8x16) v, 4));

591  
v
[0];

592 
	}
}

594 
°©ic_Æways_ölöe
 
u32


595 
	$i32x4_mö_sˇœr
 (
i32x4
 
v
)

597 
v
 = 
	`i32x4_mö
 (v, (
i32x4
Ë
	`u8x16_Æign_right
 ((
u8x16
) v, (u8x16) v, 8));

598 
v
 = 
	`i32x4_mö
 (v, (
i32x4
Ë
	`u8x16_Æign_right
 ((
u8x16
) v, (u8x16) v, 4));

599  
v
[0];

600 
	}
}

602 
°©ic_Æways_ölöe
 
u32


603 
	$i32x4_max_sˇœr
 (
i32x4
 
v
)

605 
v
 = 
	`i32x4_max
 (v, (
i32x4
Ë
	`u8x16_Æign_right
 ((
u8x16
) v, (u8x16) v, 8));

606 
v
 = 
	`i32x4_max
 (v, (
i32x4
Ë
	`u8x16_Æign_right
 ((
u8x16
) v, (u8x16) v, 4));

607  
v
[0];

608 
	}
}

610 
°©ic_Æways_ölöe
 
u16


611 
	$u8x16_msb_mask
 (
u8x16
 
v
)

613  
	`_mm_movemask_ïi8
 ((
__m128i
Ë
v
);

614 
	}
}

616 
	#CLIB_HAVE_VEC128_MSB_MASK


	)

618 #unde‡
_sig√d_bö›


620 
°©ic_Æways_ölöe
 
u32x4


621 
	$u32x4_byã_sw≠
 (
u32x4
 
v
)

623 
u8x16
 
sw≠
 = {

626  (
u32x4
Ë
	`_mm_shufÊe_ïi8
 ((
__m128i
Ë
v
, (__m128iË
sw≠
);

627 
	}
}

629 
°©ic_Æways_ölöe
 
u16x8


630 
	$u16x8_byã_sw≠
 (
u16x8
 
v
)

632 
u8x16
 
sw≠
 = {

635  (
u16x8
Ë
	`_mm_shufÊe_ïi8
 ((
__m128i
Ë
v
, (__m128iË
sw≠
);

636 
	}
}

638 
°©ic_Æways_ölöe
 
u32x4


639 
	$u32x4_hadd
 (
u32x4
 
v1
, u32x4 
v2
)

641  (
u32x4
Ë
	`_mm_hadd_ïi32
 ((
__m128i
Ë
v1
, (__m128iË
v2
);

642 
	}
}

644 
°©ic_Æways_ölöe
 
u8x16


645 
	$u8x16_shufÊe
 (
u8x16
 
v
, u8x16 
m
)

647  (
u8x16
Ë
	`_mm_shufÊe_ïi8
 ((
__m128i
Ë
v
, (__m128iË
m
);

648 
	}
}

650 
°©ic_Æways_ölöe
 
u32x4


651 
	$u32x4_shufÊe
 (
u32x4
 
v
, c⁄° 
a
, c⁄° 
b
, c⁄° 
c
, c⁄° 
d
)

653 #i‡
	`deföed
(
__˛™g__
Ë|| !
__OPTIMIZE__


654 
u32x4
 
r
 = { 
v
[
a
], v[
b
], v[
c
], v[
d
] };

655  
r
;

657  (
u32x4
Ë
	`_mm_shufÊe_ïi32
 ((
__m128i
Ë
v
,

658 
a
 | 
b
 << 2 | 
c
 << 4 | 
d
 << 6);

660 
	}
}

664 
	#_
(
f
,
t
,
i
) \

665 
°©ic_Æways_ölöe
 
t
 \

666 
f
##
_exãnd_to_
##
	`t
 (‡
x
) \

667 {  (
t
Ë
_mm_cvt
##
	`i
 ((
__m128i
Ë
x
); }

	)

669 
	$_
(
u8x16
, 
u16x8
, 
ïu8_ïi16
)

670 
	$_
(
u8x16
, 
u32x4
, 
ïu8_ïi32
)

671 
	$_
(
u8x16
, 
u64x2
, 
ïu8_ïi64
)

672 
	$_
(
u16x8
, 
u32x4
, 
ïu16_ïi32
)

673 
	$_
(
u16x8
, 
u64x2
, 
ïu16_ïi64
)

674 
	$_
(
u32x4
, 
u64x2
, 
ïu32_ïi64
)

676 
	$_
(
i8x16
, 
i16x8
, 
ïi8_ïi16
)

677 
	$_
(
i8x16
, 
i32x4
, 
ïi8_ïi32
)

678 
	$_
(
i8x16
, 
i64x2
, 
ïi8_ïi64
)

679 
	$_
(
i16x8
, 
i32x4
, 
ïi16_ïi32
)

680 
	$_
(
i16x8
, 
i64x2
, 
ïi16_ïi64
)

681 
	$_
(
i32x4
, 
i64x2
, 
ïi32_ïi64
)

682 #unde‡
_


685 
°©ic_Æways_ölöe
 
u64x2


686 
	$u64x2_g©hî
 (*
p0
, *
p1
)

688 
u64x2
 
r
 = { *(
u64
 *Ë
p0
, *(u64 *Ë
p1
 };

689  
r
;

690 
	}
}

692 
°©ic_Æways_ölöe
 
u32x4


693 
	$u32x4_g©hî
 (*
p0
, *
p1
, *
p2
, *
p3
, *
p4
)

695 
u32x4
 
r
 = { *(
u32
 *Ë
p0
, *(u32 *Ë
p1
, *(u32 *Ë
p2
, *(u32 *Ë
p3
 };

696  
r
;

697 
	}
}

700 
°©ic_Æways_ölöe
 

701 
	$u64x2_sˇâî
 (
u64x2
 
r
, *
p0
, *
p1
)

703 *(
u64
 *Ë
p0
 = 
r
[0];

704 *(
u64
 *Ë
p1
 = 
r
[1];

705 
	}
}

707 
°©ic_Æways_ölöe
 

708 
	$u32x4_sˇâî
 (
u32x4
 
r
, *
p0
, *
p1
, *
p2
, *
p3
)

710 *(
u32
 *Ë
p0
 = 
r
[0];

711 *(
u32
 *Ë
p1
 = 
r
[1];

712 *(
u32
 *Ë
p2
 = 
r
[2];

713 *(
u32
 *Ë
p3
 = 
r
[3];

714 
	}
}

716 
°©ic_Æways_ölöe
 

717 
	$u64x2_sˇâî_⁄e
 (
u64x2
 
r
, 
ödex
, *
p
)

719 *(
u64
 *Ë
p
 = 
r
[
ödex
];

720 
	}
}

722 
°©ic_Æways_ölöe
 

723 
	$u32x4_sˇâî_⁄e
 (
u32x4
 
r
, 
ödex
, *
p
)

725 *(
u32
 *Ë
p
 = 
r
[
ödex
];

726 
	}
}

728 
°©ic_Æways_ölöe
 
u8x16


729 
	$u8x16_is_gª©î
 (
u8x16
 
v1
, u8x16 
v2
)

731  (
u8x16
Ë
	`_mm_cmpgt_ïi8
 ((
__m128i
Ë
v1
, (__m128iË
v2
);

732 
	}
}

734 
°©ic_Æways_ölöe
 
u8x16


735 
	$u8x16_bÀnd
 (
u8x16
 
v1
, u8x16 
v2
, u8x16 
mask
)

737  (
u8x16
Ë
	`_mm_bÀndv_ïi8
 ((
__m128i
Ë
v1
, (__m128iË
v2
, (__m128iË
mask
);

738 
	}
}

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/linux/string.h

2 #i‚de‡
_LINUX_STRING_H_


3 
	#_LINUX_STRING_H_


	)

7 
	~<°rög.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #ifde‡
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	~<bôs/gë›t_posix.h
>

876 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


880 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_MISC


887 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

898 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

900 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$vh™gup
 (Ë
__THROW
;

910 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

919 
size_t
 
__off£t
, 
__sˇÀ
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

930 *
	$gëu£rshñl
 (Ë
__THROW
;

931 
	$ídu£rshñl
 (Ë
__THROW
;

932 
	$£tu£rshñl
 (Ë
__THROW
;

938 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

942 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

945 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

949 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

957 
	`fsync
 (
__fd
);

960 #ifde‡
__USE_GNU


963 
	$syncfs
 (
__fd
Ë
__THROW
;

967 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


970 
	`gëho°id
 ();

973 
	$sync
 (Ë
__THROW
;

976 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


979 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

984 
	$gëdèbÀsize
 (Ë
__THROW
;

990 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


993 #i‚de‡
__USE_FILE_OFFSET64


994 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

997 #ifde‡
__REDIRECT_NTH


998 
	`__REDIRECT_NTH
 (
åunˇã
,

999 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1000 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1002 
	#åunˇã
 
åunˇã64


	)

1005 #ifde‡
__USE_LARGEFILE64


1006 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1012 #i‡
deföed
 
__USE_POSIX199309
 \

1013 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1016 #i‚de‡
__USE_FILE_OFFSET64


1017 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1019 #ifde‡
__REDIRECT_NTH


1020 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1021 
·runˇã64
Ë
__wur
;

1023 
	#·runˇã
 
·runˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1033 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1034 || 
deföed
 
__USE_MISC


1038 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1044 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1048 #ifde‡
__USE_MISC


1059 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1064 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1076 
	#F_ULOCK
 0

	)

1077 
	#F_LOCK
 1

	)

1078 
	#F_TLOCK
 2

	)

1079 
	#F_TEST
 3

	)

1081 #i‚de‡
__USE_FILE_OFFSET64


1082 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1084 #ifde‡
__REDIRECT


1085 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1086 
lockf64
Ë
__wur
;

1088 
	#lockf
 
lockf64


	)

1091 #ifde‡
__USE_LARGEFILE64


1092 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1097 #ifde‡
__USE_GNU


1102 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1103 (
__exãnsi⁄__
 \

1104 ({ 
__ªsu…
; \

1105 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1106 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1107 
__ªsu…
; 
	}
}))

	)

1110 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1111 
__outfd
, 
__off64_t
 *
__poutoff
,

1112 
size_t
 
__Àngth
, 
__Êags
);

1115 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1118 
fd©async
 (
__fûdes
);

1124 #ifdef 
__USE_XOPEN


1126 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1131 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1132 
__THROW
 
	`__n⁄nuŒ
 ((1));

1139 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1140 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1149 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1152 *
	`cu£rid
 (*
__s
);

1158 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1159 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1160 (*
__∑ª¡
) (),

1161 (*
__chûd
Ë()Ë
__THROW
;

1164 #ifde‡
__USE_MISC


1167 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1171 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1172 
	~<bôs/uni°d.h
>

1175 
__END_DECLS


	@/usr/include/vppinfra/byte_order.h

38 #i‚de‡
ö˛uded_˛ib_byã_‹dî_h


39 
	#ö˛uded_˛ib_byã_‹dî_h


	)

41 
	~<vµö‰a/˛ib.h
>

43 #i‡(
__BYTE_ORDER__
)==–
__ORDER_LITTLE_ENDIAN__
)

44 
	#CLIB_ARCH_IS_BIG_ENDIAN
 (0)

	)

45 
	#CLIB_ARCH_IS_LITTLE_ENDIAN
 (1)

	)

48 
	#CLIB_ARCH_IS_BIG_ENDIAN
 (1)

	)

49 
	#CLIB_ARCH_IS_LITTLE_ENDIAN
 (0)

	)

53 
	#˛ib_¨ch_is_big_ídün
 
CLIB_ARCH_IS_BIG_ENDIAN


	)

54 
	#˛ib_¨ch_is_lôée_ídün
 
CLIB_ARCH_IS_LITTLE_ENDIAN


	)

56 
Æways_ölöe
 
u16


57 
	$˛ib_byã_sw≠_u16
 (
u16
 
x
)

59 #i‡
	`deföed
 (
__Ørch64__
)

60 i‡(!
	`__buûtö_c⁄°™t_p
 (
x
))

62 
	`__asm__
 ("ªv16 %w0, %w0":"+r" (
x
));

63  
x
;

66  (
x
 >> 8) | (x << 8);

67 
	}
}

69 
Æways_ölöe
 
i16


70 
	$˛ib_byã_sw≠_i16
 (
i16
 
x
)

72  
	`˛ib_byã_sw≠_u16
 (
x
);

73 
	}
}

75 
Æways_ölöe
 
u32


76 
	$˛ib_byã_sw≠_u32
 (
u32
 
x
)

78 #i‡
	`deföed
 (
i386
Ë|| deföed (
__x86_64__
)

79 i‡(!
	`__buûtö_c⁄°™t_p
 (
x
))

81 
asm
 vﬁ©ûê("bsw≠ %0":"Ù" (
x
):"0" (x));

82  
x
;

84 #ñi‡
	`deföed
 (
__Ørch64__
)

85 i‡(!
	`__buûtö_c⁄°™t_p
 (
x
))

87 
	`__asm__
 ("ªv %w0, %w0":"+r" (
x
));

88  
x
;

91  ((
x
 << 24) | ((x & 0xff00) << 8) | ((x >> 8) & 0xff00) | (x >> 24));

92 
	}
}

94 
Æways_ölöe
 
i32


95 
	$˛ib_byã_sw≠_i32
 (
i32
 
x
)

97  
	`˛ib_byã_sw≠_u32
 (
x
);

98 
	}
}

100 
Æways_ölöe
 
u64


101 
	$˛ib_byã_sw≠_u64
 (
u64
 
x
)

103 #i‡
	`deföed
 (
__x86_64__
)

104 i‡(!
	`__buûtö_c⁄°™t_p
 (
x
))

106 
asm
 vﬁ©ûê("bsw≠q %0":"Ù" (
x
):"0" (x));

107  
x
;

109 #ñi‡
	`deföed
 (
__Ørch64__
)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
x
))

112 
	`__asm__
 ("ªv %0, %0":"+r" (
x
));

113  
x
;

116 
	#_
(
x
,
n
,
i
) \

117 ((((
x
Ë>> (8*(
i
))Ë& 0xffË<< (8*((
n
)-(i)-1)))

	)

118  (
	`_
(
x
, 8, 0) | _(x, 8, 1)

119 | 
	`_
(
x
, 8, 2) | _(x, 8, 3)

120 | 
	`_
(
x
, 8, 4) | _(x, 8, 5) | _(x, 8, 6) | _(x, 8, 7));

121 #unde‡
_


122 
	}
}

124 
Æways_ölöe
 
i64


125 
	$˛ib_byã_sw≠_i64
 (
i64
 
x
)

127  
	`˛ib_byã_sw≠_u64
 (
x
);

128 
	}
}

130 
	#_
(
£x
,
ty≥
) \

132 
Æways_ölöe
 
ty≥
 \

133 
˛ib_ho°_to_
##
£x
##
_
##
	`ty≥
 (
ty≥
 
x
) \

135 i‡(! 
˛ib_¨ch_is_
##
£x
##
_ídün
) \

136 
x
 = 
˛ib_byã_sw≠_
##
	`ty≥
 (x); \

137  
x
; \

140 
Æways_ölöe
 
ty≥
 \

141 
˛ib_ho°_to_
##
£x
##
_mem_
##
	`ty≥
 (
ty≥
 * 
x
) \

143 
ty≥
 
v
 = 
x
[0]; \

144  
˛ib_ho°_to_
##
£x
##
_
##
	`ty≥
 (
v
); \

147 
Æways_ölöe
 
ty≥
 \

148 
˛ib_ho°_to_
##
£x
##
_u«lig√d_mem_
##
	`ty≥
 (
ty≥
 * 
x
) \

150 
ty≥
 
v
 = 
	`˛ib_mem_u«lig√d
 (
x
,Åype); \

151  
˛ib_ho°_to_
##
£x
##
_
##
	`ty≥
 (
v
); \

155 
Æways_ölöe
 
ty≥
 \

156 
˛ib_
##
£x
##
_to_ho°_
##
	`ty≥
 (
ty≥
 
x
) \

157 {  
˛ib_ho°_to_
##
£x
##
_
##
	`ty≥
 (
x
); } \

159 
Æways_ölöe
 
ty≥
 \

160 
˛ib_
##
£x
##
_to_ho°_mem_
##
	`ty≥
 (
ty≥
 * 
x
) \

161 {  
˛ib_ho°_to_
##
£x
##
_mem_
##
	`ty≥
 (
x
); } \

163 
Æways_ölöe
 
ty≥
 \

164 
˛ib_
##
£x
##
_to_ho°_u«lig√d_mem_
##
	`ty≥
 (
ty≥
 * 
x
) \

165 {  
˛ib_ho°_to_
##
£x
##
_u«lig√d_mem_
##
	`ty≥
 (
x
); }

	)

167 #i‚de‡
__˝lu•lus


168 
	$_
(
lôée
, 
u16
)

169 
	$_
(
lôée
, 
u32
)

170 
	$_
(
lôée
, 
u64
)

171 
	$_
(
lôée
, 
i16
)

172 
	$_
(
lôée
, 
i32
)

173 
	$_
(
lôée
, 
i64
)

174 
	$_
(
big
, 
u16
Ë
	$_
(
big
, 
u32
Ë
	$_
(
big
, 
u64
Ë
	$_
(
big
, 
i16
Ë
	$_
(
big
, 
i32
Ë
	$_
(
big
, 
i64
)

176 #unde‡
_


178 
	#_
(
ty≥
) \

179 
Æways_ölöe
 
ty≥
 \

180 
˛ib_√t_to_ho°_
##
	`ty≥
 (
ty≥
 
x
) \

181 {  
˛ib_big_to_ho°_
##
	`ty≥
 (
x
); 
	}
} \

183 
Æways_ölöe
 
ty≥
 \

184 
˛ib_√t_to_ho°_mem_
##
	`ty≥
 (
ty≥
 * 
x
) \

185 {  
˛ib_big_to_ho°_mem_
##
	`ty≥
 (
x
); } \

187 
Æways_ölöe
 
ty≥
 \

188 
˛ib_√t_to_ho°_u«lig√d_mem_
##
	`ty≥
 (
ty≥
 * 
x
) \

189 {  
˛ib_big_to_ho°_u«lig√d_mem_
##
	`ty≥
 (
x
); } \

191 
Æways_ölöe
 
ty≥
 \

192 
˛ib_ho°_to_√t_
##
	`ty≥
 (
ty≥
 
x
) \

193 {  
˛ib_ho°_to_big_
##
	`ty≥
 (
x
); } \

195 
Æways_ölöe
 
ty≥
 \

196 
˛ib_ho°_to_√t_mem_
##
	`ty≥
 (
ty≥
 * 
x
) \

197 {  
˛ib_ho°_to_big_mem_
##
	`ty≥
 (
x
); } \

199 
Æways_ölöe
 
ty≥
 \

200 
˛ib_ho°_to_√t_u«lig√d_mem_
##
	`ty≥
 (
ty≥
 * 
x
) \

201 {  
˛ib_ho°_to_big_u«lig√d_mem_
##
	`ty≥
 (
x
); }

	)

202 #i‚de‡
__˝lu•lus


203 
_
(
u16
);

204 
_
(
i16
);

205 
_
(
u32
);

206 
_
(
i32
);

207 
_
(
u64
);

208 
_
(
i64
);

211 #unde‡
_


215 
Æways_ölöe
 
f64
 
	$˛ib_√t_to_ho°_f64
 (
f64
 
x
Ë{  x; 
	}
}

216 
Æways_ölöe
 
f64
 
	$˛ib_ho°_to_√t_f64
 (
f64
 
x
Ë{  x; 
	}
}

217 
Æways_ölöe
 
f32
 
	$˛ib_√t_to_ho°_f32
 (
f32
 
x
Ë{  x; 
	}
}

218 
Æways_ölöe
 
f32
 
	$˛ib_ho°_to_√t_f32
 (
f32
 
x
Ë{  x; 
	}
}

	@/usr/include/vppinfra/dlmalloc.h

524 
	~<vµö‰a/˛ib.h
>

525 
	~<vµö‰a/ˇche.h
>

529 #i‡
CLIB_DEBUG
 > 0

530 
	#FOOTERS
 1

	)

531 
	#DLM_MAGIC_CONSTANT
 0xdóddabe

	)

533 
	#USE_LOCKS
 1

	)

534 
	#DLM_ABORT
 {
	`os_∑nic
(); os_∑nic(); 
	`ab‹t
();}

	)

535 
	#ONLY_MSPACES
 1

	)

540 #i‚de‡
DLMALLOC_VERSION


541 
	#DLMALLOC_VERSION
 20806

	)

544 #i‚de‡
DLMALLOC_EXPORT


545 
	#DLMALLOC_EXPORT
 

	)

548 #i‚de‡
WIN32


549 #ifde‡
_WIN32


550 
	#WIN32
 1

	)

552 #ifde‡
_WIN32_WCE


553 
	#LACKS_FCNTL_H


	)

554 
	#WIN32
 1

	)

557 #ifde‡
WIN32


558 
	#WIN32_LEAN_AND_MEAN


	)

559 
	~<wödows.h
>

560 
	~<tch¨.h
>

561 
	#HAVE_MMAP
 1

	)

562 
	#HAVE_MORECORE
 0

	)

563 
	#LACKS_UNISTD_H


	)

564 
	#LACKS_SYS_PARAM_H


	)

565 
	#LACKS_SYS_MMAN_H


	)

566 
	#LACKS_STRING_H


	)

567 
	#LACKS_STRINGS_H


	)

568 
	#LACKS_SYS_TYPES_H


	)

569 
	#LACKS_ERRNO_H


	)

570 
	#LACKS_SCHED_H


	)

571 #i‚de‡
MALLOC_FAILURE_ACTION


572 
	#MALLOC_FAILURE_ACTION


	)

574 #i‚de‡
MMAP_CLEARS


575 #ifde‡
_WIN32_WCE


576 
	#MMAP_CLEARS
 0

	)

578 
	#MMAP_CLEARS
 1

	)

583 #i‡
deföed
(
DARWIN
Ë|| deföed(
_DARWIN
)

585 #i‚de‡
HAVE_MORECORE


586 
	#HAVE_MORECORE
 0

	)

587 
	#HAVE_MMAP
 1

	)

589 #i‚de‡
MALLOC_ALIGNMENT


590 
	#MALLOC_ALIGNMENT
 ((
size_t
)16U)

	)

595 #i‚de‡
LACKS_SYS_TYPES_H


596 
	~<sys/ty≥s.h
>

600 
	#MAX_SIZE_T
 (~(
size_t
)0)

	)

602 #i‚de‡
USE_LOCKS


603 
	#USE_LOCKS
 ((
	`deföed
(
USE_SPIN_LOCKS
) && USE_SPIN_LOCKS != 0) || \

604 (
	`deföed
(
USE_RECURSIVE_LOCKS
Ë&& USE_RECURSIVE_LOCKS !0))

	)

607 #i‡
USE_LOCKS


608 #i‡((
deföed
(
__GNUC__
) && \

609 ((
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 1)) || \

610 
deföed
(
__i386__
Ë|| deföed(
__x86_64__
))) || \

611 (
deföed
(
_MSC_VER
) && _MSC_VER>=1310))

612 #i‚de‡
USE_SPIN_LOCKS


613 
	#USE_SPIN_LOCKS
 1

	)

615 #ñi‡
USE_SPIN_LOCKS


618 #ñi‡!
deföed
(
USE_SPIN_LOCKS
)

619 
	#USE_SPIN_LOCKS
 0

	)

622 #i‚de‡
ONLY_MSPACES


623 
	#ONLY_MSPACES
 1

	)

625 #i‚de‡
MSPACES


626 #i‡
ONLY_MSPACES


627 
	#MSPACES
 1

	)

629 
	#MSPACES
 0

	)

632 #i‚de‡
MALLOC_ALIGNMENT


633 
	#MALLOC_ALIGNMENT
 ((
size_t
)(2 * (*)))

	)

635 #i‚de‡
FOOTERS


636 
	#FOOTERS
 0

	)

638 #i‚de‡
DLM_ABORT


639 
	#DLM_ABORT
 
	`ab‹t
()

	)

641 #i‚de‡
DLM_ABORT_ON_ASSERT_FAILURE


642 
	#DLM_ABORT_ON_ASSERT_FAILURE
 1

	)

644 #i‚de‡
PROCEED_ON_ERROR


645 
	#PROCEED_ON_ERROR
 0

	)

648 #i‚de‡
INSECURE


649 
	#INSECURE
 0

	)

651 #i‚de‡
MALLOC_INSPECT_ALL


652 
	#MALLOC_INSPECT_ALL
 0

	)

654 #i‚de‡
HAVE_MMAP


655 
	#HAVE_MMAP
 1

	)

657 #i‚de‡
MMAP_CLEARS


658 
	#MMAP_CLEARS
 1

	)

660 #i‚de‡
HAVE_MREMAP


661 #ifde‡
löux


662 
	#HAVE_MREMAP
 1

	)

663 
	#_GNU_SOURCE


	)

665 
	#HAVE_MREMAP
 0

	)

668 #i‚de‡
MALLOC_FAILURE_ACTION


669 
	#MALLOC_FAILURE_ACTION
 
î∫o
 = 
ENOMEM
;

	)

671 #i‚de‡
HAVE_MORECORE


672 #i‡
ONLY_MSPACES


673 
	#HAVE_MORECORE
 0

	)

675 
	#HAVE_MORECORE
 1

	)

678 #i‡!
HAVE_MORECORE


679 
	#MORECORE_CONTIGUOUS
 0

	)

681 
	#MORECORE_DEFAULT
 
sbrk


	)

682 #i‚de‡
MORECORE_CONTIGUOUS


683 
	#MORECORE_CONTIGUOUS
 1

	)

686 #i‚de‡
DEFAULT_GRANULARITY


687 #i‡(
MORECORE_CONTIGUOUS
 || 
deföed
(
WIN32
))

688 
	#DEFAULT_GRANULARITY
 (0Ë

	)

690 
	#DEFAULT_GRANULARITY
 ((
size_t
)64U * (size_t)1024U)

	)

693 #i‚de‡
DEFAULT_TRIM_THRESHOLD


694 #i‚de‡
MORECORE_CANNOT_TRIM


695 
	#DEFAULT_TRIM_THRESHOLD
 ((
size_t
)2U * (size_t)1024U * (size_t)1024U)

	)

697 
	#DEFAULT_TRIM_THRESHOLD
 
MAX_SIZE_T


	)

700 #i‚de‡
DEFAULT_MMAP_THRESHOLD


701 #i‡
HAVE_MMAP


723 
	#DEFAULT_MMAP_THRESHOLD
 ((
size_t
)~0ULL)

	)

725 
	#DEFAULT_MMAP_THRESHOLD
 
MAX_SIZE_T


	)

728 #i‚de‡
MAX_RELEASE_CHECK_RATE


729 #i‡
HAVE_MMAP


730 
	#MAX_RELEASE_CHECK_RATE
 4095

	)

732 
	#MAX_RELEASE_CHECK_RATE
 
MAX_SIZE_T


	)

735 #i‚de‡
USE_BUILTIN_FFS


736 
	#USE_BUILTIN_FFS
 0

	)

738 #i‚de‡
USE_DEV_RANDOM


739 
	#USE_DEV_RANDOM
 0

	)

741 #i‚de‡
NO_MALLINFO


742 
	#NO_MALLINFO
 0

	)

744 #i‚de‡
MALLINFO_FIELD_TYPE


745 
	#MALLINFO_FIELD_TYPE
 
size_t


	)

747 #i‚de‡
NO_MALLOC_STATS


748 
	#NO_MALLOC_STATS
 0

	)

750 #i‚de‡
NO_SEGMENT_TRAVERSAL


751 
	#NO_SEGMENT_TRAVERSAL
 0

	)

761 
	#M_TRIM_THRESHOLD
 (-1)

	)

762 
	#M_GRANULARITY
 (-2)

	)

763 
	#M_MMAP_THRESHOLD
 (-3)

	)

767 #i‡!
NO_MALLINFO


793 
	~"/u§/ö˛ude/mÆloc.h
"

795 #i‚de‡
STRUCT_MALLINFO_DECLARED


797 
	#_STRUCT_MALLINFO


	)

798 
	#STRUCT_MALLINFO_DECLARED
 1

	)

799 
	sdlmÆlöfo
 {

800 
MALLINFO_FIELD_TYPE
 
	m¨ía
;

801 
MALLINFO_FIELD_TYPE
 
	m‹dblks
;

802 
MALLINFO_FIELD_TYPE
 
	msmblks
;

803 
MALLINFO_FIELD_TYPE
 
	mhblks
;

804 
MALLINFO_FIELD_TYPE
 
	mhblkhd
;

805 
MALLINFO_FIELD_TYPE
 
	musmblks
;

806 
MALLINFO_FIELD_TYPE
 
	mfsmblks
;

807 
MALLINFO_FIELD_TYPE
 
	mu‹dblks
;

808 
MALLINFO_FIELD_TYPE
 
	mf‹dblks
;

809 
MALLINFO_FIELD_TYPE
 
	mkìpco°
;

820 #i‚de‡
FORCEINLINE


821 #i‡
deföed
(
__GNUC__
)

822 
	#FORCEINLINE
 
__ölöe
 
	`__©åibuã__
 ((
Æways_ölöe
))

	)

823 #ñi‡
deföed
(
_MSC_VER
)

824 
	#FORCEINLINE
 
__f‹˚ölöe


	)

827 #i‚de‡
NOINLINE


828 #i‡
deföed
(
__GNUC__
)

829 
	#NOINLINE
 
	`__©åibuã__
 ((
noölöe
))

	)

830 #ñi‡
deföed
(
_MSC_VER
)

831 
	#NOINLINE
 
	`__de˛•ec
(
noölöe
)

	)

833 
	#NOINLINE


	)

837 #ifde‡
__˝lu•lus


839 #i‚de‡
FORCEINLINE


840 
	#FORCEINLINE
 
ölöe


	)

843 #i‚de‡
FORCEINLINE


844 
	#FORCEINLINE


	)

847 #i‡!
ONLY_MSPACES


851 #i‚de‡
USE_DL_PREFIX


852 
	#dlˇŒoc
 
ˇŒoc


	)

853 
	#dl‰ì
 
‰ì


	)

854 
	#dlmÆloc
 
mÆloc


	)

855 
	#dlmemÆign
 
memÆign


	)

856 
	#dÕosix_memÆign
 
posix_memÆign


	)

857 
	#dÃóŒoc
 
ªÆloc


	)

858 
	#dÃóŒoc_ö_∂a˚
 
ªÆloc_ö_∂a˚


	)

859 
	#dlvÆloc
 
vÆloc


	)

860 
	#dÕvÆloc
 
pvÆloc


	)

862 
	#dlmÆl›t
 
mÆl›t


	)

863 
	#dlmÆloc_åim
 
mÆloc_åim


	)

864 
	#dlmÆloc_°©s
 
mÆloc_°©s


	)

865 
	#dlmÆloc_ußbÀ_size
 
mÆloc_ußbÀ_size


	)

866 
	#dlmÆloc_foŸ¥öt
 
mÆloc_foŸ¥öt


	)

867 
	#dlmÆloc_max_foŸ¥öt
 
mÆloc_max_foŸ¥öt


	)

868 
	#dlmÆloc_foŸ¥öt_limô
 
mÆloc_foŸ¥öt_limô


	)

869 
	#dlmÆloc_£t_foŸ¥öt_limô
 
mÆloc_£t_foŸ¥öt_limô


	)

870 
	#dlmÆloc_ö•e˘_Æl
 
mÆloc_ö•e˘_Æl


	)

871 
	#dlödïídít_ˇŒoc
 
ödïídít_ˇŒoc


	)

872 
	#dlödïídít_comÆloc
 
ödïídít_comÆloc


	)

873 
	#dlbulk_‰ì
 
bulk_‰ì


	)

890 
DLMALLOC_EXPORT
 * 
dlmÆloc
(
size_t
);

899 
DLMALLOC_EXPORT
 
dl‰ì
(*);

906 
DLMALLOC_EXPORT
 * 
dlˇŒoc
(
size_t
, size_t);

930 
DLMALLOC_EXPORT
 * 
dÃóŒoc
(*, 
size_t
);

945 
DLMALLOC_EXPORT
 * 
dÃóŒoc_ö_∂a˚
(*, 
size_t
);

959 
DLMALLOC_EXPORT
 * 
dlmemÆign
(
size_t
, size_t);

969 
DLMALLOC_EXPORT
 
dÕosix_memÆign
(**, 
size_t
, size_t);

976 
DLMALLOC_EXPORT
 * 
dlvÆloc
(
size_t
);

1000 
DLMALLOC_EXPORT
 
dlmÆl›t
(, );

1011 
DLMALLOC_EXPORT
 
size_t
 
dlmÆloc_foŸ¥öt
();

1024 
DLMALLOC_EXPORT
 
size_t
 
dlmÆloc_max_foŸ¥öt
();

1035 
DLMALLOC_EXPORT
 
size_t
 
dlmÆloc_foŸ¥öt_limô
();

1049 
DLMALLOC_EXPORT
 
size_t
 
dlmÆloc_£t_foŸ¥öt_limô
(size_à
byãs
);

1051 #i‡
MALLOC_INSPECT_ALL


1080 
DLMALLOC_EXPORT
 
dlmÆloc_ö•e˘_Æl
((*
h™dÀr
)(*, *, 
size_t
, *),

1081 * 
¨g
);

1085 #i‡!
NO_MALLINFO


1108 
DLMALLOC_EXPORT
 
dlmÆlöfo
 
	`dlmÆlöfo
();

1160 
DLMALLOC_EXPORT
 ** 
	`dlödïídít_ˇŒoc
(
size_t
, size_t, **);

1218 
DLMALLOC_EXPORT
 ** 
	`dlödïídít_comÆloc
(
size_t
, size_t*, **);

1229 
DLMALLOC_EXPORT
 
size_t
 
	`dlbulk_‰ì
(**, size_à
n_ñemíts
);

1236 
DLMALLOC_EXPORT
 * 
	`dÕvÆloc
(
size_t
);

1259 
DLMALLOC_EXPORT
 
	`dlmÆloc_åim
(
size_t
);

1280 
DLMALLOC_EXPORT
 
	`dlmÆloc_°©s
();

1296 
size_t
 
	`dlmÆloc_ußbÀ_size
(*);

1300 #i‡
MSPACES


1306 * 
	tm•a˚
;

1319 
DLMALLOC_EXPORT
 
m•a˚
 
	`¸óã_m•a˚
(
size_t
 
ˇ∑côy
, 
locked
);

1327 
DLMALLOC_EXPORT
 
size_t
 
	`de°roy_m•a˚
(
m•a˚
 
m•
);

1338 
DLMALLOC_EXPORT
 
m•a˚
 
	`¸óã_m•a˚_wôh_ba£
(* 
ba£
, 
size_t
 
ˇ∑côy
, 
locked
);

1351 
DLMALLOC_EXPORT
 
	`m•a˚_åack_œrge_chunks
(
m•a˚
 
m•
, 
íabÀ
);

1358 
DLMALLOC_EXPORT
 * 
	`m•a˚_mÆloc
(
m•a˚
 
m•
, 
size_t
 
byãs
);

1368 
DLMALLOC_EXPORT
 
	`m•a˚_‰ì
(
m•a˚
 
m•
, * 
mem
);

1379 
DLMALLOC_EXPORT
 * 
	`m•a˚_ªÆloc
(
m•a˚
 
m•
, * 
mem
, 
size_t
 
√wsize
);

1385 
DLMALLOC_EXPORT
 * 
	`m•a˚_ˇŒoc
(
m•a˚
 
m•
, 
size_t
 
n_ñemíts
, size_à
ñem_size
);

1391 
DLMALLOC_EXPORT
 * 
	`m•a˚_memÆign
(
m•a˚
 
m•
, 
size_t
 
Æignmít
, size_à
byãs
);

1397 
DLMALLOC_EXPORT
 ** 
	`m•a˚_ödïídít_ˇŒoc
(
m•a˚
 
m•
, 
size_t
 
n_ñemíts
,

1398 
size_t
 
ñem_size
, * 
chunks
[]);

1404 
DLMALLOC_EXPORT
 ** 
	`m•a˚_ödïídít_comÆloc
(
m•a˚
 
m•
, 
size_t
 
n_ñemíts
,

1405 
size_t
 
sizes
[], * 
chunks
[]);

1411 
DLMALLOC_EXPORT
 
size_t
 
	`m•a˚_foŸ¥öt
(
m•a˚
 
m•
);

1417 
DLMALLOC_EXPORT
 
size_t
 
	`m•a˚_max_foŸ¥öt
(
m•a˚
 
m•
);

1420 #i‡!
NO_MALLINFO


1425 
DLMALLOC_EXPORT
 
dlmÆlöfo
 
	`m•a˚_mÆlöfo
(
m•a˚
 
m•
);

1431 
DLMALLOC_EXPORT
 
size_t
 
	`m•a˚_ußbÀ_size
(c⁄° * 
mem
);

1437 
DLMALLOC_EXPORT
 
	`m•a˚_mÆloc_°©s
(
m•a˚
 
m•
);

1443 
DLMALLOC_EXPORT
 
	`m•a˚_åim
(
m•a˚
 
m•
, 
size_t
 
∑d
);

1448 
DLMALLOC_EXPORT
 
	`m•a˚_mÆl›t
(, );

1450 
DLMALLOC_EXPORT
 * 
	`m•a˚_gë_Æig√d
 (
m•a˚
 
m•
,

1451 
n_u£r_d©a_byãs
,

1452 
Æign
,

1453 
Æign_off£t
);

1455 
DLMALLOC_EXPORT
 
	`m•a˚_is_hóp_obje˘
 (
m•a˚
 
m•
, *
p
);

1457 
DLMALLOC_EXPORT
 
	`m•a˚_gë_addªss_™d_size
 (
m•a˚
 
m•
, **
addΩ
, 
size_t
 *
sizï
);

1458 
DLMALLOC_EXPORT
 
	`m•a˚_put
 (
m•a˚
 
m•
, *
p
);

1459 
DLMALLOC_EXPORT
 
	`m•a˚_put_no_off£t
 (
m•a˚
 
m•
, *
p
);

1460 
DLMALLOC_EXPORT
 
size_t
 
	`m•a˚_ußbÀ_size_wôh_dñè
 (c⁄° *
p
);

1461 
DLMALLOC_EXPORT
 
	`m•a˚_dißbÀ_ex∑nd
 (
m•a˚
 
m•
);

1462 
DLMALLOC_EXPORT
 *
	`m•a˚_Àa°_addr
 (
m•a˚
 
m•
);

1463 
DLMALLOC_EXPORT
 
	`mhóp_gë_åa˚
 (
uw‹d
 
off£t
, uw‹d 
size
);

1464 
DLMALLOC_EXPORT
 
	`mhóp_put_åa˚
 (
uw‹d
 
off£t
, uw‹d 
size
);

1465 
DLMALLOC_EXPORT
 
	`m•a˚_íabÀ_dißbÀ_åa˚
 (
m•a˚
 
m•
, 
íabÀ
);

1466 
DLMALLOC_EXPORT
 
	`m•a˚_is_åa˚d
 (
m•a˚
 
m•
);

1470 #ifde‡
__˝lu•lus


1471 
	}
}

	@/usr/include/vppinfra/memcpy_avx2.h

48 #i‚de‡
ö˛uded_˛ib_mem˝y_avx2_h


49 
	#ö˛uded_˛ib_mem˝y_avx2_h


	)

51 
	~<°döt.h
>

52 
	~<x86öåö.h
>

54 
ölöe
 

55 
	$˛ib_mov16
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

57 
__m128i
 
xmm0
;

59 
xmm0
 = 
	`_mm_lﬂdu_si128
 ((c⁄° 
__m128i
 *Ë
§c
);

60 
	`_mm_°‹eu_si128
 ((
__m128i
 *Ë
d°
, 
xmm0
);

61 
	}
}

63 
ölöe
 

64 
	$˛ib_mov32
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

66 
__m256i
 
ymm0
;

68 
ymm0
 = 
	`_mm256_lﬂdu_si256
 ((c⁄° 
__m256i
 *Ë
§c
);

69 
	`_mm256_°‹eu_si256
 ((
__m256i
 *Ë
d°
, 
ymm0
);

70 
	}
}

72 
ölöe
 

73 
	$˛ib_mov64
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

75 
	`˛ib_mov32
 ((
u8
 *Ë
d°
 + 0 * 32, (c⁄° u8 *Ë
§c
 + 0 * 32);

76 
	`˛ib_mov32
 ((
u8
 *Ë
d°
 + 1 * 32, (c⁄° u8 *Ë
§c
 + 1 * 32);

77 
	}
}

79 
ölöe
 

80 
	$˛ib_mov128
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

82 
	`˛ib_mov64
 ((
u8
 *Ë
d°
 + 0 * 64, (c⁄° u8 *Ë
§c
 + 0 * 64);

83 
	`˛ib_mov64
 ((
u8
 *Ë
d°
 + 1 * 64, (c⁄° u8 *Ë
§c
 + 1 * 64);

84 
	}
}

86 
ölöe
 

87 
	$˛ib_mov128blocks
 (
u8
 * 
d°
, c⁄° u8 * 
§c
, 
size_t
 
n
)

89 
__m256i
 
ymm0
, 
ymm1
, 
ymm2
, 
ymm3
;

91 
n
 >= 128)

93 
ymm0
 =

94 
	`_mm256_lﬂdu_si256
 ((c⁄° 
__m256i
 *Ë((c⁄° 
u8
 *Ë
§c
 + 0 * 32));

95 
n
 -= 128;

96 
ymm1
 =

97 
	`_mm256_lﬂdu_si256
 ((c⁄° 
__m256i
 *Ë((c⁄° 
u8
 *Ë
§c
 + 1 * 32));

98 
ymm2
 =

99 
	`_mm256_lﬂdu_si256
 ((c⁄° 
__m256i
 *Ë((c⁄° 
u8
 *Ë
§c
 + 2 * 32));

100 
ymm3
 =

101 
	`_mm256_lﬂdu_si256
 ((c⁄° 
__m256i
 *Ë((c⁄° 
u8
 *Ë
§c
 + 3 * 32));

102 
§c
 = (c⁄° 
u8
 *) src + 128;

103 
	`_mm256_°‹eu_si256
 ((
__m256i
 *Ë((
u8
 *Ë
d°
 + 0 * 32), 
ymm0
);

104 
	`_mm256_°‹eu_si256
 ((
__m256i
 *Ë((
u8
 *Ë
d°
 + 1 * 32), 
ymm1
);

105 
	`_mm256_°‹eu_si256
 ((
__m256i
 *Ë((
u8
 *Ë
d°
 + 2 * 32), 
ymm2
);

106 
	`_mm256_°‹eu_si256
 ((
__m256i
 *Ë((
u8
 *Ë
d°
 + 3 * 32), 
ymm3
);

107 
d°
 = (
u8
 *) dst + 128;

109 
	}
}

111 
ölöe
 *

112 
	$˛ib_mem˝y_Á°
 (*
d°
, c⁄° *
§c
, 
size_t
 
n
)

114 
uw‹d
 
d°u
 = (uw‹dË
d°
;

115 
uw‹d
 
§cu
 = (uw‹dË
§c
;

116 *
ªt
 = 
d°
;

117 
size_t
 
d°ofss
;

118 
size_t
 
bôs
;

123 i‡(
n
 < 16)

125 i‡(
n
 & 0x01)

127 *(
u8
 *Ë
d°u
 = *(c⁄° u8 *Ë
§cu
;

128 
§cu
 = (
uw‹d
Ë((c⁄° 
u8
 *) srcu + 1);

129 
d°u
 = (
uw‹d
Ë((
u8
 *) dstu + 1);

131 i‡(
n
 & 0x02)

133 *(
u16
 *Ë
d°u
 = *(c⁄° u16 *Ë
§cu
;

134 
§cu
 = (
uw‹d
Ë((c⁄° 
u16
 *) srcu + 1);

135 
d°u
 = (
uw‹d
Ë((
u16
 *) dstu + 1);

137 i‡(
n
 & 0x04)

139 *(
u32
 *Ë
d°u
 = *(c⁄° u32 *Ë
§cu
;

140 
§cu
 = (
uw‹d
Ë((c⁄° 
u32
 *) srcu + 1);

141 
d°u
 = (
uw‹d
Ë((
u32
 *) dstu + 1);

143 i‡(
n
 & 0x08)

145 *(
u64
 *Ë
d°u
 = *(c⁄° u64 *Ë
§cu
;

147  
ªt
;

153 i‡(
n
 <= 32)

155 
	`˛ib_mov16
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

156 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 - 16 + 
n
, (c⁄° u8 *Ë
§c
 - 16 +Ç);

157  
ªt
;

159 i‡(
n
 <= 48)

161 
	`˛ib_mov16
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

162 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 + 16, (c⁄° u8 *Ë
§c
 + 16);

163 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 - 16 + 
n
, (c⁄° u8 *Ë
§c
 - 16 +Ç);

164  
ªt
;

166 i‡(
n
 <= 64)

168 
	`˛ib_mov32
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

169 
	`˛ib_mov32
 ((
u8
 *Ë
d°
 - 32 + 
n
, (c⁄° u8 *Ë
§c
 - 32 +Ç);

170  
ªt
;

172 i‡(
n
 <= 256)

174 i‡(
n
 >= 128)

176 
n
 -= 128;

177 
	`˛ib_mov128
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

178 
§c
 = (c⁄° 
u8
 *) src + 128;

179 
d°
 = (
u8
 *) dst + 128;

181 
COPY_BLOCK_128_BACK31
:

182 i‡(
n
 >= 64)

184 
n
 -= 64;

185 
	`˛ib_mov64
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

186 
§c
 = (c⁄° 
u8
 *) src + 64;

187 
d°
 = (
u8
 *) dst + 64;

189 i‡(
n
 > 32)

191 
	`˛ib_mov32
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

192 
	`˛ib_mov32
 ((
u8
 *Ë
d°
 - 32 + 
n
, (c⁄° u8 *Ë
§c
 - 32 +Ç);

193  
ªt
;

195 i‡(
n
 > 0)

197 
	`˛ib_mov32
 ((
u8
 *Ë
d°
 - 32 + 
n
, (c⁄° u8 *Ë
§c
 - 32 +Ç);

199  
ªt
;

205 
d°ofss
 = (
uw‹d
Ë
d°
 & 0x1F;

206 i‡(
d°ofss
 > 0)

208 
d°ofss
 = 32 - dstofss;

209 
n
 -
d°ofss
;

210 
	`˛ib_mov32
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

211 
§c
 = (c⁄° 
u8
 *Ë§¯+ 
d°ofss
;

212 
d°
 = (
u8
 *Ëd° + 
d°ofss
;

218 
	`˛ib_mov128blocks
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
, 
n
);

219 
bôs
 = 
n
;

220 
n
 =Ç & 127;

221 
bôs
 -
n
;

222 
§c
 = (c⁄° 
u8
 *Ë§¯+ 
bôs
;

223 
d°
 = (
u8
 *Ëd° + 
bôs
;

228 
COPY_BLOCK_128_BACK31
;

229 
	}
}

	@/usr/include/vppinfra/memcpy_avx512.h

48 #i‚de‡
ö˛uded_˛ib_mem˝y_avx512_h


49 
	#ö˛uded_˛ib_mem˝y_avx512_h


	)

51 
	~<°döt.h
>

52 
	~<x86öåö.h
>

54 
ölöe
 

55 
	$˛ib_mov16
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

57 
__m128i
 
xmm0
;

59 
xmm0
 = 
	`_mm_lﬂdu_si128
 ((c⁄° 
__m128i
 *Ë
§c
);

60 
	`_mm_°‹eu_si128
 ((
__m128i
 *Ë
d°
, 
xmm0
);

61 
	}
}

63 
ölöe
 

64 
	$˛ib_mov32
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

66 
__m256i
 
ymm0
;

68 
ymm0
 = 
	`_mm256_lﬂdu_si256
 ((c⁄° 
__m256i
 *Ë
§c
);

69 
	`_mm256_°‹eu_si256
 ((
__m256i
 *Ë
d°
, 
ymm0
);

70 
	}
}

72 
ölöe
 

73 
	$˛ib_mov64
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

75 
__m512i
 
zmm0
;

77 
zmm0
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë
§c
);

78 
	`_mm512_°‹eu_si512
 ((*Ë
d°
, 
zmm0
);

79 
	}
}

81 
ölöe
 

82 
	$˛ib_mov128
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

84 
	`˛ib_mov64
 (
d°
 + 0 * 64, 
§c
 + 0 * 64);

85 
	`˛ib_mov64
 (
d°
 + 1 * 64, 
§c
 + 1 * 64);

86 
	}
}

88 
ölöe
 

89 
	$˛ib_mov256
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

91 
	`˛ib_mov128
 (
d°
 + 0 * 128, 
§c
 + 0 * 128);

92 
	`˛ib_mov128
 (
d°
 + 1 * 128, 
§c
 + 1 * 128);

93 
	}
}

95 
ölöe
 

96 
	$˛ib_mov128blocks
 (
u8
 * 
d°
, c⁄° u8 * 
§c
, 
size_t
 
n
)

98 
__m512i
 
zmm0
, 
zmm1
;

100 
n
 >= 128)

102 
zmm0
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë(
§c
 + 0 * 64));

103 
n
 -= 128;

104 
zmm1
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë(
§c
 + 1 * 64));

105 
§c
 = src + 128;

106 
	`_mm512_°‹eu_si512
 ((*Ë(
d°
 + 0 * 64), 
zmm0
);

107 
	`_mm512_°‹eu_si512
 ((*Ë(
d°
 + 1 * 64), 
zmm1
);

108 
d°
 = dst + 128;

110 
	}
}

112 
ölöe
 

113 
	$˛ib_mov512blocks
 (
u8
 * 
d°
, c⁄° u8 * 
§c
, 
size_t
 
n
)

115 
__m512i
 
zmm0
, 
zmm1
, 
zmm2
, 
zmm3
, 
zmm4
, 
zmm5
, 
zmm6
, 
zmm7
;

117 
n
 >= 512)

119 
zmm0
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë(
§c
 + 0 * 64));

120 
n
 -= 512;

121 
zmm1
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë(
§c
 + 1 * 64));

122 
zmm2
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë(
§c
 + 2 * 64));

123 
zmm3
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë(
§c
 + 3 * 64));

124 
zmm4
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë(
§c
 + 4 * 64));

125 
zmm5
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë(
§c
 + 5 * 64));

126 
zmm6
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë(
§c
 + 6 * 64));

127 
zmm7
 = 
	`_mm512_lﬂdu_si512
 ((c⁄° *Ë(
§c
 + 7 * 64));

128 
§c
 = src + 512;

129 
	`_mm512_°‹eu_si512
 ((*Ë(
d°
 + 0 * 64), 
zmm0
);

130 
	`_mm512_°‹eu_si512
 ((*Ë(
d°
 + 1 * 64), 
zmm1
);

131 
	`_mm512_°‹eu_si512
 ((*Ë(
d°
 + 2 * 64), 
zmm2
);

132 
	`_mm512_°‹eu_si512
 ((*Ë(
d°
 + 3 * 64), 
zmm3
);

133 
	`_mm512_°‹eu_si512
 ((*Ë(
d°
 + 4 * 64), 
zmm4
);

134 
	`_mm512_°‹eu_si512
 ((*Ë(
d°
 + 5 * 64), 
zmm5
);

135 
	`_mm512_°‹eu_si512
 ((*Ë(
d°
 + 6 * 64), 
zmm6
);

136 
	`_mm512_°‹eu_si512
 ((*Ë(
d°
 + 7 * 64), 
zmm7
);

137 
d°
 = dst + 512;

139 
	}
}

141 
ölöe
 *

142 
	$˛ib_mem˝y_Á°
 (*
d°
, c⁄° *
§c
, 
size_t
 
n
)

144 
uw‹d
 
d°u
 = (uw‹dË
d°
;

145 
uw‹d
 
§cu
 = (uw‹dË
§c
;

146 *
ªt
 = 
d°
;

147 
size_t
 
d°ofss
;

148 
size_t
 
bôs
;

153 i‡(
n
 < 16)

155 i‡(
n
 & 0x01)

157 *(
u8
 *Ë
d°u
 = *(c⁄° u8 *Ë
§cu
;

158 
§cu
 = (
uw‹d
Ë((c⁄° 
u8
 *) srcu + 1);

159 
d°u
 = (
uw‹d
Ë((
u8
 *) dstu + 1);

161 i‡(
n
 & 0x02)

163 *(
u16
 *Ë
d°u
 = *(c⁄° u16 *Ë
§cu
;

164 
§cu
 = (
uw‹d
Ë((c⁄° 
u16
 *) srcu + 1);

165 
d°u
 = (
uw‹d
Ë((
u16
 *) dstu + 1);

167 i‡(
n
 & 0x04)

169 *(
u32
 *Ë
d°u
 = *(c⁄° u32 *Ë
§cu
;

170 
§cu
 = (
uw‹d
Ë((c⁄° 
u32
 *) srcu + 1);

171 
d°u
 = (
uw‹d
Ë((
u32
 *) dstu + 1);

173 i‡(
n
 & 0x08)

174 *(
u64
 *Ë
d°u
 = *(c⁄° u64 *Ë
§cu
;

175  
ªt
;

181 i‡(
n
 <= 32)

183 
	`˛ib_mov16
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

184 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 - 16 + 
n
, (c⁄° u8 *Ë
§c
 - 16 +Ç);

185  
ªt
;

187 i‡(
n
 <= 64)

189 
	`˛ib_mov32
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

190 
	`˛ib_mov32
 ((
u8
 *Ë
d°
 - 32 + 
n
, (c⁄° u8 *Ë
§c
 - 32 +Ç);

191  
ªt
;

193 i‡(
n
 <= 512)

195 i‡(
n
 >= 256)

197 
n
 -= 256;

198 
	`˛ib_mov256
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

199 
§c
 = (c⁄° 
u8
 *) src + 256;

200 
d°
 = (
u8
 *) dst + 256;

202 i‡(
n
 >= 128)

204 
n
 -= 128;

205 
	`˛ib_mov128
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

206 
§c
 = (c⁄° 
u8
 *) src + 128;

207 
d°
 = (
u8
 *) dst + 128;

209 
COPY_BLOCK_128_BACK63
:

210 i‡(
n
 > 64)

212 
	`˛ib_mov64
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

213 
	`˛ib_mov64
 ((
u8
 *Ë
d°
 - 64 + 
n
, (c⁄° u8 *Ë
§c
 - 64 +Ç);

214  
ªt
;

216 i‡(
n
 > 0)

217 
	`˛ib_mov64
 ((
u8
 *Ë
d°
 - 64 + 
n
, (c⁄° u8 *Ë
§c
 - 64 +Ç);

218  
ªt
;

224 
d°ofss
 = (
uw‹d
Ë
d°
 & 0x3F;

225 i‡(
d°ofss
 > 0)

227 
d°ofss
 = 64 - dstofss;

228 
n
 -
d°ofss
;

229 
	`˛ib_mov64
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

230 
§c
 = (c⁄° 
u8
 *Ë§¯+ 
d°ofss
;

231 
d°
 = (
u8
 *Ëd° + 
d°ofss
;

239 
	`˛ib_mov512blocks
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
, 
n
);

240 
bôs
 = 
n
;

241 
n
 =Ç & 511;

242 
bôs
 -
n
;

243 
§c
 = (c⁄° 
u8
 *Ë§¯+ 
bôs
;

244 
d°
 = (
u8
 *Ëd° + 
bôs
;

251 i‡(
n
 >= 128)

253 
	`˛ib_mov128blocks
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
, 
n
);

254 
bôs
 = 
n
;

255 
n
 =Ç & 127;

256 
bôs
 -
n
;

257 
§c
 = (c⁄° 
u8
 *Ë§¯+ 
bôs
;

258 
d°
 = (
u8
 *Ëd° + 
bôs
;

264 
COPY_BLOCK_128_BACK63
;

265 
	}
}

	@/usr/include/vppinfra/memcpy_sse3.h

48 #i‚de‡
ö˛uded_˛ib_mem˝y_s£3_h


49 
	#ö˛uded_˛ib_mem˝y_s£3_h


	)

51 
	~<°döt.h
>

52 
	~<x86öåö.h
>

54 
ölöe
 

55 
	$˛ib_mov16
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

57 
__m128i
 
xmm0
;

59 
xmm0
 = 
	`_mm_lﬂdu_si128
 ((c⁄° 
__m128i
 *Ë
§c
);

60 
	`_mm_°‹eu_si128
 ((
__m128i
 *Ë
d°
, 
xmm0
);

61 
	}
}

63 
ölöe
 

64 
	$˛ib_mov32
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

66 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 + 0 * 16, (c⁄° u8 *Ë
§c
 + 0 * 16);

67 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 + 1 * 16, (c⁄° u8 *Ë
§c
 + 1 * 16);

68 
	}
}

70 
ölöe
 

71 
	$˛ib_mov64
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

73 
	`˛ib_mov32
 ((
u8
 *Ë
d°
 + 0 * 32, (c⁄° u8 *Ë
§c
 + 0 * 32);

74 
	`˛ib_mov32
 ((
u8
 *Ë
d°
 + 1 * 32, (c⁄° u8 *Ë
§c
 + 1 * 32);

75 
	}
}

77 
ölöe
 

78 
	$˛ib_mov128
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

80 
	`˛ib_mov64
 ((
u8
 *Ë
d°
 + 0 * 64, (c⁄° u8 *Ë
§c
 + 0 * 64);

81 
	`˛ib_mov64
 ((
u8
 *Ë
d°
 + 1 * 64, (c⁄° u8 *Ë
§c
 + 1 * 64);

82 
	}
}

84 
ölöe
 

85 
	$˛ib_mov256
 (
u8
 * 
d°
, c⁄° u8 * 
§c
)

87 
	`˛ib_mov128
 ((
u8
 *Ë
d°
 + 0 * 128, (c⁄° u8 *Ë
§c
 + 0 * 128);

88 
	`˛ib_mov128
 ((
u8
 *Ë
d°
 + 1 * 128, (c⁄° u8 *Ë
§c
 + 1 * 128);

89 
	}
}

102 
	#CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
Àn
, 
off£t
) \

104 
tmp
; \

105 
Àn
 >128 + 16 - 
off£t
) { \

106 
xmm0
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 0 * 16)); \

107 
Àn
 -= 128; \

108 
xmm1
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 1 * 16)); \

109 
xmm2
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 2 * 16)); \

110 
xmm3
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 3 * 16)); \

111 
xmm4
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 4 * 16)); \

112 
xmm5
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 5 * 16)); \

113 
xmm6
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 6 * 16)); \

114 
xmm7
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 7 * 16)); \

115 
xmm8
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 8 * 16)); \

116 
§c
 = (c⁄° 
u8
 *)src + 128; \

117 
	`_mm_°‹eu_si128
((
__m128i
 *)((
u8
 *)
d°
 + 0 * 16), 
	`_mm_Æigƒ_ïi8
(
xmm1
, 
xmm0
, 
off£t
)); \

118 
	`_mm_°‹eu_si128
((
__m128i
 *)((
u8
 *)
d°
 + 1 * 16), 
	`_mm_Æigƒ_ïi8
(
xmm2
, 
xmm1
, 
off£t
)); \

119 
	`_mm_°‹eu_si128
((
__m128i
 *)((
u8
 *)
d°
 + 2 * 16), 
	`_mm_Æigƒ_ïi8
(
xmm3
, 
xmm2
, 
off£t
)); \

120 
	`_mm_°‹eu_si128
((
__m128i
 *)((
u8
 *)
d°
 + 3 * 16), 
	`_mm_Æigƒ_ïi8
(
xmm4
, 
xmm3
, 
off£t
)); \

121 
	`_mm_°‹eu_si128
((
__m128i
 *)((
u8
 *)
d°
 + 4 * 16), 
	`_mm_Æigƒ_ïi8
(
xmm5
, 
xmm4
, 
off£t
)); \

122 
	`_mm_°‹eu_si128
((
__m128i
 *)((
u8
 *)
d°
 + 5 * 16), 
	`_mm_Æigƒ_ïi8
(
xmm6
, 
xmm5
, 
off£t
)); \

123 
	`_mm_°‹eu_si128
((
__m128i
 *)((
u8
 *)
d°
 + 6 * 16), 
	`_mm_Æigƒ_ïi8
(
xmm7
, 
xmm6
, 
off£t
)); \

124 
	`_mm_°‹eu_si128
((
__m128i
 *)((
u8
 *)
d°
 + 7 * 16), 
	`_mm_Æigƒ_ïi8
(
xmm8
, 
xmm7
, 
off£t
)); \

125 
d°
 = (
u8
 *)dst + 128; \

127 
tmp
 = 
Àn
; \

128 
Àn
 = (÷í - 16 + 
off£t
) & 127) + 16 - offset; \

129 
tmp
 -
Àn
; \

130 
§c
 = (c⁄° 
u8
 *)§¯+ 
tmp
; \

131 
d°
 = (
u8
 *)d° + 
tmp
; \

132 i‡(
Àn
 >32 + 16 - 
off£t
) { \

133 
Àn
 >32 + 16 - 
off£t
) { \

134 
xmm0
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 0 * 16)); \

135 
Àn
 -= 32; \

136 
xmm1
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 1 * 16)); \

137 
xmm2
 = 
	`_mm_lﬂdu_si128
((c⁄° 
__m128i
 *)((c⁄° 
u8
 *)
§c
 - 
off£t
 + 2 * 16)); \

138 
§c
 = (c⁄° 
u8
 *)src + 32; \

139 
	`_mm_°‹eu_si128
((
__m128i
 *)((
u8
 *)
d°
 + 0 * 16), 
	`_mm_Æigƒ_ïi8
(
xmm1
, 
xmm0
, 
off£t
)); \

140 
	`_mm_°‹eu_si128
((
__m128i
 *)((
u8
 *)
d°
 + 1 * 16), 
	`_mm_Æigƒ_ïi8
(
xmm2
, 
xmm1
, 
off£t
)); \

141 
d°
 = (
u8
 *)dst + 32; \

143 
tmp
 = 
Àn
; \

144 
Àn
 = (÷í - 16 + 
off£t
) & 31) + 16 - offset; \

145 
tmp
 -
Àn
; \

146 
§c
 = (c⁄° 
u8
 *)§¯+ 
tmp
; \

147 
d°
 = (
u8
 *)d° + 
tmp
; \

149 })

	)

163 
	#CLIB_MVUNALIGN_LEFT47
(
d°
, 
§c
, 
Àn
, 
off£t
) \

165 
off£t
) { \

166 0x01: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x01); ; \

167 0x02: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x02); ; \

168 0x03: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x03); ; \

169 0x04: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x04); ; \

170 0x05: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x05); ; \

171 0x06: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x06); ; \

172 0x07: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x07); ; \

173 0x08: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x08); ; \

174 0x09: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x09); ; \

175 0x0A: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x0A); ; \

176 0x0B: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x0B); ; \

177 0x0C: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x0C); ; \

178 0x0D: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x0D); ; \

179 0x0E: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x0E); ; \

180 0x0F: 
	`CLIB_MVUNALIGN_LEFT47_IMM
(
d°
, 
§c
, 
n
, 0x0F); ; \

183 })

	)

185 
ölöe
 *

186 
	$˛ib_mem˝y_Á°
 (*
d°
, c⁄° *
§c
, 
size_t
 
n
)

188 
__m128i
 
xmm0
, 
xmm1
, 
xmm2
, 
xmm3
, 
xmm4
, 
xmm5
, 
xmm6
, 
xmm7
, 
xmm8
;

189 
uw‹d
 
d°u
 = (uw‹dË
d°
;

190 
uw‹d
 
§cu
 = (uw‹dË
§c
;

191 *
ªt
 = 
d°
;

192 
size_t
 
d°ofss
;

193 
size_t
 
§cofs
;

198 i‡(
n
 < 16)

200 i‡(
n
 & 0x01)

202 *(
u8
 *Ë
d°u
 = *(c⁄° u8 *Ë
§cu
;

203 
§cu
 = (
uw‹d
Ë((c⁄° 
u8
 *) srcu + 1);

204 
d°u
 = (
uw‹d
Ë((
u8
 *) dstu + 1);

206 i‡(
n
 & 0x02)

208 *(
u16
 *Ë
d°u
 = *(c⁄° u16 *Ë
§cu
;

209 
§cu
 = (
uw‹d
Ë((c⁄° 
u16
 *) srcu + 1);

210 
d°u
 = (
uw‹d
Ë((
u16
 *) dstu + 1);

212 i‡(
n
 & 0x04)

214 *(
u32
 *Ë
d°u
 = *(c⁄° u32 *Ë
§cu
;

215 
§cu
 = (
uw‹d
Ë((c⁄° 
u32
 *) srcu + 1);

216 
d°u
 = (
uw‹d
Ë((
u32
 *) dstu + 1);

218 i‡(
n
 & 0x08)

220 *(
u64
 *Ë
d°u
 = *(c⁄° u64 *Ë
§cu
;

222  
ªt
;

228 i‡(
n
 <= 32)

230 
	`˛ib_mov16
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

231 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 - 16 + 
n
, (c⁄° u8 *Ë
§c
 - 16 +Ç);

232  
ªt
;

234 i‡(
n
 <= 48)

236 
	`˛ib_mov32
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

237 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 - 16 + 
n
, (c⁄° u8 *Ë
§c
 - 16 +Ç);

238  
ªt
;

240 i‡(
n
 <= 64)

242 
	`˛ib_mov32
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

243 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 + 32, (c⁄° u8 *Ë
§c
 + 32);

244 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 - 16 + 
n
, (c⁄° u8 *Ë
§c
 - 16 +Ç);

245  
ªt
;

247 i‡(
n
 <= 128)

249 
COPY_BLOCK_128_BACK15
;

251 i‡(
n
 <= 512)

253 i‡(
n
 >= 256)

255 
n
 -= 256;

256 
	`˛ib_mov128
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

257 
	`˛ib_mov128
 ((
u8
 *Ë
d°
 + 128, (c⁄° u8 *Ë
§c
 + 128);

258 
§c
 = (c⁄° 
u8
 *) src + 256;

259 
d°
 = (
u8
 *) dst + 256;

261 
COPY_BLOCK_255_BACK15
:

262 i‡(
n
 >= 128)

264 
n
 -= 128;

265 
	`˛ib_mov128
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

266 
§c
 = (c⁄° 
u8
 *) src + 128;

267 
d°
 = (
u8
 *) dst + 128;

269 
COPY_BLOCK_128_BACK15
:

270 i‡(
n
 >= 64)

272 
n
 -= 64;

273 
	`˛ib_mov64
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

274 
§c
 = (c⁄° 
u8
 *) src + 64;

275 
d°
 = (
u8
 *) dst + 64;

277 
COPY_BLOCK_64_BACK15
:

278 i‡(
n
 >= 32)

280 
n
 -= 32;

281 
	`˛ib_mov32
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

282 
§c
 = (c⁄° 
u8
 *) src + 32;

283 
d°
 = (
u8
 *) dst + 32;

285 i‡(
n
 > 16)

287 
	`˛ib_mov16
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

288 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 - 16 + 
n
, (c⁄° u8 *Ë
§c
 - 16 +Ç);

289  
ªt
;

291 i‡(
n
 > 0)

293 
	`˛ib_mov16
 ((
u8
 *Ë
d°
 - 16 + 
n
, (c⁄° u8 *Ë
§c
 - 16 +Ç);

295  
ªt
;

304 
d°ofss
 = (
uw‹d
Ë
d°
 & 0x0F;

305 i‡(
d°ofss
 > 0)

307 
d°ofss
 = 16 - dstofss + 16;

308 
n
 -
d°ofss
;

309 
	`˛ib_mov32
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

310 
§c
 = (c⁄° 
u8
 *Ë§¯+ 
d°ofss
;

311 
d°
 = (
u8
 *Ëd° + 
d°ofss
;

313 
§cofs
 = ((
uw‹d
Ë
§c
 & 0x0F);

318 i‡(
§cofs
 == 0)

323 ; 
n
 >= 256;Ç -= 256)

325 
	`˛ib_mov256
 ((
u8
 *Ë
d°
, (c⁄° u8 *Ë
§c
);

326 
d°
 = (
u8
 *) dst + 256;

327 
§c
 = (c⁄° 
u8
 *) src + 256;

333 
COPY_BLOCK_255_BACK15
;

339 
	`CLIB_MVUNALIGN_LEFT47
 (
d°
, 
§c
, 
n
, 
§cofs
);

344 
COPY_BLOCK_64_BACK15
;

345 
	}
}

348 #unde‡
CLIB_MVUNALIGN_LEFT47_IMM


349 #unde‡
CLIB_MVUNALIGN_LEFT47


	@/usr/include/vppinfra/mheap_bootstrap.h

38 #i‚de‡
ö˛uded_mem_mhóp_h


39 
	#ö˛uded_mem_mhóp_h


	)

44 
	~<vµö‰a/vec_boŸ°øp.h
>

45 
	~<vµö‰a/îr‹_boŸ°øp.h
>

46 
	~<vµö‰a/os.h
>

47 
	~<vµö‰a/ve˘‹.h
>

54 #i‡
CLIB_VEC64
 > 0

55 
u64
 
	m¥ev_n_u£r_d©a
:63;

58 
	#MHEAP_N_USER_DATA_INVALID
 (0x7fffffffffffffffULL)

	)

59 
	#MHEAP_GROUNDED
 (~0ULL)

	)

62 
u64
 
	m¥ev_is_‰ì
:1;

65 
u64
 
	mn_u£r_d©a
:63;

69 
u64
 
	mis_‰ì
:1;

72 
u32
 
	m¥ev_n_u£r_d©a
:31;

75 
	#MHEAP_N_USER_DATA_INVALID
 (0x7fffffff)

	)

76 
	#MHEAP_GROUNDED
 (~0)

	)

79 
u32
 
	m¥ev_is_‰ì
:1;

82 
u32
 
	mn_u£r_d©a
:31;

86 
u32
 
	mis_‰ì
:1;

91 #i‡
CLIB_VEC64
 > 0

94 
u64
 
	mu£r_d©a
[0];

102 
u64
 
	m√xt_uoff£t
, 
	m¥ev_uoff£t
;

103 } 
	m‰ì_ñt
;

107 
u32
 
	mu£r_d©a
[0];

115 
u32
 
	m√xt_uoff£t
, 
	m¥ev_uoff£t
;

116 } 
	m‰ì_ñt
;

119 } 
	tmhóp_ñt_t
;

122 
	#MHEAP_ELT_OVERHEAD_BYTES
 ( (
mhóp_ñt_t
Ë- 
	`STRUCT_OFFSET_OF
 (mhóp_ñt_t, 
u£r_d©a
))

	)

125 
	#MHEAP_MIN_USER_DATA_BYTES
 
MHEAP_ELT_OVERHEAD_BYTES


	)

128 
	#MHEAP_USER_DATA_WORD_BYTES
 
	`STRUCT_SIZE_OF
 (
mhóp_ñt_t
, 
u£r_d©a
[0])

	)

133 
uw‹d
 
	mˇŒîs
[12];

136 #i‡
CLIB_VEC64
 > 0

137 
u64
 
	mn_Æloˇti⁄s
;

139 
u32
 
	mn_Æloˇti⁄s
;

143 
u32
 
	mn_byãs
;

146 
uw‹d
 
	moff£t
;

147 } 
	tmhóp_åa˚_t
;

151 
mhóp_åa˚_t
 *
	måa˚s
;

154 
u32
 *
	måa˚_‰ì_li°
;

157 
uw‹d
 *
	måa˚_by_ˇŒîs
;

160 
uw‹d
 *
	måa˚_ödex_by_off£t
;

161 } 
	tmhóp_åa˚_maö_t
;

164 #ifde‡
CLIB_HAVE_VEC128


165 
	#MHEAP_HAVE_SMALL_OBJECT_CACHE
 1

	)

167 
	#MHEAP_HAVE_SMALL_OBJECT_CACHE
 0

	)

173 #i‡
MHEAP_HAVE_SMALL_OBJECT_CACHE
 > 0

174 
	#MHEAP_LOG2_N_SMALL_OBJECT_BINS
 8

	)

175 
	#MHEAP_N_SMALL_OBJECT_BINS
 (1 << 
MHEAP_LOG2_N_SMALL_OBJECT_BINS
)

	)

177 
	#MHEAP_LOG2_N_SMALL_OBJECT_BINS
 0

	)

178 
	#MHEAP_N_SMALL_OBJECT_BINS
 0

	)

181 
	#MHEAP_N_BINS
 \

182 (
MHEAP_N_SMALL_OBJECT_BINS
 \

183 + (
	`STRUCT_BITS_OF
 (
mhóp_ñt_t
, 
u£r_d©a
[0]Ë- 
MHEAP_LOG2_N_SMALL_OBJECT_BINS
))

	)

189 
u64
 
	mn_£¨ch_©ãm±s
;

190 
u64
 
	mn_obje˘s_£¨ched
;

191 
u64
 
	mn_obje˘s_found
;

192 } 
	m‰ì_li°
;

194 
u64
 
	mn_ve˘‹_ex∑nds
;

196 
u64
 
	mn_smÆl_obje˘_ˇche_hôs
;

197 
u64
 
	mn_smÆl_obje˘_ˇche_©ãm±s
;

199 
u64
 
	mn_gës
, 
	mn_puts
;

200 
u64
 
	mn_˛ocks_gë
, 
	mn_˛ocks_put
;

201 } 
	tmhóp_°©s_t
;

208 #ifde‡
CLIB_HAVE_VEC128


209 
u8x16
 
	mas_u8x16
[
BITS
 (
uw‹d
) / 16];

213 
u8
 
	mas_u8
[
BITS
 (
uw‹d
)];

214 } 
	mbös
;

216 
uw‹d
 
	moff£ts
[
BITS
 (uword)];

218 
u32
 
	mª∂a˚mít_ödex
;

219 } 
	tmhóp_smÆl_obje˘_ˇche_t
;

225 #i‡
CLIB_VEC64
 > 0

226 
u64
 
	mfú°_‰ì_ñt_uoff£t_by_bö
[
MHEAP_N_BINS
];

228 
u32
 
	mfú°_‰ì_ñt_uoff£t_by_bö
[
MHEAP_N_BINS
];

232 
uw‹d
 
	mn⁄_em±y_‰ì_ñt_hóds
[(
MHEAP_N_BINS
 + 
BITS
 (uword) - 1) /

233 
BITS
 (
uw‹d
)];

235 
mhóp_smÆl_obje˘_ˇche_t
 
	msmÆl_obje˘_ˇche
;

237 
u32
 
	mÊags
;

238 
	#MHEAP_FLAG_TRACE
 (1 << 0)

	)

239 
	#MHEAP_FLAG_DISABLE_VM
 (1 << 1)

	)

240 
	#MHEAP_FLAG_THREAD_SAFE
 (1 << 2)

	)

241 
	#MHEAP_FLAG_SMALL_OBJECT_CACHE
 (1 << 3)

	)

242 
	#MHEAP_FLAG_VALIDATE
 (1 << 4)

	)

245 vﬁ©ûê
u32
 
	mlock
;

246 vﬁ©ûê
u32
 
	mow√r_˝u
;

247 
	mªcursi⁄_cou¡
;

250 
u64
 
	mn_ñts
;

254 
u64
 
	mmax_size
;

256 
uw‹d
 
	mvm_Æloc_off£t_‰om_hódî
;

257 
uw‹d
 
	mvm_Æloc_size
;

262 
u64
 
	mvÆid©e_£rül
;

264 
mhóp_åa˚_maö_t
 
	måa˚_maö
;

266 
mhóp_°©s_t
 
	m°©s
;

267 } 
	tmhóp_t
;

269 
Æways_ölöe
 
mhóp_t
 *

270 
	$mhóp_hódî
 (
u8
 * 
v
)

272  
	`vec_Æig√d_hódî
 (
v
,  (
mhóp_t
), 16);

273 
	}
}

275 
Æways_ölöe
 
u8
 *

276 
	$mhóp_ve˘‹
 (
mhóp_t
 * 
h
)

278  
	`vec_Æig√d_hódî_íd
 (
h
,  (
mhóp_t
), 16);

279 
	}
}

281 
Æways_ölöe
 
uw‹d


282 
	$mhóp_ñt_uoff£t
 (*
v
, 
mhóp_ñt_t
 * 
e
)

284  (
uw‹d
Ë
e
->
u£r_d©a
 - (uw‹dË
v
;

285 
	}
}

287 
Æways_ölöe
 
mhóp_ñt_t
 *

288 
	$mhóp_u£r_poöãr_to_ñt
 (*
v
)

290  
v
 - 
	`STRUCT_OFFSET_OF
 (
mhóp_ñt_t
, 
u£r_d©a
);

291 
	}
}

295 
Æways_ölöe
 
uw‹d


296 
	$mhóp_off£t_is_vÆid
 (*
v
, 
uw‹d
 
uo
)

298  
uo
 >
MHEAP_ELT_OVERHEAD_BYTES
 && uÿ<
	`vec_Àn
 (
v
);

299 
	}
}

301 
Æways_ölöe
 
mhóp_ñt_t
 *

302 
	$mhóp_ñt_©_uoff£t
 (*
v
, 
uw‹d
 
uo
)

304 
	`ASSERT
 (
	`mhóp_off£t_is_vÆid
 (
v
, 
uo
));

305  (
mhóp_ñt_t
 *Ë(
v
 + 
uo
 - 
	`STRUCT_OFFSET_OF
 (mhóp_ñt_t, 
u£r_d©a
));

306 
	}
}

308 
Æways_ölöe
 *

309 
	$mhóp_ñt_d©a
 (*
v
, 
mhóp_ñt_t
 * 
e
)

311  
v
 + 
	`mhóp_ñt_uoff£t
 (v, 
e
);

312 
	}
}

314 
Æways_ölöe
 
uw‹d


315 
	$mhóp_ñt_d©a_byãs
 (
mhóp_ñt_t
 * 
e
)

317  
e
->
n_u£r_d©a
 *  (e->
u£r_d©a
[0]);

318 
	}
}

320 
Æways_ölöe
 
uw‹d


321 
	$mhóp_d©a_byãs
 (*
v
, 
uw‹d
 
uo
)

323 
mhóp_ñt_t
 *
e
 = 
	`mhóp_ñt_©_uoff£t
 (
v
, 
uo
);

324  
	`mhóp_ñt_d©a_byãs
 (
e
);

325 
	}
}

327 
	#mhóp_Àn
(
v
,
d
Ë(
	`mhóp_d©a_byãs
((v),(*Ë(dË- (*Ë(v)Ë/  ((d)[0]))

	)

329 
Æways_ölöe
 
mhóp_ñt_t
 *

330 
	$mhóp_√xt_ñt
 (
mhóp_ñt_t
 * 
e
)

332 
	`ASSERT
 (
e
->
n_u£r_d©a
 < 
MHEAP_N_USER_DATA_INVALID
);

333  (
mhóp_ñt_t
 *Ë(
e
->
u£r_d©a
 +É->
n_u£r_d©a
);

334 
	}
}

336 
Æways_ölöe
 
mhóp_ñt_t
 *

337 
	$mhóp_¥ev_ñt
 (
mhóp_ñt_t
 * 
e
)

339 
	`ASSERT
 (
e
->
¥ev_n_u£r_d©a
 < 
MHEAP_N_USER_DATA_INVALID
);

340  ((*Ë
e


341 - 
e
->
¥ev_n_u£r_d©a
 *  (e->
u£r_d©a
[0])

342 - 
MHEAP_ELT_OVERHEAD_BYTES
);

343 
	}
}

347 
Æways_ölöe
 
uw‹d


348 
	$mhóp_ñts
 (*
v
)

350  
v
 ? 
	`mhóp_hódî
 (v)->
n_ñts
 : 0;

351 
	}
}

353 
Æways_ölöe
 
uw‹d


354 
	$mhóp_max_size
 (*
v
)

356  
v
 ? 
	`mhóp_hódî
 (v)->
max_size
 : ~0;

357 
	}
}

360 
mhóp_put
 (*
v
, 
uw‹d
 
off£t
);

363 *
mhóp_gë_Æig√d
 (*
v
, 
uw‹d
 
size
, uw‹d 
Æign
, uw‹d 
Æign_off£t
,

364 
uw‹d
 * 
off£t_ªtu∫
);

	@/usr/include/vppinfra/os.h

38 #i‚de‡
ö˛uded_os_h


39 
	#ö˛uded_os_h


	)

41 
	~<vµö‰a/˛ib.h
>

42 
	~<vµö‰a/ty≥s.h
>

45 
os_∑nic
 ();

48 
os_exô
 (
code
);

51 
os_puts
 (
u8
 * 
°rög
, 
uw‹d
 
Àngth
, uw‹d 
is_îr‹
);

54 
os_out_of_mem‹y
 ();

57 
f64
 
os_˝u_˛ock_‰equícy
 ();

59 
__thªad
 
uw‹d
 
__os_thªad_ödex
;

61 
°©ic_Æways_ölöe
 
uw‹d


62 
	$os_gë_thªad_ödex
 ()

64  
__os_thªad_ödex
;

65 
	}
}

67 
°©ic_Æways_ölöe
 

68 
	$os_£t_thªad_ödex
 (
uw‹d
 
thªad_ödex
)

70 
__os_thªad_ödex
 = 
thªad_ödex
;

71 
	}
}

73 
°©ic_Æways_ölöe
 
uw‹d


74 
	$os_gë_˝u_numbî
 (Ë
	`__©åibuã__
 ((
dïªˇãd
));

76 
°©ic_Æways_ölöe
 
uw‹d


77 
	$os_gë_˝u_numbî
 ()

79  
__os_thªad_ödex
;

80 
	}
}

82 
uw‹d
 
os_gë_¡hªads
 ();

84 
	~<vµö‰a/smp.h
>

	@/usr/include/vppinfra/sanitizer.h

1 #i‚de‡
_ö˛uded_˛ib_ßnôizî_h


2 
	#_ö˛uded_˛ib_ßnôizî_h


	)

4 #ifde‡
CLIB_SANITIZE_ADDR


6 
	~<ßnôizî/aßn_öãrÁ˚.h
>

7 
	~<vµö‰a/˛ib.h
>

9 
	#CLIB_NOSANITIZE_ADDR
 
	`__©åibuã__
((
no_ßnôize_addªss
))

	)

10 
	#CLIB_MEM_POISON
(
a
, 
s
Ë
	`ASAN_POISON_MEMORY_REGION
(◊), (s))

	)

11 
	#CLIB_MEM_UNPOISON
(
a
, 
s
Ë
	`ASAN_UNPOISON_MEMORY_REGION
(◊), (s))

	)

13 
	#CLIB_MEM_OVERFLOW
(
f
, 
§c
, 
n
) \

15 
	`ty≥of
 (
f
Ë
˛ib_mem_ovîÊow_ªt__
; \

16 c⁄° *
˛ib_mem_ovîÊow_§c__
 = (
§c
); \

17 
size_t
 
˛ib_mem_ovîÊow_n__
 = (
n
); \

18 c⁄° *
˛ib_mem_ovîÊow_°¨t__
 = 
	`__aßn_ªgi⁄_is_pois⁄ed
((*)
˛ib_mem_ovîÊow_§c__
, 
˛ib_mem_ovîÊow_n__
); \

19 
˛ib_mem_ovîÊow_n__
 -(
size_t
)(
˛ib_mem_ovîÊow_°¨t__
 - 
˛ib_mem_ovîÊow_§c__
); \

20 i‡(
˛ib_mem_ovîÊow_°¨t__
) \

21 
	`CLIB_MEM_UNPOISON
(
˛ib_mem_ovîÊow_°¨t__
, 
˛ib_mem_ovîÊow_n__
); \

22 
˛ib_mem_ovîÊow_ªt__
 = 
f
; \

23 i‡(
˛ib_mem_ovîÊow_°¨t__
) \

24 
	`CLIB_MEM_POISON
(
˛ib_mem_ovîÊow_°¨t__
, 
˛ib_mem_ovîÊow_n__
); \

25 
˛ib_mem_ovîÊow_ªt__
; \

26 })

	)

28 
	#CLIB_MEM_OVERFLOW_LOAD
(
f
, 
§c
) \

30 
	`ty≥of
(
§c
Ë
˛ib_mem_ovîÊow_lﬂd_§c__
 = (src); \

31 
	`CLIB_MEM_OVERFLOW
(
	`f
(
˛ib_mem_ovîÊow_lﬂd_§c__
), clib_mem_ovîÊow_lﬂd_§c__, (
	`ty≥of
(f(clib_mem_overflow_load_src__)))); \

32 })

	)

34 
°©ic_Æways_ölöe
 

35 
	$CLIB_MEM_POISON_LEN
 (*
§c
, 
size_t
 
ﬁdÀn
, size_à
√wÀn
)

37 i‡(
ﬁdÀn
 > 
√wÀn
)

38 
	`CLIB_MEM_POISON
 (
§c
 + 
√wÀn
, 
ﬁdÀn
 -Çewlen);

39 i‡(
√wÀn
 > 
ﬁdÀn
)

40 
	`CLIB_MEM_UNPOISON
 (
§c
 + 
ﬁdÀn
, 
√wÀn
 - oldlen);

41 
	}
}

45 
	#CLIB_NOSANITIZE_ADDR


	)

46 
	#CLIB_MEM_POISON
(
a
, 
s
Ë()◊)

	)

47 
	#CLIB_MEM_UNPOISON
(
a
, 
s
Ë()◊)

	)

48 
	#CLIB_MEM_OVERFLOW
(
a
, 
b
, 
c
Ë
	)
a

49 
	#CLIB_MEM_OVERFLOW_LOAD
(
f
, 
§c
Ë
	`f
(§c)

	)

50 
	#CLIB_MEM_POISON_LEN
(
a
, 
b
, 
c
)

	)

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

57 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

58 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

61 
	$‰ì
 (*
__±r
Ë
__THROW
;

64 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

68 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

76 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

79 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

80 
__THROW
 
__©åibuã_mÆloc__
;

84 
	smÆlöfo


86 
¨ía
;

87 
‹dblks
;

88 
smblks
;

89 
hblks
;

90 
hblkhd
;

91 
usmblks
;

92 
fsmblks
;

93 
u‹dblks
;

94 
f‹dblks
;

95 
kìpco°
;

99 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

102 #i‚de‡
M_MXFAST


103 
	#M_MXFAST
 1

	)

105 #i‚de‡
M_NLBLKS


106 
	#M_NLBLKS
 2

	)

108 #i‚de‡
M_GRAIN


109 
	#M_GRAIN
 3

	)

111 #i‚de‡
M_KEEP


112 
	#M_KEEP
 4

	)

116 
	#M_TRIM_THRESHOLD
 -1

	)

117 
	#M_TOP_PAD
 -2

	)

118 
	#M_MMAP_THRESHOLD
 -3

	)

119 
	#M_MMAP_MAX
 -4

	)

120 
	#M_CHECK_ACTION
 -5

	)

121 
	#M_PERTURB
 -6

	)

122 
	#M_ARENA_TEST
 -7

	)

123 
	#M_ARENA_MAX
 -8

	)

126 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

130 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

134 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

137 
	$mÆloc_°©s
 (Ë
__THROW
;

140 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

143 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

145 
__MALLOC_DEPRECATED
;

146 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

148 
__MALLOC_DEPRECATED
;

149 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

150 
size_t
 
__size
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

154 
size_t
 
__size
,

156 
__MALLOC_DEPRECATED
;

157 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

160 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

163 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/vppinfra/cache.h

38 #i‚de‡
ö˛uded_˛ib_ˇche_h


39 
	#ö˛uded_˛ib_ˇche_h


	)

41 
	~<vµö‰a/îr‹_boŸ°øp.h
>

46 #i‚de‡
CLIB_LOG2_CACHE_LINE_BYTES


49 #i‚de‡
CLIB_LOG2_CACHE_LINE_BYTES


50 
	#CLIB_LOG2_CACHE_LINE_BYTES
 6

	)

55 #i‡(
CLIB_LOG2_CACHE_LINE_BYTES
 >= 9)

56 #îr‹ 
Cache
 
löe
 
size
 512 
byãs
 
‹
 
gª©î


59 
	#CLIB_CACHE_LINE_BYTES
 (1 << 
CLIB_LOG2_CACHE_LINE_BYTES
)

	)

60 
	#CLIB_CACHE_LINE_ALIGN_MARK
(
m¨k
Ë
u8
 m¨k[0] 
	`__©åibuã__
((
	`Æig√d
(
CLIB_CACHE_LINE_BYTES
)))

	)

61 
	#CLIB_CACHE_LINE_ROUND
(
x
Ë((x + 
CLIB_CACHE_LINE_BYTES
 - 1Ë& ~(CLIB_CACHE_LINE_BYTES - 1))

	)

64 #i‚de‡
CLIB_N_PREFETCHES


65 
	#CLIB_N_PREFETCHES
 16

	)

69 
	#CLIB_PREFETCH_READ
 0

	)

70 
	#CLIB_PREFETCH_LOAD
 0

	)

71 
	#CLIB_PREFETCH_WRITE
 1

	)

72 
	#CLIB_PREFETCH_STORE
 1

	)

74 
	#_CLIB_PREFETCH
(
n
,
size
,
ty≥
) \

75 i‡((
size
Ë> (
n
)*
CLIB_CACHE_LINE_BYTES
) \

76 
	`__buûtö_¥e„tch
 (
_addr
 + (
n
)*
CLIB_CACHE_LINE_BYTES
, \

77 
CLIB_PREFETCH_
##
ty≥
, \

78  3);

	)

80 
	#CLIB_PREFETCH
(
addr
,
size
,
ty≥
) \

82 * 
_addr
 = (
addr
); \

84 
	`ASSERT
 ((
size
Ë<4*
CLIB_CACHE_LINE_BYTES
); \

85 
	`_CLIB_PREFETCH
 (0, 
size
, 
ty≥
); \

86 
	`_CLIB_PREFETCH
 (1, 
size
, 
ty≥
); \

87 
	`_CLIB_PREFETCH
 (2, 
size
, 
ty≥
); \

88 
	`_CLIB_PREFETCH
 (3, 
size
, 
ty≥
); \

89 } 0)

	)

91 #unde‡
_


	@/usr/include/vppinfra/smp.h

38 #i‚de‡
ö˛uded_˛ib_smp_h


39 
	#ö˛uded_˛ib_smp_h


	)

41 
	~<vµö‰a/ˇche.h
>

42 
	~<vµö‰a/os.h
>

44 #i‡
deföed
 (
i386
Ë|| deföed (
__x86_64__
)

45 
	#˛ib_smp_∑u£
(Ëdÿ{ 
asm
 vﬁ©ûê("∑u£"); } 0)

	)

46 #ñi‡
deföed
 (
__Ørch64__
Ë|| deföed (
__¨m__
)

47 
	#˛ib_smp_∑u£
(Ëdÿ{ 
asm
 vﬁ©ûê("isb" ::: "mem‹y"); } 0)

	)

50 #i‚de‡
˛ib_smp_∑u£


51 
	#˛ib_smp_∑u£
(Ëdÿ{ } 0)

	)

54 #ifde‡
CLIB_UNIX


55 
	~<sched.h
>

57 
Æways_ölöe
 

58 
	$os_sched_yõld
 ()

60 
	`sched_yõld
 ();

61 
	}
}

63 
Æways_ölöe
 

64 
	$os_sched_yõld
 ()

66 
	`˛ib_smp_∑u£
 ();

67 
	}
}

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #ifde‡
__USE_POSIX


128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #ifde‡
__USE_POSIX


149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

178 #ifde‡
__USE_MISC


181 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

187 
	#__i¶óp
(
yór
) \

188 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

191 #ifde‡
__USE_MISC


196 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

199 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

202 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

206 #ifde‡
__USE_POSIX199309


211 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

212 
time•ec
 *
__ªmaöög
);

216 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

219 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

222 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

223 
__THROW
;

225 #ifde‡
__USE_XOPEN2K


230 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

231 c⁄° 
time•ec
 *
__ªq
,

232 
time•ec
 *
__ªm
);

235 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

240 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

241 
sigevít
 *
__ª°ri˘
 
__evp
,

242 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

245 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

248 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

249 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

250 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

253 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

254 
__THROW
;

257 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

261 #ifde‡
__USE_ISOC11


263 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

268 #ifde‡
__USE_XOPEN_EXTENDED


280 
gëd©e_îr
;

289 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

292 #ifde‡
__USE_GNU


303 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

304 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

307 
__END_DECLS


	@
1
.
1
/usr/include
49
1362
node.c
nsim.c
nsim.h
nsim_input.c
nsim_test.c
/usr/include/vppinfra/error.h
/usr/include/vppinfra/hash.h
/usr/include/errno.h
/usr/include/linux/errno.h
/usr/include/vppinfra/clib.h
/usr/include/vppinfra/clib_error.h
/usr/include/vppinfra/error_bootstrap.h
/usr/include/vppinfra/format.h
/usr/include/vppinfra/vec.h
/usr/include/vppinfra/vector.h
/usr/include/features.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/vppinfra/atomics.h
/usr/include/vppinfra/mem.h
/usr/include/vppinfra/string.h
/usr/include/vppinfra/types.h
/usr/include/vppinfra/vec_bootstrap.h
/usr/include/vppinfra/vector_altivec.h
/usr/include/vppinfra/vector_avx2.h
/usr/include/vppinfra/vector_avx512.h
/usr/include/vppinfra/vector_funcs.h
/usr/include/vppinfra/vector_neon.h
/usr/include/vppinfra/vector_sse42.h
/usr/include/alloca.h
/usr/include/linux/string.h
/usr/include/stdc-predef.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/vppinfra/byte_order.h
/usr/include/vppinfra/dlmalloc.h
/usr/include/vppinfra/memcpy_avx2.h
/usr/include/vppinfra/memcpy_avx512.h
/usr/include/vppinfra/memcpy_sse3.h
/usr/include/vppinfra/mheap_bootstrap.h
/usr/include/vppinfra/os.h
/usr/include/vppinfra/sanitizer.h
/usr/include/malloc.h
/usr/include/stdint.h
/usr/include/strings.h
/usr/include/vppinfra/cache.h
/usr/include/vppinfra/smp.h
/usr/include/sched.h
/usr/include/time.h
