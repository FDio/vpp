/*
 * Copyright (c) 2020 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option version = "1.0.0";
import "vnet/ip/ip_types.api";
import "vnet/interface_types.api";
import "plugins/nat/lib/nat_types.api";


/** \brief Enable/disable NAT66 plugin
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param outside_vrf - outside vrf id
    @param enable - true if enable, false if disable
*/
autoreply define nat66_plugin_enable_disable {
  u32 client_index;
  u32 context;
  u32 outside_vrf;
  bool enable;
};

/** \brief Enable/disable NAT66 feature on the interface
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - true if add, false if delete
    @param flags - flag NAT_IS_INSIDE if interface is inside or
                   interface is outside,
    @param sw_if_index - software index of the interface
*/
autoreply define nat66_add_del_interface {
  u32 client_index;
  u32 context;
  bool is_add;
  vl_api_nat_config_flags_t flags;
  vl_api_interface_index_t sw_if_index;
};

/** \brief Dump interfaces with NAT66 feature
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat66_interface_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT66 interface details response
    @param context - sender context, to match reply w/ request
    @param flags - flag NAT_IS_INSIDE if interface is inside or
                   interface is outside,
    @param sw_if_index - software index of the interface
*/
define nat66_interface_details {
  u32 context;
  vl_api_nat_config_flags_t flags;
  vl_api_interface_index_t sw_if_index;
};

/** \brief Add/delete 1:1 NAT66
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - true if add, false if delete
    @param local_ip_address - local IPv6 address
    @param external_ip_address - external IPv6 address
    @param vrf_id - VRF id of tenant
*/
autoreply define nat66_add_del_static_mapping {
  u32 client_index;
  u32 context;
  bool is_add;
  vl_api_ip6_address_t local_ip_address;
  vl_api_ip6_address_t external_ip_address;
  u32 vrf_id;
};

/** \brief Dump NAT66 static mappings
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat66_static_mapping_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT66 static mapping details response
    @param context - sender context, to match reply w/ request
    @param local_ip_address - local IPv6 address
    @param external_ip_address - external IPv6 address
    @param vrf_id - VRF id of tenant
    @param total_bytes - count of bytes sent through static mapping
    @param total_pkts - count of pakets sent through static mapping
*/
define nat66_static_mapping_details {
  u32 context;
  vl_api_ip6_address_t local_ip_address;
  vl_api_ip6_address_t external_ip_address;
  u32 vrf_id;
  u64 total_bytes;
  u64 total_pkts;
};
