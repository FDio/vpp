/*
 * Copyright (c) 2020 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option version = "5.5.0";
import "vnet/ip/ip_types.api";
import "vnet/interface_types.api";
import "plugins/nat/lib/nat_types.api";

/**
 * @file nat44_ed.api
 * @brief VPP control-plane API messages.
 *
 * This file defines VPP control-plane API messages which are generally
 * called through a shared memory interface.
 */

enum nat44_config_flags : u8
{
  NAT44_IS_ENDPOINT_INDEPENDENT = 0x00,
  NAT44_IS_ENDPOINT_DEPENDENT = 0x01,
  NAT44_IS_STATIC_MAPPING_ONLY = 0x02,
  NAT44_IS_CONNECTION_TRACKING = 0x04,
  NAT44_IS_OUT2IN_DPO = 0x08,
};

/** \brief Enable/disable NAT44ED plugin
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param inside_vrf - inside vrf id
    @param outside_vrf - outside vrf id
    @param sessions - maximum number of sessions per thread
    @param session_memory - overwrite hash allocation parameter
    @param enable - true if enable, false if disable
    @param flags - flag NAT44_IS_STATIC_MAPPING_ONLY,
                        NAT44_IS_CONNECTION_TRACKING
*/
autoreply define nat44_ed_plugin_enable_disable {
  u32 client_index;
  u32 context;
  u32 inside_vrf;
  u32 outside_vrf;
  u32 sessions;
  u32 session_memory;
  bool enable;
  vl_api_nat44_config_flags_t flags;
};

/** \brief Enable/disable forwarding for NAT44
    Forward packets which don't match existing translation
    or static mapping instead of dropping them.
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param enable - true for enable, false for disable
*/
autoreply define nat44_forwarding_enable_disable {
  option deprecated;
  u32 client_index;
  u32 context;
  bool enable;
};

/** \brief Enable/disable NAT IPFIX logging
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param domain_id - observation domain ID
    @param src_port - source port number
    @param enable - true if enable, false if disable
*/
autoreply define nat_ipfix_enable_disable {
  option deprecated;
  u32 client_index;
  u32 context;
  u32 domain_id;
  u16 src_port;
  bool enable;
};

/** \brief Set values of timeouts for NAT sessions (seconds)
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param udp - UDP timeout (default 300sec)
    @param tcp_established - TCP established timeout (default 7440sec)
    @param tcp_transitory - TCP transitory timeout (default 240sec)
    @param icmp - ICMP timeout (default 60sec)
*/
autoreply define nat_set_timeouts {
  option deprecated;
  u32 client_index;
  u32 context;
  u32 udp;
  u32 tcp_established;
  u32 tcp_transitory;
  u32 icmp;
};

/** \brief NAT44 set session limit
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param session_limit - session limit
    @param vrf_id - vrf id
*/
autoreply define nat44_set_session_limit {
  u32 client_index;
  u32 context;
  u32 session_limit;
  u32 vrf_id;
};

/** \brief Show NAT44 plugin running config
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat44_show_running_config
{
  u32 client_index;
  u32 context;
};

/** \brief Show NAT44 plugin running config reply
    @param context - sender context, to match reply w/ request
    @param retval - return code for the request
    @param inside_vrf - default inside VRF id
    @param outside_vrf - outside VRF id
    @param users - maximum number of users per worker thread
                  (NAT44_IS_ENDPOINT_INDEPENDENT)
    @param sessions - maximum number of sessions per worker thread
    @param user_sessions - maximum number of sessions per user
                          (NAT44_IS_ENDPOINT_INDEPENDENT)
    @param user_buckets - number of user hash buckets
                         (NAT44_IS_ENDPOINT_INDEPENDENT)
    @param translation_buckets - number of translation hash buckets
    @param flags - flag NAT44_IS_ENDPOINT_INDEPENDENT,
                        NAT44_IS_ENDPOINT_DEPENDENT,
                        NAT44_IS_STATIC_MAPPING_ONLY,
                        NAT44_IS_CONNECTION_TRACKING,
                        NAT44_IS_OUT2IN_DPO
*/
define nat44_show_running_config_reply
{
  u32 context;
  i32 retval;
  u32 inside_vrf;
  u32 outside_vrf;
  u32 users;
  u32 sessions;
  u32 user_sessions;
  u32 user_buckets;
  u32 translation_buckets;
  bool forwarding_enabled;
  bool ipfix_logging_enabled;
  vl_api_nat_timeouts_t timeouts;
  vl_api_nat_log_level_t log_level;
  vl_api_nat44_config_flags_t flags;
};

/** \brief Set NAT workers
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param worker_mask - NAT workers mask
*/
autoreply define nat_set_workers {
  u32 client_index;
  u32 context;
  u64 worker_mask;
};

/** \brief Dump NAT workers
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat_worker_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT workers details response
    @param context - sender context, to match reply w/ request
    @param worker_index - worker index
    @param lcore_id - lcore ID
    @param name - worker name
*/
define nat_worker_details {
  u32 context;
  u32 worker_index;
  u32 lcore_id;
  string name[64];
};

/** \brief Add/delete inter VRF NAT44-ED routing table
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param table_vrf_id - id of (rx) VRF used for resolving
                          destination (tx) VRF during dynamic
                          session creation
    @param is_add - if true add else del
*/
autoreply define nat44_ed_add_del_vrf_table {
  u32 client_index;
  u32 context;
  u32 table_vrf_id;
  bool is_add;
};

/** \brief Add/del inter VRF NAT44-ED route record
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param table_vrf_id - id of the VRF NAT routing table
    @param vrf_id - id of resolving destination (tx) VRF table
    @param is_add - if true add else del
*/
autoreply define nat44_ed_add_del_vrf_route {
  u32 client_index;
  u32 context;
  u32 table_vrf_id;
  u32 vrf_id;
  bool is_add;
};

/** \brief Dump NAT44-ED inter VRF NAT routing tables
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat44_ed_vrf_tables_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT44-ED inter VRF NAT routing table details response
    @param context - sender context, to match reply w/ request
    @param table_vrf_id - id of the VRF NAT routing table
    @param n_vrf_ids - number of vrf_ids
    @param vrf_ids - ids of resolving destination (tx) VRFs
*/
define nat44_ed_vrf_tables_details {
  u32 context;
  u32 table_vrf_id;
  u32 n_vrf_ids;
  u32 vrf_ids[n_vrf_ids];
};

/** \brief Set TCP MSS rewriting configuration
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param mss_value - MSS value to be used for MSS rewriting
    @param enable - if true enable MSS rewriting feature else disable
*/
autoreply define nat_set_mss_clamping {
  u32 client_index;
  u32 context;
  u16 mss_value;
  bool enable;
};

/** \brief Get TCP MSS rewriting configuration
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat_get_mss_clamping {
  u32 client_index;
  u32 context;
};

/** \brief Get TCP MSS rewriting configuration reply
    @param context - sender context, to match reply w/ request
    @param retval - return code
    @param mss_value - MSS value to be used for MSS rewriting
    @param enable - if true enable MSS rewriting feature else disable
*/
define nat_get_mss_clamping_reply {
  u32 context;
  i32 retval;
  u16 mss_value;
  bool enable;
};

/** \brief Set NAT handoff frame queue options
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param frame_queue_nelts - number of worker handoff frame queue elements
*/
autoreply define nat44_ed_set_fq_options {
  u32 client_index;
  u32 context;
  u32 frame_queue_nelts;
};

/** \brief Show NAT handoff frame queue options
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat44_ed_show_fq_options
{
  u32 client_index;
  u32 context;
};

/** \brief Show NAT handoff frame queue options reply
    @param context - sender context, to match reply w/ request
    @param retval - return code for the request
    @param frame_queue_nelts - number of worker handoff frame queue elements
*/
define nat44_ed_show_fq_options_reply
{
  u32 context;
  i32 retval;
  u32 frame_queue_nelts;
};

/** \brief Add/delete NAT44 pool address from specific interfce
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - true if add, false if delete
    @param sw_if_index - software index of the interface
    @param flags - flag NAT_TWICE_NAT if NAT address range for external hosts
*/
autoreply define nat44_add_del_interface_addr {
  u32 client_index;
  u32 context;
  bool is_add;
  vl_api_interface_index_t sw_if_index;
  vl_api_nat_config_flags_t flags;
};

/** \brief Dump NAT44 pool addresses interfaces
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat44_interface_addr_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT44 pool addresses interfaces details response
    @param context - sender context, to match reply w/ request
    @param sw_if_index - software index of the interface
    @param flags - flag NAT_TWICE_NAT if NAT address range for external hosts

*/
define nat44_interface_addr_details {
  u32 context;
  vl_api_interface_index_t sw_if_index;
  vl_api_nat_config_flags_t flags;
};

/** \brief Add/del NAT44 address range
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param first_ip_address - first IPv4 address
    @param last_ip_address - last IPv4 address
    @param vrf_id - VRF id of tenant, ~0 means independent of VRF
    @param is_add - true if add, false if delete
    @param flags - flag NAT_IS_TWICE_NAT if NAT address range for external hosts

*/
autoreply define nat44_add_del_address_range {
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t first_ip_address;
  vl_api_ip4_address_t last_ip_address;
  u32 vrf_id;
  bool is_add;
  vl_api_nat_config_flags_t flags;
};

/** \brief Dump NAT44 addresses
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat44_address_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT44 address details response
    @param context - sender context, to match reply w/ request
    @param ip_address - IPv4 address
    @param flags - flag NAT_IS_TWICE_NAT if NAT address range for external hosts
    @param vrf_id - VRF id of tenant, ~0 means independent of VRF
*/
define nat44_address_details {
  u32 context;
  vl_api_ip4_address_t ip_address;
  vl_api_nat_config_flags_t flags;
  u32 vrf_id;
};

/** \brief Enable/disable NAT44 feature on the interface
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - true if add, false if delete
    @param flags - flag NAT_IS_INSIDE if interface is inside else
                   interface is outside
    @param sw_if_index - software index of the interface
*/
autoreply define nat44_interface_add_del_feature {
  u32 client_index;
  u32 context;
  bool is_add;
  vl_api_nat_config_flags_t flags;
  vl_api_interface_index_t sw_if_index;
};

/** \brief Dump interfaces with NAT44 feature
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat44_interface_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT44 interface details response
    @param context - sender context, to match reply w/ request
    @param sw_if_index - software index of the interface
    @param flags - flag NAT_IS_INSIDE if interface is inside,
                   flag NAT_IS_OUTSIDE if interface is outside
                   and if both flags are set the interface is
                   both inside and outside
*/
define nat44_interface_details {
  u32 context;
  vl_api_nat_config_flags_t flags;
  vl_api_interface_index_t sw_if_index;
};

/** \brief add/del NAT output interface (postrouting
           in2out translation)
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - true if add, false if delete
    @param sw_if_index - software index of the interface
*/
autoendian autoreply define nat44_ed_add_del_output_interface {
  u32 client_index;
  u32 context;
  bool is_add;
  vl_api_interface_index_t sw_if_index;
};

service {
  rpc nat44_ed_output_interface_get returns nat44_ed_output_interface_get_reply
    stream nat44_ed_output_interface_details;
};

define nat44_ed_output_interface_get
{
  u32 client_index;
  u32 context;
  u32 cursor;
};

define nat44_ed_output_interface_get_reply
{
  u32 context;
  i32 retval;
  u32 cursor;
};

define nat44_ed_output_interface_details
{
  u32 context;
  vl_api_interface_index_t sw_if_index;
};

/** \brief Add/delete NAT44 static mapping
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - true if add, false if delete
    @param flags - flag NAT_IS_ADDR_ONLY if address only mapping,
                   flag nat_is_twice_nat if nat address range for external hosts,
                   flag NAT_IS_SELF_TWICE_NAT if translate external host address
                   and port whenever external host address equals local
                   address of internal host,
                   flag NAT_IS_OUT2IN_ONLY if rule match only out2in direction
    @param local_ip_address - local IPv4 address
    @param external_ip_address - external IPv4 address
    @param protocol - IP protocol, used only if addr_only=0
    @param local_port - local port number, used only if addr_only=0
    @param external_port - external port number, used only if addr_only=0
    @param external_sw_if_index - external interface (if set
                                  external_ip_address is ignored, ~0 means not
                                  used)
    @param vfr_id - VRF ID
    @param tag - opaque string tag
*/
autoreply define nat44_add_del_static_mapping {
  u32 client_index;
  u32 context;
  bool is_add;
  vl_api_nat_config_flags_t flags;
  vl_api_ip4_address_t local_ip_address;
  vl_api_ip4_address_t external_ip_address;
  u8 protocol;
  u16 local_port;
  u16 external_port;
  vl_api_interface_index_t external_sw_if_index;
  u32 vrf_id;
  string tag[64];
};

/** \brief Add/delete NAT44 static mapping
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - true if add, false if delete
    @param match_pool - true if use specific pool_ip_address
    @param flags - flag NAT_IS_ADDR_ONLY if address only mapping,
                   flag nat_is_twice_nat if nat address range for external hosts,
                   flag NAT_IS_SELF_TWICE_NAT if translate external host address
                   and port whenever external host address equals local
                   address of internal host,
                   flag NAT_IS_OUT2IN_ONLY if rule match only out2in direction
    @param pool_ip_address - pool IPv4 address to match with pool
    @param local_ip_address - local IPv4 address
    @param external_ip_address - external IPv4 address
    @param protocol - IP protocol, used only if addr_only=0
    @param local_port - local port number, used only if addr_only=0
    @param external_port - external port number, used only if addr_only=0
    @param external_sw_if_index - external interface (if set
                                  external_ip_address is ignored, ~0 means not
                                  used)
    @param vfr_id - VRF ID
    @param tag - opaque string tag
*/
autoreply define nat44_add_del_static_mapping_v2 {
  u32 client_index;
  u32 context;
  bool is_add;
  bool match_pool;
  vl_api_nat_config_flags_t flags;
  vl_api_ip4_address_t pool_ip_address;
  vl_api_ip4_address_t local_ip_address;
  vl_api_ip4_address_t external_ip_address;
  u8 protocol;
  u16 local_port;
  u16 external_port;
  vl_api_interface_index_t external_sw_if_index;
  u32 vrf_id;
  string tag[64];
};

/** \brief Dump NAT44 static mappings
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat44_static_mapping_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT44 static mapping details response
    @param context - sender context, to match reply w/ request
    @param flags - flag NAT_ADDR_ONLY if address only mapping,
                   flag NAT_TWICE_NAT if NAT address range for external hosts,
                   flag NAT_SELF_TWICE_NAT if translate external host address
                   and port whenever external host address equals local
                   address of internal host,
                   flag NAT_OUT2IN_ONLY if rule match only out2in direction
    @param local_ip_address - local IPv4 address
    @param external_ip_address - external IPv4 address
    @param protocol - IP protocol, valid only if no NAT_ADDR_ONLY flag
    @param local_port - local port number, valid only if no NAT_ADDR_ONLY flag
    @param external_port - external port number, valid only if no NAT_ADDR_ONLY flag
    @param external_sw_if_index - external interface
    @param vfr_id - VRF ID
    @param tag - opaque string tag
*/
define nat44_static_mapping_details {
  u32 context;
  vl_api_nat_config_flags_t flags;
  vl_api_ip4_address_t local_ip_address;
  vl_api_ip4_address_t external_ip_address;
  u8 protocol;
  u16 local_port;
  u16 external_port;
  vl_api_interface_index_t external_sw_if_index;
  u32 vrf_id;
  string tag[64];
};

/** \brief Add/delete NAT44 identity mapping
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - true if add, false if delete
    @param flags - flag NAT_ADDR_ONLY if address only mapping
    @param ip_address - IPv4 address
    @param protocol - IP protocol
    @param port - port number
    @param sw_if_index - interface (if set ip_address is ignored, ~0 means not
                                    used)
    @param vfr_id - VRF ID (if ~0 use default VRF)
    @param tag - opaque string tag
*/
autoreply define nat44_add_del_identity_mapping {
  u32 client_index;
  u32 context;
  bool is_add;
  vl_api_nat_config_flags_t flags;
  vl_api_ip4_address_t ip_address;
  u8 protocol;
  u16 port;
  vl_api_interface_index_t sw_if_index;
  u32 vrf_id;
  string tag[64];
};

/** \brief Dump NAT44 identity mappings
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat44_identity_mapping_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT44 identity mapping details response
    @param context - sender context, to match reply w/ request
    @param flags - flag NAT_ADDR_ONLY if address only mapping
    @param ip_address - IPv4 address
    @param protocol - IP protocol
    @param port - port number
    @param sw_if_index - interface
    @param vfr_id - VRF ID
    @param tag - opaque string tag
*/
define nat44_identity_mapping_details {
  u32 context;
  vl_api_nat_config_flags_t flags;
  vl_api_ip4_address_t ip_address;
  u8 protocol;
  u16 port;
  vl_api_interface_index_t sw_if_index;
  u32 vrf_id;
  string tag[64];
};

/** \brief NAT44 load-balancing address and port pair
    @param addr - IPv4 address of the internal node
    @param port - L4 port number of the internal node
    @param probability - probability of the internal node to be randomly matched
    @param vrf_id - VRF id
*/
typedef nat44_lb_addr_port {
  vl_api_ip4_address_t addr;
  u16 port;
  u8 probability;
  u32 vrf_id;
};

/** \brief Add/delete NAT44 load-balancing static mapping rule
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - true if add, false if delete
    @param flags - flag NAT_TWICE_NAT if NAT address range for external hosts,
                   flag NAT_SELF_TWICE_NAT if translate external host address
                   and port whenever external host address equals local
                   address of internal host,
                   flag NAT_OUT2IN_ONLY if rule match only out2in direction
    @param external_addr - external IPv4 address of the service
    @param external_port - external L4 port number of the service
    @param protocol - IP protocol number of the service
    @param affinity - if 0 disabled, otherwise client IP affinity sticky time
                      in seconds
    @param local_num - number of local network nodes
    @param locals - local network nodes
    @param tag - opaque string tag
*/
autoreply define nat44_add_del_lb_static_mapping {
  u32 client_index;
  u32 context;
  bool is_add;
  vl_api_nat_config_flags_t flags;
  vl_api_ip4_address_t external_addr;
  u16 external_port;
  u8 protocol;
  u32 affinity;
  string tag[64];
  u32 local_num;
  vl_api_nat44_lb_addr_port_t locals[local_num];
};

/** \brief Add/delete NAT44 load-balancing static mapping rule backend
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - true if add, false if delete
    @param external_addr - external IPv4 address of the service
    @param external_port - external L4 port number of the service
    @param protocol - IP protocol number of the service
    @param local - local network node
*/
autoreply define nat44_lb_static_mapping_add_del_local {
  u32 client_index;
  u32 context;
  bool is_add;
  vl_api_ip4_address_t external_addr;
  u16 external_port;
  u8 protocol;
  vl_api_nat44_lb_addr_port_t local;
};

/** \brief Dump NAT44 load-balancing static mapping rules
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat44_lb_static_mapping_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT44 load-balancing static mapping rule details response
    @param context - sender context, to match reply w/ request
    @param external_addr - external IPv4 address of the service
    @param external_port - external L4 port number of the service
    @param protocol - IP protocol number of the service
    @param flags - flag NAT_TWICE_NAT if NAT address range for external hosts,
                   flag NAT_SELF_TWICE_NAT if translate external host address
                   and port whenever external host address equals local
                   address of internal host,
                   flag NAT_OUT2IN_ONLY if rule match only out2in direction
    @param affinity - if 0 disabled, otherwise client IP affinity sticky time
                      in seconds
    @param local_num - number of local network nodes
    @param locals - local network nodes
    @param tag - opaque string tag
*/
define nat44_lb_static_mapping_details {
  u32 context;
  vl_api_ip4_address_t external_addr;
  u16 external_port;
  u8 protocol;
  vl_api_nat_config_flags_t flags;
  u32 affinity;
  string tag[64];
  u32 local_num;
  vl_api_nat44_lb_addr_port_t locals[local_num];
};

/** \brief Delete NAT44 session
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param ip_address - IPv4 address
    @param protocol - IP protocol
    @param port - port number
    @param vfr_id - VRF ID
    @param flags - flag NAT_IS_INSIDE if interface is inside or
                   interface is outside,
                   flag NAT_IS_EXT_HOST_VALID if external host address and
                   port are valid
    @param ext_host_address - external host IPv4 address
    @param ext_host_port - external host port
*/
autoreply define nat44_del_session {
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t address;
  u8 protocol;
  u16 port;
  u32 vrf_id;
  vl_api_nat_config_flags_t flags;
  vl_api_ip4_address_t ext_host_address;
  u16 ext_host_port;
};

/** \brief Dump NAT44 users
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat44_user_dump {
  u32 client_index;
  u32 context;
};

/** \brief NAT44 users response
    @param context - sender context, to match reply w/ request
    @vrf_id - VRF ID
    @param ip_address - IPv4 address
    @param nsessions - number of dynamic sessions
    @param nstaticsessions - number of static sessions
*/
define nat44_user_details {
  u32 context;
  u32 vrf_id;
  vl_api_ip4_address_t ip_address;
  u32 nsessions;
  u32 nstaticsessions;
};

/** \brief NAT44 user's sessions
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param ip_address - IPv4 address of the user to dump
    @param vrf_id - VRF_ID
*/
define nat44_user_session_dump {
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t ip_address;
  u32 vrf_id;
};

/** \brief NAT44 user's sessions response
    @param context - sender context, to match reply w/ request
    @param outside_ip_address - outside IPv4 address
    @param outside_port - outside port
    @param inside_ip_address - inside IPv4 address
    @param inside_port - inside port
    @param protocol - protocol
    @param flags - flag NAT_IS_STATIC if session is static,
                   flag NAT_IS_TWICE_NAT if session is twice-nat,
                   flag NAT_IS_EXT_HOST_VALID if external host address
                   and port are valid
    @param last_heard - last heard timer
    @param total_bytes - count of bytes sent through session
    @param total_pkts - count of pakets sent through session
    @param ext_host_address - external host IPv4 address
    @param ext_host_port - external host port
    @param ext_host_nat_address - post-NAT external host IPv4 address (valid
                                  only if twice-nat session)
    @param ext_host_nat_port - post-NAT external host port (valid only if
                               twice-nat session)
*/
define nat44_user_session_details {
  u32 context;
  vl_api_ip4_address_t outside_ip_address;
  u16 outside_port;
  vl_api_ip4_address_t inside_ip_address;
  u16 inside_port;
  u16 protocol;
  vl_api_nat_config_flags_t flags;
  u64 last_heard;
  u64 total_bytes;
  u32 total_pkts;
  vl_api_ip4_address_t ext_host_address;
  u16 ext_host_port;
  vl_api_ip4_address_t ext_host_nat_address;
  u16 ext_host_nat_port;
};

/** \brief NAT44 user's sessions
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param ip_address - IPv4 address of the user to dump
    @param vrf_id - VRF_ID
*/
define nat44_user_session_v2_dump {
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t ip_address;
  u32 vrf_id;
};

/** \brief NAT44 user's sessions response
    @param context - sender context, to match reply w/ request
    @param outside_ip_address - outside IPv4 address
    @param outside_port - outside port
    @param inside_ip_address - inside IPv4 address
    @param inside_port - inside port
    @param protocol - protocol
    @param flags - flag NAT_IS_STATIC if session is static,
                   flag NAT_IS_TWICE_NAT if session is twice-nat,
                   flag NAT_IS_EXT_HOST_VALID if external host address
                   and port are valid
    @param last_heard - last heard timer
    @param total_bytes - count of bytes sent through session
    @param total_pkts - count of pakets sent through session
    @param ext_host_address - external host IPv4 address
    @param ext_host_port - external host port
    @param ext_host_nat_address - post-NAT external host IPv4 address (valid
                                  only if twice-nat session)
    @param ext_host_nat_port - post-NAT external host port (valid only if
                               twice-nat session)
    @param is_timed_out - true, if session is timed out, and false, if session
                          is active
*/
define nat44_user_session_v2_details {
  u32 context;
  vl_api_ip4_address_t outside_ip_address;
  u16 outside_port;
  vl_api_ip4_address_t inside_ip_address;
  u16 inside_port;
  u16 protocol;
  vl_api_nat_config_flags_t flags;
  u64 last_heard;
  u64 total_bytes;
  u32 total_pkts;
  vl_api_ip4_address_t ext_host_address;
  u16 ext_host_port;
  vl_api_ip4_address_t ext_host_nat_address;
  u16 ext_host_nat_port;
  bool is_timed_out;
};

// DEPRECATED, obsolete messages completely unsupported

/** \brief Del NAT44 user
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param ip_address - IPv4 address
    @param fib_index - FIB index
*/
autoreply define nat44_del_user {
  option deprecated;
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t ip_address;
  u32 fib_index;
};

/** \brief Set address and port assignment algorithm
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param alg - address and port assignment algorithm:
                 0 - default, 1 - MAP-E, 2 - port range
                 (see nat_addr_and_port_alloc_alg_t in nat.h)
    @param psid_offset - number of offset bits (valid only for MAP-E alg)
    @param psid_length - length of PSID (valid only for MAP-E alg)
    @param psid - Port Set Identifier (PSID) value (valid only for MAP-E alg)
    @param start_port - beginning of the port range
    @param end_port - end of the port range
*/
autoreply define nat_set_addr_and_port_alloc_alg {
  option deprecated;
  u32 client_index;
  u32 context;
  u8 alg;
  u8 psid_offset;
  u8 psid_length;
  u16 psid;
  u16 start_port;
  u16 end_port;
};

/** \brief Get address and port assignment algorithm
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat_get_addr_and_port_alloc_alg {
  option deprecated;
  u32 client_index;
  u32 context;
};

/** \brief Get address and port assignment algorithm reply
    @param context - sender context, to match reply w/ request
    @param retval - return code
    @param alg - address and port assignment algorithm:
                 0 - default, 1 - MAP-E, 2 - port range
                 (see nat_addr_and_port_alloc_alg_t in nat.h)
    @param psid_offset - number of offset bits (valid only for MAP-E alg)
    @param psid_length - length of PSID (valid only for MAP-E alg)
    @param psid - Port Set Identifier (PSID) value (valid only for MAP-E alg)
    @param start_port - beginning of the port range
    @param end_port - end of the port range
*/
define nat_get_addr_and_port_alloc_alg_reply {
  option deprecated;
  u32 context;
  i32 retval;
  u8 alg;
  u8 psid_offset;
  u8 psid_length;
  u16 psid;
  u16 start_port;
  u16 end_port;
};

/** \brief Set HA listener (local settings)
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param ip_address - local IP4 address
    @param port - local UDP port number
    @param path_mtu - path MTU between local and failover
*/
autoreply define nat_ha_set_listener {
  option deprecated;
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t ip_address;
  u16 port;
  u32 path_mtu;
};

/** \brief Set HA failover (remote settings)
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param ip_address - failover IP4 address
    @param port - failvoer UDP port number
    @param session_refresh_interval - number of seconds after which to send
                                      session counters refresh
*/
autoreply define nat_ha_set_failover {
  option deprecated;
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t ip_address;
  u16 port;
  u32 session_refresh_interval;
};

/** \brief Get HA listener/local configuration
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat_ha_get_listener {
  option deprecated;
  u32 client_index;
  u32 context;
};

/** \brief Get HA listener/local configuration reply
    @param context - sender context, to match reply w/ request
    @param retval - return code
    @param ip_address - local IP4 address
    @param port - local UDP port number
    @param path_mtu - Path MTU between local and failover
*/
define nat_ha_get_listener_reply {
  option deprecated;
  u32 context;
  i32 retval;
  vl_api_ip4_address_t ip_address;
  u16 port;
  u32 path_mtu;
};

/** \brief Get HA failover/remote settings
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define nat_ha_get_failover {
  option deprecated;
  u32 client_index;
  u32 context;
};

/** \brief Get HA failover/remote settings reply
    @param context - sender context, to match reply w/ request
    @param retval - return code
    @param ip_address - failover IP4 address
    @param port - failvoer UDP port number
    @param session_refresh_interval - number of seconds after which to send
                                      session counters refresh
*/
define nat_ha_get_failover_reply {
  option deprecated;
  u32 context;
  i32 retval;
  vl_api_ip4_address_t ip_address;
  u16 port;
  u32 session_refresh_interval;
};

/** \brief Flush the current HA data (for testing)
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
autoreply define nat_ha_flush {
  option deprecated;
  u32 client_index;
  u32 context;
};

/** \brief Resync HA (resend existing sessions to new failover)
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param want_resync_event - resync completed event sent to the sender via
                               nat_ha_resync_completed_event API message if
                               non-zero
    @param pid - sender's pid
*/
autoreply define nat_ha_resync
{
  option deprecated;
  u32 client_index;
  u32 context;
  u8 want_resync_event;
  u32 pid;
};

/** \brief Tell client about a HA resync completion event
    @param client_index - opaque cookie to identify the sender
    @param pid - client pid registered to receive notification
    @param missed_count - number of missed (not ACKed) messages
*/
define nat_ha_resync_completed_event
{
  option deprecated;
  u32 client_index;
  u32 pid;
  u32 missed_count;
};

service {
  rpc nat_ha_resync returns nat_ha_resync_reply events nat_ha_resync_completed_event;
};
