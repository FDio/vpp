/*
 * Copyright 2019-2020 Rubicon Communications, LLC (Netgate)
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 */

option version = "1.1.1";

import "vnet/interface_types.api";
import "vnet/ip/ip_types.api";
import "vnet/ethernet/ethernet_types.api";

typedef vrrp_vr_key
{
  vl_api_interface_index_t sw_if_index;
  u8 vr_id;
  u8 is_ipv6;
};

enum vrrp_vr_flags
{
  VRRP_API_VR_PREEMPT = 0x1,
  VRRP_API_VR_ACCEPT = 0x2,
  VRRP_API_VR_UNICAST = 0x4,
  VRRP_API_VR_IPV6 = 0x8,
};

typedef vrrp_vr_conf
{
  vl_api_interface_index_t sw_if_index;
  u8 vr_id;
  u8 priority;
  u16 interval;
  vl_api_vrrp_vr_flags_t flags;
};

/** \brief VRRP: Add or delete a VRRP virtual router
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - 0 if deleting, != 0 if adding
    @param sw_if_index - interface backed up by this vr
    @param vr_id - the VR ID advertised by this vr
    @param priority - the priority advertised for this vr
    @param interval - interval between advertisements in centiseconds
    @param flags - bit flags for booleans - preempt, accept, unicast, ipv6
    @param n_addrs - number of addresses being backed up by this vr
    @param addrs - the addresses backed up by this vr
*/
autoreply define vrrp_vr_add_del {
  u32 client_index;
  u32 context;
  u8 is_add;
  vl_api_interface_index_t sw_if_index;
  u8 vr_id;
  u8 priority;
  u16 interval;
  vl_api_vrrp_vr_flags_t flags;
  u8 n_addrs;
  vl_api_address_t addrs[n_addrs];
};

/** @brief Replace an existing VRRP virtual router in-place or create a new one
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param vrrp_index - an existing VRRP entry to replace, or 0xffffffff to crate a new one
    @param sw_if_index - interface backed up by this vr
    @param vr_id - the VR ID advertised by this vr
    @param priority - the priority advertised for this vr
    @param interval - interval between advertisements in centiseconds
    @param flags - bit flags for booleans - preempt, accept, unicast, ipv6
    @param n_addrs - number of addresses being backed up by this vr
    @param addrs - the addresses backed up by this vr
*/
define vrrp_vr_update {
  u32 client_index;
  u32 context;
  u32 vrrp_index;
  vl_api_interface_index_t sw_if_index;
  u8 vr_id;
  u8 priority;
  u16 interval;
  vl_api_vrrp_vr_flags_t flags;
  u8 n_addrs;
  vl_api_address_t addrs[n_addrs];
};

/**
 * @brief Reply to a VRRP add/replace
 * @param context - returned sender context, to match reply w/ request
 * @param vrrp_index - index of the updated or newly created VRRP instance
 * @param retval 0 - no error
 */
define vrrp_vr_update_reply {
  u32 context;
  i32 retval;
  u32 vrrp_index;
};

/**
 * @brief Delete an existing VRRP instance
 * @param client_index - opaque cookie to identify the sender
 * @param context - returned sender context, to match reply w/ request
 * @param vrrp_index - index of the VRRP instance to delete
 */
autoreply define vrrp_vr_del {
  u32 client_index;
  u32 context;
  u32 vrrp_index;
};

/** \brief VRRP: dump virtual router data
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param sw_if_index - interface to use as filter (0,~0 == "all")
*/
define vrrp_vr_dump {
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
};

enum vrrp_vr_state
{
  VRRP_API_VR_STATE_INIT = 0,
  VRRP_API_VR_STATE_BACKUP,
  VRRP_API_VR_STATE_MASTER,
  VRRP_API_VR_STATE_INTF_DOWN,
};

typedef vrrp_vr_tracking
{
  u32 interfaces_dec;
  u8 priority;
};

typedef vrrp_vr_runtime
{
  vl_api_vrrp_vr_state_t state;
  u16 master_adv_int;
  u16 skew;
  u16 master_down_int;
  vl_api_mac_address_t mac;
  vl_api_vrrp_vr_tracking_t tracking;
};

/** \brief VRRP: VR dump response
    @param context - sender context which was passed in the request
    @param conf - configuration parameters for the VR
    @param runtime - runtime state for the VR
*/
define vrrp_vr_details {
  u32 context;
  vl_api_vrrp_vr_conf_t config;
  vl_api_vrrp_vr_runtime_t runtime;
  u8 n_addrs;
  vl_api_address_t addrs[n_addrs];
};

/** \brief VRRP: start or shutdown the VRRP protocol for a virtual router
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param sw_if_index - interface ID that VR is backing up
    @param vr_id - VR ID
    @param is_ipv6 - 1 for IPv6, 0 for IPv4
    @param is_start - 1 to start VRRP proto on this VR, 0 to shutdown
*/
autoreply define vrrp_vr_start_stop {
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u8 vr_id;
  u8 is_ipv6;
  u8 is_start;
};

/** \brief VRRP: set unicast peers for a VR
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param sw_if_index - interface ID that VR is backing up
    @param vr_id - VR ID
    @param is_ipv6 - 1 for IPv6, 0 for IPv4
    @param n_addrs - number of peer addresses
    @param addrs - peer addresses 
*/
autoreply define vrrp_vr_set_peers {
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u8 vr_id;
  u8 is_ipv6;
  u8 n_addrs;
  vl_api_address_t addrs[n_addrs];
};

/** \brief VRRP: dump virtual router peer address data
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param sw_if_index - interface (0,~0 == "all" -> ignore is_ipv6 & vr_id))
    @param is_ipv6 - 0 -> IPv4, 1 -> IPv6
    @param vr_id - ID of VR to dump
*/
define vrrp_vr_peer_dump {
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u8 is_ipv6;
  u8 vr_id;
};

/** \brief VRRP: VR peer dump response
    @param context - sender context which was passed in the request
    @param sw_if_index - interface index
    @param is_ipv6 - 0 -> IPv4, 1 -> IPv6
    @param vr_id - ID of VR
    @param n_peer_addrs - number of peer addresses
    @param peer_addrs - peer addresses 
*/
define vrrp_vr_peer_details {
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u8 vr_id;
  u8 is_ipv6;
  u8 n_peer_addrs;
  vl_api_address_t peer_addrs[n_peer_addrs];
};

/** \brief VR interface tracking
    @param sw_if_index - the interface index to track (not the VR sw_if_index)
    @param priority - the adjustment to VR priority if intf is down
*/
typedef vrrp_vr_track_if
{
  vl_api_interface_index_t sw_if_index;
  u8 priority;
};

/** \brief VRRP: Add/delete VR priority tracking of interface status
    @param context - sender context which was passed in the request
    @param sw_if_index - interface index
    @param is_ipv6 - 0 -> IPv4, 1 -> IPv6
    @param vr_id - ID of VR
    @param is_add - 0 -> delete, 1 -> add
    @param n_ifs - number of interface tracking records
    @param ifs - array of interface tracking records
*/
autoreply define vrrp_vr_track_if_add_del
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u8 is_ipv6;
  u8 vr_id;
  u8 is_add;
  u8 n_ifs;
  vl_api_vrrp_vr_track_if_t ifs[n_ifs];
};

/** \brief VRRP: dump virtual router interface tracking data
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param sw_if_index - interface
    @param is_ipv6 - 0 -> IPv4, 1 -> IPv6
    @param vr_id - ID of VR to dump
    @param dump_all - dump all VR interface tracking, ignore other fields
*/
define vrrp_vr_track_if_dump {
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u8 is_ipv6;
  u8 vr_id;
  u8 dump_all;
};

/** \brief VRRP: VR interface tracking dump response
    @param context - sender context which was passed in the request
    @param sw_if_index - interface index
    @param is_ipv6 - 0 -> IPv4, 1 -> IPv6
    @param vr_id - ID of VR
    @param n_ifs - number of tracked interfaces
    @param ifs - array of tracked interface data
*/
define vrrp_vr_track_if_details {
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u8 vr_id;
  u8 is_ipv6;
  u8 n_ifs;
  vl_api_vrrp_vr_track_if_t ifs[n_ifs];
};

/** \brief Notification about VRRP VR state change event
    @param client_index - opaque cookie to identify the sender
    @param pid - client pid registered to receive notification
    @param vr - configuration parameters identifying the VR
    @param old_state - old state of VR
    @param new_state - new state of VR
*/
define vrrp_vr_event
{
  u32 client_index;
  u32 pid;
  vl_api_vrrp_vr_key_t vr;
  vl_api_vrrp_vr_state_t old_state;
  vl_api_vrrp_vr_state_t new_state;
};

service {
  rpc want_vrrp_vr_events returns want_vrrp_vr_events_reply
    events vrrp_vr_event;
};

/** \brief Register for VRRP VR state change events
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param enable_disable - 1 to register, 0 to cancel registration
    @param pid - sender's pid
*/
autoreply define want_vrrp_vr_events
{
  u32 client_index;
  u32 context;
  bool enable_disable;
  u32 pid;
};
