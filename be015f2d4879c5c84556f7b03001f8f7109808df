{
  "comments": [
    {
      "key": {
        "uuid": "d72babcc_19935a93",
        "filename": "src/vlibmemory/vlib_api_api.c",
        "patchSetId": 8
      },
      "lineNbr": 1,
      "author": {
        "id": 193
      },
      "writtenOn": "2021-05-05T19:43:17Z",
      "side": 1,
      "message": "Any particular reason why this is not part of vlib_api.c and the vlib_api.api part of memclnt.api. The latter is a misnomer as it has in it apis for socket clients as well.",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 2
      },
      "revId": "be015f2d4879c5c84556f7b03001f8f7109808df",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c5fa1ef_4e402561",
        "filename": "src/vlibmemory/vlib_api_api.c",
        "patchSetId": 8
      },
      "lineNbr": 1,
      "author": {
        "id": 1496
      },
      "writtenOn": "2021-05-05T21:40:51Z",
      "side": 1,
      "message": "Hi Florin.\n\nI don\u0027t know how widespread the practice is, but vpp_papi has a dependency on the structure of memclnt.api file.  The positions of messages 15/16 must not change.  I don\u0027t know if there is a way to statically assign message ids for certain critical/bootstrapping messages, but it would be great if we could. \n\n        # Initialise sockclnt_create\n        sockclnt_create \u003d self.parent.messages[\u0027sockclnt_create\u0027]\n        sockclnt_create_reply \u003d self.parent.messages[\u0027sockclnt_create_reply\u0027]\n\n        args \u003d {\u0027_vl_msg_id\u0027: 15,\n                \u0027name\u0027: name,\n                \u0027context\u0027: 124}\n        b \u003d sockclnt_create.pack(args)\n        self.write(b)\n        msg \u003d self._read()\n        hdr, length \u003d self.parent.header.unpack(msg, 0)\n        if hdr.msgid !\u003d 16:",
      "parentUuid": "d72babcc_19935a93",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 2
      },
      "revId": "be015f2d4879c5c84556f7b03001f8f7109808df",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe7cf5dc_f0e0a17d",
        "filename": "src/vlibmemory/vlib_api_api.c",
        "patchSetId": 8
      },
      "lineNbr": 1,
      "author": {
        "id": 193
      },
      "writtenOn": "2021-05-05T22:49:10Z",
      "side": 1,
      "message": "Hi Paul, \n\nAdding a new message at the end of memclnt.api should not affect the order of the first messages to be registered but it will shift everything else. \n\nAs for statically assigned messages, I suspect we can\u0027t do anything beyond maintaining a strict order for the ones registered by the api implementation, i.e., the ones in vl_memory_api_h.h, which are registered first.",
      "parentUuid": "4c5fa1ef_4e402561",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 2
      },
      "revId": "be015f2d4879c5c84556f7b03001f8f7109808df",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4388e359_4e98bfb2",
        "filename": "src/vlibmemory/vlib_api_api.c",
        "patchSetId": 8
      },
      "lineNbr": 1,
      "author": {
        "id": 1496
      },
      "writtenOn": "2021-05-06T00:17:04Z",
      "side": 1,
      "message": "\u003e Hi Paul, \n\u003e \n\u003e Adding a new message at the end of memclnt.api should not affect the order of the first messages to be registered but it will shift everything else. \n\nAgreed.  We should probably document the fact in the .api file.\n\n\u003e \n\u003e As for statically assigned messages, I suspect we can\u0027t do anything beyond maintaining a strict order for the ones registered by the api implementation, i.e., the ones in vl_memory_api_h.h, which are registered first.\n\nThis is directed more toward Ole, but I believe this is a relatively simple addition.  vppapigen_c can determine the order in which it renders the messages, but isn\u0027t very useful beyond the first file.  Might not be worth the effort, until you consider the api process.",
      "parentUuid": "fe7cf5dc_f0e0a17d",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 2
      },
      "revId": "be015f2d4879c5c84556f7b03001f8f7109808df",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45293943_3f7a7947",
        "filename": "src/vlibmemory/vlib_api_api.c",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 193
      },
      "writtenOn": "2021-05-05T19:43:17Z",
      "side": 1,
      "message": "Can we reuse vl_msg_api_trace_save?",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 31
      },
      "revId": "be015f2d4879c5c84556f7b03001f8f7109808df",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70c6214b_df4afa18",
        "filename": "src/vlibmemory/vlib_api_api.c",
        "patchSetId": 8
      },
      "lineNbr": 96,
      "author": {
        "id": 193
      },
      "writtenOn": "2021-05-05T19:43:17Z",
      "side": 1,
      "message": "Why not use vl_msg_api_process_file? Ideally we should have only one implementation for this.",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 96,
        "endChar": 23
      },
      "revId": "be015f2d4879c5c84556f7b03001f8f7109808df",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}