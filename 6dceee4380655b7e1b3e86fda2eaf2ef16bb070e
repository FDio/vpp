{
  "comments": [
    {
      "key": {
        "uuid": "6e7f0f06_6d351000",
        "filename": "src/vnet/interface.h",
        "patchSetId": 13
      },
      "lineNbr": 508,
      "author": {
        "id": 361
      },
      "writtenOn": "2020-03-27T15:04:54Z",
      "side": 1,
      "message": "We are burning lots of bits for different GSO mode. Should we keep only VNET_HW_INTERFACE_FLAG_SUPPORTS_GSO and add a field near the end of the struct vnet_hw_interface_t to store the various modes?",
      "revId": "6dceee4380655b7e1b3e86fda2eaf2ef16bb070e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fb5c192_e276be3e",
        "filename": "src/vnet/interface.h",
        "patchSetId": 13
      },
      "lineNbr": 508,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-03-31T10:48:50Z",
      "side": 1,
      "message": "These flags are required to show hardware capabilities in VPP.\nXL710 tx offload available:  ipv4-cksum udp-cksum tcp-cksum sctp-cksum  tcp-tso outer-ipv4-cksum vxlan-tnl-tso gre-tnl-tso ipip-tnl-tso geneve-tnl-tso",
      "parentUuid": "6e7f0f06_6d351000",
      "revId": "6dceee4380655b7e1b3e86fda2eaf2ef16bb070e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41e6c7e6_56413bf8",
        "filename": "src/vnet/interface.h",
        "patchSetId": 13
      },
      "lineNbr": 508,
      "author": {
        "id": 361
      },
      "writtenOn": "2020-04-01T08:10:47Z",
      "side": 1,
      "message": "I understand we need them. My point was to split it into 2: use 1 bit in vnet_hw_interface_flags and add next \u0027extended hw interface flags\u0027 field somewhere at the bottom. If VNET_HW_INTERFACE_FLAG_SUPPORTS_GSO is set then check the extended flags to know which GSO type is supported.",
      "parentUuid": "5fb5c192_e276be3e",
      "revId": "6dceee4380655b7e1b3e86fda2eaf2ef16bb070e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "102ae0cc_e3e886ad",
        "filename": "src/vnet/interface_output.c",
        "patchSetId": 13
      },
      "lineNbr": 177,
      "author": {
        "id": 361
      },
      "writtenOn": "2020-03-27T15:04:54Z",
      "side": 1,
      "message": "It would be better if we could consolidate that into vnet_gso_header_offset_parser() so that interface_output() remains generic. This is GSO detail leaking out of the GSO infra.",
      "revId": "6dceee4380655b7e1b3e86fda2eaf2ef16bb070e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bf2e751_22b430fb",
        "filename": "src/vnet/interface_output.c",
        "patchSetId": 13
      },
      "lineNbr": 177,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-03-31T10:48:50Z",
      "side": 1,
      "message": "It has nothing to do with GSO. I can rename the flag to preserve the genericness and it is required here to advance the outer header to calculate the checksums of inner header.",
      "parentUuid": "102ae0cc_e3e886ad",
      "revId": "6dceee4380655b7e1b3e86fda2eaf2ef16bb070e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c162be5f_8c8304be",
        "filename": "src/vnet/interface_output.c",
        "patchSetId": 13
      },
      "lineNbr": 177,
      "author": {
        "id": 361
      },
      "writtenOn": "2020-04-01T08:10:47Z",
      "side": 1,
      "message": "My point was the other \u0027gho\u0027 fixups are done in vnet_gso_header_offset_parser() and this one should be done there too if we can",
      "parentUuid": "5bf2e751_22b430fb",
      "revId": "6dceee4380655b7e1b3e86fda2eaf2ef16bb070e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d2a7ce8_bdaf50fe",
        "filename": "src/vnet/interface_output.c",
        "patchSetId": 13
      },
      "lineNbr": 228,
      "author": {
        "id": 361
      },
      "writtenOn": "2020-03-27T15:04:54Z",
      "side": 1,
      "message": "Same as above: could it be generic regardless of vxlan or not? eg. test for PREDICT_FALSE(gho.gso_flags \u0026 (GSO_F_OUTER_IP4|GSO_F_OUTER_IP6)) instead.\nIn case in the future we need to support yet another GSO mode (NVGRE?)...",
      "revId": "6dceee4380655b7e1b3e86fda2eaf2ef16bb070e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a58fcbbe_1aefff05",
        "filename": "src/vnet/interface_output.c",
        "patchSetId": 13
      },
      "lineNbr": 228,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-03-31T10:48:50Z",
      "side": 1,
      "message": "GSO_F_OUTER_IP or GSO_F_OUTER_IP6 will not tell us tunnel type and hence there is no hint on header length, we need to advance.",
      "parentUuid": "7d2a7ce8_bdaf50fe",
      "revId": "6dceee4380655b7e1b3e86fda2eaf2ef16bb070e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "099fe3a9_6dc05d0c",
        "filename": "src/vnet/interface_output.c",
        "patchSetId": 13
      },
      "lineNbr": 228,
      "author": {
        "id": 361
      },
      "writtenOn": "2020-04-01T08:10:47Z",
      "side": 1,
      "message": "My point was outer_header could be updated in gho struct by vnet_gso_header_offset_parser() so that we can use it here w/o knowing which kind of tunnel it is",
      "parentUuid": "a58fcbbe_1aefff05",
      "revId": "6dceee4380655b7e1b3e86fda2eaf2ef16bb070e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}