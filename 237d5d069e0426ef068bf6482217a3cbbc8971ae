{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fbf599ea_9283d0ff",
        "filename": "src/plugins/perfmon/arm/bundle/branch_pred.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-01T15:52:57Z",
      "side": 1,
      "message": "perhaps instead of all the verbosity of checking b-\u003eevent_enabled every time, we could just sure that calls to disabled events never make it as far as format_xyz?",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 22
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0514ec74_b4a26e22",
        "filename": "src/plugins/perfmon/arm/bundle/branch_pred.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-02T08:04:36Z",
      "side": 1,
      "message": "I\u0027m not sure how to make this work since the column headers are fixed, and dynamically generating this kind of formatting info becomes difficult. It is verbose, but I haven\u0027t been able to think of a better way to do it.",
      "parentUuid": "fbf599ea_9283d0ff",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 22
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0bde515_6f6224f2",
        "filename": "src/plugins/perfmon/arm/bundle/branch_pred.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-02T16:06:58Z",
      "side": 1,
      "message": "Isn\u0027t it just a matter of maintaining a bitmap of what fields are enabled in each bundle, and then checking the bit before dispatching to format_xyz?",
      "parentUuid": "0514ec74_b4a26e22",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 22
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a52462b3_fd8dbafd",
        "filename": "src/plugins/perfmon/arm/bundle/branch_pred.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-06T14:20:27Z",
      "side": 1,
      "message": "Ah right - yep, I understand. I think we can make the check in table.c:table_format_cell(), which calls the bundle-\u003eformat_fn. This would clean up this code a lot.",
      "parentUuid": "c0bde515_6f6224f2",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 22
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fba95f3_de4a7588",
        "filename": "src/plugins/perfmon/arm/bundle/branch_pred.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-06T15:01:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a52462b3_fd8dbafd",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 22
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1ec1490_c0c6e614",
        "filename": "src/plugins/perfmon/arm/bundle/branch_pred.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-10-29T15:18:25Z",
      "side": 1,
      "message": "I\u0027ve reworked this a fair bit now, I think it\u0027s an improvement. Since we have to disable some columns where they include unsupported events, we still need to specify in each bundle which events are used by each column. Overall though it\u0027s far less verbose. \n\nAlso, checking what events in a bundle are supported is now done on VPP/perfmon startup/init, so we can avoid registering/adding bundles where none of the events are supported.",
      "parentUuid": "4fba95f3_de4a7588",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 22
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8232c0ce_1407e630",
        "filename": "src/plugins/perfmon/arm/dispatch_wrapper.c",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-01T15:52:57Z",
      "side": 1,
      "message": "this is very close to how the intel perfmon_dispatch_wrapper_mmap works right, \nwith small differences to how the mmap is ready. \nwe should try to make as much of the code common as possible?",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 25
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25d8477a_8d666ebf",
        "filename": "src/plugins/perfmon/arm/dispatch_wrapper.c",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-02T08:04:36Z",
      "side": 1,
      "message": "You\u0027re right, this function is basically identical to Intel\u0027s perfmon_dispatch_wrapper_mmap() so maybe we can extract this to a common file and keep x86/Arm specific stuff in separate files? \n\nSince the patch changing how x86 reads (https://gerrit.fd.io/r/c/vpp/+/33380), x86 and Arm and definitely more aligned but there still a lot of arch specific stuff. I think separate files over lots of \"#if defined(__\u003caarch\u003e__) blocks is preferred if possible.",
      "parentUuid": "8232c0ce_1407e630",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 25
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25711cc1_55dd85fc",
        "filename": "src/plugins/perfmon/arm/dispatch_wrapper.c",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-02T16:06:58Z",
      "side": 1,
      "message": "I don\u0027t see that we would lots of #ifdef\u0027s though, we should be able to keep it to just one.",
      "parentUuid": "25d8477a_8d666ebf",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 25
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ba46b26_b381f019",
        "filename": "src/plugins/perfmon/arm/dispatch_wrapper.c",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-06T14:20:27Z",
      "side": 1,
      "message": "It\u0027s possible, but then we would still have a mix of Arm/Intel functions in a single file? I think it would be cleaner to keep the Arm/Intel specific code separate in the /arm + /intel directories.",
      "parentUuid": "25711cc1_55dd85fc",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 25
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec3d4a58_7bdeea2b",
        "filename": "src/plugins/perfmon/arm/dispatch_wrapper.c",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-06T15:01:46Z",
      "side": 1,
      "message": "I think that is solvable with machine specific includes and a single define\n\n#ifdef X86_IS_THE_BEST\n#include \"intel/dispatch_wrapper.h\"\n#endif \n\nintel/dispatch_wrapper.h would then define your machine specific variant of read_pmc_from_mma.\n\nThe Linux UAPI does this ...",
      "parentUuid": "9ba46b26_b381f019",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 25
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ad9321f_ea771efe",
        "filename": "src/plugins/perfmon/arm/dispatch_wrapper.c",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-06T15:29:20Z",
      "side": 1,
      "message": "Sounds good. I\u0027ll see what can be done.",
      "parentUuid": "ec3d4a58_7bdeea2b",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 25
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2451f05f_cc979ede",
        "filename": "src/plugins/perfmon/arm/dispatch_wrapper.c",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 2465
      },
      "writtenOn": "2022-05-23T14:27:20Z",
      "side": 1,
      "message": "dispatch_wrapper.c is now very different again with the index caching etc so I\u0027ve kept them separate. I\u0027ve used both the #ifdef you suggested above and an extern that pulls in the definition from the arch specific dispatch_wrapper.c file though. See what you think: https://gerrit.fd.io/r/c/vpp/+/36191",
      "parentUuid": "9ad9321f_ea771efe",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 25
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a708757a_8faf2a83",
        "filename": "src/plugins/perfmon/arm/dispatch_wrapper.c",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 540
      },
      "writtenOn": "2022-06-16T18:24:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2451f05f_cc979ede",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 25
      },
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d2e8231_4a165eef",
        "filename": "src/plugins/perfmon/cli.c",
        "patchSetId": 1
      },
      "lineNbr": 331,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-01T15:52:57Z",
      "side": 1,
      "message": "please use /* */",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccceb3ae_2d238c27",
        "filename": "src/plugins/perfmon/cli.c",
        "patchSetId": 1
      },
      "lineNbr": 331,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-02T08:04:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4d2e8231_4a165eef",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4808a70_a892b75f",
        "filename": "src/plugins/perfmon/perfmon.c",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-01T15:52:57Z",
      "side": 1,
      "message": "do we need a warning? better to just silently fail?",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc60c764_5ad7255e",
        "filename": "src/plugins/perfmon/perfmon.c",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-02T08:04:36Z",
      "side": 1,
      "message": "I think we could silently fail instead. I was originally thinking from a user perspective it might help explain why certain events in the output show up as \u0027-\u0027. Maybe that\u0027s implicit.",
      "parentUuid": "f4808a70_a892b75f",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6ff4466_76375048",
        "filename": "src/plugins/perfmon/perfmon.c",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-10-29T15:18:25Z",
      "side": 1,
      "message": "We now silently fail (at least only print to debug log) if a bundle is partially supported. Only if a bundle is entirely unsupported (i.e. no events in it are implemented) is a message displayed on VPP/perfmon startup.",
      "parentUuid": "fc60c764_5ad7255e",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6e4fae8_d9ca4d4c",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-01T15:52:57Z",
      "side": 1,
      "message": "I suspect we are going to need a mechanism for making this cpu specific.",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de4f9a41_e294aebc",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-02T08:04:36Z",
      "side": 1,
      "message": "Probably. I think in theory it\u0027s possible some Arm CPUs may have less than this, but I need to do some digging. In practice 6 event + 1 cycle seems common.",
      "parentUuid": "b6e4fae8_d9ca4d4c",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cedcde83_f32b7936",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 2465
      },
      "writtenOn": "2022-05-23T14:27:20Z",
      "side": 1,
      "message": "Due to some quirks of how Arm opens events on Linux, it\u0027s not always exactly possible to determine how many counters are available. It\u0027s actually possible to open more events than physical counters, and the kernel will rotate them over the available counters over time (if I understood it correctly). Also since other user applications can open userspace counters alongside VPP they might not be available anyway. On Arm the only way is to attempt to open all events per core as a group, this will then fail to add each additional event to the group if there are not enough counters available.\n\nI don\u0027t personally think that\u0027s ideal but it\u0027s what we have to work with at the moment.\n\nSo I think what we currently have in perfmon is fine for Arm - if there are not enough counters available for a particular bundle, perf_event_open will fail since it does use groups per core/thread (and then `perfmon start` will fail to open that bundle).",
      "parentUuid": "de4f9a41_e294aebc",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "deeec902_2204ad38",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 540
      },
      "writtenOn": "2022-06-23T14:04:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cedcde83_f32b7936",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "051209db_094a0717",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-01T15:52:57Z",
      "side": 1,
      "message": "would this be more robust as bitmask?",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1348df1_710ea066",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-02T08:04:36Z",
      "side": 1,
      "message": "Can you give an example how this would work?\n\nWe are checking if n_events \u003d\u003d n_events_implemented in cli.c to figure out if we need to fix formatting/alignment or not.\n\nI considered event_enabled[PERF_MAX_EVENTS] as a bitmap but that seems overkill.",
      "parentUuid": "051209db_094a0717",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c8a61da_40efe13d",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-02T16:06:58Z",
      "side": 1,
      "message": "n_events_implemented seems to be a counter right, \nSo if n_events_implemented !\u003d n_events, you know that some events are disabled.\nI was just pointing out ... it would be more obvious to indicate which events are enabled and disabled with a bitmaps.\n\nSo that ....\n\nIf there where a total of 4 events and if event[1] was disable.\nThere would be a bit mask of 0xC (i.e. 1101) - easy to check, easy to understand. \n\nThe alternative would be to just remove disabled events from events[]",
      "parentUuid": "b1348df1_710ea066",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc38b683_24bf8d51",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-06T14:20:27Z",
      "side": 1,
      "message": "That is how event_enabled[PERF_MAX_EVENTS] is operating, albeit with (slightly) more memory. You\u0027re right a bitmask to go on top of events[PERF_MAX_EVENTS] would probably nicer overall.\n\nShould be easy to do with clib_bitmap_alloc(), clib_bitmap_set/get(). I\u0027ll add it to the list of improvements.\n\nI think if we can remove the if !b-\u003eevent_enabled[x] checks in all bundles as per your previous comment, then that will overall clean things up nicely.\n\nI haven\u0027t fully checked, but I suspect removing disabled items from events[] would mess up the alignment since column headers are not dynamic. There would be a fair bit of extra work to dynamically display column headers since we\u0027d need to check which events are used under each header somehow.",
      "parentUuid": "9c8a61da_40efe13d",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "baf1c824_29a8060a",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-06T15:01:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bc38b683_24bf8d51",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08c30231_5cca6bf2",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-10-29T15:18:25Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "baf1c824_29a8060a",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2eeaf93_5ed4af91",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 540
      },
      "writtenOn": "2021-09-01T15:52:57Z",
      "side": 1,
      "message": "avoid formatting changes",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6e49bfc_1b652bab",
        "filename": "src/plugins/perfmon/perfmon.h",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 2465
      },
      "writtenOn": "2021-09-02T08:04:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f2eeaf93_5ed4af91",
      "revId": "237d5d069e0426ef068bf6482217a3cbbc8971ae",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}