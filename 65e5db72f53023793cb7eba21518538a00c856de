{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0f65207f_d887dc08",
        "filename": "src/plugins/wireguard/wireguard_input.c",
        "patchSetId": 7
      },
      "lineNbr": 812,
      "author": {
        "id": 1388
      },
      "writtenOn": "2023-01-25T14:30:02Z",
      "side": 1,
      "message": "If understand correctly, currently, `wmp-\u003emax_handshake_cookie` represents the rate the server can generate cookie messages as this branch is only executed when a cookie was replied. And looking at the updated version of `wg_if_is_under_load()`, `wmp-\u003emax_handshake_cookie` is used there as if it was the rate the server can process handshake messages. The latter seems to be correct for me.\n\nCan you clarify what the intension of `wmp-\u003emax_handshake_cookie` is?",
      "revId": "65e5db72f53023793cb7eba21518538a00c856de",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0575f724_d2462496",
        "filename": "src/plugins/wireguard/wireguard_input.c",
        "patchSetId": 7
      },
      "lineNbr": 812,
      "author": {
        "id": 2479
      },
      "writtenOn": "2023-01-25T14:50:05Z",
      "side": 1,
      "message": "\u0027wmp-\u003emax_handshake_cookie\u0027 - represents the rate the server can generate cookie messages and is used in \u0027wg_if_is_under_load()\u0027 because reply by cookie is much faster than do handshake process from the beginning to the end, so the rate is higher and this value is used to determinate under-load state in wireguard.",
      "parentUuid": "0f65207f_d887dc08",
      "revId": "65e5db72f53023793cb7eba21518538a00c856de",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "181b8968_2cd960b1",
        "filename": "src/plugins/wireguard/wireguard_input.c",
        "patchSetId": 7
      },
      "lineNbr": 812,
      "author": {
        "id": 1388
      },
      "writtenOn": "2023-01-25T15:51:42Z",
      "side": 1,
      "message": "So what you are saying is that some another rate, and not handshake messages processing rate,  is used to determine how many handshake messages the server can process in a certain time intrerval. That does not sound correct to me.\n\nCan you clarify why it is needed to artificially overestimate the rate the server is able to process handshake messages? And what are the reasons the actual handshake messages processing rate is not used?",
      "parentUuid": "0575f724_d2462496",
      "revId": "65e5db72f53023793cb7eba21518538a00c856de",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f85377c1_7194022e",
        "filename": "src/plugins/wireguard/wireguard_input.c",
        "patchSetId": 7
      },
      "lineNbr": 812,
      "author": {
        "id": 2479
      },
      "writtenOn": "2023-01-26T12:06:41Z",
      "side": 1,
      "message": "In this patch we calculate number of cookie messages VPP can reply, and we use this number to determinate if wg should be in under-load state or not. At the beginning of this process this number is set up to a priori value, but gradually with time it will get tuned to the desired value, which later depending on the traffic will only fluctuate.\n\nIn ‘wg_if_is_under_load()’ we predict the moment when we have to switch to under-load state when we have to reply by cookie message because we don’t have enough time to process all messages in normal way. Still by using cookie WG will be able to response. \n\nWG will update the number of ongoing handshakes in inflight variable – how many packets handoffs will be made from other to main thread, and if the time to consume these packets by cookie messages will be longer than the remaining time for each REKEY_TIME then we switch to under-load state and WG will reply all messages by sending a cookie.",
      "parentUuid": "181b8968_2cd960b1",
      "revId": "65e5db72f53023793cb7eba21518538a00c856de",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3586f065_ee559cb8",
        "filename": "src/plugins/wireguard/wireguard_input.c",
        "patchSetId": 7
      },
      "lineNbr": 812,
      "author": {
        "id": 1388
      },
      "writtenOn": "2023-01-26T13:22:07Z",
      "side": 1,
      "message": "Basically, you are describing what the code in this patch does and not answering my questions above.\n\n\u003e Can you clarify why it is needed to artificially overestimate the rate the server is able to process handshake messages? And what are the reasons the actual handshake messages processing rate is not used?\n\nThe server should switch to the under load state when it cannot keep up with processing of all the handshake messages it is receiving. So the server needs to answer the question whether the current handshake messages rate is acceptable for it or the rate will cause high load. There are different ways of how this question might be answered. As can be seen, this patch chooses to answer this question based on an average historical time of how long it took to process a single handshake message previously. But in fact, the average time being used represents a totally different value - average time of generation a cookie reply (which is much lower). Will the server be able to estimate handshake messages processing performance if use a rate of another activity? I don\u0027t think so.\n\nAlso, can you describe how this code is tested? Do you test an initial handshake messages storm? That might work only because of the magic number that `wmp-\u003emax_handshake_cookie` is initialized with. Do you test a handshake messages storm after the initial one stops? And how many of them? Does the server switch to the under load state?",
      "parentUuid": "f85377c1_7194022e",
      "revId": "65e5db72f53023793cb7eba21518538a00c856de",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99836a96_a02dab33",
        "filename": "src/plugins/wireguard/wireguard_input.c",
        "patchSetId": 7
      },
      "lineNbr": 812,
      "author": {
        "id": 2479
      },
      "writtenOn": "2023-01-26T14:29:37Z",
      "side": 1,
      "message": "I\u0027ve tested wg setup with 10k tunnels and 10k peers. 10k wg interfaces have been configured with 10k peers on both sides vpp DUT1 and DUT2, flows for these tunnels have been generated. After a few seconds flows were stopped. After 10-15 minutes pause, traffic has been resumed again with the same amount of flows for each tunnel. In such scenario, I observed under-load state for wg with this patch applied. On the other hand, in case of the original implementation the under-load state in such scenario will not occur at all. \n\nThe current handshake processing rate is not used for prediction because it was calculated for each interface separately and it doesn\u0027t reflect the rate for all interfaces together. The main thread though handles handshakes for all interfaces and for each peer performs handshake process.\n\nI agree that the value for handshake rate for cookie is overestimated, as based on the time spend in calling function for handshake process, and this value gives aggressive estimation, but I also think that it is better to have higher value and enable under load state early, instead of waiting too long for enabling this state and in result become unresponsive.",
      "parentUuid": "3586f065_ee559cb8",
      "revId": "65e5db72f53023793cb7eba21518538a00c856de",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}