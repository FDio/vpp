{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0f65207f_d887dc08",
        "filename": "src/plugins/wireguard/wireguard_input.c",
        "patchSetId": 7
      },
      "lineNbr": 812,
      "author": {
        "id": 1388
      },
      "writtenOn": "2023-01-25T14:30:02Z",
      "side": 1,
      "message": "If understand correctly, currently, `wmp-\u003emax_handshake_cookie` represents the rate the server can generate cookie messages as this branch is only executed when a cookie was replied. And looking at the updated version of `wg_if_is_under_load()`, `wmp-\u003emax_handshake_cookie` is used there as if it was the rate the server can process handshake messages. The latter seems to be correct for me.\n\nCan you clarify what the intension of `wmp-\u003emax_handshake_cookie` is?",
      "revId": "65e5db72f53023793cb7eba21518538a00c856de",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0575f724_d2462496",
        "filename": "src/plugins/wireguard/wireguard_input.c",
        "patchSetId": 7
      },
      "lineNbr": 812,
      "author": {
        "id": 2479
      },
      "writtenOn": "2023-01-25T14:50:05Z",
      "side": 1,
      "message": "\u0027wmp-\u003emax_handshake_cookie\u0027 - represents the rate the server can generate cookie messages and is used in \u0027wg_if_is_under_load()\u0027 because reply by cookie is much faster than do handshake process from the beginning to the end, so the rate is higher and this value is used to determinate under-load state in wireguard.",
      "parentUuid": "0f65207f_d887dc08",
      "revId": "65e5db72f53023793cb7eba21518538a00c856de",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "181b8968_2cd960b1",
        "filename": "src/plugins/wireguard/wireguard_input.c",
        "patchSetId": 7
      },
      "lineNbr": 812,
      "author": {
        "id": 1388
      },
      "writtenOn": "2023-01-25T15:51:42Z",
      "side": 1,
      "message": "So what you are saying is that some another rate, and not handshake messages processing rate,  is used to determine how many handshake messages the server can process in a certain time intrerval. That does not sound correct to me.\n\nCan you clarify why it is needed to artificially overestimate the rate the server is able to process handshake messages? And what are the reasons the actual handshake messages processing rate is not used?",
      "parentUuid": "0575f724_d2462496",
      "revId": "65e5db72f53023793cb7eba21518538a00c856de",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f85377c1_7194022e",
        "filename": "src/plugins/wireguard/wireguard_input.c",
        "patchSetId": 7
      },
      "lineNbr": 812,
      "author": {
        "id": 2479
      },
      "writtenOn": "2023-01-26T12:06:41Z",
      "side": 1,
      "message": "In this patch we calculate number of cookie messages VPP can reply, and we use this number to determinate if wg should be in under-load state or not. At the beginning of this process this number is set up to a priori value, but gradually with time it will get tuned to the desired value, which later depending on the traffic will only fluctuate.\n\nIn ‘wg_if_is_under_load()’ we predict the moment when we have to switch to under-load state when we have to reply by cookie message because we don’t have enough time to process all messages in normal way. Still by using cookie WG will be able to response. \n\nWG will update the number of ongoing handshakes in inflight variable – how many packets handoffs will be made from other to main thread, and if the time to consume these packets by cookie messages will be longer than the remaining time for each REKEY_TIME then we switch to under-load state and WG will reply all messages by sending a cookie.",
      "parentUuid": "181b8968_2cd960b1",
      "revId": "65e5db72f53023793cb7eba21518538a00c856de",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}