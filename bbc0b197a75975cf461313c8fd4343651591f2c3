{
  "comments": [
    {
      "key": {
        "uuid": "45581f85_178a78ad",
        "filename": "src/vnet/crypto/crypto.c",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1849
      },
      "writtenOn": "2019-08-09T08:44:03Z",
      "side": 1,
      "message": "Hi, this part raises a bit concern to me. To me this part is too multi-core CPU based crypto oriented. Let Quickassist goes through this code will suffer the performance quite a bit.",
      "revId": "bbc0b197a75975cf461313c8fd4343651591f2c3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "627df583_6ee5800e",
        "filename": "src/vnet/crypto/crypto.c",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 189
      },
      "writtenOn": "2019-08-09T10:48:10Z",
      "side": 1,
      "message": "Could you please provide more details why is that? I\u0027m not sure what quickassist does",
      "parentUuid": "45581f85_178a78ad",
      "revId": "bbc0b197a75975cf461313c8fd4343651591f2c3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "079538c5_842e6780",
        "filename": "src/vnet/crypto/crypto.c",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1849
      },
      "writtenOn": "2019-08-09T11:26:31Z",
      "side": 1,
      "message": "What I meant was the crypto engine queue design.\n\nFrom your implementation I had the impression:\n1. The queue architecture is fixed in crypto interface.\n2. Although the API works in burst mode, the enqueue operation is done one at a time and the dequeue operation is purely atomic.\n\nThis way I believe will suit multi-core CPU based crypto engines nicely working towards the same queue to share the workload cached in this queue. \n \nHowever for Quickassist (QAT) the assumption is different:\n- A QAT hardware queue can support the ops with mixed algorithms(cipher/auth/aead, and chained), and the number of hardware queues per QAT VF is limited.\n- The cost of \"kicking\" the QAT hardware starting encryption is relatively high. So it is more preferably using burst operation mode, which means maing multiple ops pushed into and fetched out from QAT at one time. In this case the cost of \"kicking\" can be averaged out by the number of ops.\n\nTo me the queue architecture is crypto engine specific, so instead of sharing the queue operation detail amongst all crypto engines underneath, I think it is better to hide inside the crypto engine. The crypto interface implementation could only pass the queue index into the crypto engine.",
      "parentUuid": "627df583_6ee5800e",
      "revId": "bbc0b197a75975cf461313c8fd4343651591f2c3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3aa2245_a44c1a87",
        "filename": "src/vnet/crypto/crypto.h",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1849
      },
      "writtenOn": "2019-08-09T08:44:03Z",
      "side": 1,
      "message": "In case the hardware acceleration crypto engine is used (say Quickassist) can I get the physical addresses of buffer/digest/aad from this structure?",
      "revId": "bbc0b197a75975cf461313c8fd4343651591f2c3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2216b694_e76e77f8",
        "filename": "src/vnet/crypto/crypto.h",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 189
      },
      "writtenOn": "2019-08-09T10:48:10Z",
      "side": 1,
      "message": "\u0027vnet_crypto_op_t data\u0027 field contains everything you need. Buffer index is stored in user_data, so calling vlib_get_buffer() you get the buffer pointer.",
      "parentUuid": "a3aa2245_a44c1a87",
      "revId": "bbc0b197a75975cf461313c8fd4343651591f2c3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}