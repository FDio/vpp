{
  "comments": [
    {
      "key": {
        "uuid": "06906960_ea7729ea",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 680
      },
      "writtenOn": "2020-03-17T02:26:12Z",
      "side": 1,
      "message": "Sorry to ask. Do you know why we have to do the e-\u003eid checking? It is making the code complicated. According to the spec, id is used for indicating the index of the start of used descriptor chain.\n\n/* le32 is used here for ids for padding reasons. */ \nstruct virtq_used_elem { \n        /* Index of start of used descriptor chain. */ \n        le32 id; \n        /* Total length of the descriptor chain which was used (written to) */ \n        le32 len; \n};",
      "revId": "7f463369efb1a0f9879abd8d4531d0a231f71dca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "045ef064_84ee6384",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-03-17T09:37:32Z",
      "side": 1,
      "message": "Yes, e-\u003eid is \"Index of start of used descriptor chain\". But we don\u0027t care of chain buffers as vlib_buffer_free will take care of it.\nWe want to use single call vlib_buffer_free to free maximum used buffers at once. So we are checking for consecutive used descriptors, each representing a different packet (either contain a buffer and/or buffers chain).",
      "parentUuid": "06906960_ea7729ea",
      "revId": "7f463369efb1a0f9879abd8d4531d0a231f71dca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3416394_022c0a6c",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 680
      },
      "writtenOn": "2020-03-17T14:43:02Z",
      "side": 1,
      "message": "My question is not on using a single call to free maximum used buffers. Instead, can we simply free the used buffers without check e-\u003eid? What would break if we simplify the entire function down to this?\n\n  u16 slot \u003d last \u0026 mask;\n  u16 n_buffers \u003d (n_left + slot);\n  vlib_buffer_free_from_ring (vm, vring-\u003ebuffers, slot,\n\t\t\t      sz, (n_buffers - slot));\n  used -\u003d n_left;\n  last +\u003d n_left;\n\n  vring-\u003edesc_in_use \u003d used;\n  vring-\u003elast_used_idx \u003d last;",
      "parentUuid": "045ef064_84ee6384",
      "revId": "7f463369efb1a0f9879abd8d4531d0a231f71dca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17c97448_85f32029",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-03-17T15:33:03Z",
      "side": 1,
      "message": "e-\u003eid and (last \u0026 mask) are two different values. In out of order case, last value is different than e-\u003eid. We can\u0027t use the above mentioned simplified technique.",
      "parentUuid": "d3416394_022c0a6c",
      "revId": "7f463369efb1a0f9879abd8d4531d0a231f71dca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d696c90c_04d459be",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 680
      },
      "writtenOn": "2020-03-17T16:57:22Z",
      "side": 1,
      "message": "Once OUT_OF_ORDER flag is set in the vring, it appears to be stuck in that state forever, like COVID-19. How do we get back to normal life, life without COVID-19?",
      "parentUuid": "17c97448_85f32029",
      "revId": "7f463369efb1a0f9879abd8d4531d0a231f71dca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c823fd_bc7a7a50",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-03-17T17:01:58Z",
      "side": 1,
      "message": "There is no way other than empty the used ring, avail ring and no desc/buffer in use i.e. something similar to when device initialize.",
      "parentUuid": "d696c90c_04d459be",
      "revId": "7f463369efb1a0f9879abd8d4531d0a231f71dca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e578edb7_c466215e",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 680
      },
      "writtenOn": "2020-03-17T17:12:55Z",
      "side": 1,
      "message": "This is expensive stuff. Perhaps one day we should consider to support VIRTIO_F_IN_ORDER feature and only do this out of order business when the IN_ORDER feature is not negotiated.",
      "parentUuid": "c4c823fd_bc7a7a50",
      "revId": "7f463369efb1a0f9879abd8d4531d0a231f71dca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd84379f_800e7fbf",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 680
      },
      "writtenOn": "2020-03-16T17:31:57Z",
      "side": 1,
      "message": "Is it intentional to turn on this flag and wipe out all other flags? It may not matter now because this is the only flag defined. It would cause problem in the future when more flags are defined and they just got reset here inadvertently..",
      "revId": "7f463369efb1a0f9879abd8d4531d0a231f71dca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}