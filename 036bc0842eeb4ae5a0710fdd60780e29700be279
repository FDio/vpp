{
  "comments": [
    {
      "key": {
        "uuid": "2c741e35_6c15c608",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 453
      },
      "writtenOn": "2018-05-08T20:02:32Z",
      "side": 1,
      "message": "Pointers should be tagged restrict because the x86 inline assembler code is treating the pointers as restricted (otherwise the source would be reloaded every time a destination has been written).",
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87035654_1939da82",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 999
      },
      "writtenOn": "2018-05-14T10:46:34Z",
      "side": 1,
      "message": "This is not needed. Remove all 0 based arithmetic",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 56
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eacf94da_5907f851",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 453
      },
      "writtenOn": "2018-05-14T11:30:38Z",
      "side": 1,
      "message": "This is not about being needed. This is about clarity (although that may be subjective).\nThe code is copying 64B in chunks of 16B so the code makes that explicit.\nThe compiler will optimise away any constant or unnecessary calculations.",
      "parentUuid": "87035654_1939da82",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 56
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e17c7dd_86ea65b4",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1364
      },
      "writtenOn": "2018-05-22T05:05:38Z",
      "side": 1,
      "message": "Yes, I see this happening in the generated code.",
      "parentUuid": "eacf94da_5907f851",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 56
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d6b71f4_cd1a5db2",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 453
      },
      "writtenOn": "2018-05-14T11:30:38Z",
      "side": 1,
      "message": "The code is performance pointer arithmetic on void pointer. That is not defined in C (but allowed by GCC). s/d0/d1/d2/d3 should be cast to e.g. char pointer before the pointer arithmetic.",
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e8d990c_945b3ec0",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 999
      },
      "writtenOn": "2018-05-14T10:46:34Z",
      "side": 1,
      "message": "Did you try running using uint64x2_t version. That is vld1q_u64/vst1_u64()? Any impact.",
      "range": {
        "startLine": 145,
        "startChar": 2,
        "endLine": 145,
        "endChar": 12
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4955961e_7eb90db1",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 453
      },
      "writtenOn": "2018-05-14T11:30:38Z",
      "side": 1,
      "message": "It is probably the same underlying instruction anyway.\nBut from a C language semantics perspective, using char pointers is probably safest and easiest.",
      "parentUuid": "0e8d990c_945b3ec0",
      "range": {
        "startLine": 145,
        "startChar": 2,
        "endLine": 145,
        "endChar": 12
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d95631c1_e6acdb36",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1364
      },
      "writtenOn": "2018-05-22T05:05:38Z",
      "side": 1,
      "message": "Currently, memcpy uses scalar versions of LDP/STP which do 128-bit accesses.\n\nThe neon intrinsics are using vector versions of LDR/STR. Currently, vector versions of LDP/STP (which should allow for using 2 128-bit registers) are not enabled in GCC as they are supposed to be not performing better than scalar versions.",
      "parentUuid": "4955961e_7eb90db1",
      "range": {
        "startLine": 145,
        "startChar": 2,
        "endLine": 145,
        "endChar": 12
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55b7bf40_52e2f059",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 999
      },
      "writtenOn": "2018-05-14T10:46:34Z",
      "side": 1,
      "message": "Please remove this.",
      "range": {
        "startLine": 147,
        "startChar": 29,
        "endLine": 147,
        "endChar": 35
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74f15f90_ddd09fe9",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 999
      },
      "writtenOn": "2018-05-14T10:46:34Z",
      "side": 1,
      "message": "Why is the need of * operation. Following can be written as\n\nvst1q_u8(d0 + 2*16, r2)\n\nvst1q_u8 (d0 + 32,r2), thereby decreasing number of instructions.",
      "range": {
        "startLine": 153,
        "startChar": 29,
        "endLine": 153,
        "endChar": 35
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dc2158c_c3f3986b",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 453
      },
      "writtenOn": "2018-05-14T11:30:38Z",
      "side": 1,
      "message": "The compiler will optimise expressions that are constant. Don\u0027t worry, be happy.",
      "parentUuid": "74f15f90_ddd09fe9",
      "range": {
        "startLine": 153,
        "startChar": 29,
        "endLine": 153,
        "endChar": 35
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee4b764e_500c1e63",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 1364
      },
      "writtenOn": "2018-05-08T02:09:04Z",
      "side": 1,
      "message": "Destination should be d1?",
      "range": {
        "startLine": 152,
        "startChar": 0,
        "endLine": 155,
        "endChar": 42
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45bead90_6b03a45b",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1364
      },
      "writtenOn": "2018-05-08T02:09:04Z",
      "side": 1,
      "message": "Destination should be d2?",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 160,
        "endChar": 42
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6c7c12a_e0bf0b23",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1364
      },
      "writtenOn": "2018-05-08T02:09:04Z",
      "side": 1,
      "message": "Destination should be d3?",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 165,
        "endChar": 42
      },
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b9b0f95_95073043",
        "filename": "src/vppinfra/string.h",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 453
      },
      "writtenOn": "2018-05-08T20:02:32Z",
      "side": 1,
      "message": "Use memcpy() instead and the compiler will inline loads and stores to perform the copy, no loop, no function call.\n\nWith the pointers tagged restrict, GCC for AArch64 will generate 4 LDP and 16 STP instructions, each loading or storing 16 bytes.\n\nSimilarly GCC for x86 will generate the equivalent SSE code (and probably AVX2/AVX512 instructions with the proper flags).\n\nIf you know your compiler, you seldom have to resort to architecture specific tricks.",
      "revId": "036bc0842eeb4ae5a0710fdd60780e29700be279",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}