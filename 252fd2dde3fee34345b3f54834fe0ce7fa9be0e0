{
  "comments": [
    {
      "key": {
        "uuid": "6f013090_3fd9bc45",
        "filename": "extras/vom/vom/interface.cpp",
        "patchSetId": 17
      },
      "lineNbr": 491,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T07:49:18Z",
      "side": 1,
      "message": "make this the operator\u003c\u003c overload for interface::stats",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e16f3e2b_bd5694d7",
        "filename": "extras/vom/vom/interface.hpp",
        "patchSetId": 17
      },
      "lineNbr": 274,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T07:49:18Z",
      "side": 1,
      "message": "i\u0027d suggest defining:\nstruct stats\n{\ncoutner_t rx;\ncounter_t rx_unicast\n... etc ...\n};\n\nand have a get/set method that returns/passes this struct.",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "017d00fd_ea933091",
        "filename": "extras/vom/vom/interface.hpp",
        "patchSetId": 17
      },
      "lineNbr": 274,
      "author": {
        "id": 241
      },
      "writtenOn": "2018-12-05T10:32:34Z",
      "side": 1,
      "message": "I was thinking the same. But VPP provide stats in quite weird way. Same type of stats are together for all interfaces. How stat_reader would create struct stats for an interface and initialize them with respective stat values.",
      "parentUuid": "e16f3e2b_bd5694d7",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "196001d7_b2a299e9",
        "filename": "extras/vom/vom/interface.hpp",
        "patchSetId": 17
      },
      "lineNbr": 274,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T11:43:30Z",
      "side": 1,
      "message": "not sure i understand your question.\n\ninstead of calling interface::set(counter, type) multiple times for the different types, construct and interface::stat ss(...) with each of the respective counter types and call interface::set(ss).",
      "parentUuid": "017d00fd_ea933091",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9b10f08_318fa7f2",
        "filename": "extras/vom/vom/stat_reader.cpp",
        "patchSetId": 17
      },
      "lineNbr": 26,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T07:49:18Z",
      "side": 1,
      "message": "how does one pass non default values to the stat_client?",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f7b051f_f7f755bb",
        "filename": "extras/vom/vom/stat_reader.cpp",
        "patchSetId": 17
      },
      "lineNbr": 26,
      "author": {
        "id": 241
      },
      "writtenOn": "2018-12-05T10:32:34Z",
      "side": 1,
      "message": "We are using the default constructor of stat_client. If one has to use the stat_client with custom constructor, he/she can call it directly stat_client class ;)\nLosing the functionality provided by stat_reader.",
      "parentUuid": "d9b10f08_318fa7f2",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81e1921c_9c3bf6df",
        "filename": "extras/vom/vom/stat_reader.cpp",
        "patchSetId": 17
      },
      "lineNbr": 26,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T11:43:30Z",
      "side": 1,
      "message": "but i want both the functionality of stat_reader and non-default constructor values.\nwhy can this constructor also take the same default constructor values and pass them to the stat_client?",
      "parentUuid": "0f7b051f_f7f755bb",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63f402ee_bb3a47d6",
        "filename": "extras/vom/vom/stat_reader.hpp",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T07:49:18Z",
      "side": 1,
      "message": "this type can be private",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "396c5999_94c9f82a",
        "filename": "extras/vom/vom/stat_reader.hpp",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 241
      },
      "writtenOn": "2018-12-05T10:32:34Z",
      "side": 1,
      "message": "It can\u0027t be private. See stat_reader.cpp line #22.",
      "parentUuid": "63f402ee_bb3a47d6",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b03a728_ecbde9a9",
        "filename": "extras/vom/vom/stat_reader.hpp",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T11:43:30Z",
      "side": 1,
      "message": "it should be private since nothing outside this class uses it.",
      "parentUuid": "396c5999_94c9f82a",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b814e597_af5fab7a",
        "filename": "extras/vom/vom/stat_reader.hpp",
        "patchSetId": 17
      },
      "lineNbr": 48,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T07:49:18Z",
      "side": 1,
      "message": "this is an index for which object type? interface, node, error, route...",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1f7113_bc17fec5",
        "filename": "extras/vom/vom/stat_reader.hpp",
        "patchSetId": 17
      },
      "lineNbr": 48,
      "author": {
        "id": 241
      },
      "writtenOn": "2018-12-05T10:32:34Z",
      "side": 1,
      "message": "At the moment, it is interface indexes.",
      "parentUuid": "b814e597_af5fab7a",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ecd684a_ead78c92",
        "filename": "extras/vom/vom/stat_reader.hpp",
        "patchSetId": 17
      },
      "lineNbr": 48,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T11:43:30Z",
      "side": 1,
      "message": "then either make the function name or the class name reflect that this is interfaces only not a generic stats reading interface.",
      "parentUuid": "0b1f7113_bc17fec5",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc0c15f6_4d50d711",
        "filename": "extras/vom/vom/stat_reader.hpp",
        "patchSetId": 17
      },
      "lineNbr": 58,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T07:49:18Z",
      "side": 1,
      "message": "no index is given and no stats are returned....",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "471badbe_b273154e",
        "filename": "extras/vom/vom/stat_reader.hpp",
        "patchSetId": 17
      },
      "lineNbr": 58,
      "author": {
        "id": 241
      },
      "writtenOn": "2018-12-05T10:32:34Z",
      "side": 1,
      "message": "It is doing the JOB internally!",
      "parentUuid": "cc0c15f6_4d50d711",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a09db235_0d516719",
        "filename": "extras/vom/vom/stat_reader.hpp",
        "patchSetId": 17
      },
      "lineNbr": 58,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T11:43:30Z",
      "side": 1,
      "message": "right. but that\u0027s not what a user would expect from a \u0027get\u0027 function. change the name, and definitely change the documentation.",
      "parentUuid": "471badbe_b273154e",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "137783d4_ad68d5fa",
        "filename": "extras/vom/vom/test_stats.cpp",
        "patchSetId": 17
      },
      "lineNbr": 62,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T08:15:27Z",
      "side": 1,
      "message": "after calling get_stats on the reader, the client must then call get_stats on each of the interfaces on which it previously called enable_stats. therefore the client must keep a list of these interfaces.\nhow about passing a listener in the interface::enable_stats() which is invoked when the interface\u0027s stats become available?",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34ce9302_cc6116bd",
        "filename": "extras/vom/vom/test_stats.cpp",
        "patchSetId": 17
      },
      "lineNbr": 62,
      "author": {
        "id": 241
      },
      "writtenOn": "2018-12-05T10:32:34Z",
      "side": 1,
      "message": "I don\u0027t get the idea. What will happen, when listener will be invoked?\nHere we are implementing PULL method.\n\nStat_Reader class provides a get_stats() to get stats from VPP stat segment and fill registered interfaces with respective stats.\nThen client must call stat_reader::get_stats() once and interface::get_stats on each of the registered interfaces on which it has enabled stats. This way it won\u0027t call VPP stat_segment for each interface.",
      "parentUuid": "137783d4_ad68d5fa",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcb22d89_c7fbad29",
        "filename": "extras/vom/vom/test_stats.cpp",
        "patchSetId": 17
      },
      "lineNbr": 62,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T11:43:30Z",
      "side": 1,
      "message": "when \"fill registered interfaces with respective stat\"",
      "parentUuid": "34ce9302_cc6116bd",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84b6ae41_f8fd1c8a",
        "filename": "extras/vom/vom/test_stats.cpp",
        "patchSetId": 17
      },
      "lineNbr": 75,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T08:15:27Z",
      "side": 1,
      "message": "what does the \u0027reset\u0027 function on an interface do?  reload the SPF adapter ;)",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab5af124_98f4528e",
        "filename": "extras/vom/vom/test_stats.cpp",
        "patchSetId": 17
      },
      "lineNbr": 75,
      "author": {
        "id": 241
      },
      "writtenOn": "2018-12-05T10:32:34Z",
      "side": 1,
      "message": "These were references to interfaces. I am justing removing those references ;)",
      "parentUuid": "84b6ae41_f8fd1c8a",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22ebb8ab_4821fc6e",
        "filename": "extras/vom/vom/test_stats.cpp",
        "patchSetId": 17
      },
      "lineNbr": 75,
      "author": {
        "id": 267
      },
      "writtenOn": "2018-12-05T11:43:30Z",
      "side": 1,
      "message": "so how does the client disable collecting stats on an interface?",
      "parentUuid": "ab5af124_98f4528e",
      "revId": "252fd2dde3fee34345b3f54834fe0ce7fa9be0e0",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}