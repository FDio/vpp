{
  "comments": [
    {
      "key": {
        "uuid": "fa5d592f_00efd61f",
        "filename": "src/plugins/acl/bihash_48_8.h",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 750
      },
      "writtenOn": "2017-06-13T13:58:50Z",
      "side": 1,
      "message": "Couldn\u0027t we have this in src/vppinfra/crc32.h ?\nWe could basically add the #else case there (where the clib_crc32c is defined) and here you could simply call the function clib_crc32c(..)",
      "range": {
        "startLine": 50,
        "startChar": 6,
        "endLine": 50,
        "endChar": 9
      },
      "revId": "b11629c89bde10788bccd5534d65c777a1cad0b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa5d592f_202d3a47",
        "filename": "src/plugins/acl/bihash_48_8.h",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 320
      },
      "writtenOn": "2017-06-13T15:19:13Z",
      "side": 1,
      "message": "I suspect this (rather ugly IMO) way of folding the hash is done in lieu of performance on the platforms where crc32 is terribly slow. I have had a patch to make it use siphash-1-1 (arguably not perfect but seemed much better than this), but it was somewhat slower, about 20% I would say. Also, I am using bihash as it is something readily available, I would like to replace it with cuckoo hash as soon as it is available...",
      "parentUuid": "fa5d592f_00efd61f",
      "range": {
        "startLine": 50,
        "startChar": 6,
        "endLine": 50,
        "endChar": 9
      },
      "revId": "b11629c89bde10788bccd5534d65c777a1cad0b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa5d592f_fb36b702",
        "filename": "src/plugins/acl/bihash_48_8.h",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 750
      },
      "writtenOn": "2017-06-14T08:34:45Z",
      "side": 1,
      "message": "Sure but that\u0027s not what I meant with my comment.\nI was suggesting to move your CRC code to src/vppinfra/crc32.h so that here you could simply have:\n\nstatic inline u64\nclib_bihash_hash_48_8 (const clib_bihash_kv_48_8_t * v)\n{\n  return clib_crc32c ((u8 *) v-\u003ekey, 48);\n}\n\nAll the logic around whether SSE4.2 instructions could be used would reside in a single place (being the the crc32.h)...",
      "parentUuid": "fa5d592f_202d3a47",
      "range": {
        "startLine": 50,
        "startChar": 6,
        "endLine": 50,
        "endChar": 9
      },
      "revId": "b11629c89bde10788bccd5534d65c777a1cad0b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa5d592f_cd657646",
        "filename": "src/plugins/acl/bihash_48_8.h",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 320
      },
      "writtenOn": "2017-06-14T11:24:44Z",
      "side": 1,
      "message": "Oh, but then a bunch of XORs followed by a magic hash is not a crc32 :) That said, maybe it makes sense to just ditch the magic hash and just do the crc32 like you say - I think will depend on the perf test results. But I would be very much inclined to do that indeed, as the current \"hash\" gives perfect collision whenever e.g. source and destination IPs increment - hardly an effective one! This template code is not mine, I parroted it from elsewhere in VPP, only changed the numbers. But I\u0027ve stuck \"return clib_crc32c ((u8 *) v-\u003ekey, N);\" in the front of both 48 and 40 byte hash functions, and let\u0027s see how it behaves.",
      "parentUuid": "fa5d592f_fb36b702",
      "range": {
        "startLine": 50,
        "startChar": 6,
        "endLine": 50,
        "endChar": 9
      },
      "revId": "b11629c89bde10788bccd5534d65c777a1cad0b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa5d592f_c0f89ee7",
        "filename": "src/plugins/acl/fa_node.c",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 750
      },
      "writtenOn": "2017-06-13T13:58:50Z",
      "side": 1,
      "message": "I wonder if we can rename this function to simply acl_match_5tuple?\n\nfull_ somehow tells me there should be another function starting with partial_",
      "range": {
        "startLine": 308,
        "startChar": 0,
        "endLine": 308,
        "endChar": 21
      },
      "revId": "b11629c89bde10788bccd5534d65c777a1cad0b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa5d592f_003236a7",
        "filename": "src/plugins/acl/fa_node.c",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 320
      },
      "writtenOn": "2017-06-13T15:19:13Z",
      "side": 1,
      "message": "right, full_* is to emphasise that it matches over the entire list of ACLs applied. The acl_match_5tuple already exists and matches only a single ACL... maybe a better option is to rename \"multi_..\" \u0026 \"single_..\" ?",
      "parentUuid": "fa5d592f_c0f89ee7",
      "range": {
        "startLine": 308,
        "startChar": 0,
        "endLine": 308,
        "endChar": 21
      },
      "revId": "b11629c89bde10788bccd5534d65c777a1cad0b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa5d592f_db6d3306",
        "filename": "src/plugins/acl/fa_node.c",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 750
      },
      "writtenOn": "2017-06-14T08:25:55Z",
      "side": 1,
      "message": "Yeah, I believe something like multi_ / single_ would be closer to what you actual do with the code...",
      "parentUuid": "fa5d592f_003236a7",
      "range": {
        "startLine": 308,
        "startChar": 0,
        "endLine": 308,
        "endChar": 21
      },
      "revId": "b11629c89bde10788bccd5534d65c777a1cad0b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa5d592f_ed603a37",
        "filename": "src/plugins/acl/fa_node.c",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 320
      },
      "writtenOn": "2017-06-14T11:24:44Z",
      "side": 1,
      "message": "yeah, cool. I\u0027ve renamed the functions in my worktree... Thanks a lot, this nomenclature is indeed much better!",
      "parentUuid": "fa5d592f_db6d3306",
      "range": {
        "startLine": 308,
        "startChar": 0,
        "endLine": 308,
        "endChar": 21
      },
      "revId": "b11629c89bde10788bccd5534d65c777a1cad0b9",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}