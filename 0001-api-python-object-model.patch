From 6520a9509f64ea45830804fcbf9e88e6de6fd24a Mon Sep 17 00:00:00 2001
From: Jakub Grajciar <jgrajcia@cisco.com>
Date: Mon, 19 Oct 2020 12:06:31 +0200
Subject: [PATCH] api: python object model

Package VPP object models from unit tests into
VPP Python object model package (vpp_pom).

Introduce high level client:
	- connect/disconnect to running VPP
	- start/quit VPP instance
	- api/cli support
	- hooks from unittest framework

Type: feature

Signed-off-by: Jakub Grajciar <jgrajcia@cisco.com>
Change-Id: I7342f285bed96d2cbf642bd6e1536cb3d6ac9e4a
Signed-off-by: Jakub Grajciar <jgrajcia@cisco.com>
---
 .gitignore                                    |    3 +
 src/plugins/abf/test/test_abf.py              |   28 +-
 src/plugins/acl/test/test_acl_plugin.py       |   79 +-
 src/plugins/acl/test/test_acl_plugin_conns.py |   30 +-
 src/plugins/acl/test/test_acl_plugin_l2l3.py  |   68 +-
 src/plugins/acl/test/test_acl_plugin_macip.py |  112 +-
 src/plugins/acl/test/test_classify_l2_acl.py  |    8 +-
 src/plugins/adl/test/test_adl.py              |   10 +-
 src/plugins/cdp/test/test_cdp.py              |   14 +-
 src/plugins/cnat/test/test_cnat.py            |  143 +-
 src/plugins/dhcp/test/test_dhcp.py            |   96 +-
 src/plugins/dhcp/test/test_dhcp6.py           |   72 +-
 src/plugins/dns/test/test_dns.py              |   14 +-
 src/plugins/flowprobe/test/test_flowprobe.py  |   90 +-
 src/plugins/gbp/test/test_gbp.py              | 1509 ++++++-----------
 src/plugins/geneve/test/test_geneve.py        |   52 +-
 src/plugins/gtpu/test/test_gtpu.py            |   56 +-
 src/plugins/igmp/test/test_igmp.py            |  162 +-
 src/plugins/ikev2/test/test_ikev2.py          |   53 +-
 src/plugins/l2tp/test/test_l2tp.py            |    6 +-
 src/plugins/l3xc/test/test_l3xc.py            |   14 +-
 src/plugins/lacp/test/test_lacp.py            |   70 +-
 src/plugins/lb/test/test_lb.py                |  134 +-
 src/plugins/lb/test/test_lb_api.py            |   20 +-
 src/plugins/lisp/test/test_lisp.py            |    6 +-
 src/plugins/mactime/test/test_mactime.py      |    6 +-
 src/plugins/map/test/test_map.py              |   98 +-
 src/plugins/map/test/test_map_br.py           |   24 +-
 src/plugins/memif/test/test_memif.py          |   52 +-
 src/plugins/nat/test/test_det44.py            |   96 +-
 src/plugins/nat/test/test_dslite.py           |   38 +-
 src/plugins/nat/test/test_ipsec_nat.py        |   32 +-
 src/plugins/nat/test/test_nat.py              | 1157 +++++++------
 src/plugins/nat/test/test_nat64.py            |  284 ++--
 src/plugins/nat/test/test_nat66.py            |   36 +-
 src/plugins/pppoe/test/test_pppoe.py          |   86 +-
 src/plugins/quic/test/test_quic.py            |   20 +-
 src/plugins/srv6-ad/test/test_srv6_ad.py      |   52 +-
 src/plugins/srv6-am/test/test_srv6.py         |  202 +--
 src/plugins/srv6-am/test/vpp_srv6.py          |    1 -
 src/plugins/srv6-as/test/test_srv6_as.py      |   50 +-
 src/plugins/srv6-as/test/vpp_srv6.py          |    1 -
 .../srv6-mobile/test/test_srv6_mobile.py      |   58 +-
 src/plugins/svs/test/test_svs.py              |   42 +-
 src/plugins/urpf/test/test_urpf.py            |   24 +-
 src/plugins/vrrp/test/test_vrrp.py            |   40 +-
 src/plugins/wireguard/test/test_wireguard.py  |  271 +--
 src/vcl/test/test_vcl.py                      |   58 +-
 src/vpp-api/CMakeLists.txt                    |    1 +
 src/vpp-api/pom/CMakeLists.txt                |   36 +
 src/vpp-api/pom/LICENSE.txt                   |  202 +++
 src/vpp-api/pom/requirements.txt              |    2 +
 src/vpp-api/pom/setup.py                      |   48 +
 src/vpp-api/pom/tests/__init__.py             |    0
 src/vpp-api/pom/tests/test_vpp_client.py      |  140 ++
 src/vpp-api/pom/vpp_pom/__init__.py           |   20 +
 {test => src/vpp-api/pom/vpp_pom}/hook.py     |   54 +-
 {test => src/vpp-api/pom/vpp_pom}/log.py      |    0
 src/vpp-api/pom/vpp_pom/plugins/__init__.py   |    1 +
 .../pom/vpp_pom/plugins}/vpp_acl.py           |  100 +-
 src/vpp-api/pom/vpp_pom/plugins/vpp_cnat.py   |   65 +
 .../pom/vpp_pom/plugins}/vpp_dhcp.py          |   26 +-
 src/vpp-api/pom/vpp_pom/plugins/vpp_gbp.py    |  542 ++++++
 .../pom/vpp_pom/plugins}/vpp_igmp.py          |   18 +-
 .../pom/vpp_pom/plugins}/vpp_ikev2.py         |   39 +-
 .../pom/vpp_pom/plugins}/vpp_lb.py            |   24 +-
 .../pom/vpp_pom/plugins}/vpp_memif.py         |   87 +-
 .../vpp_pom/plugins}/vpp_pppoe_interface.py   |   10 +-
 .../pom/vpp_pom/plugins}/vpp_srv6.py          |   26 +-
 .../pom/vpp_pom/plugins/vpp_wireguard.py      |  222 +++
 {test => src/vpp-api/pom/vpp_pom}/util.py     |    4 +-
 .../vpp-api/pom/vpp_pom/vpp_bfd.py            |   55 +-
 {test => src/vpp-api/pom/vpp_pom}/vpp_bier.py |   94 +-
 .../pom/vpp_pom}/vpp_bond_interface.py        |   16 +-
 src/vpp-api/pom/vpp_pom/vpp_bvi_interface.py  |   23 +
 src/vpp-api/pom/vpp_pom/vpp_client.py         |  371 ++++
 .../vpp-api/pom/vpp_pom}/vpp_devices.py       |   14 +-
 .../vpp-api/pom/vpp_pom}/vpp_gre_interface.py |   14 +-
 .../vpp-api/pom/vpp_pom}/vpp_interface.py     |   96 +-
 {test => src/vpp-api/pom/vpp_pom}/vpp_ip.py   |    0
 .../vpp-api/pom/vpp_pom}/vpp_ip_route.py      |  177 +-
 .../pom/vpp_pom}/vpp_ipip_tun_interface.py    |   14 +-
 .../vpp-api/pom/vpp_pom}/vpp_ipsec.py         |   83 +-
 .../pom/vpp_pom}/vpp_ipsec_tun_interface.py   |   12 +-
 {test => src/vpp-api/pom/vpp_pom}/vpp_l2.py   |   78 +-
 src/vpp-api/pom/vpp_pom/vpp_lo_interface.py   |   35 +
 .../pom/vpp_pom}/vpp_mpls_tunnel_interface.py |   14 +-
 .../vpp-api/pom/vpp_pom}/vpp_neighbor.py      |   23 +-
 .../vpp-api/pom/vpp_pom}/vpp_object.py        |   19 +-
 .../vpp-api/pom/vpp_pom}/vpp_papi_provider.py |   59 +-
 .../vpp-api/pom/vpp_pom}/vpp_pg_interface.py  |  129 +-
 src/vpp-api/pom/vpp_pom/vpp_pipe.py           |   46 +
 .../vpp-api/pom/vpp_pom}/vpp_policer.py       |   16 +-
 {test => src/vpp-api/pom/vpp_pom}/vpp_qos.py  |   50 +-
 .../vpp-api/pom/vpp_pom}/vpp_sub_interface.py |   42 +-
 {test => src/vpp-api/pom/vpp_pom}/vpp_teib.py |   18 +-
 .../pom/vpp_pom}/vpp_tunnel_interface.py      |    8 +-
 .../vpp-api/pom/vpp_pom}/vpp_udp_encap.py     |   20 +-
 .../pom/vpp_pom}/vpp_vhost_interface.py       |   10 +-
 .../pom/vpp_pom}/vpp_vxlan_gbp_tunnel.py      |   18 +-
 .../vpp-api/pom/vpp_pom}/vpp_vxlan_tunnel.py  |   18 +-
 src/vpp-api/python/vpp_papi/vpp_papi.py       |    2 +-
 test/Makefile                                 |   24 +-
 test/debug_internal.py                        |    2 +-
 test/framework.py                             |  196 ++-
 test/lisp.py                                  |   30 +-
 test/remote_test.py                           |   31 +-
 test/run_tests.py                             |    4 +-
 test/sanity_import_vpp_pom.py                 |    4 +
 test/template_bd.py                           |    2 +-
 test/template_classifier.py                   |   34 +-
 test/template_ipsec.py                        |  108 +-
 test/test_bfd.py                              |  316 ++--
 test/test_bier.py                             |  104 +-
 test/test_bihash.py                           |   11 +-
 test/test_bond.py                             |   58 +-
 test/test_buffers.py                          |    2 +-
 test/test_classifier.py                       |    8 +-
 test/test_classifier_ip6.py                   |    2 +-
 test/test_cli.py                              |   23 +-
 test/test_container.py                        |   12 +-
 test/test_crypto.py                           |    2 +-
 test/test_dvr.py                              |   92 +-
 test/test_endian.py                           |    6 +-
 test/test_fib.py                              |   32 +-
 test/test_gre.py                              |  113 +-
 test/test_gro.py                              |    4 +-
 test/test_gso.py                              |   74 +-
 test/test_interface_crud.py                   |   28 +-
 test/test_ip4.py                              |  253 +--
 test/test_ip4_irb.py                          |   18 +-
 test/test_ip4_vrf_multi_instance.py           |   22 +-
 test/test_ip6.py                              |  246 +--
 test/test_ip6_vrf_multi_instance.py           |   22 +-
 test/test_ip_ecmp.py                          |   14 +-
 test/test_ip_mcast.py                         |  160 +-
 test/test_ipip.py                             |  126 +-
 test/test_ipsec_ah.py                         |   50 +-
 test/test_ipsec_api.py                        |   24 +-
 test/test_ipsec_esp.py                        |   74 +-
 test/test_ipsec_tun_if_esp.py                 |  308 ++--
 test/test_l2_fib.py                           |   42 +-
 test/test_l2_flood.py                         |   52 +-
 test/test_l2bd.py                             |   16 +-
 test/test_l2bd_arp_term.py                    |   38 +-
 test/test_l2bd_multi_instance.py              |   26 +-
 test/test_l2xc.py                             |   12 +-
 test/test_l2xc_multi_instance.py              |    8 +-
 test/test_mpcap.py                            |    4 +-
 test/test_mpls.py                             |  204 +--
 test/test_mtu.py                              |   16 +-
 test/test_neighbor.py                         |  264 +--
 test/test_node_variants.py                    |    2 +-
 test/test_offload.py                          |    6 +-
 test/test_p2p_ethernet.py                     |   56 +-
 test/test_pcap.py                             |    4 +-
 test/test_ping.py                             |   18 +-
 test/test_pipe.py                             |   91 +-
 test/test_punt.py                             |  230 +--
 test/test_qos.py                              |   88 +-
 test/test_reassembly.py                       |  210 +--
 test/test_session.py                          |   28 +-
 test/test_sixrd.py                            |   68 +-
 test/test_span.py                             |   92 +-
 test/test_sparse_vec.py                       |    4 +-
 test/test_srmpls.py                           |   32 +-
 test/test_srv6_un.py                          |   56 +-
 test/test_stats_client.py                     |   16 +-
 test/test_string.py                           |    4 +-
 test/test_syslog.py                           |   16 +-
 test/test_tap.py                              |   10 +-
 test/test_tcp.py                              |   26 +-
 test/test_tls.py                              |   22 +-
 test/test_trace_filter.py                     |    4 +-
 test/test_udp.py                              |   56 +-
 test/test_vapi.py                             |   14 +-
 test/test_vhost.py                            |   34 +-
 test/test_vlib.py                             |   10 +-
 test/test_vpe_api.py                          |   14 +-
 test/test_vppinfra.py                         |    2 +-
 test/test_vtr.py                              |   38 +-
 test/test_vxlan.py                            |   44 +-
 test/test_vxlan6.py                           |   36 +-
 test/test_vxlan_gbp.py                        |   30 +-
 test/test_vxlan_gpe.py                        |   44 +-
 test/vpp_bvi_interface.py                     |   22 -
 test/vpp_lo_interface.py                      |   21 -
 test/vrf.py                                   |    2 +-
 188 files changed, 7349 insertions(+), 6240 deletions(-)
 delete mode 120000 src/plugins/srv6-am/test/vpp_srv6.py
 delete mode 120000 src/plugins/srv6-as/test/vpp_srv6.py
 create mode 100644 src/vpp-api/pom/CMakeLists.txt
 create mode 100644 src/vpp-api/pom/LICENSE.txt
 create mode 100644 src/vpp-api/pom/requirements.txt
 create mode 100644 src/vpp-api/pom/setup.py
 create mode 100644 src/vpp-api/pom/tests/__init__.py
 create mode 100644 src/vpp-api/pom/tests/test_vpp_client.py
 create mode 100644 src/vpp-api/pom/vpp_pom/__init__.py
 rename {test => src/vpp-api/pom/vpp_pom}/hook.py (84%)
 rename {test => src/vpp-api/pom/vpp_pom}/log.py (100%)
 create mode 100644 src/vpp-api/pom/vpp_pom/plugins/__init__.py
 rename src/{plugins/acl/test => vpp-api/pom/vpp_pom/plugins}/vpp_acl.py (81%)
 create mode 100644 src/vpp-api/pom/vpp_pom/plugins/vpp_cnat.py
 rename src/{plugins/dhcp/test => vpp-api/pom/vpp_pom/plugins}/vpp_dhcp.py (85%)
 create mode 100644 src/vpp-api/pom/vpp_pom/plugins/vpp_gbp.py
 rename src/{plugins/igmp/test => vpp-api/pom/vpp_pom/plugins}/vpp_igmp.py (77%)
 rename src/{plugins/ikev2/test => vpp-api/pom/vpp_pom/plugins}/vpp_ikev2.py (79%)
 rename src/{plugins/lb/test => vpp-api/pom/vpp_pom/plugins}/vpp_lb.py (79%)
 rename src/{plugins/memif/test => vpp-api/pom/vpp_pom/plugins}/vpp_memif.py (62%)
 rename src/{plugins/pppoe/test => vpp-api/pom/vpp_pom/plugins}/vpp_pppoe_interface.py (76%)
 rename src/{plugins/srv6-ad/test => vpp-api/pom/vpp_pom/plugins}/vpp_srv6.py (91%)
 create mode 100644 src/vpp-api/pom/vpp_pom/plugins/vpp_wireguard.py
 rename {test => src/vpp-api/pom/vpp_pom}/util.py (99%)
 rename test/bfd.py => src/vpp-api/pom/vpp_pom/vpp_bfd.py (90%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_bier.py (72%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_bond_interface.py (78%)
 create mode 100644 src/vpp-api/pom/vpp_pom/vpp_bvi_interface.py
 create mode 100644 src/vpp-api/pom/vpp_pom/vpp_client.py
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_devices.py (64%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_gre_interface.py (84%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_interface.py (82%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_ip.py (100%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_ip_route.py (82%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_ipip_tun_interface.py (76%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_ipsec.py (84%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_ipsec_tun_interface.py (84%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_l2.py (72%)
 create mode 100644 src/vpp-api/pom/vpp_pom/vpp_lo_interface.py
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_mpls_tunnel_interface.py (74%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_neighbor.py (76%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_object.py (88%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_papi_provider.py (97%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_pg_interface.py (82%)
 create mode 100644 src/vpp-api/pom/vpp_pom/vpp_pipe.py
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_policer.py (82%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_qos.py (72%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_sub_interface.py (83%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_teib.py (70%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_tunnel_interface.py (80%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_udp_encap.py (73%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_vhost_interface.py (85%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_vxlan_gbp_tunnel.py (81%)
 rename {test => src/vpp-api/pom/vpp_pom}/vpp_vxlan_tunnel.py (79%)
 create mode 100644 test/sanity_import_vpp_pom.py
 delete mode 100644 test/vpp_bvi_interface.py
 delete mode 100644 test/vpp_lo_interface.py

diff --git a/.gitignore b/.gitignore
index ea3302415..7c5e7072e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -98,6 +98,9 @@ compile_commands.json
 /src/vpp-api/python/build
 /src/vpp-api/python/dist
 /src/vpp-api/python/vpp_papi.egg-info
+/src/vpp-api/pom/build
+/src/vpp-api/pom/dist
+/src/vpp-api/pom/vpp_pom.egg-info
 /src/vpp_api/.tox
 /src/vpp_api/.stestr
 
diff --git a/src/plugins/abf/test/test_abf.py b/src/plugins/abf/test/test_abf.py
index 097476b87..31ba8c110 100644
--- a/src/plugins/abf/test/test_abf.py
+++ b/src/plugins/abf/test/test_abf.py
@@ -4,10 +4,10 @@ from socket import inet_pton, inet_ntop, AF_INET, AF_INET6
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppMplsLabel, \
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppMplsLabel, \
     VppIpTable, FibPathProto
-from vpp_acl import AclRule, VppAcl
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl
 
 from scapy.packet import Raw
 from scapy.layers.l2 import Ether
@@ -15,13 +15,13 @@ from scapy.layers.inet import IP, UDP
 from scapy.layers.inet6 import IPv6
 from ipaddress import IPv4Network, IPv6Network
 
-from vpp_object import VppObject
+from vpp_pom.vpp_object import VppObject
 
 NUM_PKTS = 67
 
 
 def find_abf_policy(test, id):
-    policies = test.vapi.abf_policy_dump()
+    policies = test.vclient.abf_policy_dump()
     for p in policies:
         if id == p.policy.policy_id:
             return True
@@ -29,7 +29,7 @@ def find_abf_policy(test, id):
 
 
 def find_abf_itf_attach(test, id, sw_if_index):
-    attachs = test.vapi.abf_itf_attach_dump()
+    attachs = test.vclient.abf_itf_attach_dump()
     for a in attachs:
         if id == a.attach.policy_id and \
            sw_if_index == a.attach.sw_if_index:
@@ -53,7 +53,7 @@ class VppAbfPolicy(VppObject):
             self.encoded_paths.append(path.encode())
 
     def add_vpp_config(self):
-        self._test.vapi.abf_policy_add_del(
+        self._test.vclient.abf_policy_add_del(
             1,
             {'policy_id': self.policy_id,
              'acl_index': self.acl.acl_index,
@@ -62,7 +62,7 @@ class VppAbfPolicy(VppObject):
         self._test.registry.register(self, self._test.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.abf_policy_add_del(
+        self._test.vclient.abf_policy_add_del(
             0,
             {'policy_id': self.policy_id,
              'acl_index': self.acl.acl_index,
@@ -91,7 +91,7 @@ class VppAbfAttach(VppObject):
         self.is_ipv6 = is_ipv6
 
     def add_vpp_config(self):
-        self._test.vapi.abf_itf_attach_add_del(
+        self._test.vclient.abf_itf_attach_add_del(
             1,
             {'policy_id': self.policy_id,
              'sw_if_index': self.sw_if_index,
@@ -100,7 +100,7 @@ class VppAbfAttach(VppObject):
         self._test.registry.register(self, self._test.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.abf_itf_attach_add_del(
+        self._test.vclient.abf_itf_attach_add_del(
             0,
             {'policy_id': self.policy_id,
              'sw_if_index': self.sw_if_index,
@@ -166,7 +166,7 @@ class TestAbf(VppTestCase):
         rule_1 = AclRule(is_permit=1, proto=17, ports=1234,
                          src_prefix=IPv4Network("1.1.1.1/32"),
                          dst_prefix=IPv4Network("1.1.1.2/32"))
-        acl_1 = VppAcl(self, rules=[rule_1])
+        acl_1 = VppAcl(self.vclient, rules=[rule_1])
         acl_1.add_vpp_config()
 
         #
@@ -247,7 +247,7 @@ class TestAbf(VppTestCase):
         #
         # Swap to route via a next-hop in the non-default table
         #
-        table_20 = VppIpTable(self, 20)
+        table_20 = VppIpTable(self.vclient, 20)
         table_20.add_vpp_config()
 
         self.pg4.set_table_ip4(table_20.table_id)
@@ -282,7 +282,7 @@ class TestAbf(VppTestCase):
         rule_1 = AclRule(is_permit=1, proto=17, ports=1234,
                          src_prefix=IPv6Network("2001::2/128"),
                          dst_prefix=IPv6Network("2001::1/128"))
-        acl_1 = VppAcl(self, rules=[rule_1])
+        acl_1 = VppAcl(self.vclient, rules=[rule_1])
         acl_1.add_vpp_config()
 
         #
@@ -315,7 +315,7 @@ class TestAbf(VppTestCase):
         #
         # add a route resolving the next-hop
         #
-        route = VppIpRoute(self, "3001::1", 32,
+        route = VppIpRoute(self.vclient, "3001::1", 32,
                            [VppRoutePath(self.pg1.remote_ip6,
                                          self.pg1.sw_if_index)])
         route.add_vpp_config()
diff --git a/src/plugins/acl/test/test_acl_plugin.py b/src/plugins/acl/test/test_acl_plugin.py
index d5e195fe4..fbbdde635 100644
--- a/src/plugins/acl/test/test_acl_plugin.py
+++ b/src/plugins/acl/test/test_acl_plugin.py
@@ -11,12 +11,12 @@ from scapy.layers.inet import IP, TCP, UDP, ICMP
 from scapy.layers.inet6 import IPv6, ICMPv6EchoRequest
 from scapy.layers.inet6 import IPv6ExtHdrFragment
 from framework import VppTestCase, VppTestRunner
-from util import Host, ppp
+from vpp_pom.util import Host, ppp
 from ipaddress import IPv4Network, IPv6Network
 
-from vpp_lo_interface import VppLoInterface
-from vpp_acl import AclRule, VppAcl, VppAclInterface, VppEtypeWhitelist
-from vpp_ip import INVALID_INDEX
+from vpp_pom.vpp_lo_interface import VppLoInterface
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl, VppAclInterface, VppEtypeWhitelist
+from vpp_pom.vpp_ip import INVALID_INDEX
 
 
 class TestACLplugin(VppTestCase):
@@ -103,10 +103,10 @@ class TestACLplugin(VppTestCase):
 
             # Create BD with MAC learning and unknown unicast flooding disabled
             # and put interfaces to this BD
-            cls.vapi.bridge_domain_add_del(bd_id=cls.bd_id, uu_flood=1,
+            cls.vclient.bridge_domain_add_del(bd_id=cls.bd_id, uu_flood=1,
                                            learn=1)
             for pg_if in cls.pg_interfaces:
-                cls.vapi.sw_interface_set_l2_bridge(
+                cls.vclient.sw_interface_set_l2_bridge(
                     rx_sw_if_index=pg_if.sw_if_index, bd_id=cls.bd_id)
 
             # Set up all interfaces
@@ -163,18 +163,18 @@ class TestACLplugin(VppTestCase):
 
     def show_commands_at_teardown(self):
         cli = "show vlib graph l2-input-feat-arc"
-        self.logger.info(self.vapi.ppcli(cli))
+        self.logger.info(self.vclient.ppcli(cli))
         cli = "show vlib graph l2-input-feat-arc-end"
-        self.logger.info(self.vapi.ppcli(cli))
+        self.logger.info(self.vclient.ppcli(cli))
         cli = "show vlib graph l2-output-feat-arc"
-        self.logger.info(self.vapi.ppcli(cli))
+        self.logger.info(self.vclient.ppcli(cli))
         cli = "show vlib graph l2-output-feat-arc-end"
-        self.logger.info(self.vapi.ppcli(cli))
-        self.logger.info(self.vapi.ppcli("show l2fib verbose"))
-        self.logger.info(self.vapi.ppcli("show acl-plugin acl"))
-        self.logger.info(self.vapi.ppcli("show acl-plugin interface"))
-        self.logger.info(self.vapi.ppcli("show acl-plugin tables"))
-        self.logger.info(self.vapi.ppcli("show bridge-domain %s detail"
+        self.logger.info(self.vclient.ppcli(cli))
+        self.logger.info(self.vclient.ppcli("show l2fib verbose"))
+        self.logger.info(self.vclient.ppcli("show acl-plugin acl"))
+        self.logger.info(self.vclient.ppcli("show acl-plugin interface"))
+        self.logger.info(self.vclient.ppcli("show acl-plugin tables"))
+        self.logger.info(self.vclient.ppcli("show bridge-domain %s detail"
                                          % self.bd_id))
 
     def create_rule(self, ip=0, permit_deny=0, ports=PORTS_ALL, proto=-1,
@@ -190,22 +190,22 @@ class TestACLplugin(VppTestCase):
                        src_prefix=src_prefix, dst_prefix=dst_prefix)
 
     def apply_rules(self, rules, tag=None):
-        acl = VppAcl(self, rules, tag=tag)
+        acl = VppAcl(self.vclient, rules, tag=tag)
         acl.add_vpp_config()
         self.logger.info("Dumped ACL: " + str(acl.dump()))
         # Apply a ACL on the interface as inbound
         for i in self.pg_interfaces:
             acl_if = VppAclInterface(
-                self, sw_if_index=i.sw_if_index, n_input=1, acls=[acl])
+                self.vclient, sw_if_index=i.sw_if_index, n_input=1, acls=[acl])
             acl_if.add_vpp_config()
         return acl.acl_index
 
     def apply_rules_to(self, rules, tag=None, sw_if_index=INVALID_INDEX):
-        acl = VppAcl(self, rules, tag=tag)
+        acl = VppAcl(self.vclient, rules, tag=tag)
         acl.add_vpp_config()
         self.logger.info("Dumped ACL: " + str(acl.dump()))
         # Apply a ACL on the interface as inbound
-        acl_if = VppAclInterface(self, sw_if_index=sw_if_index, n_input=1,
+        acl_if = VppAclInterface(self.vclient, sw_if_index=sw_if_index, n_input=1,
                                  acls=[acl])
         return acl.acl_index
 
@@ -215,7 +215,7 @@ class TestACLplugin(VppTestCase):
             self._wl = []
             for i in self.pg_interfaces:
                 self._wl.append(VppEtypeWhitelist(
-                    self, sw_if_index=i.sw_if_index, whitelist=whitelist,
+                    self.vclient, sw_if_index=i.sw_if_index, whitelist=whitelist,
                     n_input=n_input).add_vpp_config())
         else:
             if hasattr(self, "_wl"):
@@ -477,7 +477,7 @@ class TestACLplugin(VppTestCase):
     def test_0000_warmup_test(self):
         """ ACL plugin version check; learn MACs
         """
-        reply = self.vapi.papi.acl_plugin_get_version()
+        reply = self.vclient.papi.acl_plugin_get_version()
         self.assertEqual(reply.major, 1)
         self.logger.info("Working with ACL plugin version: %d.%d" % (
             reply.major, reply.minor))
@@ -492,7 +492,7 @@ class TestACLplugin(VppTestCase):
         # Create a permit-1234 ACL
         r = [AclRule(is_permit=1, proto=17, ports=1234, sport_to=1235)]
         # Test 1: add a new ACL
-        first_acl = VppAcl(self, rules=r, tag="permit 1234")
+        first_acl = VppAcl(self.vclient, rules=r, tag="permit 1234")
         first_acl.add_vpp_config()
         self.assertTrue(first_acl.query_vpp_config())
         # The very first ACL gets #0
@@ -514,19 +514,19 @@ class TestACLplugin(VppTestCase):
         # Create a deny-1234 ACL
         r_deny = [AclRule(is_permit=0, proto=17, ports=1234, sport_to=1235),
                   AclRule(is_permit=1, proto=17, ports=0)]
-        second_acl = VppAcl(self, rules=r_deny, tag="deny 1234;permit all")
+        second_acl = VppAcl(self.vclient, rules=r_deny, tag="deny 1234;permit all")
         second_acl.add_vpp_config()
         self.assertTrue(second_acl.query_vpp_config())
         # The second ACL gets #1
         self.assertEqual(second_acl.acl_index, 1)
 
         # Test 2: try to modify a nonexistent ACL
-        invalid_acl = VppAcl(self, acl_index=432, rules=r, tag="FFFF:FFFF")
+        invalid_acl = VppAcl(self.vclient, acl_index=432, rules=r, tag="FFFF:FFFF")
         reply = invalid_acl.add_vpp_config(expect_error=True)
 
         # apply an ACL on an interface inbound, try to delete ACL, must fail
         acl_if_list = VppAclInterface(
-            self, sw_if_index=self.pg0.sw_if_index, n_input=1,
+            self.vclient, sw_if_index=self.pg0.sw_if_index, n_input=1,
             acls=[first_acl])
         acl_if_list.add_vpp_config()
         first_acl.remove_vpp_config(expect_error=True)
@@ -536,7 +536,7 @@ class TestACLplugin(VppTestCase):
 
         # apply an ACL on an interface inbound, try to delete ACL, must fail
         acl_if_list = VppAclInterface(
-            self, sw_if_index=self.pg0.sw_if_index, n_input=0,
+            self.vclient, sw_if_index=self.pg0.sw_if_index, n_input=0,
             acls=[second_acl])
         acl_if_list.add_vpp_config()
         second_acl.remove_vpp_config(expect_error=True)
@@ -546,7 +546,7 @@ class TestACLplugin(VppTestCase):
 
         # try to apply a nonexistent ACL - must fail
         acl_if_list = VppAclInterface(
-            self, sw_if_index=self.pg0.sw_if_index, n_input=0,
+            self.vclient, sw_if_index=self.pg0.sw_if_index, n_input=0,
             acls=[invalid_acl])
         acl_if_list.add_vpp_config(expect_error=True)
 
@@ -567,23 +567,23 @@ class TestACLplugin(VppTestCase):
         acl_idx = self.apply_rules(rules, "permit per-flow")
 
         # enable counters
-        reply = self.vapi.papi.acl_stats_intf_counters_enable(enable=1)
+        reply = self.vclient.papi.acl_stats_intf_counters_enable(enable=1)
 
         # Traffic should still pass
         self.run_verify_test(self.IP, self.IPV4, -1)
 
-        matches = self.statistics.get_counter('/acl/%d/matches' % acl_idx)
+        matches = self.vclient.statistics.get_counter('/acl/%d/matches' % acl_idx)
         self.logger.info("stat segment counters: %s" % repr(matches))
         cli = "show acl-plugin acl"
-        self.logger.info(self.vapi.ppcli(cli))
+        self.logger.info(self.vclient.ppcli(cli))
         cli = "show acl-plugin tables"
-        self.logger.info(self.vapi.ppcli(cli))
+        self.logger.info(self.vclient.ppcli(cli))
 
         total_hits = matches[0][0]['packets'] + matches[0][1]['packets']
         self.assertEqual(total_hits, 64)
 
         # disable counters
-        reply = self.vapi.papi.acl_stats_intf_counters_enable(enable=0)
+        reply = self.vclient.papi.acl_stats_intf_counters_enable(enable=0)
 
         self.logger.info("ACLP_TEST_FINISH_0002")
 
@@ -604,21 +604,21 @@ class TestACLplugin(VppTestCase):
         acl_idx = self.apply_rules(rules, "deny per-flow;permit all")
 
         # enable counters
-        reply = self.vapi.papi.acl_stats_intf_counters_enable(enable=1)
+        reply = self.vclient.papi.acl_stats_intf_counters_enable(enable=1)
 
         # Traffic should not pass
         self.run_verify_negat_test(self.IP, self.IPV4,
                                    self.proto[self.IP][self.UDP])
 
-        matches = self.statistics.get_counter('/acl/%d/matches' % acl_idx)
+        matches = self.vclient.statistics.get_counter('/acl/%d/matches' % acl_idx)
         self.logger.info("stat segment counters: %s" % repr(matches))
         cli = "show acl-plugin acl"
-        self.logger.info(self.vapi.ppcli(cli))
+        self.logger.info(self.vclient.ppcli(cli))
         cli = "show acl-plugin tables"
-        self.logger.info(self.vapi.ppcli(cli))
+        self.logger.info(self.vclient.ppcli(cli))
         self.assertEqual(matches[0][0]['packets'], 64)
         # disable counters
-        reply = self.vapi.papi.acl_stats_intf_counters_enable(enable=0)
+        reply = self.vclient.papi.acl_stats_intf_counters_enable(enable=0)
         self.logger.info("ACLP_TEST_FINISH_0003")
         # self.assertEqual(, 0)
 
@@ -866,7 +866,7 @@ class TestACLplugin(VppTestCase):
         for i in range(len(r)):
             rules.append(self.create_rule(r[i][0], r[i][1], r[i][2], r[i][3]))
 
-        acl = VppAcl(self, rules=rules)
+        acl = VppAcl(self.vclient, rules=rules)
         acl.add_vpp_config()
         result = acl.dump()
 
@@ -1421,7 +1421,8 @@ class TestACLplugin(VppTestCase):
 
         # create an interface
         intf = []
-        intf.append(VppLoInterface(self))
+        intf.append(VppLoInterface(self.vclient))
+        intf[0].add_vpp_config()
 
         # Apply rules
         self.apply_rules_to(rules, "permit ipv4 tcp", intf[0].sw_if_index)
diff --git a/src/plugins/acl/test/test_acl_plugin_conns.py b/src/plugins/acl/test/test_acl_plugin_conns.py
index c7941fa15..004313e97 100644
--- a/src/plugins/acl/test/test_acl_plugin_conns.py
+++ b/src/plugins/acl/test/test_acl_plugin_conns.py
@@ -13,10 +13,10 @@ from scapy.layers.inet6 import ICMPv6EchoReply, IPv6ExtHdrRouting
 from scapy.layers.inet6 import IPv6ExtHdrFragment
 from pprint import pprint
 from random import randint
-from util import L4_Conn
+from vpp_pom.util import L4_Conn
 from ipaddress import ip_network
 
-from vpp_acl import AclRule, VppAcl, VppAclInterface
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl, VppAclInterface
 
 
 def to_acl_rule(self, is_permit, wildcard_sport=False):
@@ -128,7 +128,7 @@ class ACLPluginConnTestCase(VppTestCase):
         # create pg0 and pg1
         cls.create_pg_interfaces(range(2))
         cmd = "set acl-plugin session table event-trace 1"
-        cls.logger.info(cls.vapi.cli(cmd))
+        cls.logger.info(cls.vclient.cli(cmd))
         for i in cls.pg_interfaces:
             i.admin_up()
             i.config_ip4()
@@ -146,13 +146,13 @@ class ACLPluginConnTestCase(VppTestCase):
         super(ACLPluginConnTestCase, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show ip neighbors"))
-        self.logger.info(self.vapi.cli("show ip6 neighbors"))
-        self.logger.info(self.vapi.cli("show acl-plugin sessions"))
-        self.logger.info(self.vapi.cli("show acl-plugin acl"))
-        self.logger.info(self.vapi.cli("show acl-plugin interface"))
-        self.logger.info(self.vapi.cli("show acl-plugin tables"))
-        self.logger.info(self.vapi.cli("show event-logger all"))
+        self.logger.info(self.vclient.cli("show ip neighbors"))
+        self.logger.info(self.vclient.cli("show ip6 neighbors"))
+        self.logger.info(self.vclient.cli("show acl-plugin sessions"))
+        self.logger.info(self.vclient.cli("show acl-plugin acl"))
+        self.logger.info(self.vclient.cli("show acl-plugin interface"))
+        self.logger.info(self.vclient.cli("show acl-plugin tables"))
+        self.logger.info(self.vclient.cli("show event-logger all"))
 
     def run_basic_conn_test(self, af, acl_side):
         """ Basic conn timeout test """
@@ -215,7 +215,7 @@ class ACLPluginConnTestCase(VppTestCase):
         for i in IterateWithSleep(self, 20, "Keep conn active", 0.3):
             conn1.send_through(1)
         # clear all connections
-        self.vapi.ppcli("clear acl-plugin sessions")
+        self.vclient.ppcli("clear acl-plugin sessions")
         # now try to send a packet on the reflected side
         try:
             p2 = conn1.send_through(1).command()
@@ -298,7 +298,7 @@ class ACLPluginConnTestCase(VppTestCase):
 
     def test_0000_conn_prepare_test(self):
         """ Prepare the settings """
-        self.vapi.ppcli("set acl-plugin session timeout udp idle 1")
+        self.vclient.ppcli("set acl-plugin session timeout udp idle 1")
 
     def test_0001_basic_conn_test(self):
         """ IPv4: Basic conn timeout test reflect on ingress """
@@ -351,10 +351,10 @@ class ACLPluginConnTestCase(VppTestCase):
     def test_2000_prepare_for_tcp_test(self):
         """ Prepare for TCP session tests """
         # ensure the session hangs on if it gets treated as UDP
-        self.vapi.ppcli("set acl-plugin session timeout udp idle 200")
+        self.vclient.ppcli("set acl-plugin session timeout udp idle 200")
         # let the TCP connection time out at 5 seconds
-        self.vapi.ppcli("set acl-plugin session timeout tcp idle 10")
-        self.vapi.ppcli("set acl-plugin session timeout tcp transient 1")
+        self.vclient.ppcli("set acl-plugin session timeout tcp idle 10")
+        self.vclient.ppcli("set acl-plugin session timeout tcp transient 1")
 
     def test_2001_tcp_transient_conn_test(self):
         """ IPv4: transient TCP session (incomplete 3WHS), ref. on ingress """
diff --git a/src/plugins/acl/test/test_acl_plugin_l2l3.py b/src/plugins/acl/test/test_acl_plugin_l2l3.py
index 30b53728c..73def7bb6 100644
--- a/src/plugins/acl/test/test_acl_plugin_l2l3.py
+++ b/src/plugins/acl/test/test_acl_plugin_l2l3.py
@@ -39,10 +39,10 @@ from scapy.layers.inet6 import ICMPv6EchoReply, IPv6ExtHdrRouting
 from scapy.layers.inet6 import IPv6ExtHdrFragment
 
 from framework import VppTestCase, VppTestRunner
-from vpp_l2 import L2_PORT_TYPE
+from vpp_pom.vpp_l2 import L2_PORT_TYPE
 import time
 
-from vpp_acl import AclRule, VppAcl, VppAclInterface
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl, VppAclInterface, VppAclPlugin
 
 
 class TestACLpluginL2L3(VppTestCase):
@@ -75,12 +75,12 @@ class TestACLpluginL2L3(VppTestCase):
             i.admin_up()
 
         # Create BD with MAC learning enabled and put interfaces to this BD
-        cls.vapi.sw_interface_set_l2_bridge(
+        cls.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=cls.loop0.sw_if_index, bd_id=cls.bd_id,
             port_type=L2_PORT_TYPE.BVI)
-        cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=cls.pg0.sw_if_index,
+        cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=cls.pg0.sw_if_index,
                                             bd_id=cls.bd_id)
-        cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=cls.pg1.sw_if_index,
+        cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=cls.pg1.sw_if_index,
                                             bd_id=cls.bd_id)
 
         # Configure IPv4 addresses on loopback interface and routed interface
@@ -107,11 +107,13 @@ class TestACLpluginL2L3(VppTestCase):
         half = cls.remote_hosts_count // 2
         cls.pg0.remote_hosts = cls.loop0.remote_hosts[:half]
         cls.pg1.remote_hosts = cls.loop0.remote_hosts[half:]
-        reply = cls.vapi.papi.acl_stats_intf_counters_enable(enable=1)
+
+        cls.acl_plugin = VppAclPlugin(cls.vclient)
+        cls.acl_plugin.enable_intf_counters = True
 
     @classmethod
     def tearDownClass(cls):
-        reply = cls.vapi.papi.acl_stats_intf_counters_enable(enable=0)
+        cls.acl_plugin.enable_intf_counters = False
         super(TestACLpluginL2L3, cls).tearDownClass()
 
     def tearDown(self):
@@ -122,17 +124,17 @@ class TestACLpluginL2L3(VppTestCase):
         super(TestACLpluginL2L3, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show l2patch"))
-        self.logger.info(self.vapi.cli("show classify tables"))
-        self.logger.info(self.vapi.cli("show l2fib verbose"))
-        self.logger.info(self.vapi.cli("show bridge-domain %s detail" %
+        self.logger.info(self.vclient.cli("show l2patch"))
+        self.logger.info(self.vclient.cli("show classify tables"))
+        self.logger.info(self.vclient.cli("show l2fib verbose"))
+        self.logger.info(self.vclient.cli("show bridge-domain %s detail" %
                                        self.bd_id))
-        self.logger.info(self.vapi.cli("show ip neighbors"))
+        self.logger.info(self.vclient.cli("show ip neighbors"))
         cmd = "show acl-plugin sessions verbose 1"
-        self.logger.info(self.vapi.cli(cmd))
-        self.logger.info(self.vapi.cli("show acl-plugin acl"))
-        self.logger.info(self.vapi.cli("show acl-plugin interface"))
-        self.logger.info(self.vapi.cli("show acl-plugin tables"))
+        self.logger.info(self.vclient.cli(cmd))
+        self.logger.info(self.vclient.cli("show acl-plugin acl"))
+        self.logger.info(self.vclient.cli("show acl-plugin interface"))
+        self.logger.info(self.vclient.cli("show acl-plugin tables"))
 
     def create_stream(self, src_ip_if, dst_ip_if, reverse, packet_sizes,
                       is_ip6, expect_blocked, expect_established,
@@ -368,15 +370,15 @@ class TestACLpluginL2L3(VppTestCase):
 
         # Add a few ACLs made from shuffled rules
         shuffle(all_rules)
-        acl1 = VppAcl(self, rules=all_rules[::2], tag="shuffle 1. acl")
+        acl1 = VppAcl(self.vclient, rules=all_rules[::2], tag="shuffle 1. acl")
         acl1.add_vpp_config()
 
         shuffle(all_rules)
-        acl2 = VppAcl(self, rules=all_rules[::3], tag="shuffle 2. acl")
+        acl2 = VppAcl(self.vclient, rules=all_rules[::3], tag="shuffle 2. acl")
         acl2.add_vpp_config()
 
         shuffle(all_rules)
-        acl3 = VppAcl(self, rules=all_rules[::2], tag="shuffle 3. acl")
+        acl3 = VppAcl(self.vclient, rules=all_rules[::2], tag="shuffle 3. acl")
         acl3.add_vpp_config()
 
         # apply the shuffle ACLs in front
@@ -423,9 +425,9 @@ class TestACLpluginL2L3(VppTestCase):
         r_permit = stream_dict['permit_rules']
         r_permit_reflect = stream_dict['permit_and_reflect_rules']
         r_action = r_permit_reflect if is_reflect else r
-        action_acl = VppAcl(self, rules=r_action, tag="act. acl")
+        action_acl = VppAcl(self.vclient, rules=r_action, tag="act. acl")
         action_acl.add_vpp_config()
-        permit_acl = VppAcl(self, rules=r_permit, tag="perm. acl")
+        permit_acl = VppAcl(self.vclient, rules=r_permit, tag="perm. acl")
         permit_acl.add_vpp_config()
 
         return {'L2': action_acl if test_l2_action else permit_acl,
@@ -448,15 +450,15 @@ class TestACLpluginL2L3(VppTestCase):
         n_input_l3 = 0 if bridged_to_routed else 1
         n_input_l2 = 1 if bridged_to_routed else 0
 
-        acl_if_pg2 = VppAclInterface(self, sw_if_index=self.pg2.sw_if_index,
+        acl_if_pg2 = VppAclInterface(self.vclient, sw_if_index=self.pg2.sw_if_index,
                                      n_input=n_input_l3, acls=[acl_idx['L3']])
         acl_if_pg2.add_vpp_config()
 
-        acl_if_pg0 = VppAclInterface(self, sw_if_index=self.pg0.sw_if_index,
+        acl_if_pg0 = VppAclInterface(self.vclient, sw_if_index=self.pg0.sw_if_index,
                                      n_input=n_input_l2, acls=[acl_idx['L2']])
         acl_if_pg0.add_vpp_config()
 
-        acl_if_pg1 = VppAclInterface(self, sw_if_index=self.pg1.sw_if_index,
+        acl_if_pg1 = VppAclInterface(self.vclient, sw_if_index=self.pg1.sw_if_index,
                                      n_input=n_input_l2, acls=[acl_idx['L2']])
         acl_if_pg1.add_vpp_config()
 
@@ -506,17 +508,17 @@ class TestACLpluginL2L3(VppTestCase):
         else:
             outbound_l3_acl = acl_idx_rev['L3']
 
-        acl_if_pg2 = VppAclInterface(self, sw_if_index=self.pg2.sw_if_index,
+        acl_if_pg2 = VppAclInterface(self.vclient, sw_if_index=self.pg2.sw_if_index,
                                      n_input=1,
                                      acls=[inbound_l3_acl, outbound_l3_acl])
         acl_if_pg2.add_vpp_config()
 
-        acl_if_pg0 = VppAclInterface(self, sw_if_index=self.pg0.sw_if_index,
+        acl_if_pg0 = VppAclInterface(self.vclient, sw_if_index=self.pg0.sw_if_index,
                                      n_input=1,
                                      acls=[inbound_l2_acl, outbound_l2_acl])
         acl_if_pg0.add_vpp_config()
 
-        acl_if_pg1 = VppAclInterface(self, sw_if_index=self.pg1.sw_if_index,
+        acl_if_pg1 = VppAclInterface(self.vclient, sw_if_index=self.pg1.sw_if_index,
                                      n_input=1,
                                      acls=[inbound_l2_acl, outbound_l2_acl])
         acl_if_pg1.add_vpp_config()
@@ -535,7 +537,7 @@ class TestACLpluginL2L3(VppTestCase):
                                           is_reflect, add_eh)
 
     def verify_acl_packet_count(self, acl_idx, packet_count):
-        matches = self.statistics.get_counter('/acl/%d/matches' % acl_idx)
+        matches = self.vclient.statistics.get_counter('/acl/%d/matches' % acl_idx)
         self.logger.info("stat seg for ACL %d: %s" % (acl_idx, repr(matches)))
         total_count = 0
         for p in matches[0]:
@@ -629,19 +631,19 @@ class TestACLpluginL2L3(VppTestCase):
         """ ACL plugin prepare"""
         if not self.vpp_dead:
             cmd = "set acl-plugin session timeout udp idle 2000"
-            self.logger.info(self.vapi.ppcli(cmd))
+            self.logger.info(self.vclient.ppcli(cmd))
             # uncomment to not skip past the routing header
             # and watch the EH tests fail
-            # self.logger.info(self.vapi.ppcli(
+            # self.logger.info(self.vclient.ppcli(
             #    "set acl-plugin skip-ipv6-extension-header 43 0"))
             # uncomment to test the session limit (stateful tests will fail)
-            # self.logger.info(self.vapi.ppcli(
+            # self.logger.info(self.vclient.ppcli(
             #    "set acl-plugin session table max-entries 1"))
             # new datapath is the default, but just in case
-            # self.logger.info(self.vapi.ppcli(
+            # self.logger.info(self.vclient.ppcli(
             #    "set acl-plugin l2-datapath new"))
             # If you want to see some tests fail, uncomment the next line
-            # self.logger.info(self.vapi.ppcli(
+            # self.logger.info(self.vclient.ppcli(
             #    "set acl-plugin l2-datapath old"))
 
     def test_0001_ip6_irb_1(self):
diff --git a/src/plugins/acl/test/test_acl_plugin_macip.py b/src/plugins/acl/test/test_acl_plugin_macip.py
index 5edd7b032..466bf265f 100644
--- a/src/plugins/acl/test/test_acl_plugin_macip.py
+++ b/src/plugins/acl/test/test_acl_plugin_macip.py
@@ -18,11 +18,11 @@ from scapy.layers.inet import IP, UDP
 from scapy.layers.inet6 import IPv6
 
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from vpp_lo_interface import VppLoInterface
-from vpp_l2 import L2_PORT_TYPE
-from vpp_sub_interface import L2_VTR_OP, VppSubInterface, VppDot1QSubint, \
+from vpp_pom.vpp_lo_interface import VppLoInterface
+from vpp_pom.vpp_l2 import L2_PORT_TYPE
+from vpp_pom.vpp_sub_interface import L2_VTR_OP, VppSubInterface, VppDot1QSubint, \
     VppDot1ADSubint
-from vpp_acl import AclRule, VppAcl, VppAclInterface, VppEtypeWhitelist, \
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl, VppAclInterface, VppEtypeWhitelist, \
     VppMacipAclInterface, VppMacipAcl, MacipRule
 from vpp_papi import MACAddress
 
@@ -76,10 +76,10 @@ class MethodHolder(VppTestCase):
 
             # create 2 subinterfaces
             cls.subifs = [
-                VppDot1QSubint(cls, cls.pg1, 10),
-                VppDot1ADSubint(cls, cls.pg2, 20, 300, 400),
-                VppDot1QSubint(cls, cls.pg3, 30),
-                VppDot1ADSubint(cls, cls.pg3, 40, 600, 700)]
+                VppDot1QSubint(cls.vclient, cls.pg1, 10),
+                VppDot1ADSubint(cls.vclient, cls.pg2, 20, 300, 400),
+                VppDot1QSubint(cls.vclient, cls.pg3, 30),
+                VppDot1ADSubint(cls.vclient, cls.pg3, 40, 600, 700)]
 
             cls.subifs[0].set_vtr(L2_VTR_OP.L2_POP_1,
                                   inner=10, push1q=1)
@@ -98,16 +98,16 @@ class MethodHolder(VppTestCase):
                 i.admin_up()
 
             # Create BD with MAC learning enabled and put interfaces to this BD
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.loop0.sw_if_index, bd_id=cls.bd_id,
                 port_type=L2_PORT_TYPE.BVI)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg0.sw_if_index, bd_id=cls.bd_id)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg1.sw_if_index, bd_id=cls.bd_id)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.subifs[0].sw_if_index, bd_id=cls.bd_id)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.subifs[1].sw_if_index, bd_id=cls.bd_id)
 
             # Configure IPv4/6 addresses on loop interface and routed interface
@@ -164,21 +164,21 @@ class MethodHolder(VppTestCase):
         self.reset_packet_infos()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show interface address"))
-        self.logger.info(self.vapi.ppcli("show hardware"))
-        self.logger.info(self.vapi.ppcli("sh acl-plugin macip acl"))
-        self.logger.info(self.vapi.ppcli("sh acl-plugin macip interface"))
-        self.logger.info(self.vapi.ppcli("sh classify tables verbose"))
-        self.logger.info(self.vapi.ppcli("sh acl-plugin acl"))
-        self.logger.info(self.vapi.ppcli("sh acl-plugin interface"))
-        self.logger.info(self.vapi.ppcli("sh acl-plugin tables"))
-        # print(self.vapi.ppcli("show interface address"))
-        # print(self.vapi.ppcli("show hardware"))
-        # print(self.vapi.ppcli("sh acl-plugin macip interface"))
-        # print(self.vapi.ppcli("sh acl-plugin macip acl"))
+        self.logger.info(self.vclient.ppcli("show interface address"))
+        self.logger.info(self.vclient.ppcli("show hardware"))
+        self.logger.info(self.vclient.ppcli("sh acl-plugin macip acl"))
+        self.logger.info(self.vclient.ppcli("sh acl-plugin macip interface"))
+        self.logger.info(self.vclient.ppcli("sh classify tables verbose"))
+        self.logger.info(self.vclient.ppcli("sh acl-plugin acl"))
+        self.logger.info(self.vclient.ppcli("sh acl-plugin interface"))
+        self.logger.info(self.vclient.ppcli("sh acl-plugin tables"))
+        # print(self.vclient.ppcli("show interface address"))
+        # print(self.vclient.ppcli("show hardware"))
+        # print(self.vclient.ppcli("sh acl-plugin macip interface"))
+        # print(self.vclient.ppcli("sh acl-plugin macip acl"))
 
     def macip_acl_dump_debug(self):
-        acls = self.vapi.macip_acl_dump()
+        acls = self.vclient.macip_acl_dump()
         if self.DEBUG:
             for acl in acls:
                 # print("ACL #"+str(acl.acl_index))
@@ -274,7 +274,7 @@ class MethodHolder(VppTestCase):
     def apply_macip_rules(self, acls):
         macip_acls = []
         for acl in acls:
-            macip_acl = VppMacipAcl(self, rules=acl)
+            macip_acl = VppMacipAcl(self.vclient, rules=acl)
             macip_acl.add_vpp_config()
             macip_acls.append(macip_acl)
         return macip_acls
@@ -284,12 +284,12 @@ class MethodHolder(VppTestCase):
         for acl in range(2, (acl_count+1) * 2):
             self.assertEqual(reply[acl - 2].count, rules_count[acl//2-1])
 
-        self.vapi.macip_acl_interface_get()
+        self.vclient.macip_acl_interface_get()
 
-        self.vapi.macip_acl_interface_add_del(sw_if_index=0, acl_index=0)
-        self.vapi.macip_acl_interface_add_del(sw_if_index=1, acl_index=1)
+        self.vclient.macip_acl_interface_add_del(sw_if_index=0, acl_index=0)
+        self.vclient.macip_acl_interface_add_del(sw_if_index=1, acl_index=1)
 
-        reply = self.vapi.macip_acl_interface_get()
+        reply = self.vclient.macip_acl_interface_get()
         self.assertEqual(reply.count, expected_count)
 
     def create_stream(self, mac_type, ip_type, packet_count,
@@ -626,14 +626,14 @@ class MethodHolder(VppTestCase):
 
         if apply_rules:
             if isMACIP:
-                self.acl = VppMacipAcl(self, rules=test_dict['macip_rules'])
+                self.acl = VppMacipAcl(self.vclient, rules=test_dict['macip_rules'])
             else:
-                self.acl = VppAcl(self, rules=test_dict['acl_rules'])
+                self.acl = VppAcl(self.vclient, rules=test_dict['acl_rules'])
             self.acl.add_vpp_config()
 
             if isMACIP:
                 self.acl_if = VppMacipAclInterface(
-                    self, sw_if_index=tx_if.sw_if_index, acls=[self.acl])
+                    self.vclient, sw_if_index=tx_if.sw_if_index, acls=[self.acl])
                 self.acl_if.add_vpp_config()
 
                 dump = self.acl_if.dump()
@@ -641,7 +641,7 @@ class MethodHolder(VppTestCase):
                 self.assertEqual(dump[0].acls[0], self.acl.acl_index)
             else:
                 self.acl_if = VppAclInterface(
-                    self, sw_if_index=tx_if.sw_if_index, n_input=1,
+                    self.vclient, sw_if_index=tx_if.sw_if_index, n_input=1,
                     acls=[self.acl])
                 self.acl_if.add_vpp_config()
         else:
@@ -1096,60 +1096,64 @@ class TestMACIP(MethodHolder):
         macip_alcs = self.apply_macip_rules(
             self.create_rules(acl_count=3, rules_count=[3, 5, 4]))
 
-        intf.append(VppLoInterface(self))
-        intf.append(VppLoInterface(self))
+        intf.append(VppLoInterface(self.vclient))
+        intf[0].add_vpp_config()
+        intf.append(VppLoInterface(self.vclient))
+        intf[1].add_vpp_config()
 
         sw_if_index0 = intf[0].sw_if_index
         macip_acl_if0 = VppMacipAclInterface(
-            self, sw_if_index=sw_if_index0, acls=[macip_alcs[1]])
+            self.vclient, sw_if_index=sw_if_index0, acls=[macip_alcs[1]])
         macip_acl_if0.add_vpp_config()
 
-        reply = self.vapi.macip_acl_interface_get()
+        reply = self.vclient.macip_acl_interface_get()
         self.assertEqual(reply.count, intf_count+1)
         self.assertEqual(reply.acls[sw_if_index0], 1)
 
         sw_if_index1 = intf[1].sw_if_index
         macip_acl_if1 = VppMacipAclInterface(
-            self, sw_if_index=sw_if_index1, acls=[macip_alcs[0]])
+            self.vclient, sw_if_index=sw_if_index1, acls=[macip_alcs[0]])
         macip_acl_if1.add_vpp_config()
 
-        reply = self.vapi.macip_acl_interface_get()
+        reply = self.vclient.macip_acl_interface_get()
         self.assertEqual(reply.count, intf_count+2)
         self.assertEqual(reply.acls[sw_if_index1], 0)
 
         intf[0].remove_vpp_config()
-        reply = self.vapi.macip_acl_interface_get()
+        reply = self.vclient.macip_acl_interface_get()
         self.assertEqual(reply.count, intf_count+2)
         self.assertEqual(reply.acls[sw_if_index0], 4294967295)
         self.assertEqual(reply.acls[sw_if_index1], 0)
 
-        intf.append(VppLoInterface(self))
-        intf.append(VppLoInterface(self))
+        intf.append(VppLoInterface(self.vclient))
+        intf[2].add_vpp_config()
+        intf.append(VppLoInterface(self.vclient))
+        intf[3].add_vpp_config()
         sw_if_index2 = intf[2].sw_if_index
         sw_if_index3 = intf[3].sw_if_index
         macip_acl_if2 = VppMacipAclInterface(
-            self, sw_if_index=sw_if_index2, acls=[macip_alcs[1]])
+            self.vclient, sw_if_index=sw_if_index2, acls=[macip_alcs[1]])
         macip_acl_if2.add_vpp_config()
         macip_acl_if3 = VppMacipAclInterface(
-            self, sw_if_index=sw_if_index3, acls=[macip_alcs[1]])
+            self.vclient, sw_if_index=sw_if_index3, acls=[macip_alcs[1]])
         macip_acl_if3.add_vpp_config()
 
-        reply = self.vapi.macip_acl_interface_get()
+        reply = self.vclient.macip_acl_interface_get()
         self.assertEqual(reply.count, intf_count+3)
         self.assertEqual(reply.acls[sw_if_index1], 0)
         self.assertEqual(reply.acls[sw_if_index2], 1)
         self.assertEqual(reply.acls[sw_if_index3], 1)
         self.logger.info("MACIP ACL on multiple interfaces:")
-        self.logger.info(self.vapi.ppcli("sh acl-plugin macip acl"))
-        self.logger.info(self.vapi.ppcli("sh acl-plugin macip acl index 1234"))
-        self.logger.info(self.vapi.ppcli("sh acl-plugin macip acl index 1"))
-        self.logger.info(self.vapi.ppcli("sh acl-plugin macip acl index 0"))
-        self.logger.info(self.vapi.ppcli("sh acl-plugin macip interface"))
+        self.logger.info(self.vclient.ppcli("sh acl-plugin macip acl"))
+        self.logger.info(self.vclient.ppcli("sh acl-plugin macip acl index 1234"))
+        self.logger.info(self.vclient.ppcli("sh acl-plugin macip acl index 1"))
+        self.logger.info(self.vclient.ppcli("sh acl-plugin macip acl index 0"))
+        self.logger.info(self.vclient.ppcli("sh acl-plugin macip interface"))
 
         intf[2].remove_vpp_config()
         intf[1].remove_vpp_config()
 
-        reply = self.vapi.macip_acl_interface_get()
+        reply = self.vclient.macip_acl_interface_get()
         self.assertEqual(reply.count, intf_count+3)
         self.assertEqual(reply.acls[sw_if_index0], 4294967295)
         self.assertEqual(reply.acls[sw_if_index1], 4294967295)
@@ -1157,7 +1161,7 @@ class TestMACIP(MethodHolder):
         self.assertEqual(reply.acls[sw_if_index3], 1)
 
         intf[3].remove_vpp_config()
-        reply = self.vapi.macip_acl_interface_get()
+        reply = self.vclient.macip_acl_interface_get()
 
         self.assertEqual(len([x for x in reply.acls if x != 4294967295]), 0)
 
diff --git a/src/plugins/acl/test/test_classify_l2_acl.py b/src/plugins/acl/test/test_classify_l2_acl.py
index b1309881e..c8d525694 100644
--- a/src/plugins/acl/test/test_classify_l2_acl.py
+++ b/src/plugins/acl/test/test_classify_l2_acl.py
@@ -15,7 +15,7 @@ from scapy.layers.inet import IP, TCP, UDP, ICMP
 from scapy.layers.inet6 import IPv6, ICMPv6EchoRequest
 from scapy.layers.inet6 import IPv6ExtHdrFragment
 from framework import VppTestCase, VppTestRunner
-from util import Host, ppp
+from vpp_pom.util import Host, ppp
 from template_classifier import TestClassifier
 
 
@@ -104,10 +104,10 @@ class TestClassifyAcl(TestClassifier):
 
             # Create BD with MAC learning and unknown unicast flooding disabled
             # and put interfaces to this BD
-            cls.vapi.bridge_domain_add_del(bd_id=cls.bd_id, uu_flood=1,
+            cls.vclient.bridge_domain_add_del(bd_id=cls.bd_id, uu_flood=1,
                                            learn=1)
             for pg_if in cls.pg_interfaces:
-                cls.vapi.sw_interface_set_l2_bridge(
+                cls.vclient.sw_interface_set_l2_bridge(
                     rx_sw_if_index=pg_if.sw_if_index, bd_id=cls.bd_id)
 
             # Set up all interfaces
@@ -175,7 +175,7 @@ class TestClassifyAcl(TestClassifier):
             - create(1) or delete(0)
         """
         mask_match, mask_match_len = self._resolve_mask_match(match)
-        r = self.vapi.classify_add_del_session(
+        r = self.vclient.classify_add_del_session(
             is_add=is_add,
             table_index=table_index,
             match=mask_match,
diff --git a/src/plugins/adl/test/test_adl.py b/src/plugins/adl/test/test_adl.py
index 4a996fc5c..743ef005e 100644
--- a/src/plugins/adl/test/test_adl.py
+++ b/src/plugins/adl/test/test_adl.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner, running_gcov_tests
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 class TestAdl(VppTestCase):
@@ -80,22 +80,22 @@ class TestAdl(VppTestCase):
                 "pa en\n"]
 
         for cmd in cmds:
-            r = self.vapi.cli_return_response(cmd)
+            r = self.vclient.cli_return_response(cmd)
             if r.retval != 0:
                 if hasattr(r, 'reply'):
                     self.logger.info(cmd + " FAIL reply " + r.reply)
                 else:
                     self.logger.info(cmd + " FAIL retval " + str(r.retval))
 
-        total_pkts = self.statistics.get_err_counter(
+        total_pkts = self.vclient.statistics.get_err_counter(
             "/err/adl-input/Allow/Deny packets processed")
 
         self.assertEqual(total_pkts, 200)
 
-        ip4_allow = self.statistics.get_err_counter(
+        ip4_allow = self.vclient.statistics.get_err_counter(
             "/err/ip4-adl-allowlist/ip4 allowlist allowed")
         self.assertEqual(ip4_allow, 12)
-        ip6_allow = self.statistics.get_err_counter(
+        ip6_allow = self.vclient.statistics.get_err_counter(
             "/err/ip6-adl-allowlist/ip6 allowlist allowed")
         self.assertEqual(ip6_allow, 50)
 
diff --git a/src/plugins/cdp/test/test_cdp.py b/src/plugins/cdp/test/test_cdp.py
index 46751e81d..e6db0d833 100644
--- a/src/plugins/cdp/test/test_cdp.py
+++ b/src/plugins/cdp/test/test_cdp.py
@@ -11,7 +11,7 @@ from framework import VppTestCase
 from scapy.all import raw
 from re import compile
 from time import sleep
-from util import ppp
+from vpp_pom.util import ppp
 import platform
 import sys
 import unittest
@@ -78,14 +78,14 @@ class TestCDP(VppTestCase):
         super(TestCDP, cls).tearDownClass()
 
     def test_enable_cdp(self):
-        self.logger.info(self.vapi.cdp_enable_disable(enable_disable=1))
-        ret = self.vapi.cli("show cdp")
+        self.logger.info(self.vclient.cdp_enable_disable(enable_disable=1))
+        ret = self.vclient.cli("show cdp")
         self.logger.info(ret)
         not_enabled = self.nen_ptr.search(ret)
         self.assertFalse(not_enabled, "CDP isn't enabled")
 
     def test_send_cdp_packet(self):
-        self.logger.info(self.vapi.cdp_enable_disable(enable_disable=1))
+        self.logger.info(self.vclient.cdp_enable_disable(enable_disable=1))
         self.send_packet(self.create_packet())
 
         neighbors = list(self.show_cdp())
@@ -105,10 +105,10 @@ class TestCDP(VppTestCase):
         self.send_bad_packet(8, ".")
 
     def send_bad_packet(self, l, v):
-        self.logger.info(self.vapi.cdp_enable_disable(enable_disable=1))
+        self.logger.info(self.vclient.cdp_enable_disable(enable_disable=1))
         self.send_packet(self.create_bad_packet(l, v))
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/cdp-input/cdp packets with bad TLVs')
         self.assertTrue(err >= 1, "CDP didn't drop bad packet")
 
@@ -140,7 +140,7 @@ class TestCDP(VppTestCase):
         return packet
 
     def process_cli(self, exp, ptr):
-        for line in self.vapi.cli(exp).split('\n')[1:]:
+        for line in self.vclient.cli(exp).split('\n')[1:]:
             m = ptr.match(line.strip())
             if m:
                 yield m.groups()
diff --git a/src/plugins/cnat/test/test_cnat.py b/src/plugins/cnat/test/test_cnat.py
index d46d047e5..8dbdb5dc2 100644
--- a/src/plugins/cnat/test/test_cnat.py
+++ b/src/plugins/cnat/test/test_cnat.py
@@ -3,7 +3,8 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto, INVALID_INDEX
+from vpp_pom.vpp_ip import DpoProto, INVALID_INDEX
+from vpp_pom.plugins.vpp_cnat import VppCNatTranslation
 from itertools import product
 
 from scapy.packet import Raw
@@ -18,7 +19,6 @@ import struct
 from ipaddress import ip_address, ip_network, \
     IPv4Address, IPv6Address, IPv4Network, IPv6Network
 
-from vpp_object import VppObject
 from vpp_papi import VppEnum
 
 N_PKTS = 15
@@ -76,67 +76,6 @@ class EpTuple(object):
         return ("%s->%s" % (self.src, self.dst))
 
 
-class VppCNatTranslation(VppObject):
-
-    def __init__(self, test, iproto, vip, paths):
-        self._test = test
-        self.vip = vip
-        self.iproto = iproto
-        self.paths = paths
-        self.encoded_paths = []
-        for path in self.paths:
-            self.encoded_paths.append(path.encode())
-
-    def __str__(self):
-        return ("%s %s %s" % (self.vip, self.iproto, self.paths))
-
-    @property
-    def vl4_proto(self):
-        ip_proto = VppEnum.vl_api_ip_proto_t
-        return {
-            UDP: ip_proto.IP_API_PROTO_UDP,
-            TCP: ip_proto.IP_API_PROTO_TCP,
-        }[self.iproto]
-
-    def add_vpp_config(self):
-        r = self._test.vapi.cnat_translation_update(
-            {'vip': self.vip.encode(),
-             'ip_proto': self.vl4_proto,
-             'n_paths': len(self.paths),
-             'paths': self.encoded_paths})
-        self._test.registry.register(self, self._test.logger)
-        self.id = r.id
-
-    def modify_vpp_config(self, paths):
-        self.paths = paths
-        self.encoded_paths = []
-        for path in self.paths:
-            self.encoded_paths.append(path.encode())
-
-        r = self._test.vapi.cnat_translation_update(
-            {'vip': self.vip.encode(),
-             'ip_proto': self.vl4_proto,
-             'n_paths': len(self.paths),
-             'paths': self.encoded_paths})
-        self._test.registry.register(self, self._test.logger)
-
-    def remove_vpp_config(self):
-        self._test.vapi.cnat_translation_del(id=self.id)
-
-    def query_vpp_config(self):
-        for t in self._test.vapi.cnat_translation_dump():
-            if self.id == t.translation.id:
-                return t.translation
-        return None
-
-    def object_id(self):
-        return ("cnat-translation-%s" % (self.vip))
-
-    def get_stats(self):
-        c = self._test.statistics.get_counter("/net/cnat-translation")
-        return c[0][self.id]
-
-
 class TestCNatTranslation(VppTestCase):
     """ CNat Translation """
     extra_vpp_punt_config = ["cnat", "{",
@@ -178,7 +117,7 @@ class TestCNatTranslation(VppTestCase):
         dep = Ep(getattr(self.pg1.remote_hosts[nbr], ip_v), 4000 + nbr)
         sep = Ep("::", 0) if vip.isV6 else Ep("0.0.0.0", 0)
         t1 = VppCNatTranslation(
-            self, vip.l4p, vip,
+            self.vclient, vip.l4p, vip,
             [EpTuple(sep, dep), EpTuple(sep, dep)])
         t1.add_vpp_config()
         return t1
@@ -200,11 +139,11 @@ class TestCNatTranslation(VppTestCase):
                       vip.l4p(sport=sport, dport=vip.port) /
                       Raw())
 
-                self.vapi.cli("trace add pg-input 1")
+                self.vclient.cli("trace add pg-input 1")
                 rxs = self.send_and_expect(self.pg0,
                                            p1 * N_PKTS,
                                            self.pg1)
-                self.logger.info(self.vapi.cli("show trace max 1"))
+                self.logger.info(self.vclient.cli("show trace max 1"))
 
                 for rx in rxs:
                     self.assert_packet_checksums_valid(rx)
@@ -329,16 +268,16 @@ class TestCNatTranslation(VppTestCase):
         # turn the scanner off whilst testing otherwise sessions
         # will time out
         #
-        self.vapi.cli("test cnat scanner off")
+        self.vclient.cli("test cnat scanner off")
 
-        sessions = self.vapi.cnat_session_dump()
+        sessions = self.vclient.cnat_session_dump()
 
         trs = []
         for nbr, vip in enumerate(vips):
             trs.append(self.cnat_create_translation(vip, nbr))
 
-        self.logger.info(self.vapi.cli("sh cnat client"))
-        self.logger.info(self.vapi.cli("sh cnat translation"))
+        self.logger.info(self.vclient.cli("sh cnat client"))
+        self.logger.info(self.vclient.cli("sh cnat translation"))
 
         #
         # translations
@@ -347,29 +286,29 @@ class TestCNatTranslation(VppTestCase):
             self.cnat_test_translation(trs[nbr], nbr, sports, isV6=isV6)
             self.cnat_test_translation_update(trs[nbr], sports, isV6=isV6)
             if isV6:
-                self.logger.info(self.vapi.cli(
+                self.logger.info(self.vclient.cli(
                     "sh ip6 fib %s" % self.pg0.remote_ip6))
             else:
-                self.logger.info(self.vapi.cli(
+                self.logger.info(self.vclient.cli(
                     "sh ip fib %s" % self.pg0.remote_ip4))
-            self.logger.info(self.vapi.cli("sh cnat session verbose"))
+            self.logger.info(self.vclient.cli("sh cnat session verbose"))
 
         #
         # turn the scanner back on and wait until the sessions
         # all disapper
         #
-        self.vapi.cli("test cnat scanner on")
+        self.vclient.cli("test cnat scanner on")
 
         n_tries = 0
-        sessions = self.vapi.cnat_session_dump()
+        sessions = self.vclient.cnat_session_dump()
         while (len(sessions) and n_tries < 100):
             n_tries += 1
-            sessions = self.vapi.cnat_session_dump()
+            sessions = self.vclient.cnat_session_dump()
             self.sleep(2)
-            self.logger.info(self.vapi.cli("show cnat session verbose"))
+            self.logger.info(self.vclient.cli("show cnat session verbose"))
 
         self.assertTrue(n_tries < 100)
-        self.vapi.cli("test cnat scanner off")
+        self.vclient.cli("test cnat scanner off")
 
         #
         # load some flows again and purge
@@ -390,9 +329,9 @@ class TestCNatTranslation(VppTestCase):
         for tr in trs:
             tr.remove_vpp_config()
 
-        self.assertTrue(self.vapi.cnat_session_dump())
-        self.vapi.cnat_session_purge()
-        self.assertFalse(self.vapi.cnat_session_dump())
+        self.assertTrue(self.vclient.cnat_session_dump())
+        self.vclient.cnat_session_purge()
+        self.assertFalse(self.vclient.cnat_session_dump())
 
     def test_icmp(self):
         vips = [
@@ -412,13 +351,13 @@ class TestCNatTranslation(VppTestCase):
         self.pg1.configure_ipv6_neighbors()
         self.pg1.configure_ipv4_neighbors()
 
-        self.vapi.cli("test cnat scanner off")
+        self.vclient.cli("test cnat scanner off")
         trs = []
         for nbr, vip in enumerate(vips):
             trs.append(self.cnat_create_translation(vip, nbr))
 
-        self.logger.info(self.vapi.cli("sh cnat client"))
-        self.logger.info(self.vapi.cli("sh cnat translation"))
+        self.logger.info(self.vclient.cli("sh cnat client"))
+        self.logger.info(self.vclient.cli("sh cnat translation"))
 
         for nbr, vip in enumerate(vips):
             if vip.isV6:
@@ -495,7 +434,7 @@ class TestCNatTranslation(VppTestCase):
                 self.assertEqual(rx[ICMP46][IP46error]
                                  [TCPUDPError].dport, vip.port)
 
-        self.vapi.cnat_session_purge()
+        self.vclient.cnat_session_purge()
 
     def test_cnat6(self):
         # """ CNat Translation ipv6 """
@@ -561,23 +500,23 @@ class TestCNatSourceNAT(VppTestCase):
         self.pg1.configure_ipv4_neighbors()
         self.pg1.configure_ipv6_neighbors()
 
-        self.vapi.cli("test cnat scanner off")
-        self.vapi.cnat_set_snat_addresses(
+        self.vclient.cli("test cnat scanner off")
+        self.vclient.cnat_set_snat_addresses(
             snat_ip4=self.pg2.remote_hosts[0].ip4,
             snat_ip6=self.pg2.remote_hosts[0].ip6)
-        self.vapi.feature_enable_disable(
+        self.vclient.feature_enable_disable(
             enable=1,
             arc_name="ip6-unicast",
             feature_name="ip6-cnat-snat",
             sw_if_index=self.pg0.sw_if_index)
-        self.vapi.feature_enable_disable(
+        self.vclient.feature_enable_disable(
             enable=1,
             arc_name="ip4-unicast",
             feature_name="ip4-cnat-snat",
             sw_if_index=self.pg0.sw_if_index)
 
     def tearDown(self):
-        self.vapi.cnat_session_purge()
+        self.vclient.cnat_session_purge()
         for i in self.pg_interfaces:
             i.unconfig_ip4()
             i.unconfig_ip6()
@@ -776,12 +715,12 @@ class TestCNatSourceNAT(VppTestCase):
                 l4p(sport=sports[nbr], dport=dports[nbr]) /
                 Raw())
 
-            self.vapi.cli("trace add pg-input 1")
+            self.vclient.cli("trace add pg-input 1")
             rxs = self.send_and_expect(
                 self.pg0,
                 p1 * N_PKTS,
                 self.pg1)
-            self.logger.info(self.vapi.cli("show trace max 1"))
+            self.logger.info(self.vclient.cli("show trace max 1"))
 
             for rx in rxs:
                 self.assert_packet_checksums_valid(rx)
@@ -811,8 +750,8 @@ class TestCNatSourceNAT(VppTestCase):
                 self.assertEqual(rx[IP46].src, remote_addr)
 
             # add remote host to exclude list
-            self.vapi.cnat_add_del_snat_prefix(prefix=exclude_prefix, is_add=1)
-            self.vapi.cnat_session_purge()
+            self.vclient.cnat_add_del_snat_prefix(prefix=exclude_prefix, is_add=1)
+            self.vclient.cnat_session_purge()
 
             rxs = self.send_and_expect(
                 self.pg0,
@@ -825,8 +764,8 @@ class TestCNatSourceNAT(VppTestCase):
                 self.assertEqual(rx[IP46].src, client_addr)
 
             # remove remote host from exclude list
-            self.vapi.cnat_add_del_snat_prefix(prefix=exclude_prefix, is_add=0)
-            self.vapi.cnat_session_purge()
+            self.vclient.cnat_add_del_snat_prefix(prefix=exclude_prefix, is_add=0)
+            self.vclient.cnat_session_purge()
 
             rxs = self.send_and_expect(
                 self.pg0,
@@ -839,7 +778,7 @@ class TestCNatSourceNAT(VppTestCase):
                 self.assertEqual(rx[l4p].dport, dports[nbr])
                 self.assertEqual(rx[IP46].src, src_nat_addr)
 
-            self.vapi.cnat_session_purge()
+            self.vclient.cnat_session_purge()
 
 
 class TestCNatDHCP(VppTestCase):
@@ -872,7 +811,7 @@ class TestCNatDHCP(VppTestCase):
                 Ep.from_pg(src_pg, is_v6=is_v6),
                 Ep.from_pg(dst_pg, is_v6=is_v6)
             ))
-        t1 = VppCNatTranslation(self, TCP, vip, paths)
+        t1 = VppCNatTranslation(self.vclient, TCP, vip, paths)
         t1.add_vpp_config()
         return t1
 
@@ -902,7 +841,7 @@ class TestCNatDHCP(VppTestCase):
 
     def config_ips(self, rng, is_add=1, is_v6=False):
         for pg, i in product(self.pg_interfaces, rng):
-            self.vapi.sw_interface_add_del_address(
+            self.vclient.sw_interface_add_del_address(
                 sw_if_index=pg.sw_if_index,
                 prefix=self.make_prefix(pg.sw_if_index, i, is_v6),
                 is_add=is_add)
@@ -939,10 +878,10 @@ class TestCNatDHCP(VppTestCase):
         self.create_pg_interfaces(range(1))
         for i in self.pg_interfaces:
             i.admin_up()
-        self.vapi.cnat_set_snat_addresses(sw_if_index=self.pg0.sw_if_index)
+        self.vclient.cnat_set_snat_addresses(sw_if_index=self.pg0.sw_if_index)
         self.config_ips([0], is_v6=False)
         self.config_ips([0], is_v6=True)
-        r = self.vapi.cnat_get_snat_addresses()
+        r = self.vclient.cnat_get_snat_addresses()
         self.assertEqual(str(r.snat_ip4), self.make_addr(
             self.pg0.sw_if_index, 0, False))
         self.assertEqual(str(r.snat_ip6), self.make_addr(
@@ -951,7 +890,7 @@ class TestCNatDHCP(VppTestCase):
         self.config_ips([1], is_v6=True)
         self.config_ips([0], is_add=0, is_v6=False)
         self.config_ips([0], is_add=0, is_v6=True)
-        r = self.vapi.cnat_get_snat_addresses()
+        r = self.vclient.cnat_get_snat_addresses()
         self.assertEqual(str(r.snat_ip4), self.make_addr(
             self.pg0.sw_if_index, 1, False))
         self.assertEqual(str(r.snat_ip6), self.make_addr(
diff --git a/src/plugins/dhcp/test/test_dhcp.py b/src/plugins/dhcp/test/test_dhcp.py
index 266932c38..5b7ce19b6 100644
--- a/src/plugins/dhcp/test/test_dhcp.py
+++ b/src/plugins/dhcp/test/test_dhcp.py
@@ -6,9 +6,9 @@ import struct
 import six
 
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from vpp_neighbor import VppNeighbor
-from vpp_ip_route import find_route, VppIpTable
-from util import mk_ll_addr
+from vpp_pom.vpp_neighbor import VppNeighbor
+from vpp_pom.vpp_ip_route import find_route, VppIpTable
+from vpp_pom.util import mk_ll_addr
 import scapy.compat
 from scapy.layers.l2 import Ether, getmacbyip, ARP, Dot1Q
 from scapy.layers.inet import IP, UDP, ICMP
@@ -21,9 +21,9 @@ from scapy.layers.dhcp6 import DHCP6, DHCP6_Solicit, DHCP6_RelayForward, \
 from socket import AF_INET, AF_INET6, inet_pton, inet_ntop
 from scapy.utils6 import in6_ptop
 from vpp_papi import mac_pton, VppEnum
-from vpp_sub_interface import VppDot1QSubint
-from vpp_qos import VppQosEgressMap, VppQosMark
-from vpp_dhcp import VppDHCPClient, VppDHCPProxy
+from vpp_pom.vpp_sub_interface import VppDot1QSubint
+from vpp_pom.vpp_qos import VppQosEgressMap, VppQosMark
+from vpp_pom.plugins.vpp_dhcp import VppDHCPClient, VppDHCPProxy
 
 
 DHCP4_CLIENT_PORT = 68
@@ -58,10 +58,10 @@ class TestDHCP(VppTestCase):
         # pg3 to 5 are non IP-configured in VRF 0, 1 and 2.
         table_id = 0
         for table_id in range(1, 4):
-            tbl4 = VppIpTable(self, table_id)
+            tbl4 = VppIpTable(self.vclient, table_id)
             tbl4.add_vpp_config()
             self.tables.append(tbl4)
-            tbl6 = VppIpTable(self, table_id, is_ip6=1)
+            tbl6 = VppIpTable(self.vclient, table_id, is_ip6=1)
             tbl6.add_vpp_config()
             self.tables.append(tbl6)
 
@@ -407,7 +407,7 @@ class TestDHCP(VppTestCase):
     def wait_for_no_route(self, address, length,
                           n_tries=50, s_time=1):
         while (n_tries):
-            if not find_route(self, address, length):
+            if not find_route(self.vclient, address, length):
                 return True
             n_tries = n_tries - 1
             self.sleep(s_time)
@@ -458,7 +458,7 @@ class TestDHCP(VppTestCase):
         server_addr = self.pg0.remote_ip4
         src_addr = self.pg0.local_ip4
 
-        Proxy = VppDHCPProxy(self, server_addr, src_addr, rx_vrf_id=0)
+        Proxy = VppDHCPProxy(self.vclient, server_addr, src_addr, rx_vrf_id=0)
         Proxy.add_vpp_config()
 
         #
@@ -583,7 +583,7 @@ class TestDHCP(VppTestCase):
         server_addr1 = self.pg1.remote_ip4
         src_addr1 = self.pg1.local_ip4
         Proxy1 = VppDHCPProxy(
-            self,
+            self.vclient,
             server_addr1,
             src_addr1,
             rx_vrf_id=1,
@@ -593,7 +593,7 @@ class TestDHCP(VppTestCase):
         server_addr2 = self.pg2.remote_ip4
         src_addr2 = self.pg2.local_ip4
         Proxy2 = VppDHCPProxy(
-            self,
+            self.vclient,
             server_addr2,
             src_addr2,
             rx_vrf_id=2,
@@ -632,9 +632,9 @@ class TestDHCP(VppTestCase):
         # Add VSS config
         #  table=1, vss_type=1, vpn_index=1, oui=4
         #  table=2, vss_type=0, vpn_id = "ip4-table-2"
-        self.vapi.dhcp_proxy_set_vss(tbl_id=1, vss_type=1,
+        self.vclient.dhcp_proxy_set_vss(tbl_id=1, vss_type=1,
                                      vpn_index=1, oui=4, is_add=1)
-        self.vapi.dhcp_proxy_set_vss(tbl_id=2, vss_type=0,
+        self.vclient.dhcp_proxy_set_vss(tbl_id=2, vss_type=0,
                                      vpn_ascii_id="ip4-table-2", is_add=1)
 
         self.pg4.add_stream(pkts_disc_vrf1)
@@ -665,7 +665,7 @@ class TestDHCP(VppTestCase):
         server_addr12 = self.pg1.remote_hosts[1].ip4
 
         Proxy12 = VppDHCPProxy(
-            self,
+            self.vclient,
             server_addr12,
             src_addr,
             rx_vrf_id=1,
@@ -675,7 +675,7 @@ class TestDHCP(VppTestCase):
         #
         # We'll need an ARP entry for the server to send it packets
         #
-        arp_entry = VppNeighbor(self,
+        arp_entry = VppNeighbor(self.vclient,
                                 self.pg1.sw_if_index,
                                 self.pg1.remote_hosts[1].mac,
                                 self.pg1.remote_hosts[1].ip4)
@@ -783,8 +783,8 @@ class TestDHCP(VppTestCase):
         # Remove the VSS config
         #  relayed DHCP has default vlaues in the option.
         #
-        self.vapi.dhcp_proxy_set_vss(tbl_id=1, is_add=0)
-        self.vapi.dhcp_proxy_set_vss(tbl_id=2, is_add=0)
+        self.vclient.dhcp_proxy_set_vss(tbl_id=1, is_add=0)
+        self.vclient.dhcp_proxy_set_vss(tbl_id=2, is_add=0)
 
         self.pg4.add_stream(pkts_disc_vrf1)
         self.pg_enable_capture(self.pg_interfaces)
@@ -860,7 +860,7 @@ class TestDHCP(VppTestCase):
         # IPv6 config
         #
         Proxy = VppDHCPProxy(
-            self,
+            self.vclient,
             server_addr_vrf0,
             src_addr_vrf0,
             rx_vrf_id=0,
@@ -977,7 +977,7 @@ class TestDHCP(VppTestCase):
         # Add all the config for VRF 1 & 2
         #
         Proxy1 = VppDHCPProxy(
-            self,
+            self.vclient,
             server_addr_vrf1,
             src_addr_vrf1,
             rx_vrf_id=1,
@@ -986,7 +986,7 @@ class TestDHCP(VppTestCase):
         self.pg4.config_ip6()
 
         Proxy2 = VppDHCPProxy(
-            self,
+            self.vclient,
             server_addr_vrf2,
             src_addr_vrf2,
             rx_vrf_id=2,
@@ -1044,9 +1044,9 @@ class TestDHCP(VppTestCase):
         #
         # Add VSS config
         #
-        self.vapi.dhcp_proxy_set_vss(
+        self.vclient.dhcp_proxy_set_vss(
             tbl_id=1, vss_type=1, oui=4, vpn_index=1, is_ipv6=1, is_add=1)
-        self.vapi.dhcp_proxy_set_vss(
+        self.vclient.dhcp_proxy_set_vss(
             tbl_id=2,
             vss_type=0,
             vpn_ascii_id="IPv6-table-2",
@@ -1080,7 +1080,7 @@ class TestDHCP(VppTestCase):
         # Remove the VSS config
         #  relayed DHCP has default vlaues in the option.
         #
-        self.vapi.dhcp_proxy_set_vss(tbl_id=1, is_ipv6=1, is_add=0)
+        self.vclient.dhcp_proxy_set_vss(tbl_id=1, is_ipv6=1, is_add=0)
 
         self.pg4.add_stream(p_solicit_vrf1)
         self.pg_enable_capture(self.pg_interfaces)
@@ -1100,7 +1100,7 @@ class TestDHCP(VppTestCase):
         server_addr12 = self.pg1.remote_hosts[1].ip6
 
         Proxy12 = VppDHCPProxy(
-            self,
+            self.vclient,
             server_addr12,
             src_addr_vrf1,
             rx_vrf_id=1,
@@ -1110,7 +1110,7 @@ class TestDHCP(VppTestCase):
         #
         # We'll need an ND entry for the server to send it packets
         #
-        nd_entry = VppNeighbor(self,
+        nd_entry = VppNeighbor(self.vclient,
                                self.pg1.sw_if_index,
                                self.pg1.remote_hosts[1].mac,
                                self.pg1.remote_hosts[1].ip6)
@@ -1238,7 +1238,7 @@ class TestDHCP(VppTestCase):
         #
         # Configure DHCP client on PG3 and capture the discover sent
         #
-        Client = VppDHCPClient(self, self.pg3.sw_if_index, hostname)
+        Client = VppDHCPClient(self.vclient, self.pg3.sw_if_index, hostname)
         Client.add_vpp_config()
         self.assertTrue(Client.query_vpp_config())
 
@@ -1298,8 +1298,8 @@ class TestDHCP(VppTestCase):
         # At the end of this procedure there should be a connected route
         # in the FIB
         #
-        self.assertTrue(find_route(self, self.pg3.local_ip4, 24))
-        self.assertTrue(find_route(self, self.pg3.local_ip4, 32))
+        self.assertTrue(find_route(self.vclient, self.pg3.local_ip4, 24))
+        self.assertTrue(find_route(self.vclient, self.pg3.local_ip4, 32))
 
         #
         # remove the DHCP config
@@ -1309,8 +1309,8 @@ class TestDHCP(VppTestCase):
         #
         # and now the route should be gone
         #
-        self.assertFalse(find_route(self, self.pg3.local_ip4, 32))
-        self.assertFalse(find_route(self, self.pg3.local_ip4, 24))
+        self.assertFalse(find_route(self.vclient, self.pg3.local_ip4, 32))
+        self.assertFalse(find_route(self.vclient, self.pg3.local_ip4, 24))
 
         #
         # Start the procedure again. this time have VPP send the client-ID
@@ -1375,16 +1375,16 @@ class TestDHCP(VppTestCase):
         # At the end of this procedure there should be a connected route
         # in the FIB
         #
-        self.assertTrue(find_route(self, self.pg3.local_ip4, 32))
-        self.assertTrue(find_route(self, self.pg3.local_ip4, 24))
+        self.assertTrue(find_route(self.vclient, self.pg3.local_ip4, 32))
+        self.assertTrue(find_route(self.vclient, self.pg3.local_ip4, 24))
 
         #
         # remove the DHCP config
         #
         Client.remove_vpp_config()
 
-        self.assertFalse(find_route(self, self.pg3.local_ip4, 32))
-        self.assertFalse(find_route(self, self.pg3.local_ip4, 24))
+        self.assertFalse(find_route(self.vclient, self.pg3.local_ip4, 32))
+        self.assertFalse(find_route(self.vclient, self.pg3.local_ip4, 24))
 
         #
         # Rince and repeat, this time with VPP configured not to set
@@ -1459,13 +1459,13 @@ class TestDHCP(VppTestCase):
         # At the end of this procedure there should be a connected route
         # in the FIB
         #
-        self.assertTrue(find_route(self, self.pg3.local_ip4, 24))
-        self.assertTrue(find_route(self, self.pg3.local_ip4, 32))
+        self.assertTrue(find_route(self.vclient, self.pg3.local_ip4, 24))
+        self.assertTrue(find_route(self.vclient, self.pg3.local_ip4, 32))
 
         #
         # read the DHCP client details from a dump
         #
-        clients = self.vapi.dhcp_client_dump()
+        clients = self.vclient.dhcp_client_dump()
 
         self.assertEqual(clients[0].client.sw_if_index,
                          self.pg3.sw_if_index)
@@ -1486,7 +1486,7 @@ class TestDHCP(VppTestCase):
         #  the first attempt will be an ARP packet, since we have not yet
         #  responded to VPP's request
         #
-        self.logger.info(self.vapi.cli("sh dhcp client intfc pg3 verbose"))
+        self.logger.info(self.vclient.cli("sh dhcp client intfc pg3 verbose"))
         rx = self.pg3.get_capture(1, timeout=10)
 
         self.assertEqual(rx[0][ARP].pdst, self.pg3.remote_ip4)
@@ -1531,7 +1531,7 @@ class TestDHCP(VppTestCase):
         #
         # read the DHCP client details from a dump
         #
-        clients = self.vapi.dhcp_client_dump()
+        clients = self.vclient.dhcp_client_dump()
 
         self.assertEqual(clients[0].client.sw_if_index,
                          self.pg3.sw_if_index)
@@ -1555,8 +1555,8 @@ class TestDHCP(VppTestCase):
         #
         # and now the route should be gone
         #
-        self.assertFalse(find_route(self, self.pg3.local_ip4, 32))
-        self.assertFalse(find_route(self, self.pg3.local_ip4, 24))
+        self.assertFalse(find_route(self.vclient, self.pg3.local_ip4, 32))
+        self.assertFalse(find_route(self.vclient, self.pg3.local_ip4, 24))
 
         #
         # Start the procedure again. Use requested lease time option.
@@ -1628,8 +1628,8 @@ class TestDHCP(VppTestCase):
         # At the end of this procedure there should be a connected route
         # in the FIB
         #
-        self.assertTrue(find_route(self, self.pg3.local_ip4, 32))
-        self.assertTrue(find_route(self, self.pg3.local_ip4, 24))
+        self.assertTrue(find_route(self.vclient, self.pg3.local_ip4, 32))
+        self.assertTrue(find_route(self.vclient, self.pg3.local_ip4, 24))
 
         #
         # the route should be gone after the lease expires
@@ -1651,7 +1651,7 @@ class TestDHCP(VppTestCase):
 
         self.pg_enable_capture(self.pg_interfaces)
 
-        vlan_100 = VppDot1QSubint(self, self.pg3, 100)
+        vlan_100 = VppDot1QSubint(self.vclient, self.pg3, 100)
         vlan_100.admin_up()
 
         output = [scapy.compat.chb(4)] * 256
@@ -1661,15 +1661,15 @@ class TestDHCP(VppTestCase):
                 {'outputs': os},
                 {'outputs': os}]
 
-        qem1 = VppQosEgressMap(self, 1, rows).add_vpp_config()
-        qm1 = VppQosMark(self, vlan_100, qem1,
+        qem1 = VppQosEgressMap(self.vclient, 1, rows).add_vpp_config()
+        qm1 = VppQosMark(self.vclient, vlan_100, qem1,
                          vqos.QOS_API_SOURCE_VLAN).add_vpp_config()
 
         #
         # Configure DHCP client on PG3 and capture the discover sent
         #
         Client = VppDHCPClient(
-            self,
+            self.vclient,
             vlan_100.sw_if_index,
             hostname,
             dscp=vdscp.IP_API_DSCP_EF)
diff --git a/src/plugins/dhcp/test/test_dhcp6.py b/src/plugins/dhcp/test/test_dhcp6.py
index ebd43729e..078587d2a 100644
--- a/src/plugins/dhcp/test/test_dhcp6.py
+++ b/src/plugins/dhcp/test/test_dhcp6.py
@@ -10,7 +10,7 @@ from scapy.utils6 import in6_mactoifaceid
 
 from framework import VppTestCase
 from vpp_papi import VppEnum
-import util
+import vpp_pom.util as util
 import os
 
 
@@ -49,14 +49,14 @@ class TestDHCPv6DataPlane(VppTestCase):
     def test_dhcp_ia_na_send_solicit_receive_advertise(self):
         """ Verify DHCPv6 IA NA Solicit packet and Advertise event """
 
-        self.vapi.dhcp6_clients_enable_disable(enable=1)
+        self.vclient.dhcp6_clients_enable_disable(enable=1)
 
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
         address = {'address': '1:2:3::5',
                    'preferred_time': 60,
                    'valid_time': 120}
-        self.vapi.dhcp6_send_client_message(
+        self.vclient.dhcp6_send_client_message(
             server_index=0xffffffff,
             mrc=1,
             msg_type=VppEnum.vl_api_dhcpv6_msg_type_t.DHCPV6_MSG_API_SOLICIT,
@@ -91,7 +91,7 @@ class TestDHCPv6DataPlane(VppTestCase):
         self.assert_equal(address.preflft, 60)
         self.assert_equal(address.validlft, 120)
 
-        self.vapi.want_dhcp6_reply_events(enable_disable=1,
+        self.vclient.want_dhcp6_reply_events(enable_disable=1,
                                           pid=os.getpid())
 
         try:
@@ -111,7 +111,7 @@ class TestDHCPv6DataPlane(VppTestCase):
             self.pg0.add_stream([p])
             self.pg_start()
 
-            ev = self.vapi.wait_for_event(1, "dhcp6_reply_event")
+            ev = self.vclient.wait_for_event(1, "dhcp6_reply_event")
 
             self.assert_equal(ev.preference, 7)
             self.assert_equal(ev.status_code, 1)
@@ -127,13 +127,13 @@ class TestDHCPv6DataPlane(VppTestCase):
                               ia_na_opts.getfieldval("validlft"))
 
         finally:
-            self.vapi.want_dhcp6_reply_events(enable_disable=0)
-        self.vapi.dhcp6_clients_enable_disable(enable=0)
+            self.vclient.want_dhcp6_reply_events(enable_disable=0)
+        self.vclient.dhcp6_clients_enable_disable(enable=0)
 
     def test_dhcp_pd_send_solicit_receive_advertise(self):
         """ Verify DHCPv6 PD Solicit packet and Advertise event """
 
-        self.vapi.dhcp6_clients_enable_disable(enable=1)
+        self.vclient.dhcp6_clients_enable_disable(enable=1)
 
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -142,7 +142,7 @@ class TestDHCPv6DataPlane(VppTestCase):
                   'preferred_time': 60,
                   'valid_time': 120}
         prefixes = [prefix]
-        self.vapi.dhcp6_pd_send_client_message(
+        self.vclient.dhcp6_pd_send_client_message(
             server_index=0xffffffff,
             mrc=1,
             msg_type=VppEnum.vl_api_dhcpv6_msg_type_t.DHCPV6_MSG_API_SOLICIT,
@@ -177,7 +177,7 @@ class TestDHCPv6DataPlane(VppTestCase):
         self.assert_equal(prefix.preflft, 60)
         self.assert_equal(prefix.validlft, 120)
 
-        self.vapi.want_dhcp6_pd_reply_events(enable_disable=1,
+        self.vclient.want_dhcp6_pd_reply_events(enable_disable=1,
                                              pid=os.getpid())
 
         try:
@@ -197,7 +197,7 @@ class TestDHCPv6DataPlane(VppTestCase):
             self.pg0.add_stream([p])
             self.pg_start()
 
-            ev = self.vapi.wait_for_event(1, "dhcp6_pd_reply_event")
+            ev = self.vclient.wait_for_event(1, "dhcp6_pd_reply_event")
 
             self.assert_equal(ev.preference, 7)
             self.assert_equal(ev.status_code, 1)
@@ -216,8 +216,8 @@ class TestDHCPv6DataPlane(VppTestCase):
                               ia_pd_opts.getfieldval("validlft"))
 
         finally:
-            self.vapi.want_dhcp6_pd_reply_events(enable_disable=0)
-        self.vapi.dhcp6_clients_enable_disable(enable=0)
+            self.vclient.want_dhcp6_pd_reply_events(enable_disable=0)
+        self.vclient.dhcp6_clients_enable_disable(enable=0)
 
 
 class TestDHCPv6IANAControlPlane(VppTestCase):
@@ -248,18 +248,18 @@ class TestDHCPv6IANAControlPlane(VppTestCase):
         self.T1 = 1
         self.T2 = 2
 
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         self.initial_addresses = set(self.get_interface_addresses(fib,
                                                                   self.pg0))
 
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.vapi.dhcp6_client_enable_disable(sw_if_index=self.pg0.sw_if_index,
+        self.vclient.dhcp6_client_enable_disable(sw_if_index=self.pg0.sw_if_index,
                                               enable=1)
 
     def tearDown(self):
-        self.vapi.dhcp6_client_enable_disable(sw_if_index=self.pg0.sw_if_index,
+        self.vclient.dhcp6_client_enable_disable(sw_if_index=self.pg0.sw_if_index,
                                               enable=0)
 
         for i in self.interfaces:
@@ -278,7 +278,7 @@ class TestDHCPv6IANAControlPlane(VppTestCase):
         return lst
 
     def get_addresses(self):
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         addresses = set(self.get_interface_addresses(fib, self.pg0))
         return addresses.difference(self.initial_addresses)
 
@@ -405,7 +405,7 @@ class TestDHCPv6IANAControlPlane(VppTestCase):
         self.sleep(2)
 
         # check that the address is deleted
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         addresses = set(self.get_interface_addresses(fib, self.pg0))
         new_addresses = addresses.difference(self.initial_addresses)
         self.assertEqual(len(new_addresses), 0)
@@ -454,7 +454,7 @@ class TestDHCPv6IANAControlPlane(VppTestCase):
         self.sleep(0.5)
 
         # check FIB contains no addresses
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         addresses = set(self.get_interface_addresses(fib, self.pg0))
         new_addresses = addresses.difference(self.initial_addresses)
         self.assertEqual(len(new_addresses), 0)
@@ -471,7 +471,7 @@ class TestDHCPv6IANAControlPlane(VppTestCase):
         self.sleep(0.5)
 
         # check FIB contains no addresses
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         addresses = set(self.get_interface_addresses(fib, self.pg0))
         new_addresses = addresses.difference(self.initial_addresses)
         self.assertEqual(len(new_addresses), 0)
@@ -501,7 +501,7 @@ class TestDHCPv6PDControlPlane(VppTestCase):
         self.T1 = 1
         self.T2 = 2
 
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         self.initial_addresses = set(self.get_interface_addresses(fib,
                                                                   self.pg1))
 
@@ -510,13 +510,13 @@ class TestDHCPv6PDControlPlane(VppTestCase):
 
         self.prefix_group = 'my-pd-prefix-group'
 
-        self.vapi.dhcp6_pd_client_enable_disable(
+        self.vclient.dhcp6_pd_client_enable_disable(
             enable=1,
             sw_if_index=self.pg0.sw_if_index,
             prefix_group=self.prefix_group)
 
     def tearDown(self):
-        self.vapi.dhcp6_pd_client_enable_disable(self.pg0.sw_if_index,
+        self.vclient.dhcp6_pd_client_enable_disable(self.pg0.sw_if_index,
                                                  enable=0)
 
         for i in self.interfaces:
@@ -535,7 +535,7 @@ class TestDHCPv6PDControlPlane(VppTestCase):
         return lst
 
     def get_addresses(self):
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         addresses = set(self.get_interface_addresses(fib, self.pg1))
         return addresses.difference(self.initial_addresses)
 
@@ -647,7 +647,7 @@ class TestDHCPv6PDControlPlane(VppTestCase):
         address1 = '::2:0:0:0:405/60'
         address2 = '::76:0:0:0:406/62'
         try:
-            self.vapi.ip6_add_del_address_using_prefix(
+            self.vclient.ip6_add_del_address_using_prefix(
                 sw_if_index=self.pg1.sw_if_index,
                 address_with_prefix=address1,
                 prefix_group=self.prefix_group)
@@ -669,7 +669,7 @@ class TestDHCPv6PDControlPlane(VppTestCase):
 
             self.sleep(1)
 
-            self.vapi.ip6_add_del_address_using_prefix(
+            self.vclient.ip6_add_del_address_using_prefix(
                 sw_if_index=self.pg1.sw_if_index,
                 address_with_prefix=address2,
                 prefix_group=self.prefix_group)
@@ -677,7 +677,7 @@ class TestDHCPv6PDControlPlane(VppTestCase):
             self.sleep(1)
 
             # check FIB contains 2 addresses
-            fib = self.vapi.ip_route_dump(0, True)
+            fib = self.vclient.ip_route_dump(0, True)
             addresses = set(self.get_interface_addresses(fib, self.pg1))
             new_addresses = addresses.difference(self.initial_addresses)
             self.assertEqual(len(new_addresses), 2)
@@ -691,19 +691,19 @@ class TestDHCPv6PDControlPlane(VppTestCase):
             self.sleep(1)
 
             # check that the addresses are deleted
-            fib = self.vapi.ip_route_dump(0, True)
+            fib = self.vclient.ip_route_dump(0, True)
             addresses = set(self.get_interface_addresses(fib, self.pg1))
             new_addresses = addresses.difference(self.initial_addresses)
             self.assertEqual(len(new_addresses), 0)
 
         finally:
             if address1 is not None:
-                self.vapi.ip6_add_del_address_using_prefix(
+                self.vclient.ip6_add_del_address_using_prefix(
                     sw_if_index=self.pg1.sw_if_index,
                     address_with_prefix=address1,
                     prefix_group=self.prefix_group, is_add=0)
             if address2 is not None:
-                self.vapi.ip6_add_del_address_using_prefix(
+                self.vclient.ip6_add_del_address_using_prefix(
                     sw_if_index=self.pg1.sw_if_index,
                     address_with_prefix=address2,
                     prefix_group=self.prefix_group, is_add=0)
@@ -745,7 +745,7 @@ class TestDHCPv6PDControlPlane(VppTestCase):
 
         address1 = '::2:0:0:0:405/60'
         try:
-            self.vapi.ip6_add_del_address_using_prefix(
+            self.vclient.ip6_add_del_address_using_prefix(
                 sw_if_index=self.pg1.sw_if_index,
                 address_with_prefix=address1,
                 prefix_group=self.prefix_group)
@@ -760,13 +760,13 @@ class TestDHCPv6PDControlPlane(VppTestCase):
             self.sleep(0.5)
 
             # check FIB contains no addresses
-            fib = self.vapi.ip_route_dump(0, True)
+            fib = self.vclient.ip_route_dump(0, True)
             addresses = set(self.get_interface_addresses(fib, self.pg1))
             new_addresses = addresses.difference(self.initial_addresses)
             self.assertEqual(len(new_addresses), 0)
 
         finally:
-            self.vapi.ip6_add_del_address_using_prefix(
+            self.vclient.ip6_add_del_address_using_prefix(
                 sw_if_index=self.pg1.sw_if_index,
                 address_with_prefix=address1,
                 prefix_group=self.prefix_group,
@@ -777,7 +777,7 @@ class TestDHCPv6PDControlPlane(VppTestCase):
 
         address1 = '::2:0:0:0:405/60'
         try:
-            self.vapi.ip6_add_del_address_using_prefix(
+            self.vclient.ip6_add_del_address_using_prefix(
                 sw_if_index=self.pg1.sw_if_index,
                 address_with_prefix=address1,
                 prefix_group=self.prefix_group)
@@ -792,13 +792,13 @@ class TestDHCPv6PDControlPlane(VppTestCase):
             self.sleep(0.5)
 
             # check FIB contains no addresses
-            fib = self.vapi.ip_route_dump(0, True)
+            fib = self.vclient.ip_route_dump(0, True)
             addresses = set(self.get_interface_addresses(fib, self.pg1))
             new_addresses = addresses.difference(self.initial_addresses)
             self.assertEqual(len(new_addresses), 0)
 
         finally:
-            self.vapi.ip6_add_del_address_using_prefix(
+            self.vclient.ip6_add_del_address_using_prefix(
                 sw_if_index=self.pg1.sw_if_index,
                 prefix_group=self.prefix_group,
                 address_with_prefix=address1,
diff --git a/src/plugins/dns/test/test_dns.py b/src/plugins/dns/test/test_dns.py
index fb8958c51..817aca00d 100644
--- a/src/plugins/dns/test/test_dns.py
+++ b/src/plugins/dns/test/test_dns.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 from ipaddress import *
 
 import scapy.compat
@@ -71,21 +71,21 @@ class TestDns(VppTestCase):
         """ DNS Name Resolver Basic Functional Test """
 
         # Set up an upstream name resolver. We won't actually go there
-        self.vapi.dns_name_server_add_del(
+        self.vclient.dns_name_server_add_del(
             is_ip6=0, is_add=1, server_address=IPv4Address(u'8.8.8.8').packed)
 
         # Enable name resolution
-        self.vapi.dns_enable_disable(enable=1)
+        self.vclient.dns_enable_disable(enable=1)
 
         # Manually add a static dns cache entry
-        self.logger.info(self.vapi.cli("dns cache add bozo.clown.org 1.2.3.4"))
+        self.logger.info(self.vclient.cli("dns cache add bozo.clown.org 1.2.3.4"))
 
         # Test the binary API
-        rv = self.vapi.dns_resolve_name(name=b'bozo.clown.org')
+        rv = self.vclient.dns_resolve_name(name=b'bozo.clown.org')
         self.assertEqual(rv.ip4_address, IPv4Address(u'1.2.3.4').packed)
 
         # Configure 127.0.0.1/8 on the pg interface
-        self.vapi.sw_interface_add_del_address(
+        self.vclient.sw_interface_add_del_address(
             sw_if_index=self.pg0.sw_if_index,
             prefix="127.0.0.1/8")
 
@@ -101,7 +101,7 @@ class TestDns(VppTestCase):
         self.verify_capture(self.pg0, pkts)
 
         # Make sure that the cache contents are correct
-        str = self.vapi.cli("show dns cache verbose")
+        str = self.vclient.cli("show dns cache verbose")
         self.assertIn('1.2.3.4', str)
         self.assertIn('[P] no.clown.org:', str)
 
diff --git a/src/plugins/flowprobe/test/test_flowprobe.py b/src/plugins/flowprobe/test/test_flowprobe.py
index 4cf019ad4..405aada55 100644
--- a/src/plugins/flowprobe/test/test_flowprobe.py
+++ b/src/plugins/flowprobe/test/test_flowprobe.py
@@ -13,11 +13,11 @@ from scapy.layers.inet import IP, TCP, UDP
 from scapy.layers.inet6 import IPv6
 
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from vpp_object import VppObject
-from vpp_pg_interface import CaptureTimeoutError
-from util import ppp
+from vpp_pom.vpp_object import VppObject
+from vpp_pom.vpp_pg_interface import CaptureTimeoutError
+from vpp_pom.util import ppp
 from ipfix import IPFIX, Set, Template, Data, IPFIXDecoder
-from vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
 from vpp_papi.macaddress import mac_ntop
 from socket import inet_ntop
 from vpp_papi import VppEnum
@@ -55,35 +55,35 @@ class VppCFLOW(VppObject):
         if 'l4' in self._collect.lower():
             l4_flag = (VppEnum.vl_api_flowprobe_record_flags_t.
                        FLOWPROBE_RECORD_FLAG_L4)
-        self._test.vapi.flowprobe_params(
+        self._test.vclient.flowprobe_params(
             record_flags=(l2_flag | l3_flag | l4_flag),
             active_timer=self._active, passive_timer=self._passive)
         self.enable_flowprobe_feature()
-        self._test.vapi.cli("ipfix flush")
+        self._test.vclient.cli("ipfix flush")
         self._configured = True
 
     def remove_vpp_config(self):
         self.disable_exporter()
         self.disable_flowprobe_feature()
-        self._test.vapi.cli("ipfix flush")
+        self._test.vclient.cli("ipfix flush")
         self._configured = False
 
     def enable_exporter(self):
-        self._test.vapi.set_ipfix_exporter(
+        self._test.vclient.set_ipfix_exporter(
             collector_address=self._test.pg0.remote_ip4,
             src_address=self._test.pg0.local_ip4,
             path_mtu=self._mtu,
             template_interval=self._timeout)
 
     def enable_flowprobe_feature(self):
-        self._test.vapi.ppcli("flowprobe feature add-del %s %s" %
+        self._test.vclient.ppcli("flowprobe feature add-del %s %s" %
                               (self._intf, self._datapath))
 
     def disable_exporter(self):
-        self._test.vapi.cli("set ipfix exporter collector 0.0.0.0")
+        self._test.vclient.cli("set ipfix exporter collector 0.0.0.0")
 
     def disable_flowprobe_feature(self):
-        self._test.vapi.cli("flowprobe feature add-del %s %s disable" %
+        self._test.vclient.cli("flowprobe feature add-del %s %s disable" %
                             (self._intf, self._datapath))
 
     def object_id(self):
@@ -139,10 +139,10 @@ class MethodHolder(VppTestCase):
 
             # Create BD with MAC learning and unknown unicast flooding disabled
             # and put interfaces to this BD
-            cls.vapi.bridge_domain_add_del(bd_id=1, uu_flood=1, learn=1)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.bridge_domain_add_del(bd_id=1, uu_flood=1, learn=1)
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg1._sw_if_index, bd_id=1)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg2._sw_if_index, bd_id=1)
 
             # Set up all interfaces
@@ -315,7 +315,7 @@ class MethodHolder(VppTestCase):
         self.logger.info("IPFIX: Waiting for CFLOW packet")
         deadline = time.time() + timeout
         counter = 0
-        # self.logger.debug(self.vapi.ppcli("show flow table"))
+        # self.logger.debug(self.vclient.ppcli("show flow table"))
         while True:
             counter += 1
             # sanity check
@@ -323,13 +323,13 @@ class MethodHolder(VppTestCase):
             time_left = deadline - time.time()
             try:
                 if time_left < 0 and expected:
-                    # self.logger.debug(self.vapi.ppcli("show flow table"))
+                    # self.logger.debug(self.vclient.ppcli("show flow table"))
                     raise CaptureTimeoutError(
                           "Packet did not arrive within timeout")
                 p = collector_intf.wait_for_packet(timeout=time_left)
             except CaptureTimeoutError:
                 if expected:
-                    # self.logger.debug(self.vapi.ppcli("show flow table"))
+                    # self.logger.debug(self.vclient.ppcli("show flow table"))
                     raise CaptureTimeoutError(
                           "Packet did not arrive within timeout")
                 else:
@@ -337,7 +337,7 @@ class MethodHolder(VppTestCase):
             if not expected:
                 raise CaptureTimeoutError("Packet arrived even not expected")
             self.assertEqual(p[Set].setID, set_id)
-            # self.logger.debug(self.vapi.ppcli("show flow table"))
+            # self.logger.debug(self.vclient.ppcli("show flow table"))
             self.logger.debug(ppp("IPFIX: Got packet:", p))
             break
         return p
@@ -420,7 +420,7 @@ class Flowprobe(MethodHolder):
                          layer='l2 l3 l4', active=2)
         ipfix.add_vpp_config()
 
-        route_9001 = VppIpRoute(self, "9.0.0.0", 24,
+        route_9001 = VppIpRoute(self.vclient, "9.0.0.0", 24,
                                 [VppRoutePath(self.pg8._remote_hosts[0].ip4,
                                               self.pg8.sw_if_index)])
         route_9001.add_vpp_config()
@@ -505,7 +505,7 @@ class Datapath(MethodHolder):
         ipfix.add_vpp_config()
 
         # template packet should arrive immediately
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         ipfix.verify_templates(timeout=3, count=1)
         self.collector.get_capture(1)
 
@@ -529,7 +529,7 @@ class Datapath(MethodHolder):
         capture = self.send_packets()
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflow = self.wait_for_cflow_packet(self.collector, templates[0])
         self.verify_cflow_data_detail(ipfix_decoder, capture, cflow,
                                       {2: 'packets', 256: 8})
@@ -555,7 +555,7 @@ class Datapath(MethodHolder):
         capture = self.send_packets()
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflow = self.wait_for_cflow_packet(self.collector, templates[0])
         self.verify_cflow_data_detail(ipfix_decoder, capture, cflow,
                                       {2: 'packets', 4: 17,
@@ -583,7 +583,7 @@ class Datapath(MethodHolder):
         capture = self.send_packets()
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflow = self.wait_for_cflow_packet(self.collector, templates[0])
         self.verify_cflow_data_detail(ipfix_decoder, capture, cflow,
                                       {2: 'packets', 7: 'sport', 11: 'dport'})
@@ -603,7 +603,7 @@ class Datapath(MethodHolder):
         ipfix.add_vpp_config()
 
         # template packet should arrive immediately
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         ipfix.verify_templates(timeout=3, count=1)
         self.collector.get_capture(1)
 
@@ -628,7 +628,7 @@ class Datapath(MethodHolder):
         capture = self.send_packets(src_if=self.pg3, dst_if=self.pg4)
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflow = self.wait_for_cflow_packet(self.collector, templates[0])
         self.verify_cflow_data_detail(ipfix_decoder, capture, cflow,
                                       {2: 'packets', 256: 8})
@@ -656,7 +656,7 @@ class Datapath(MethodHolder):
         capture = self.send_packets(src_if=self.pg3, dst_if=self.pg4)
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflow = self.wait_for_cflow_packet(self.collector, templates[0])
         self.verify_cflow_data_detail(ipfix_decoder, capture, cflow,
                                       {1: 'octets', 2: 'packets',
@@ -685,7 +685,7 @@ class Datapath(MethodHolder):
         capture = self.send_packets(src_if=self.pg3, dst_if=self.pg4)
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflow = self.wait_for_cflow_packet(self.collector, templates[0])
         self.verify_cflow_data_detail(ipfix_decoder, capture, cflow,
                                       {2: 'packets', 7: 'sport', 11: 'dport'})
@@ -730,7 +730,7 @@ class Datapath(MethodHolder):
         capture = self.send_packets(src_if=self.pg5, dst_if=self.pg6)
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflow = self.wait_for_cflow_packet(self.collector, templates[0])
         self.verify_cflow_data_detail(ipfix_decoder, capture, cflow,
                                       {2: 'packets', 256: 56710},
@@ -760,7 +760,7 @@ class Datapath(MethodHolder):
         capture = self.send_packets(src_if=self.pg5, dst_if=self.pg6)
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflow = self.wait_for_cflow_packet(self.collector, templates[0])
         self.verify_cflow_data_detail(ipfix_decoder, capture, cflow,
                                       {2: 'packets',
@@ -791,7 +791,7 @@ class Datapath(MethodHolder):
         capture = self.send_packets(src_if=self.pg5, dst_if=self.pg6)
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflow = self.wait_for_cflow_packet(self.collector, templates[0])
         self.verify_cflow_data_detail(ipfix_decoder, capture, cflow,
                                       {2: 'packets', 7: 'sport', 11: 'dport'},
@@ -820,7 +820,7 @@ class Datapath(MethodHolder):
         capture = self.send_packets()
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflow = self.wait_for_cflow_packet(self.collector, templates[1])
         self.verify_cflow_data_notimer(ipfix_decoder, capture, [cflow])
         self.collector.get_capture(4)
@@ -839,7 +839,7 @@ class Datapath(MethodHolder):
 
         ipfix_decoder = IPFIXDecoder()
         # template packet should arrive immediately
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         templates = ipfix.verify_templates(ipfix_decoder)
 
         self.create_stream(packets=6)
@@ -847,7 +847,7 @@ class Datapath(MethodHolder):
 
         # make sure the one packet we expect actually showed up
         cflows = []
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         cflows.append(self.wait_for_cflow_packet(self.collector,
                                                  templates[1]))
         cflows.append(self.wait_for_cflow_packet(self.collector,
@@ -888,7 +888,7 @@ class DisableIPFIX(MethodHolder):
         self.send_packets()
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         self.wait_for_cflow_packet(self.collector, templates[1])
         self.collector.get_capture(4)
 
@@ -899,7 +899,7 @@ class DisableIPFIX(MethodHolder):
         self.send_packets()
 
         # make sure no one packet arrived in 1 minute
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         self.wait_for_cflow_packet(self.collector, templates[1],
                                    expected=False)
         self.collector.get_capture(0)
@@ -938,19 +938,19 @@ class ReenableIPFIX(MethodHolder):
         self.send_packets()
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         self.wait_for_cflow_packet(self.collector, templates[1])
         self.collector.get_capture(4)
 
         # disable IPFIX
         ipfix.disable_exporter()
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         self.pg_enable_capture([self.collector])
 
         self.send_packets()
 
         # make sure no one packet arrived in active timer span
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         self.wait_for_cflow_packet(self.collector, templates[1],
                                    expected=False)
         self.collector.get_capture(0)
@@ -1005,7 +1005,7 @@ class DisableFP(MethodHolder):
         self.send_packets()
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         self.wait_for_cflow_packet(self.collector, templates[1])
         self.collector.get_capture(4)
 
@@ -1016,7 +1016,7 @@ class DisableFP(MethodHolder):
         self.send_packets()
 
         # make sure no one packet arrived in active timer span
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         self.wait_for_cflow_packet(self.collector, templates[1],
                                    expected=False)
         self.collector.get_capture(0)
@@ -1049,14 +1049,14 @@ class ReenableFP(MethodHolder):
 
         ipfix_decoder = IPFIXDecoder()
         # template packet should arrive immediately
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         templates = ipfix.verify_templates(ipfix_decoder, timeout=3)
 
         self.create_stream()
         self.send_packets()
 
         # make sure the one packet we expect actually showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         self.wait_for_cflow_packet(self.collector, templates[1], 5)
         self.collector.get_capture(4)
 
@@ -1067,21 +1067,21 @@ class ReenableFP(MethodHolder):
         self.send_packets()
 
         # make sure no one packet arrived in active timer span
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         self.wait_for_cflow_packet(self.collector, templates[1], 5,
                                    expected=False)
         self.collector.get_capture(0)
 
         # enable FPP feature
         ipfix.enable_flowprobe_feature()
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         templates = ipfix.verify_templates(ipfix_decoder, timeout=3)
 
         self.send_packets()
 
         # make sure the next packets (templates and data) we expect actually
         # showed up
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         self.wait_for_cflow_packet(self.collector, templates[1], 5)
         self.collector.get_capture(4)
 
diff --git a/src/plugins/gbp/test/test_gbp.py b/src/plugins/gbp/test/test_gbp.py
index df3c3ad54..11f1985fb 100644
--- a/src/plugins/gbp/test/test_gbp.py
+++ b/src/plugins/gbp/test/test_gbp.py
@@ -14,20 +14,22 @@ from scapy.layers.vxlan import VXLAN
 from scapy.data import ETH_P_IP, ETH_P_IPV6, ETH_P_ARP
 
 from framework import VppTestCase, VppTestRunner
-from vpp_object import VppObject
-from vpp_interface import VppInterface
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable, \
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable, \
     VppIpInterfaceAddress, VppIpInterfaceBind, find_route, FibPathProto, \
     FibPathType
-from vpp_l2 import VppBridgeDomain, VppBridgeDomainPort, \
+from vpp_pom.vpp_l2 import VppBridgeDomain, VppBridgeDomainPort, \
     VppBridgeDomainArpEntry, VppL2FibEntry, find_bridge_domain_port, VppL2Vtr
-from vpp_sub_interface import L2_VTR_OP, VppDot1QSubint
-from vpp_ip import DpoProto, get_dpo_proto
+from vpp_pom.vpp_sub_interface import L2_VTR_OP, VppDot1QSubint
+from vpp_pom.vpp_ip import DpoProto, get_dpo_proto
 from vpp_papi import VppEnum, MACAddress
-from vpp_vxlan_gbp_tunnel import find_vxlan_gbp_tunnel, INDEX_INVALID, \
+from vpp_pom.vpp_vxlan_gbp_tunnel import find_vxlan_gbp_tunnel, INDEX_INVALID, \
     VppVxlanGbpTunnel
-from vpp_neighbor import VppNeighbor
-from vpp_acl import AclRule, VppAcl
+from vpp_pom.vpp_neighbor import VppNeighbor
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl
+from vpp_pom.plugins.vpp_gbp import find_gbp_endpoint, VppGbpEndpointRetention, \
+    VppGbpContractNextHop, VppGbpContractRule, VppGbpEndpoint, VppGbpRecirc, \
+    VppGbpExtItf, VppGbpSubnet, VppGbpEndpointGroup, VppGbpBridgeDomain, \
+    VppGbpRouteDomain, VppGbpContract, VppGbpVxlanTunnel
 try:
     text_type = unicode
 except NameError:
@@ -36,542 +38,6 @@ except NameError:
 NUM_PKTS = 67
 
 
-def find_gbp_endpoint(test, sw_if_index=None, ip=None, mac=None,
-                      tep=None, sclass=None, flags=None):
-    if ip:
-        vip = ip
-    if mac:
-        vmac = MACAddress(mac)
-
-    eps = test.vapi.gbp_endpoint_dump()
-
-    for ep in eps:
-        if tep:
-            src = tep[0]
-            dst = tep[1]
-            if src != str(ep.endpoint.tun.src) or \
-               dst != str(ep.endpoint.tun.dst):
-                continue
-        if sw_if_index:
-            if ep.endpoint.sw_if_index != sw_if_index:
-                continue
-        if sclass:
-            if ep.endpoint.sclass != sclass:
-                continue
-        if flags:
-            if flags != (flags & ep.endpoint.flags):
-                continue
-        if ip:
-            for eip in ep.endpoint.ips:
-                if vip == str(eip):
-                    return True
-        if mac:
-            if vmac == ep.endpoint.mac:
-                return True
-
-    return False
-
-
-def find_gbp_vxlan(test, vni):
-    ts = test.vapi.gbp_vxlan_tunnel_dump()
-    for t in ts:
-        if t.tunnel.vni == vni:
-            return True
-    return False
-
-
-class VppGbpEndpoint(VppObject):
-    """
-    GBP Endpoint
-    """
-
-    @property
-    def mac(self):
-        return str(self.vmac)
-
-    @property
-    def ip4(self):
-        return self._ip4
-
-    @property
-    def fip4(self):
-        return self._fip4
-
-    @property
-    def ip6(self):
-        return self._ip6
-
-    @property
-    def fip6(self):
-        return self._fip6
-
-    @property
-    def ips(self):
-        return [self.ip4, self.ip6]
-
-    @property
-    def fips(self):
-        return [self.fip4, self.fip6]
-
-    def __init__(self, test, itf, epg, recirc, ip4, fip4, ip6, fip6,
-                 flags=0,
-                 tun_src="0.0.0.0",
-                 tun_dst="0.0.0.0",
-                 mac=True):
-        self._test = test
-        self.itf = itf
-        self.epg = epg
-        self.recirc = recirc
-
-        self._ip4 = ip4
-        self._fip4 = fip4
-        self._ip6 = ip6
-        self._fip6 = fip6
-
-        if mac:
-            self.vmac = MACAddress(self.itf.remote_mac)
-        else:
-            self.vmac = MACAddress("00:00:00:00:00:00")
-
-        self.flags = flags
-        self.tun_src = tun_src
-        self.tun_dst = tun_dst
-
-    def add_vpp_config(self):
-        res = self._test.vapi.gbp_endpoint_add(
-            self.itf.sw_if_index,
-            [self.ip4, self.ip6],
-            self.vmac.packed,
-            self.epg.sclass,
-            self.flags,
-            self.tun_src,
-            self.tun_dst)
-        self.handle = res.handle
-        self._test.registry.register(self, self._test.logger)
-
-    def remove_vpp_config(self):
-        self._test.vapi.gbp_endpoint_del(self.handle)
-
-    def object_id(self):
-        return "gbp-endpoint:[%d==%d:%s:%d]" % (self.handle,
-                                                self.itf.sw_if_index,
-                                                self.ip4,
-                                                self.epg.sclass)
-
-    def query_vpp_config(self):
-        return find_gbp_endpoint(self._test,
-                                 self.itf.sw_if_index,
-                                 self.ip4)
-
-
-class VppGbpRecirc(VppObject):
-    """
-    GBP Recirculation Interface
-    """
-
-    def __init__(self, test, epg, recirc, is_ext=False):
-        self._test = test
-        self.recirc = recirc
-        self.epg = epg
-        self.is_ext = is_ext
-
-    def add_vpp_config(self):
-        self._test.vapi.gbp_recirc_add_del(
-            1,
-            self.recirc.sw_if_index,
-            self.epg.sclass,
-            self.is_ext)
-        self._test.registry.register(self, self._test.logger)
-
-    def remove_vpp_config(self):
-        self._test.vapi.gbp_recirc_add_del(
-            0,
-            self.recirc.sw_if_index,
-            self.epg.sclass,
-            self.is_ext)
-
-    def object_id(self):
-        return "gbp-recirc:[%d]" % (self.recirc.sw_if_index)
-
-    def query_vpp_config(self):
-        rs = self._test.vapi.gbp_recirc_dump()
-        for r in rs:
-            if r.recirc.sw_if_index == self.recirc.sw_if_index:
-                return True
-        return False
-
-
-class VppGbpExtItf(VppObject):
-    """
-    GBP ExtItfulation Interface
-    """
-
-    def __init__(self, test, itf, bd, rd, anon=False):
-        self._test = test
-        self.itf = itf
-        self.bd = bd
-        self.rd = rd
-        self.flags = 1 if anon else 0
-
-    def add_vpp_config(self):
-        self._test.vapi.gbp_ext_itf_add_del(
-            1, self.itf.sw_if_index, self.bd.bd_id, self.rd.rd_id, self.flags)
-        self._test.registry.register(self, self._test.logger)
-
-    def remove_vpp_config(self):
-        self._test.vapi.gbp_ext_itf_add_del(
-            0, self.itf.sw_if_index, self.bd.bd_id, self.rd.rd_id, self.flags)
-
-    def object_id(self):
-        return "gbp-ext-itf:[%d]%s" % (self.itf.sw_if_index,
-                                       " [anon]" if self.flags else "")
-
-    def query_vpp_config(self):
-        rs = self._test.vapi.gbp_ext_itf_dump()
-        for r in rs:
-            if r.ext_itf.sw_if_index == self.itf.sw_if_index:
-                return True
-        return False
-
-
-class VppGbpSubnet(VppObject):
-    """
-    GBP Subnet
-    """
-
-    def __init__(self, test, rd, address, address_len,
-                 type, sw_if_index=None, sclass=None):
-        self._test = test
-        self.rd_id = rd.rd_id
-        a = ip_address(address)
-        if 4 == a.version:
-            self.prefix = IPv4Network("%s/%d" % (address, address_len),
-                                      strict=False)
-        else:
-            self.prefix = IPv6Network("%s/%d" % (address, address_len),
-                                      strict=False)
-        self.type = type
-        self.sw_if_index = sw_if_index
-        self.sclass = sclass
-
-    def add_vpp_config(self):
-        self._test.vapi.gbp_subnet_add_del(
-            1,
-            self.rd_id,
-            self.prefix,
-            self.type,
-            sw_if_index=self.sw_if_index if self.sw_if_index else 0xffffffff,
-            sclass=self.sclass if self.sclass else 0xffff)
-        self._test.registry.register(self, self._test.logger)
-
-    def remove_vpp_config(self):
-        self._test.vapi.gbp_subnet_add_del(
-            0,
-            self.rd_id,
-            self.prefix,
-            self.type)
-
-    def object_id(self):
-        return "gbp-subnet:[%d-%s]" % (self.rd_id, self.prefix)
-
-    def query_vpp_config(self):
-        ss = self._test.vapi.gbp_subnet_dump()
-        for s in ss:
-            if s.subnet.rd_id == self.rd_id and \
-                    s.subnet.type == self.type and \
-                    s.subnet.prefix == self.prefix:
-                return True
-        return False
-
-
-class VppGbpEndpointRetention(object):
-    def __init__(self, remote_ep_timeout=0xffffffff):
-        self.remote_ep_timeout = remote_ep_timeout
-
-    def encode(self):
-        return {'remote_ep_timeout': self.remote_ep_timeout}
-
-
-class VppGbpEndpointGroup(VppObject):
-    """
-    GBP Endpoint Group
-    """
-
-    def __init__(self, test, vnid, sclass, rd, bd, uplink,
-                 bvi, bvi_ip4, bvi_ip6=None,
-                 retention=VppGbpEndpointRetention()):
-        self._test = test
-        self.uplink = uplink
-        self.bvi = bvi
-        self.bvi_ip4 = bvi_ip4
-        self.bvi_ip6 = bvi_ip6
-        self.vnid = vnid
-        self.bd = bd
-        self.rd = rd
-        self.sclass = sclass
-        if 0 == self.sclass:
-            self.sclass = 0xffff
-        self.retention = retention
-
-    def add_vpp_config(self):
-        self._test.vapi.gbp_endpoint_group_add(
-            self.vnid,
-            self.sclass,
-            self.bd.bd.bd_id,
-            self.rd.rd_id,
-            self.uplink.sw_if_index if self.uplink else INDEX_INVALID,
-            self.retention.encode())
-        self._test.registry.register(self, self._test.logger)
-
-    def remove_vpp_config(self):
-        self._test.vapi.gbp_endpoint_group_del(self.sclass)
-
-    def object_id(self):
-        return "gbp-endpoint-group:[%d]" % (self.vnid)
-
-    def query_vpp_config(self):
-        epgs = self._test.vapi.gbp_endpoint_group_dump()
-        for epg in epgs:
-            if epg.epg.vnid == self.vnid:
-                return True
-        return False
-
-
-class VppGbpBridgeDomain(VppObject):
-    """
-    GBP Bridge Domain
-    """
-
-    def __init__(self, test, bd, rd, bvi, uu_fwd=None,
-                 bm_flood=None, learn=True,
-                 uu_drop=False, bm_drop=False,
-                 ucast_arp=False):
-        self._test = test
-        self.bvi = bvi
-        self.uu_fwd = uu_fwd
-        self.bm_flood = bm_flood
-        self.bd = bd
-        self.rd = rd
-
-        e = VppEnum.vl_api_gbp_bridge_domain_flags_t
-
-        self.flags = e.GBP_BD_API_FLAG_NONE
-        if not learn:
-            self.flags |= e.GBP_BD_API_FLAG_DO_NOT_LEARN
-        if uu_drop:
-            self.flags |= e.GBP_BD_API_FLAG_UU_FWD_DROP
-        if bm_drop:
-            self.flags |= e.GBP_BD_API_FLAG_MCAST_DROP
-        if ucast_arp:
-            self.flags |= e.GBP_BD_API_FLAG_UCAST_ARP
-
-    def add_vpp_config(self):
-        self._test.vapi.gbp_bridge_domain_add(
-            self.bd.bd_id,
-            self.rd.rd_id,
-            self.flags,
-            self.bvi.sw_if_index,
-            self.uu_fwd.sw_if_index if self.uu_fwd else INDEX_INVALID,
-            self.bm_flood.sw_if_index if self.bm_flood else INDEX_INVALID)
-        self._test.registry.register(self, self._test.logger)
-
-    def remove_vpp_config(self):
-        self._test.vapi.gbp_bridge_domain_del(self.bd.bd_id)
-
-    def object_id(self):
-        return "gbp-bridge-domain:[%d]" % (self.bd.bd_id)
-
-    def query_vpp_config(self):
-        bds = self._test.vapi.gbp_bridge_domain_dump()
-        for bd in bds:
-            if bd.bd.bd_id == self.bd.bd_id:
-                return True
-        return False
-
-
-class VppGbpRouteDomain(VppObject):
-    """
-    GBP Route Domain
-    """
-
-    def __init__(self, test, rd_id, scope, t4, t6, ip4_uu=None, ip6_uu=None):
-        self._test = test
-        self.rd_id = rd_id
-        self.scope = scope
-        self.t4 = t4
-        self.t6 = t6
-        self.ip4_uu = ip4_uu
-        self.ip6_uu = ip6_uu
-
-    def add_vpp_config(self):
-        self._test.vapi.gbp_route_domain_add(
-            self.rd_id,
-            self.scope,
-            self.t4.table_id,
-            self.t6.table_id,
-            self.ip4_uu.sw_if_index if self.ip4_uu else INDEX_INVALID,
-            self.ip6_uu.sw_if_index if self.ip6_uu else INDEX_INVALID)
-        self._test.registry.register(self, self._test.logger)
-
-    def remove_vpp_config(self):
-        self._test.vapi.gbp_route_domain_del(self.rd_id)
-
-    def object_id(self):
-        return "gbp-route-domain:[%d]" % (self.rd_id)
-
-    def query_vpp_config(self):
-        rds = self._test.vapi.gbp_route_domain_dump()
-        for rd in rds:
-            if rd.rd.rd_id == self.rd_id:
-                return True
-        return False
-
-
-class VppGbpContractNextHop():
-    def __init__(self, mac, bd, ip, rd):
-        self.mac = mac
-        self.ip = ip
-        self.bd = bd
-        self.rd = rd
-
-    def encode(self):
-        return {'ip': self.ip,
-                'mac': self.mac.packed,
-                'bd_id': self.bd.bd.bd_id,
-                'rd_id': self.rd.rd_id}
-
-
-class VppGbpContractRule():
-    def __init__(self, action, hash_mode, nhs=None):
-        self.action = action
-        self.hash_mode = hash_mode
-        self.nhs = [] if nhs is None else nhs
-
-    def encode(self):
-        nhs = []
-        for nh in self.nhs:
-            nhs.append(nh.encode())
-        while len(nhs) < 8:
-            nhs.append({})
-        return {'action': self.action,
-                'nh_set': {
-                    'hash_mode': self.hash_mode,
-                    'n_nhs': len(self.nhs),
-                    'nhs': nhs}}
-
-    def __repr__(self):
-        return '<VppGbpContractRule action=%s, hash_mode=%s>' % (
-            self.action, self.hash_mode)
-
-
-class VppGbpContract(VppObject):
-    """
-    GBP Contract
-    """
-
-    def __init__(self, test, scope, sclass, dclass, acl_index,
-                 rules, allowed_ethertypes):
-        self._test = test
-        if not isinstance(rules, list):
-            raise ValueError("'rules' must be a list.")
-        if not isinstance(allowed_ethertypes, list):
-            raise ValueError("'allowed_ethertypes' must be a list.")
-        self.scope = scope
-        self.acl_index = acl_index
-        self.sclass = sclass
-        self.dclass = dclass
-        self.rules = rules
-        self.allowed_ethertypes = allowed_ethertypes
-        while (len(self.allowed_ethertypes) < 16):
-            self.allowed_ethertypes.append(0)
-
-    def add_vpp_config(self):
-        rules = []
-        for r in self.rules:
-            rules.append(r.encode())
-        r = self._test.vapi.gbp_contract_add_del(
-            is_add=1,
-            contract={
-                'acl_index': self.acl_index,
-                'scope': self.scope,
-                'sclass': self.sclass,
-                'dclass': self.dclass,
-                'n_rules': len(rules),
-                'rules': rules,
-                'n_ether_types': len(self.allowed_ethertypes),
-                'allowed_ethertypes': self.allowed_ethertypes})
-        self.stats_index = r.stats_index
-        self._test.registry.register(self, self._test.logger)
-
-    def remove_vpp_config(self):
-        self._test.vapi.gbp_contract_add_del(
-            is_add=0,
-            contract={
-                'acl_index': self.acl_index,
-                'scope': self.scope,
-                'sclass': self.sclass,
-                'dclass': self.dclass,
-                'n_rules': 0,
-                'rules': [],
-                'n_ether_types': len(self.allowed_ethertypes),
-                'allowed_ethertypes': self.allowed_ethertypes})
-
-    def object_id(self):
-        return "gbp-contract:[%d:%d:%d:%d]" % (self.scope,
-                                               self.sclass,
-                                               self.dclass,
-                                               self.acl_index)
-
-    def query_vpp_config(self):
-        cs = self._test.vapi.gbp_contract_dump()
-        for c in cs:
-            if c.contract.scope == self.scope \
-               and c.contract.sclass == self.sclass \
-               and c.contract.dclass == self.dclass:
-                return True
-        return False
-
-    def get_drop_stats(self):
-        c = self._test.statistics.get_counter("/net/gbp/contract/drop")
-        return c[0][self.stats_index]
-
-    def get_permit_stats(self):
-        c = self._test.statistics.get_counter("/net/gbp/contract/permit")
-        return c[0][self.stats_index]
-
-
-class VppGbpVxlanTunnel(VppInterface):
-    """
-    GBP VXLAN tunnel
-    """
-
-    def __init__(self, test, vni, bd_rd_id, mode, src):
-        super(VppGbpVxlanTunnel, self).__init__(test)
-        self._test = test
-        self.vni = vni
-        self.bd_rd_id = bd_rd_id
-        self.mode = mode
-        self.src = src
-
-    def add_vpp_config(self):
-        r = self._test.vapi.gbp_vxlan_tunnel_add(
-            self.vni,
-            self.bd_rd_id,
-            self.mode,
-            self.src)
-        self.set_sw_if_index(r.sw_if_index)
-        self._test.registry.register(self, self._test.logger)
-
-    def remove_vpp_config(self):
-        self._test.vapi.gbp_vxlan_tunnel_del(self.vni)
-
-    def object_id(self):
-        return "gbp-vxlan:%d" % (self.sw_if_index)
-
-    def query_vpp_config(self):
-        return find_gbp_vxlan(self._test, self.vni)
-
-
 class TestGBP(VppTestCase):
     """ GBP Test Case """
 
@@ -586,6 +52,8 @@ class TestGBP(VppTestCase):
     @classmethod
     def setUpClass(cls):
         super(TestGBP, cls).setUpClass()
+        cls.create_pg_interfaces(range(9))
+        cls.create_loopback_interfaces(8)
 
     @classmethod
     def tearDownClass(cls):
@@ -594,9 +62,6 @@ class TestGBP(VppTestCase):
     def setUp(self):
         super(TestGBP, self).setUp()
 
-        self.create_pg_interfaces(range(9))
-        self.create_loopback_interfaces(8)
-
         self.router_mac = MACAddress("00:11:22:33:44:55")
 
         for i in self.pg_interfaces:
@@ -604,23 +69,22 @@ class TestGBP(VppTestCase):
         for i in self.lo_interfaces:
             i.admin_up()
 
-        self.vlan_100 = VppDot1QSubint(self, self.pg0, 100)
+        self.vlan_100 = VppDot1QSubint(self.vclient, self.pg0, 100)
         self.vlan_100.admin_up()
-        self.vlan_101 = VppDot1QSubint(self, self.pg0, 101)
+        self.vlan_101 = VppDot1QSubint(self.vclient, self.pg0, 101)
         self.vlan_101.admin_up()
-        self.vlan_102 = VppDot1QSubint(self, self.pg0, 102)
+        self.vlan_102 = VppDot1QSubint(self.vclient, self.pg0, 102)
         self.vlan_102.admin_up()
 
     def tearDown(self):
         for i in self.pg_interfaces:
             i.admin_down()
         super(TestGBP, self).tearDown()
-        for i in self.lo_interfaces:
-            i.remove_vpp_config()
-        self.lo_interfaces = []
         self.vlan_102.remove_vpp_config()
         self.vlan_101.remove_vpp_config()
         self.vlan_100.remove_vpp_config()
+        for i in self.lo_interfaces:
+            i.admin_down()
 
     def send_and_expect_bridged(self, src, tx, dst):
         rx = self.send_and_expect(src, tx, dst)
@@ -748,17 +212,17 @@ class TestGBP(VppTestCase):
         #
         # Route Domains
         #
-        gt4 = VppIpTable(self, 0)
+        gt4 = VppIpTable(self.vclient, 0)
         gt4.add_vpp_config()
-        gt6 = VppIpTable(self, 0, is_ip6=True)
+        gt6 = VppIpTable(self.vclient, 0, is_ip6=True)
         gt6.add_vpp_config()
-        nt4 = VppIpTable(self, 20)
+        nt4 = VppIpTable(self.vclient, 20)
         nt4.add_vpp_config()
-        nt6 = VppIpTable(self, 20, is_ip6=True)
+        nt6 = VppIpTable(self.vclient, 20, is_ip6=True)
         nt6.add_vpp_config()
 
-        rd0 = VppGbpRouteDomain(self, 0, 400, gt4, gt6, None, None)
-        rd20 = VppGbpRouteDomain(self, 20, 420, nt4, nt6, None, None)
+        rd0 = VppGbpRouteDomain(self.vclient, 0, 400, gt4, gt6, None, None)
+        rd20 = VppGbpRouteDomain(self.vclient, 20, 420, nt4, nt6, None, None)
 
         rd0.add_vpp_config()
         rd20.add_vpp_config()
@@ -766,17 +230,17 @@ class TestGBP(VppTestCase):
         #
         # Bridge Domains
         #
-        bd1 = VppBridgeDomain(self, 1)
-        bd2 = VppBridgeDomain(self, 2)
-        bd20 = VppBridgeDomain(self, 20)
+        bd1 = VppBridgeDomain(self.vclient, 1)
+        bd2 = VppBridgeDomain(self.vclient, 2)
+        bd20 = VppBridgeDomain(self.vclient, 20)
 
         bd1.add_vpp_config()
         bd2.add_vpp_config()
         bd20.add_vpp_config()
 
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd0, self.loop0)
-        gbd2 = VppGbpBridgeDomain(self, bd2, rd0, self.loop1)
-        gbd20 = VppGbpBridgeDomain(self, bd20, rd20, self.loop2)
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd0, self.loop0)
+        gbd2 = VppGbpBridgeDomain(self.vclient, bd2, rd0, self.loop1)
+        gbd20 = VppGbpBridgeDomain(self.vclient, bd20, rd20, self.loop2)
 
         gbd1.add_vpp_config()
         gbd2.add_vpp_config()
@@ -786,26 +250,26 @@ class TestGBP(VppTestCase):
         # 3 EPGs, 2 of which share a BD.
         # 2 NAT EPGs, one for floating-IP subnets, the other for internet
         #
-        epgs = [VppGbpEndpointGroup(self, 220, 1220, rd0, gbd1,
+        epgs = [VppGbpEndpointGroup(self.vclient, 220, 1220, rd0, gbd1,
                                     self.pg4, self.loop0,
                                     "10.0.0.128", "2001:10::128"),
-                VppGbpEndpointGroup(self, 221, 1221, rd0, gbd1,
+                VppGbpEndpointGroup(self.vclient, 221, 1221, rd0, gbd1,
                                     self.pg5, self.loop0,
                                     "10.0.1.128", "2001:10:1::128"),
-                VppGbpEndpointGroup(self, 222, 1222, rd0, gbd2,
+                VppGbpEndpointGroup(self.vclient, 222, 1222, rd0, gbd2,
                                     self.pg6, self.loop1,
                                     "10.0.2.128", "2001:10:2::128"),
-                VppGbpEndpointGroup(self, 333, 1333, rd20, gbd20,
+                VppGbpEndpointGroup(self.vclient, 333, 1333, rd20, gbd20,
                                     self.pg7, self.loop2,
                                     "11.0.0.128", "3001::128"),
-                VppGbpEndpointGroup(self, 444, 1444, rd20, gbd20,
+                VppGbpEndpointGroup(self.vclient, 444, 1444, rd20, gbd20,
                                     self.pg8, self.loop2,
                                     "11.0.0.129", "3001::129")]
-        recircs = [VppGbpRecirc(self, epgs[0], self.loop3),
-                   VppGbpRecirc(self, epgs[1], self.loop4),
-                   VppGbpRecirc(self, epgs[2], self.loop5),
-                   VppGbpRecirc(self, epgs[3], self.loop6, is_ext=True),
-                   VppGbpRecirc(self, epgs[4], self.loop7, is_ext=True)]
+        recircs = [VppGbpRecirc(self.vclient, epgs[0], self.loop3),
+                   VppGbpRecirc(self.vclient, epgs[1], self.loop4),
+                   VppGbpRecirc(self.vclient, epgs[2], self.loop5),
+                   VppGbpRecirc(self.vclient, epgs[3], self.loop6, is_ext=True),
+                   VppGbpRecirc(self.vclient, epgs[4], self.loop7, is_ext=True)]
 
         epg_nat = epgs[3]
         recirc_nat = recircs[3]
@@ -813,24 +277,24 @@ class TestGBP(VppTestCase):
         #
         # 4 end-points, 2 in the same subnet, 3 in the same BD
         #
-        eps = [VppGbpEndpoint(self, self.pg0,
+        eps = [VppGbpEndpoint(self.vclient, self.pg0,
                               epgs[0], recircs[0],
                               "10.0.0.1", "11.0.0.1",
                               "2001:10::1", "3001::1"),
-               VppGbpEndpoint(self, self.pg1,
+               VppGbpEndpoint(self.vclient, self.pg1,
                               epgs[0], recircs[0],
                               "10.0.0.2", "11.0.0.2",
                               "2001:10::2", "3001::2"),
-               VppGbpEndpoint(self, self.pg2,
+               VppGbpEndpoint(self.vclient, self.pg2,
                               epgs[1], recircs[1],
                               "10.0.1.1", "11.0.0.3",
                               "2001:10:1::1", "3001::3"),
-               VppGbpEndpoint(self, self.pg3,
+               VppGbpEndpoint(self.vclient, self.pg3,
                               epgs[2], recircs[2],
                               "10.0.2.1", "11.0.0.4",
                               "2001:10:2::1", "3001::4")]
 
-        self.vapi.nat44_plugin_enable_disable(enable=1)
+        self.vclient.nat44_plugin_enable_disable(enable=1)
 
         #
         # Config related to each of the EPGs
@@ -838,37 +302,37 @@ class TestGBP(VppTestCase):
         for epg in epgs:
             # IP config on the BVI interfaces
             if epg != epgs[1] and epg != epgs[4]:
-                b4 = VppIpInterfaceBind(self, epg.bvi,
+                b4 = VppIpInterfaceBind(self.vclient, epg.bvi,
                                         epg.rd.t4).add_vpp_config()
-                b6 = VppIpInterfaceBind(self, epg.bvi,
+                b6 = VppIpInterfaceBind(self.vclient, epg.bvi,
                                         epg.rd.t6).add_vpp_config()
                 epg.bvi.set_mac(self.router_mac)
 
                 # The BVIs are NAT inside interfaces
                 flags = self.nat_config_flags.NAT_IS_INSIDE
-                self.vapi.nat44_interface_add_del_feature(
+                self.vclient.nat44_interface_add_del_feature(
                     sw_if_index=epg.bvi.sw_if_index,
                     flags=flags, is_add=1)
-                self.vapi.nat66_add_del_interface(
+                self.vclient.nat66_add_del_interface(
                     is_add=1, flags=flags,
                     sw_if_index=epg.bvi.sw_if_index)
 
-            if_ip4 = VppIpInterfaceAddress(self, epg.bvi,
+            if_ip4 = VppIpInterfaceAddress(self.vclient, epg.bvi,
                                            epg.bvi_ip4, 32,
                                            bind=b4).add_vpp_config()
-            if_ip6 = VppIpInterfaceAddress(self, epg.bvi,
+            if_ip6 = VppIpInterfaceAddress(self.vclient, epg.bvi,
                                            epg.bvi_ip6, 128,
                                            bind=b6).add_vpp_config()
 
             # EPG uplink interfaces in the RD
-            VppIpInterfaceBind(self, epg.uplink, epg.rd.t4).add_vpp_config()
-            VppIpInterfaceBind(self, epg.uplink, epg.rd.t6).add_vpp_config()
+            VppIpInterfaceBind(self.vclient, epg.uplink, epg.rd.t4).add_vpp_config()
+            VppIpInterfaceBind(self.vclient, epg.uplink, epg.rd.t6).add_vpp_config()
 
             # add the BD ARP termination entry for BVI IP
-            epg.bd_arp_ip4 = VppBridgeDomainArpEntry(self, epg.bd.bd,
+            epg.bd_arp_ip4 = VppBridgeDomainArpEntry(self.vclient, epg.bd.bd,
                                                      str(self.router_mac),
                                                      epg.bvi_ip4)
-            epg.bd_arp_ip6 = VppBridgeDomainArpEntry(self, epg.bd.bd,
+            epg.bd_arp_ip6 = VppBridgeDomainArpEntry(self.vclient, epg.bd.bd,
                                                      str(self.router_mac),
                                                      epg.bvi_ip6)
             epg.bd_arp_ip4.add_vpp_config()
@@ -879,21 +343,21 @@ class TestGBP(VppTestCase):
 
         for recirc in recircs:
             # EPG's ingress recirculation interface maps to its RD
-            VppIpInterfaceBind(self, recirc.recirc,
+            VppIpInterfaceBind(self.vclient, recirc.recirc,
                                recirc.epg.rd.t4).add_vpp_config()
-            VppIpInterfaceBind(self, recirc.recirc,
+            VppIpInterfaceBind(self.vclient, recirc.recirc,
                                recirc.epg.rd.t6).add_vpp_config()
 
-            self.vapi.nat44_interface_add_del_feature(
+            self.vclient.nat44_interface_add_del_feature(
                 sw_if_index=recirc.recirc.sw_if_index, is_add=1)
-            self.vapi.nat66_add_del_interface(
+            self.vclient.nat66_add_del_interface(
                 is_add=1,
                 sw_if_index=recirc.recirc.sw_if_index)
 
             recirc.add_vpp_config()
 
         for recirc in recircs:
-            self.assertTrue(find_bridge_domain_port(self,
+            self.assertTrue(find_bridge_domain_port(self.vclient,
                                                     recirc.epg.bd.bd.bd_id,
                                                     recirc.recirc.sw_if_index))
 
@@ -909,7 +373,7 @@ class TestGBP(VppTestCase):
                 # Add static mappings for each EP from the 10/8 to 11/8 network
                 if ip_address(ip).version == 4:
                     flags = self.nat_config_flags.NAT_IS_ADDR_ONLY
-                    self.vapi.nat44_add_del_static_mapping(
+                    self.vclient.nat44_add_del_static_mapping(
                         is_add=1,
                         local_ip_address=ip,
                         external_ip_address=fip,
@@ -917,7 +381,7 @@ class TestGBP(VppTestCase):
                         vrf_id=0,
                         flags=flags)
                 else:
-                    self.vapi.nat66_add_del_static_mapping(
+                    self.vclient.nat66_add_del_static_mapping(
                         local_ip_address=ip,
                         external_ip_address=fip,
                         vrf_id=0, is_add=1)
@@ -925,7 +389,7 @@ class TestGBP(VppTestCase):
             # VPP EP create ...
             ep.add_vpp_config()
 
-            self.logger.info(self.vapi.cli("sh gbp endpoint"))
+            self.logger.info(self.vclient.cli("sh gbp endpoint"))
 
             # ... results in a Gratuitous ARP/ND on the EPG's uplink
             rx = ep.epg.uplink.get_capture(len(ep.ips), timeout=0.2)
@@ -943,13 +407,13 @@ class TestGBP(VppTestCase):
 
             # add the BD ARP termination entry for floating IP
             for fip in ep.fips:
-                ba = VppBridgeDomainArpEntry(self, epg_nat.bd.bd, ep.mac,
+                ba = VppBridgeDomainArpEntry(self.vclient, epg_nat.bd.bd, ep.mac,
                                              fip)
                 ba.add_vpp_config()
 
                 # floating IPs route via EPG recirc
                 r = VppIpRoute(
-                    self, fip, ip_address(fip).max_prefixlen,
+                    self.vclient, fip, ip_address(fip).max_prefixlen,
                     [VppRoutePath(fip,
                                   ep.recirc.recirc.sw_if_index,
                                   type=FibPathType.FIB_PATH_TYPE_DVR,
@@ -959,7 +423,7 @@ class TestGBP(VppTestCase):
 
             # L2 FIB entries in the NAT EPG BD to bridge the packets from
             # the outside direct to the internal EPG
-            lf = VppL2FibEntry(self, epg_nat.bd.bd, ep.mac,
+            lf = VppL2FibEntry(self.vclient, epg_nat.bd.bd, ep.mac,
                                ep.recirc.recirc, bvi_mac=0)
             lf.add_vpp_config()
 
@@ -974,7 +438,7 @@ class TestGBP(VppTestCase):
                        pdst="10.0.0.88",
                        psrc="10.0.0.99"))
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.pg0.add_stream(pkt_arp)
 
         self.pg_enable_capture(self.pg_interfaces)
@@ -1013,7 +477,7 @@ class TestGBP(VppTestCase):
                      UDP(sport=1234, dport=1234) /
                      Raw(b'\xa5' * 100))
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.pg0.add_stream(pkt_bcast)
 
         self.pg_enable_capture(self.pg_interfaces)
@@ -1056,22 +520,22 @@ class TestGBP(VppTestCase):
         # Add the subnet routes
         #
         s41 = VppGbpSubnet(
-            self, rd0, "10.0.0.0", 24,
+            self.vclient, rd0, "10.0.0.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_INTERNAL)
         s42 = VppGbpSubnet(
-            self, rd0, "10.0.1.0", 24,
+            self.vclient, rd0, "10.0.1.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_INTERNAL)
         s43 = VppGbpSubnet(
-            self, rd0, "10.0.2.0", 24,
+            self.vclient, rd0, "10.0.2.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_INTERNAL)
         s61 = VppGbpSubnet(
-            self, rd0, "2001:10::1", 64,
+            self.vclient, rd0, "2001:10::1", 64,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_INTERNAL)
         s62 = VppGbpSubnet(
-            self, rd0, "2001:10:1::1", 64,
+            self.vclient, rd0, "2001:10:1::1", 64,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_INTERNAL)
         s63 = VppGbpSubnet(
-            self, rd0, "2001:10:2::1", 64,
+            self.vclient, rd0, "2001:10:2::1", 64,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_INTERNAL)
         s41.add_vpp_config()
         s42.add_vpp_config()
@@ -1090,16 +554,16 @@ class TestGBP(VppTestCase):
                                       pkt_inter_epg_222_ip6 * NUM_PKTS,
                                       eps[0].epg.uplink)
 
-        self.logger.info(self.vapi.cli("sh ip fib 11.0.0.2"))
-        self.logger.info(self.vapi.cli("sh gbp endpoint-group"))
-        self.logger.info(self.vapi.cli("sh gbp endpoint"))
-        self.logger.info(self.vapi.cli("sh gbp recirc"))
-        self.logger.info(self.vapi.cli("sh int"))
-        self.logger.info(self.vapi.cli("sh int addr"))
-        self.logger.info(self.vapi.cli("sh int feat loop6"))
-        self.logger.info(self.vapi.cli("sh vlib graph ip4-gbp-src-classify"))
-        self.logger.info(self.vapi.cli("sh int feat loop3"))
-        self.logger.info(self.vapi.cli("sh int feat pg0"))
+        self.logger.info(self.vclient.cli("sh ip fib 11.0.0.2"))
+        self.logger.info(self.vclient.cli("sh gbp endpoint-group"))
+        self.logger.info(self.vclient.cli("sh gbp endpoint"))
+        self.logger.info(self.vclient.cli("sh gbp recirc"))
+        self.logger.info(self.vclient.cli("sh int"))
+        self.logger.info(self.vclient.cli("sh int addr"))
+        self.logger.info(self.vclient.cli("sh int feat loop6"))
+        self.logger.info(self.vclient.cli("sh vlib graph ip4-gbp-src-classify"))
+        self.logger.info(self.vclient.cli("sh int feat loop3"))
+        self.logger.info(self.vclient.cli("sh int feat pg0"))
 
         #
         # Packet destined to unknown unicast is sent on the epg uplink ...
@@ -1192,11 +656,11 @@ class TestGBP(VppTestCase):
         rule = AclRule(is_permit=1, proto=17)
         rule2 = AclRule(src_prefix=IPv6Network((0, 0)),
                         dst_prefix=IPv6Network((0, 0)), is_permit=1, proto=17)
-        acl = VppAcl(self, rules=[rule, rule2])
+        acl = VppAcl(self.vclient, rules=[rule, rule2])
         acl.add_vpp_config()
 
         c1 = VppGbpContract(
-            self, 400, epgs[0].sclass, epgs[1].sclass, acl.acl_index,
+            self.vclient, 400, epgs[0].sclass, epgs[1].sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -1218,7 +682,7 @@ class TestGBP(VppTestCase):
         # contract for the return direction
         #
         c2 = VppGbpContract(
-            self, 400, epgs[1].sclass, epgs[0].sclass, acl.acl_index,
+            self.vclient, 400, epgs[1].sclass, epgs[0].sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -1262,7 +726,7 @@ class TestGBP(VppTestCase):
         # A uni-directional contract from EPG 220 -> 222 'L3 routed'
         #
         c3 = VppGbpContract(
-            self, 400, epgs[0].sclass, epgs[2].sclass, acl.acl_index,
+            self.vclient, 400, epgs[0].sclass, epgs[2].sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -1274,7 +738,7 @@ class TestGBP(VppTestCase):
             [ETH_P_IP, ETH_P_IPV6])
         c3.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh gbp contract"))
+        self.logger.info(self.vclient.cli("sh gbp contract"))
 
         self.send_and_expect_routed(eps[0].itf,
                                     pkt_inter_epg_220_to_222 * NUM_PKTS,
@@ -1303,33 +767,33 @@ class TestGBP(VppTestCase):
 
         # in the EP's RD an external subnet via the NAT EPG's recirc
         se1 = VppGbpSubnet(
-            self, rd0, "0.0.0.0", 0,
+            self.vclient, rd0, "0.0.0.0", 0,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_EXTERNAL,
             sw_if_index=recirc_nat.recirc.sw_if_index,
             sclass=epg_nat.sclass)
         se2 = VppGbpSubnet(
-            self, rd0, "11.0.0.0", 8,
+            self.vclient, rd0, "11.0.0.0", 8,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_EXTERNAL,
             sw_if_index=recirc_nat.recirc.sw_if_index,
             sclass=epg_nat.sclass)
         se16 = VppGbpSubnet(
-            self, rd0, "::", 0,
+            self.vclient, rd0, "::", 0,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_EXTERNAL,
             sw_if_index=recirc_nat.recirc.sw_if_index,
             sclass=epg_nat.sclass)
         # in the NAT RD an external subnet via the NAT EPG's uplink
         se3 = VppGbpSubnet(
-            self, rd20, "0.0.0.0", 0,
+            self.vclient, rd20, "0.0.0.0", 0,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_EXTERNAL,
             sw_if_index=epg_nat.uplink.sw_if_index,
             sclass=epg_nat.sclass)
         se36 = VppGbpSubnet(
-            self, rd20, "::", 0,
+            self.vclient, rd20, "::", 0,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_EXTERNAL,
             sw_if_index=epg_nat.uplink.sw_if_index,
             sclass=epg_nat.sclass)
         se4 = VppGbpSubnet(
-            self, rd20, "11.0.0.0", 8,
+            self.vclient, rd20, "11.0.0.0", 8,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_STITCHED_EXTERNAL,
             sw_if_index=epg_nat.uplink.sw_if_index,
             sclass=epg_nat.sclass)
@@ -1340,10 +804,10 @@ class TestGBP(VppTestCase):
         se36.add_vpp_config()
         se4.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh ip fib 0.0.0.0/0"))
-        self.logger.info(self.vapi.cli("sh ip fib 11.0.0.1"))
-        self.logger.info(self.vapi.cli("sh ip6 fib ::/0"))
-        self.logger.info(self.vapi.cli("sh ip6 fib %s" %
+        self.logger.info(self.vclient.cli("sh ip fib 0.0.0.0/0"))
+        self.logger.info(self.vclient.cli("sh ip fib 11.0.0.1"))
+        self.logger.info(self.vclient.cli("sh ip6 fib ::/0"))
+        self.logger.info(self.vclient.cli("sh ip6 fib %s" %
                                        eps[0].fip6))
 
         #
@@ -1363,11 +827,11 @@ class TestGBP(VppTestCase):
         rule2 = AclRule(is_permit=1, proto=17, ports=1234,
                         src_prefix=IPv6Network((0, 0)),
                         dst_prefix=IPv6Network((0, 0)))
-        acl2 = VppAcl(self, rules=[rule, rule2])
+        acl2 = VppAcl(self.vclient, rules=[rule, rule2])
         acl2.add_vpp_config()
 
         c4 = VppGbpContract(
-            self, 400, epgs[0].sclass, epgs[3].sclass, acl2.acl_index,
+            self.vclient, 400, epgs[0].sclass, epgs[3].sclass, acl2.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -1410,7 +874,7 @@ class TestGBP(VppTestCase):
             self.pg7, pkt_inter_epg_220_from_global * NUM_PKTS)
 
         c5 = VppGbpContract(
-            self, 400, epgs[3].sclass, epgs[0].sclass, acl2.acl_index,
+            self.vclient, 400, epgs[3].sclass, epgs[0].sclass, acl2.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -1474,12 +938,12 @@ class TestGBP(VppTestCase):
         #
         # cleanup
         #
-        self.vapi.nat44_plugin_enable_disable(enable=0)
+        self.vclient.nat44_plugin_enable_disable(enable=0)
 
         for ep in eps:
             # del static mappings for each EP from the 10/8 to 11/8 network
             flags = self.nat_config_flags.NAT_IS_ADDR_ONLY
-            self.vapi.nat66_add_del_static_mapping(
+            self.vclient.nat66_add_del_static_mapping(
                 local_ip_address=ep.ip6,
                 external_ip_address=ep.fip6,
                 vrf_id=0, is_add=0)
@@ -1488,13 +952,14 @@ class TestGBP(VppTestCase):
             # IP config on the BVI interfaces
             if epg != epgs[0] and epg != epgs[3]:
                 flags = self.nat_config_flags.NAT_IS_INSIDE
-                self.vapi.nat66_add_del_interface(
-                    sw_if_index=epg.bvi.sw_if_index,
-                    flags=flags, is_add=0)
+                self.vclient.nat66_add_del_interface(
+                    is_add=0, flags=flags,
+                    sw_if_index=epg.bvi.sw_if_index)
 
         for recirc in recircs:
-            self.vapi.nat66_add_del_interface(
-                sw_if_index=recirc.recirc.sw_if_index, is_add=0)
+            self.vclient.nat66_add_del_interface(
+                is_add=0,
+                sw_if_index=recirc.recirc.sw_if_index)
 
     def wait_for_ep_timeout(self, sw_if_index=None, ip=None, mac=None,
                             tep=None, n_tries=100, s_time=1):
@@ -1502,21 +967,21 @@ class TestGBP(VppTestCase):
         ep_flags = VppEnum.vl_api_gbp_endpoint_flags_t
         flags = ep_flags.GBP_API_ENDPOINT_FLAG_LEARNT
         while (n_tries):
-            if not find_gbp_endpoint(self, sw_if_index, ip, mac, tep=tep,
+            if not find_gbp_endpoint(self.vclient, sw_if_index, ip, mac, tep=tep,
                                      flags=flags):
                 return True
             n_tries = n_tries - 1
             self.sleep(s_time)
-        self.assertFalse(find_gbp_endpoint(self, sw_if_index, ip, mac, tep=tep,
+        self.assertFalse(find_gbp_endpoint(self.vclient, sw_if_index, ip, mac, tep=tep,
                                            flags=flags))
         return False
 
     def test_gbp_learn_l2(self):
         """ GBP L2 Endpoint Learning """
 
-        drop_no_contract = self.statistics.get_err_counter(
+        drop_no_contract = self.vclient.statistics.get_err_counter(
             '/err/gbp-policy-port/drop-no-contract')
-        allow_intra_class = self.statistics.get_err_counter(
+        allow_intra_class = self.vclient.statistics.get_err_counter(
             '/err/gbp-policy-port/allow-intra-sclass')
 
         ep_flags = VppEnum.vl_api_gbp_endpoint_flags_t
@@ -1530,12 +995,12 @@ class TestGBP(VppTestCase):
         #
         # IP tables
         #
-        gt4 = VppIpTable(self, 1)
+        gt4 = VppIpTable(self.vclient, 1)
         gt4.add_vpp_config()
-        gt6 = VppIpTable(self, 1, is_ip6=True)
+        gt6 = VppIpTable(self.vclient, 1, is_ip6=True)
         gt6.add_vpp_config()
 
-        rd1 = VppGbpRouteDomain(self, 1, 401, gt4, gt6)
+        rd1 = VppGbpRouteDomain(self.vclient, 1, 401, gt4, gt6)
         rd1.add_vpp_config()
 
         #
@@ -1555,7 +1020,7 @@ class TestGBP(VppTestCase):
         #
         # Add a mcast destination VXLAN-GBP tunnel for B&M traffic
         #
-        tun_bm = VppVxlanGbpTunnel(self, self.pg4.local_ip4,
+        tun_bm = VppVxlanGbpTunnel(self.vclient, self.pg4.local_ip4,
                                    "239.1.1.1", 88,
                                    mcast_itf=self.pg4)
         tun_bm.add_vpp_config()
@@ -1563,29 +1028,29 @@ class TestGBP(VppTestCase):
         #
         # a GBP bridge domain with a BVI and a UU-flood interface
         #
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd1, self.loop0,
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd1, self.loop0,
                                   self.pg3, tun_bm)
         gbd1.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh bridge 1 detail"))
-        self.logger.info(self.vapi.cli("sh gbp bridge"))
+        self.logger.info(self.vclient.cli("sh bridge 1 detail"))
+        self.logger.info(self.vclient.cli("sh gbp bridge"))
 
         # ... and has a /32 applied
-        ip_addr = VppIpInterfaceAddress(self, gbd1.bvi, "10.0.0.128", 32)
+        ip_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi, "10.0.0.128", 32)
         ip_addr.add_vpp_config()
 
         #
         # The Endpoint-group in which we are learning endpoints
         #
-        epg_220 = VppGbpEndpointGroup(self, 220, 112, rd1, gbd1,
+        epg_220 = VppGbpEndpointGroup(self.vclient, 220, 112, rd1, gbd1,
                                       None, self.loop0,
                                       "10.0.0.128",
                                       "2001:10::128",
                                       VppGbpEndpointRetention(4))
         epg_220.add_vpp_config()
-        epg_330 = VppGbpEndpointGroup(self, 330, 113, rd1, gbd1,
+        epg_330 = VppGbpEndpointGroup(self.vclient, 330, 113, rd1, gbd1,
                                       None, self.loop1,
                                       "10.0.1.128",
                                       "2001:11::128",
@@ -1597,7 +1062,7 @@ class TestGBP(VppTestCase):
         # learning enabled
         #
         vx_tun_l2_1 = VppGbpVxlanTunnel(
-            self, 99, bd1.bd_id,
+            self.vclient, 99, bd1.bd_id,
             VppEnum.vl_api_gbp_vxlan_tunnel_mode_t.GBP_VXLAN_TUNNEL_MODE_L2,
             self.pg2.local_ip4)
         vx_tun_l2_1.add_vpp_config()
@@ -1606,13 +1071,13 @@ class TestGBP(VppTestCase):
         # A static endpoint that the learnt endpoints are trying to
         # talk to
         #
-        ep = VppGbpEndpoint(self, self.pg0,
+        ep = VppGbpEndpoint(self.vclient, self.pg0,
                             epg_220, None,
                             "10.0.0.127", "11.0.0.127",
                             "2001:10::1", "3001::1")
         ep.add_vpp_config()
 
-        self.assertTrue(find_route(self, ep.ip4, 32, table_id=1))
+        self.assertTrue(find_route(self.vclient, ep.ip4, 32, table_id=1))
 
         # a packet with an sclass from an unknown EPG
         p = (Ether(src=self.pg2.remote_mac,
@@ -1628,7 +1093,7 @@ class TestGBP(VppTestCase):
 
         self.send_and_assert_no_replies(self.pg2, p)
 
-        self.logger.info(self.vapi.cli("sh error"))
+        self.logger.info(self.vclient.cli("sh error"))
         self.assert_error_counter_equal(
             '/err/gbp-policy-port/drop-no-contract',
             drop_no_contract + 1)
@@ -1638,13 +1103,13 @@ class TestGBP(VppTestCase):
         # the EPG was not learnt.
         #
         self.assertEqual(INDEX_INVALID,
-                         find_vxlan_gbp_tunnel(self,
+                         find_vxlan_gbp_tunnel(self.vclient,
                                                self.pg2.local_ip4,
                                                self.pg2.remote_hosts[0].ip4,
                                                99))
 
         # ep is not learnt, because the EPG is unknown
-        self.assertEqual(len(self.vapi.gbp_endpoint_dump()), 1)
+        self.assertEqual(len(self.vclient.gbp_endpoint_dump()), 1)
 
         #
         # Learn new EPs from IP packets
@@ -1667,7 +1132,7 @@ class TestGBP(VppTestCase):
 
             # the new TEP
             tep1_sw_if_index = find_vxlan_gbp_tunnel(
-                self,
+                self.vclient,
                 self.pg2.local_ip4,
                 self.pg2.remote_hosts[1].ip4,
                 99)
@@ -1677,10 +1142,10 @@ class TestGBP(VppTestCase):
             # the EP is learnt via the learnt TEP
             # both from its MAC and its IP
             #
-            self.assertTrue(find_gbp_endpoint(self,
+            self.assertTrue(find_gbp_endpoint(self.vclient,
                                               vx_tun_l2_1.sw_if_index,
                                               mac=l['mac']))
-            self.assertTrue(find_gbp_endpoint(self,
+            self.assertTrue(find_gbp_endpoint(self.vclient,
                                               vx_tun_l2_1.sw_if_index,
                                               ip=l['ip']))
 
@@ -1688,9 +1153,9 @@ class TestGBP(VppTestCase):
             '/err/gbp-policy-port/allow-intra-sclass',
             allow_intra_class + 2)
 
-        self.logger.info(self.vapi.cli("show gbp endpoint"))
-        self.logger.info(self.vapi.cli("show gbp vxlan"))
-        self.logger.info(self.vapi.cli("show ip mfib"))
+        self.logger.info(self.vclient.cli("show gbp endpoint"))
+        self.logger.info(self.vclient.cli("show gbp vxlan"))
+        self.logger.info(self.vclient.cli("show ip mfib"))
 
         #
         # If we sleep for the threshold time, the learnt endpoints should
@@ -1722,7 +1187,7 @@ class TestGBP(VppTestCase):
 
             # the new TEP
             tep1_sw_if_index = find_vxlan_gbp_tunnel(
-                self,
+                self.vclient,
                 self.pg2.local_ip4,
                 self.pg2.remote_hosts[1].ip4,
                 99)
@@ -1732,10 +1197,10 @@ class TestGBP(VppTestCase):
             # the EP is learnt via the learnt TEP
             # both from its MAC and its IP
             #
-            self.assertTrue(find_gbp_endpoint(self,
+            self.assertTrue(find_gbp_endpoint(self.vclient,
                                               vx_tun_l2_1.sw_if_index,
                                               mac=l['mac']))
-            self.assertTrue(find_gbp_endpoint(self,
+            self.assertTrue(find_gbp_endpoint(self.vclient,
                                               vx_tun_l2_1.sw_if_index,
                                               ip=l['ip']))
 
@@ -1765,7 +1230,7 @@ class TestGBP(VppTestCase):
 
             # the new TEP
             tep1_sw_if_index = find_vxlan_gbp_tunnel(
-                self,
+                self.vclient,
                 self.pg2.local_ip4,
                 self.pg2.remote_hosts[1].ip4,
                 99)
@@ -1775,13 +1240,13 @@ class TestGBP(VppTestCase):
             # the EP is learnt via the learnt TEP
             # both from its MAC and its IP
             #
-            self.assertTrue(find_gbp_endpoint(self,
+            self.assertTrue(find_gbp_endpoint(self.vclient,
                                               vx_tun_l2_1.sw_if_index,
                                               mac=l['mac']))
 
-        self.logger.info(self.vapi.cli("show gbp endpoint"))
-        self.logger.info(self.vapi.cli("show gbp vxlan"))
-        self.logger.info(self.vapi.cli("show vxlan-gbp tunnel"))
+        self.logger.info(self.vclient.cli("show gbp endpoint"))
+        self.logger.info(self.vclient.cli("show gbp vxlan"))
+        self.logger.info(self.vclient.cli("show vxlan-gbp tunnel"))
 
         #
         # wait for the learnt endpoints to age out
@@ -1809,7 +1274,7 @@ class TestGBP(VppTestCase):
             rx = self.send_and_expect(self.pg2, p * NUM_PKTS, self.pg0)
 
         for l in learnt:
-            self.assertFalse(find_gbp_endpoint(self,
+            self.assertFalse(find_gbp_endpoint(self.vclient,
                                                vx_tun_l2_1.sw_if_index,
                                                mac=l['mac']))
 
@@ -1833,14 +1298,14 @@ class TestGBP(VppTestCase):
 
             rx = self.send_and_expect(self.pg2, p * NUM_PKTS, self.pg0)
 
-            self.assertTrue(find_gbp_endpoint(self,
+            self.assertTrue(find_gbp_endpoint(self.vclient,
                                               vx_tun_l2_1.sw_if_index,
                                               mac=l['mac']))
 
         #
         # Static EP replies to dynamics
         #
-        self.logger.info(self.vapi.cli("sh l2fib bd_id 1"))
+        self.logger.info(self.vclient.cli("sh l2fib bd_id 1"))
         for l in learnt:
             p = (Ether(src=ep.mac, dst=l['mac']) /
                  IP(dst=l['ip'], src=ep.ip4) /
@@ -1885,7 +1350,7 @@ class TestGBP(VppTestCase):
 
             rx = self.send_and_expect(self.pg2, p * NUM_PKTS, self.pg0)
 
-            self.assertTrue(find_gbp_endpoint(self,
+            self.assertTrue(find_gbp_endpoint(self.vclient,
                                               vx_tun_l2_1.sw_if_index,
                                               mac=l['mac']))
 
@@ -1918,7 +1383,7 @@ class TestGBP(VppTestCase):
 
             rx = self.send_and_expect(self.pg2, p * NUM_PKTS, self.pg0)
 
-            self.assertTrue(find_gbp_endpoint(self,
+            self.assertTrue(find_gbp_endpoint(self.vclient,
                                               vx_tun_l2_1.sw_if_index,
                                               mac=l['mac']))
 
@@ -1928,11 +1393,11 @@ class TestGBP(VppTestCase):
         rule = AclRule(is_permit=1, proto=17)
         rule2 = AclRule(src_prefix=IPv6Network((0, 0)),
                         dst_prefix=IPv6Network((0, 0)), is_permit=1, proto=17)
-        acl = VppAcl(self, rules=[rule, rule2])
+        acl = VppAcl(self.vclient, rules=[rule, rule2])
         acl.add_vpp_config()
 
         c1 = VppGbpContract(
-            self, 401, epg_220.sclass, epg_330.sclass, acl.acl_index,
+            self.vclient, 401, epg_220.sclass, epg_330.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -1955,15 +1420,15 @@ class TestGBP(VppTestCase):
         #
         # send UU packets from the local EP
         #
-        self.logger.info(self.vapi.cli("sh gbp bridge"))
-        self.logger.info(self.vapi.cli("sh bridge-domain 1 detail"))
+        self.logger.info(self.vclient.cli("sh gbp bridge"))
+        self.logger.info(self.vclient.cli("sh bridge-domain 1 detail"))
         p_uu = (Ether(src=ep.mac, dst="00:11:11:11:11:11") /
                 IP(dst="10.0.0.133", src=ep.ip4) /
                 UDP(sport=1234, dport=1234) /
                 Raw(b'\xa5' * 100))
         rxs = self.send_and_expect(ep.itf, [p_uu], gbd1.uu_fwd)
 
-        self.logger.info(self.vapi.cli("sh bridge 1 detail"))
+        self.logger.info(self.vclient.cli("sh bridge 1 detail"))
 
         p_bm = (Ether(src=ep.mac, dst="ff:ff:ff:ff:ff:ff") /
                 IP(dst="10.0.0.133", src=ep.ip4) /
@@ -1986,11 +1451,11 @@ class TestGBP(VppTestCase):
         rule = AclRule(is_permit=1, proto=17)
         rule2 = AclRule(src_prefix=IPv6Network((0, 0)),
                         dst_prefix=IPv6Network((0, 0)), is_permit=1, proto=17)
-        acl = VppAcl(self, rules=[rule, rule2])
+        acl = VppAcl(self.vclient, rules=[rule, rule2])
         acl.add_vpp_config()
 
         c2 = VppGbpContract(
-            self, 401, epg_330.sclass, epg_220.sclass, acl.acl_index,
+            self.vclient, 401, epg_330.sclass, epg_220.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -2025,17 +1490,17 @@ class TestGBP(VppTestCase):
             rx = self.send_and_expect(self.pg2, p * NUM_PKTS, self.pg0)
 
             self.assertTrue(find_gbp_endpoint(
-                self,
+                self.vclient,
                 vx_tun_l2_1.sw_if_index,
                 ip=l['ip6'],
                 tep=[self.pg2.local_ip4,
                      self.pg2.remote_hosts[1].ip4]))
 
-        self.logger.info(self.vapi.cli("sh int"))
-        self.logger.info(self.vapi.cli("sh vxlan-gbp tunnel"))
-        self.logger.info(self.vapi.cli("sh gbp vxlan"))
-        self.logger.info(self.vapi.cli("sh gbp endpoint"))
-        self.logger.info(self.vapi.cli("sh gbp interface"))
+        self.logger.info(self.vclient.cli("sh int"))
+        self.logger.info(self.vclient.cli("sh vxlan-gbp tunnel"))
+        self.logger.info(self.vclient.cli("sh gbp vxlan"))
+        self.logger.info(self.vclient.cli("sh gbp endpoint"))
+        self.logger.info(self.vclient.cli("sh gbp interface"))
 
         #
         # EP moves to a different TEP
@@ -2057,7 +1522,7 @@ class TestGBP(VppTestCase):
             rx = self.send_and_expect(self.pg2, p * NUM_PKTS, self.pg0)
 
             self.assertTrue(find_gbp_endpoint(
-                self,
+                self.vclient,
                 vx_tun_l2_1.sw_if_index,
                 sclass=113,
                 mac=l['mac'],
@@ -2108,7 +1573,7 @@ class TestGBP(VppTestCase):
             rx = self.send_and_expect(self.pg2, p * NUM_PKTS, self.pg0)
 
             self.assertTrue(find_gbp_endpoint(
-                self,
+                self.vclient,
                 vx_tun_l2_1.sw_if_index,
                 mac=l['mac'],
                 sclass=112,
@@ -2118,7 +1583,7 @@ class TestGBP(VppTestCase):
         #
         # check reachability and contract intra-epg
         #
-        allow_intra_class = self.statistics.get_err_counter(
+        allow_intra_class = self.vclient.statistics.get_err_counter(
             '/err/gbp-policy-mac/allow-intra-sclass')
 
         for l in learnt:
@@ -2163,26 +1628,26 @@ class TestGBP(VppTestCase):
         #
         # Route Domains
         #
-        gt4 = VppIpTable(self, 0)
+        gt4 = VppIpTable(self.vclient, 0)
         gt4.add_vpp_config()
-        gt6 = VppIpTable(self, 0, is_ip6=True)
+        gt6 = VppIpTable(self.vclient, 0, is_ip6=True)
         gt6.add_vpp_config()
 
-        rd0 = VppGbpRouteDomain(self, 0, 400, gt4, gt6, None, None)
+        rd0 = VppGbpRouteDomain(self.vclient, 0, 400, gt4, gt6, None, None)
 
         rd0.add_vpp_config()
 
         #
         # Bridge Domains
         #
-        bd1 = VppBridgeDomain(self, 1, arp_term=0)
-        bd2 = VppBridgeDomain(self, 2, arp_term=0)
+        bd1 = VppBridgeDomain(self.vclient, 1, arp_term=0)
+        bd2 = VppBridgeDomain(self.vclient, 2, arp_term=0)
 
         bd1.add_vpp_config()
         bd2.add_vpp_config()
 
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd0, self.loop0)
-        gbd2 = VppGbpBridgeDomain(self, bd2, rd0, self.loop1)
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd0, self.loop0)
+        gbd2 = VppGbpBridgeDomain(self.vclient, bd2, rd0, self.loop1)
 
         gbd1.add_vpp_config()
         gbd2.add_vpp_config()
@@ -2190,31 +1655,31 @@ class TestGBP(VppTestCase):
         #
         # 3 EPGs, 2 of which share a BD.
         #
-        epgs = [VppGbpEndpointGroup(self, 220, 1220, rd0, gbd1,
+        epgs = [VppGbpEndpointGroup(self.vclient, 220, 1220, rd0, gbd1,
                                     None, self.loop0,
                                     "10.0.0.128", "2001:10::128"),
-                VppGbpEndpointGroup(self, 221, 1221, rd0, gbd1,
+                VppGbpEndpointGroup(self.vclient, 221, 1221, rd0, gbd1,
                                     None, self.loop0,
                                     "10.0.1.128", "2001:10:1::128"),
-                VppGbpEndpointGroup(self, 222, 1222, rd0, gbd2,
+                VppGbpEndpointGroup(self.vclient, 222, 1222, rd0, gbd2,
                                     None, self.loop1,
                                     "10.0.2.128", "2001:10:2::128")]
         #
         # 4 end-points, 2 in the same subnet, 3 in the same BD
         #
-        eps = [VppGbpEndpoint(self, self.pg0,
+        eps = [VppGbpEndpoint(self.vclient, self.pg0,
                               epgs[0], None,
                               "10.0.0.1", "11.0.0.1",
                               "2001:10::1", "3001::1"),
-               VppGbpEndpoint(self, self.pg1,
+               VppGbpEndpoint(self.vclient, self.pg1,
                               epgs[0], None,
                               "10.0.0.2", "11.0.0.2",
                               "2001:10::2", "3001::2"),
-               VppGbpEndpoint(self, self.pg2,
+               VppGbpEndpoint(self.vclient, self.pg2,
                               epgs[1], None,
                               "10.0.1.1", "11.0.0.3",
                               "2001:10:1::1", "3001::3"),
-               VppGbpEndpoint(self, self.pg3,
+               VppGbpEndpoint(self.vclient, self.pg3,
                               epgs[2], None,
                               "10.0.2.1", "11.0.0.4",
                               "2001:10:2::1", "3001::4")]
@@ -2225,21 +1690,21 @@ class TestGBP(VppTestCase):
         for epg in epgs:
             # IP config on the BVI interfaces
             if epg != epgs[1]:
-                b4 = VppIpInterfaceBind(self, epg.bvi,
+                b4 = VppIpInterfaceBind(self.vclient, epg.bvi,
                                         epg.rd.t4).add_vpp_config()
-                b6 = VppIpInterfaceBind(self, epg.bvi,
+                b6 = VppIpInterfaceBind(self.vclient, epg.bvi,
                                         epg.rd.t6).add_vpp_config()
                 epg.bvi.set_mac(self.router_mac)
 
-            if_ip4 = VppIpInterfaceAddress(self, epg.bvi,
+            if_ip4 = VppIpInterfaceAddress(self.vclient, epg.bvi,
                                            epg.bvi_ip4, 32,
                                            bind=b4).add_vpp_config()
-            if_ip6 = VppIpInterfaceAddress(self, epg.bvi,
+            if_ip6 = VppIpInterfaceAddress(self.vclient, epg.bvi,
                                            epg.bvi_ip6, 128,
                                            bind=b6).add_vpp_config()
 
             # add the BD ARP termination entry for BVI IP
-            epg.bd_arp_ip4 = VppBridgeDomainArpEntry(self, epg.bd.bd,
+            epg.bd_arp_ip4 = VppBridgeDomainArpEntry(self.vclient, epg.bd.bd,
                                                      str(self.router_mac),
                                                      epg.bvi_ip4)
             epg.bd_arp_ip4.add_vpp_config()
@@ -2253,9 +1718,9 @@ class TestGBP(VppTestCase):
         for ep in eps:
             ep.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("show gbp endpoint"))
-        self.logger.info(self.vapi.cli("show interface"))
-        self.logger.info(self.vapi.cli("show br"))
+        self.logger.info(self.vclient.cli("show gbp endpoint"))
+        self.logger.info(self.vclient.cli("show interface"))
+        self.logger.info(self.vclient.cli("show br"))
 
         #
         # Intra epg allowed without contract
@@ -2301,11 +1766,11 @@ class TestGBP(VppTestCase):
         rule2 = AclRule(src_prefix=IPv6Network((0, 0)),
                         dst_prefix=IPv6Network((0, 0)), is_permit=1, proto=17)
         rule3 = AclRule(is_permit=1, proto=1)
-        acl = VppAcl(self, rules=[rule, rule2, rule3])
+        acl = VppAcl(self.vclient, rules=[rule, rule2, rule3])
         acl.add_vpp_config()
 
         c1 = VppGbpContract(
-            self, 400, epgs[0].sclass, epgs[1].sclass, acl.acl_index,
+            self.vclient, 400, epgs[0].sclass, epgs[1].sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -2357,7 +1822,7 @@ class TestGBP(VppTestCase):
         # contract for the return direction
         #
         c2 = VppGbpContract(
-            self, 400, epgs[1].sclass, epgs[0].sclass, acl.acl_index,
+            self.vclient, 400, epgs[1].sclass, epgs[0].sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -2406,7 +1871,7 @@ class TestGBP(VppTestCase):
         # contract between 220 and 222 uni-direction
         #
         c3 = VppGbpContract(
-            self, 400, epgs[0].sclass, epgs[2].sclass, acl.acl_index,
+            self.vclient, 400, epgs[0].sclass, epgs[2].sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -2433,43 +1898,43 @@ class TestGBP(VppTestCase):
         #
         # IP tables
         #
-        gt4 = VppIpTable(self, 1)
+        gt4 = VppIpTable(self.vclient, 1)
         gt4.add_vpp_config()
-        gt6 = VppIpTable(self, 1, is_ip6=True)
+        gt6 = VppIpTable(self.vclient, 1, is_ip6=True)
         gt6.add_vpp_config()
 
-        rd1 = VppGbpRouteDomain(self, 1, 401, gt4, gt6)
+        rd1 = VppGbpRouteDomain(self.vclient, 1, 401, gt4, gt6)
         rd1.add_vpp_config()
 
         #
         # a GBP bridge domain with a BVI only
         #
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
 
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd1, self.loop0,
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd1, self.loop0,
                                   None, None,
                                   uu_drop=True, bm_drop=True)
         gbd1.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh bridge 1 detail"))
-        self.logger.info(self.vapi.cli("sh gbp bridge"))
+        self.logger.info(self.vclient.cli("sh bridge 1 detail"))
+        self.logger.info(self.vclient.cli("sh gbp bridge"))
 
         # ... and has a /32 applied
-        ip_addr = VppIpInterfaceAddress(self, gbd1.bvi,
+        ip_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi,
                                         "10.0.0.128", 32).add_vpp_config()
 
         #
         # The Endpoint-group
         #
-        epg_220 = VppGbpEndpointGroup(self, 220, 112, rd1, gbd1,
+        epg_220 = VppGbpEndpointGroup(self.vclient, 220, 112, rd1, gbd1,
                                       None, self.loop0,
                                       "10.0.0.128",
                                       "2001:10::128",
                                       VppGbpEndpointRetention(3))
         epg_220.add_vpp_config()
 
-        ep = VppGbpEndpoint(self, self.pg0,
+        ep = VppGbpEndpoint(self.vclient, self.pg0,
                             epg_220, None,
                             "10.0.0.127", "11.0.0.127",
                             "2001:10::1", "3001::1")
@@ -2479,8 +1944,8 @@ class TestGBP(VppTestCase):
         # send UU/BM packet from the local EP with UU drop and BM drop enabled
         # in bd
         #
-        self.logger.info(self.vapi.cli("sh bridge 1 detail"))
-        self.logger.info(self.vapi.cli("sh gbp bridge"))
+        self.logger.info(self.vclient.cli("sh bridge 1 detail"))
+        self.logger.info(self.vclient.cli("sh gbp bridge"))
         p_uu = (Ether(src=ep.mac, dst="00:11:11:11:11:11") /
                 IP(dst="10.0.0.133", src=ep.ip4) /
                 UDP(sport=1234, dport=1234) /
@@ -2495,7 +1960,7 @@ class TestGBP(VppTestCase):
 
         self.pg3.unconfig_ip4()
 
-        self.logger.info(self.vapi.cli("sh int"))
+        self.logger.info(self.vclient.cli("sh int"))
 
     def test_gbp_bd_arp_flags(self):
         """ GBP BD arp flags """
@@ -2503,12 +1968,12 @@ class TestGBP(VppTestCase):
         #
         # IP tables
         #
-        gt4 = VppIpTable(self, 1)
+        gt4 = VppIpTable(self.vclient, 1)
         gt4.add_vpp_config()
-        gt6 = VppIpTable(self, 1, is_ip6=True)
+        gt6 = VppIpTable(self.vclient, 1, is_ip6=True)
         gt6.add_vpp_config()
 
-        rd1 = VppGbpRouteDomain(self, 1, 401, gt4, gt6)
+        rd1 = VppGbpRouteDomain(self.vclient, 1, 401, gt4, gt6)
         rd1.add_vpp_config()
 
         #
@@ -2520,7 +1985,7 @@ class TestGBP(VppTestCase):
         #
         # Add a mcast destination VXLAN-GBP tunnel for B&M traffic
         #
-        tun_uu = VppVxlanGbpTunnel(self, self.pg4.local_ip4,
+        tun_uu = VppVxlanGbpTunnel(self.vclient, self.pg4.local_ip4,
                                    "239.1.1.1", 88,
                                    mcast_itf=self.pg4)
         tun_uu.add_vpp_config()
@@ -2528,29 +1993,29 @@ class TestGBP(VppTestCase):
         #
         # a GBP bridge domain with a BVI and a UU-flood interface
         #
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
 
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd1, self.loop0,
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd1, self.loop0,
                                   tun_uu, None,
                                   ucast_arp=True)
         gbd1.add_vpp_config()
 
         # ... and has a /32 applied
-        ip_addr = VppIpInterfaceAddress(self, gbd1.bvi,
+        ip_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi,
                                         "10.0.0.128", 32).add_vpp_config()
 
         #
         # The Endpoint-group
         #
-        epg_220 = VppGbpEndpointGroup(self, 220, 112, rd1, gbd1,
+        epg_220 = VppGbpEndpointGroup(self.vclient, 220, 112, rd1, gbd1,
                                       None, self.loop0,
                                       "10.0.0.128",
                                       "2001:10::128",
                                       VppGbpEndpointRetention(2))
         epg_220.add_vpp_config()
 
-        ep = VppGbpEndpoint(self, self.pg0,
+        ep = VppGbpEndpoint(self.vclient, self.pg0,
                             epg_220, None,
                             "10.0.0.127", "11.0.0.127",
                             "2001:10::1", "3001::1")
@@ -2559,8 +2024,8 @@ class TestGBP(VppTestCase):
         #
         # send ARP packet from the local EP expect it on the uu interface
         #
-        self.logger.info(self.vapi.cli("sh bridge 1 detail"))
-        self.logger.info(self.vapi.cli("sh gbp bridge"))
+        self.logger.info(self.vclient.cli("sh bridge 1 detail"))
+        self.logger.info(self.vclient.cli("sh gbp bridge"))
         p_arp = (Ether(src=ep.mac, dst="ff:ff:ff:ff:ff:ff") /
                  ARP(op="who-has",
                      psrc=ep.ip4, pdst="10.0.0.99",
@@ -2584,12 +2049,12 @@ class TestGBP(VppTestCase):
         #
         # IP tables
         #
-        gt4 = VppIpTable(self, 1)
+        gt4 = VppIpTable(self.vclient, 1)
         gt4.add_vpp_config()
-        gt6 = VppIpTable(self, 1, is_ip6=True)
+        gt6 = VppIpTable(self.vclient, 1, is_ip6=True)
         gt6.add_vpp_config()
 
-        rd1 = VppGbpRouteDomain(self, 1, 401, gt4, gt6)
+        rd1 = VppGbpRouteDomain(self.vclient, 1, 401, gt4, gt6)
         rd1.add_vpp_config()
 
         #
@@ -2605,13 +2070,13 @@ class TestGBP(VppTestCase):
         #
         # The EP will be on a vlan sub-interface
         #
-        vlan_11 = VppDot1QSubint(self, self.pg0, 11)
+        vlan_11 = VppDot1QSubint(self.vclient, self.pg0, 11)
         vlan_11.admin_up()
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=vlan_11.sw_if_index, vtr_op=L2_VTR_OP.L2_POP_1,
             push_dot1q=11)
 
-        bd_uu_fwd = VppVxlanGbpTunnel(self, self.pg3.local_ip4,
+        bd_uu_fwd = VppVxlanGbpTunnel(self.vclient, self.pg3.local_ip4,
                                       self.pg3.remote_ip4, 116)
         bd_uu_fwd.add_vpp_config()
 
@@ -2620,23 +2085,23 @@ class TestGBP(VppTestCase):
         # The BD is marked as do not learn, so no endpoints are ever
         # learnt in this BD.
         #
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd1, self.loop0, bd_uu_fwd,
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd1, self.loop0, bd_uu_fwd,
                                   learn=False)
         gbd1.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh bridge 1 detail"))
-        self.logger.info(self.vapi.cli("sh gbp bridge"))
+        self.logger.info(self.vclient.cli("sh bridge 1 detail"))
+        self.logger.info(self.vclient.cli("sh gbp bridge"))
 
         # ... and has a /32 applied
-        ip_addr = VppIpInterfaceAddress(self, gbd1.bvi,
+        ip_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi,
                                         "10.0.0.128", 32).add_vpp_config()
 
         #
         # The Endpoint-group in which we are learning endpoints
         #
-        epg_220 = VppGbpEndpointGroup(self, 220, 441, rd1, gbd1,
+        epg_220 = VppGbpEndpointGroup(self.vclient, 220, 441, rd1, gbd1,
                                       None, self.loop0,
                                       "10.0.0.128",
                                       "2001:10::128",
@@ -2648,7 +2113,7 @@ class TestGBP(VppTestCase):
         # learning enabled
         #
         vx_tun_l2_1 = VppGbpVxlanTunnel(
-            self, 99, bd1.bd_id,
+            self.vclient, 99, bd1.bd_id,
             VppEnum.vl_api_gbp_vxlan_tunnel_mode_t.GBP_VXLAN_TUNNEL_MODE_L2,
             self.pg2.local_ip4)
         vx_tun_l2_1.add_vpp_config()
@@ -2657,13 +2122,13 @@ class TestGBP(VppTestCase):
         # A static endpoint that the learnt endpoints are trying to
         # talk to
         #
-        ep = VppGbpEndpoint(self, vlan_11,
+        ep = VppGbpEndpoint(self.vclient, vlan_11,
                             epg_220, None,
                             "10.0.0.127", "11.0.0.127",
                             "2001:10::1", "3001::1")
         ep.add_vpp_config()
 
-        self.assertTrue(find_route(self, ep.ip4, 32, table_id=1))
+        self.assertTrue(find_route(self.vclient, ep.ip4, 32, table_id=1))
 
         #
         # Send to the static EP
@@ -2694,17 +2159,17 @@ class TestGBP(VppTestCase):
             # the EP is not learnt since the BD setting prevents it
             # also no TEP too
             #
-            self.assertFalse(find_gbp_endpoint(self,
+            self.assertFalse(find_gbp_endpoint(self.vclient,
                                                vx_tun_l2_1.sw_if_index,
                                                mac=l['mac']))
             self.assertEqual(INDEX_INVALID,
                              find_vxlan_gbp_tunnel(
-                                 self,
+                                 self.vclient,
                                  self.pg2.local_ip4,
                                  self.pg2.remote_hosts[1].ip4,
                                  99))
 
-        self.assertEqual(len(self.vapi.gbp_endpoint_dump()), 1)
+        self.assertEqual(len(self.vclient.gbp_endpoint_dump()), 1)
 
         #
         # static to remotes
@@ -2737,7 +2202,7 @@ class TestGBP(VppTestCase):
     def test_gbp_learn_l3(self):
         """ GBP L3 Endpoint Learning """
 
-        self.vapi.cli("set logging class gbp level debug")
+        self.vclient.cli("set logging class gbp level debug")
 
         ep_flags = VppEnum.vl_api_gbp_endpoint_flags_t
         routed_dst_mac = "00:0c:0c:0c:0c:0c"
@@ -2753,19 +2218,19 @@ class TestGBP(VppTestCase):
         #
         # IP tables
         #
-        t4 = VppIpTable(self, 1)
+        t4 = VppIpTable(self.vclient, 1)
         t4.add_vpp_config()
-        t6 = VppIpTable(self, 1, True)
+        t6 = VppIpTable(self.vclient, 1, True)
         t6.add_vpp_config()
 
-        tun_ip4_uu = VppVxlanGbpTunnel(self, self.pg4.local_ip4,
+        tun_ip4_uu = VppVxlanGbpTunnel(self.vclient, self.pg4.local_ip4,
                                        self.pg4.remote_ip4, 114)
-        tun_ip6_uu = VppVxlanGbpTunnel(self, self.pg4.local_ip4,
+        tun_ip6_uu = VppVxlanGbpTunnel(self.vclient, self.pg4.local_ip4,
                                        self.pg4.remote_ip4, 116)
         tun_ip4_uu.add_vpp_config()
         tun_ip6_uu.add_vpp_config()
 
-        rd1 = VppGbpRouteDomain(self, 2, 401, t4, t6, tun_ip4_uu, tun_ip6_uu)
+        rd1 = VppGbpRouteDomain(self.vclient, 2, 401, t4, t6, tun_ip4_uu, tun_ip6_uu)
         rd1.add_vpp_config()
 
         self.loop0.set_mac(self.router_mac)
@@ -2773,8 +2238,8 @@ class TestGBP(VppTestCase):
         #
         # Bind the BVI to the RD
         #
-        b4 = VppIpInterfaceBind(self, self.loop0, t4).add_vpp_config()
-        b6 = VppIpInterfaceBind(self, self.loop0, t6).add_vpp_config()
+        b4 = VppIpInterfaceBind(self.vclient, self.loop0, t4).add_vpp_config()
+        b6 = VppIpInterfaceBind(self.vclient, self.loop0, t6).add_vpp_config()
 
         #
         # Pg2 hosts the vxlan tunnel
@@ -2794,27 +2259,27 @@ class TestGBP(VppTestCase):
         #
         # a GBP bridge domain with a BVI and a UU-flood interface
         #
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd1, self.loop0, self.pg3)
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd1, self.loop0, self.pg3)
         gbd1.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh bridge 1 detail"))
-        self.logger.info(self.vapi.cli("sh gbp bridge"))
-        self.logger.info(self.vapi.cli("sh gbp route"))
+        self.logger.info(self.vclient.cli("sh bridge 1 detail"))
+        self.logger.info(self.vclient.cli("sh gbp bridge"))
+        self.logger.info(self.vclient.cli("sh gbp route"))
 
         # ... and has a /32 and /128 applied
-        ip4_addr = VppIpInterfaceAddress(self, gbd1.bvi,
+        ip4_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi,
                                          "10.0.0.128", 32,
                                          bind=b4).add_vpp_config()
-        ip6_addr = VppIpInterfaceAddress(self, gbd1.bvi,
+        ip6_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi,
                                          "2001:10::128", 128,
                                          bind=b6).add_vpp_config()
 
         #
         # The Endpoint-group in which we are learning endpoints
         #
-        epg_220 = VppGbpEndpointGroup(self, 220, 441, rd1, gbd1,
+        epg_220 = VppGbpEndpointGroup(self.vclient, 220, 441, rd1, gbd1,
                                       None, self.loop0,
                                       "10.0.0.128",
                                       "2001:10::128",
@@ -2825,7 +2290,7 @@ class TestGBP(VppTestCase):
         # The VXLAN GBP tunnel is in L3 mode with learning enabled
         #
         vx_tun_l3 = VppGbpVxlanTunnel(
-            self, 101, rd1.rd_id,
+            self.vclient, 101, rd1.rd_id,
             VppEnum.vl_api_gbp_vxlan_tunnel_mode_t.GBP_VXLAN_TUNNEL_MODE_L3,
             self.pg2.local_ip4)
         vx_tun_l3.add_vpp_config()
@@ -2834,7 +2299,7 @@ class TestGBP(VppTestCase):
         # A static endpoint that the learnt endpoints are trying to
         # talk to
         #
-        ep = VppGbpEndpoint(self, self.pg0,
+        ep = VppGbpEndpoint(self.vclient, self.pg0,
                             epg_220, None,
                             "10.0.0.127", "11.0.0.127",
                             "2001:10::1", "3001::1")
@@ -2861,14 +2326,14 @@ class TestGBP(VppTestCase):
 
             # the new TEP
             tep1_sw_if_index = find_vxlan_gbp_tunnel(
-                self,
+                self.vclient,
                 self.pg2.local_ip4,
                 self.pg2.remote_hosts[1].ip4,
                 vx_tun_l3.vni)
             self.assertNotEqual(INDEX_INVALID, tep1_sw_if_index)
 
             # endpoint learnt via the parent GBP-vxlan interface
-            self.assertTrue(find_gbp_endpoint(self,
+            self.assertTrue(find_gbp_endpoint(self.vclient,
                                               vx_tun_l3._sw_if_index,
                                               ip=l['ip']))
 
@@ -2903,7 +2368,7 @@ class TestGBP(VppTestCase):
                 self.assertEqual(inner[IP].dst, l['ip'])
 
         for l in learnt:
-            self.assertFalse(find_gbp_endpoint(self,
+            self.assertFalse(find_gbp_endpoint(self.vclient,
                                                tep1_sw_if_index,
                                                ip=l['ip']))
 
@@ -2928,22 +2393,22 @@ class TestGBP(VppTestCase):
 
             # the new TEP
             tep1_sw_if_index = find_vxlan_gbp_tunnel(
-                self,
+                self.vclient,
                 self.pg2.local_ip4,
                 self.pg2.remote_hosts[1].ip4,
                 vx_tun_l3.vni)
             self.assertNotEqual(INDEX_INVALID, tep1_sw_if_index)
 
-            self.logger.info(self.vapi.cli("show gbp bridge"))
-            self.logger.info(self.vapi.cli("show vxlan-gbp tunnel"))
-            self.logger.info(self.vapi.cli("show gbp vxlan"))
-            self.logger.info(self.vapi.cli("show int addr"))
+            self.logger.info(self.vclient.cli("show gbp bridge"))
+            self.logger.info(self.vclient.cli("show vxlan-gbp tunnel"))
+            self.logger.info(self.vclient.cli("show gbp vxlan"))
+            self.logger.info(self.vclient.cli("show int addr"))
 
             # endpoint learnt via the TEP
-            self.assertTrue(find_gbp_endpoint(self, ip=l['ip6']))
+            self.assertTrue(find_gbp_endpoint(self.vclient, ip=l['ip6']))
 
-        self.logger.info(self.vapi.cli("show gbp endpoint"))
-        self.logger.info(self.vapi.cli("show ip fib index 1 %s" % l['ip']))
+        self.logger.info(self.vclient.cli("show gbp endpoint"))
+        self.logger.info(self.vclient.cli("show ip fib index 1 %s" % l['ip']))
 
         #
         # Static EP replies to learnt
@@ -2975,7 +2440,7 @@ class TestGBP(VppTestCase):
                 self.assertEqual(inner[IPv6].src, ep.ip6)
                 self.assertEqual(inner[IPv6].dst, l['ip6'])
 
-        self.logger.info(self.vapi.cli("sh gbp endpoint"))
+        self.logger.info(self.vclient.cli("sh gbp endpoint"))
         for l in learnt:
             self.wait_for_ep_timeout(ip=l['ip'])
 
@@ -2993,7 +2458,7 @@ class TestGBP(VppTestCase):
         # Add a route to static EP's v4 and v6 subnet
         #
         se_10_24 = VppGbpSubnet(
-            self, rd1, "10.0.0.0", 24,
+            self.vclient, rd1, "10.0.0.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_TRANSPORT)
         se_10_24.add_vpp_config()
 
@@ -3057,21 +2522,21 @@ class TestGBP(VppTestCase):
 
             # the new TEP
             tep1_sw_if_index = find_vxlan_gbp_tunnel(
-                self,
+                self.vclient,
                 self.pg2.local_ip4,
                 self.pg2.remote_hosts[2].ip4,
                 vx_tun_l3.vni)
             self.assertNotEqual(INDEX_INVALID, tep1_sw_if_index)
 
             # endpoint learnt via the parent GBP-vxlan interface
-            self.assertTrue(find_gbp_endpoint(self,
+            self.assertTrue(find_gbp_endpoint(self.vclient,
                                               vx_tun_l3._sw_if_index,
                                               ip=l['ip']))
 
         #
         # Add a remote endpoint from the API
         #
-        rep_88 = VppGbpEndpoint(self, vx_tun_l3,
+        rep_88 = VppGbpEndpoint(self.vclient, vx_tun_l3,
                                 epg_220, None,
                                 "10.0.0.88", "11.0.0.88",
                                 "2001:10::88", "3001::88",
@@ -3086,7 +2551,7 @@ class TestGBP(VppTestCase):
         # this is a lower priority, hence the packet is sent to the DP leanrt
         # TEP
         #
-        rep_2 = VppGbpEndpoint(self, vx_tun_l3,
+        rep_2 = VppGbpEndpoint(self.vclient, vx_tun_l3,
                                epg_220, None,
                                learnt[0]['ip'], "11.0.0.101",
                                learnt[0]['ip6'], "3001::101",
@@ -3101,11 +2566,11 @@ class TestGBP(VppTestCase):
         #  packets should be send on the v4/v6 uu=fwd interface resp.
         #
         se_10_1_24 = VppGbpSubnet(
-            self, rd1, "10.0.1.0", 24,
+            self.vclient, rd1, "10.0.1.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_TRANSPORT)
         se_10_1_24.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("show gbp endpoint"))
+        self.logger.info(self.vclient.cli("show gbp endpoint"))
 
         ips = ["10.0.0.88", learnt[0]['ip']]
         for ip in ips:
@@ -3142,7 +2607,7 @@ class TestGBP(VppTestCase):
         rep_88.remove_vpp_config()
         rep_2.remove_vpp_config()
 
-        self.assertTrue(find_gbp_endpoint(self, ip=rep_2.ip4))
+        self.assertTrue(find_gbp_endpoint(self.vclient, ip=rep_2.ip4))
 
         p = (Ether(src=ep.mac, dst=self.loop0.local_mac) /
              IP(src=ep.ip4, dst=rep_2.ip4) /
@@ -3150,7 +2615,7 @@ class TestGBP(VppTestCase):
              Raw(b'\xa5' * 100))
         rxs = self.send_and_expect(self.pg0, [p], self.pg2)
 
-        self.assertFalse(find_gbp_endpoint(self, ip=rep_88.ip4))
+        self.assertFalse(find_gbp_endpoint(self.vclient, ip=rep_88.ip4))
 
         p = (Ether(src=ep.mac, dst=self.loop0.local_mac) /
              IP(src=ep.ip4, dst=rep_88.ip4) /
@@ -3170,7 +2635,7 @@ class TestGBP(VppTestCase):
         # Same as above, learn a remote EP via CP and DP
         # this time remove the DP one first. expect the CP data to remain
         #
-        rep_3 = VppGbpEndpoint(self, vx_tun_l3,
+        rep_3 = VppGbpEndpoint(self.vclient, vx_tun_l3,
                                epg_220, None,
                                "10.0.1.4", "11.0.0.103",
                                "2001::10:3", "3001::103",
@@ -3192,7 +2657,7 @@ class TestGBP(VppTestCase):
              Raw(b'\xa5' * 100))
         rxs = self.send_and_expect(self.pg2, p * NUM_PKTS, self.pg0)
 
-        self.assertTrue(find_gbp_endpoint(self,
+        self.assertTrue(find_gbp_endpoint(self.vclient,
                                           vx_tun_l3._sw_if_index,
                                           ip=rep_3.ip4,
                                           tep=[self.pg2.local_ip4,
@@ -3237,7 +2702,7 @@ class TestGBP(VppTestCase):
         rx = self.send_and_expect(self.pg2, [p], self.pg0)
 
         # endpoint learnt via the parent GBP-vxlan interface
-        self.assertTrue(find_gbp_endpoint(self,
+        self.assertTrue(find_gbp_endpoint(self.vclient,
                                           vx_tun_l3._sw_if_index,
                                           ip=l['ip']))
 
@@ -3252,7 +2717,7 @@ class TestGBP(VppTestCase):
     def test_gbp_redirect(self):
         """ GBP Endpoint Redirect """
 
-        self.vapi.cli("set logging class gbp level debug")
+        self.vclient.cli("set logging class gbp level debug")
 
         ep_flags = VppEnum.vl_api_gbp_endpoint_flags_t
         routed_dst_mac = "00:0c:0c:0c:0c:0c"
@@ -3268,12 +2733,12 @@ class TestGBP(VppTestCase):
         #
         # IP tables
         #
-        t4 = VppIpTable(self, 1)
+        t4 = VppIpTable(self.vclient, 1)
         t4.add_vpp_config()
-        t6 = VppIpTable(self, 1, True)
+        t6 = VppIpTable(self.vclient, 1, True)
         t6.add_vpp_config()
 
-        rd1 = VppGbpRouteDomain(self, 2, 402, t4, t6)
+        rd1 = VppGbpRouteDomain(self.vclient, 2, 402, t4, t6)
         rd1.add_vpp_config()
 
         self.loop0.set_mac(self.router_mac)
@@ -3281,8 +2746,8 @@ class TestGBP(VppTestCase):
         #
         # Bind the BVI to the RD
         #
-        b_ip4 = VppIpInterfaceBind(self, self.loop0, t4).add_vpp_config()
-        b_ip6 = VppIpInterfaceBind(self, self.loop0, t6).add_vpp_config()
+        b_ip4 = VppIpInterfaceBind(self.vclient, self.loop0, t4).add_vpp_config()
+        b_ip6 = VppIpInterfaceBind(self.vclient, self.loop0, t6).add_vpp_config()
 
         #
         # Pg7 hosts a BD's UU-fwd
@@ -3293,44 +2758,44 @@ class TestGBP(VppTestCase):
         #
         # a GBP bridge domains for the EPs
         #
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd1, self.loop0)
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd1, self.loop0)
         gbd1.add_vpp_config()
 
-        bd2 = VppBridgeDomain(self, 2)
+        bd2 = VppBridgeDomain(self.vclient, 2)
         bd2.add_vpp_config()
-        gbd2 = VppGbpBridgeDomain(self, bd2, rd1, self.loop1)
+        gbd2 = VppGbpBridgeDomain(self.vclient, bd2, rd1, self.loop1)
         gbd2.add_vpp_config()
 
         # ... and has a /32 and /128 applied
-        ip4_addr = VppIpInterfaceAddress(self, gbd1.bvi,
+        ip4_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi,
                                          "10.0.0.128", 32,
                                          bind=b_ip4).add_vpp_config()
-        ip6_addr = VppIpInterfaceAddress(self, gbd1.bvi,
+        ip6_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi,
                                          "2001:10::128", 128,
                                          bind=b_ip6).add_vpp_config()
-        ip4_addr = VppIpInterfaceAddress(self, gbd2.bvi,
+        ip4_addr = VppIpInterfaceAddress(self.vclient, gbd2.bvi,
                                          "10.0.1.128", 32).add_vpp_config()
-        ip6_addr = VppIpInterfaceAddress(self, gbd2.bvi,
+        ip6_addr = VppIpInterfaceAddress(self.vclient, gbd2.bvi,
                                          "2001:11::128", 128).add_vpp_config()
 
         #
         # The Endpoint-groups in which we are learning endpoints
         #
-        epg_220 = VppGbpEndpointGroup(self, 220, 440, rd1, gbd1,
+        epg_220 = VppGbpEndpointGroup(self.vclient, 220, 440, rd1, gbd1,
                                       None, gbd1.bvi,
                                       "10.0.0.128",
                                       "2001:10::128",
                                       VppGbpEndpointRetention(60))
         epg_220.add_vpp_config()
-        epg_221 = VppGbpEndpointGroup(self, 221, 441, rd1, gbd2,
+        epg_221 = VppGbpEndpointGroup(self.vclient, 221, 441, rd1, gbd2,
                                       None, gbd2.bvi,
                                       "10.0.1.128",
                                       "2001:11::128",
                                       VppGbpEndpointRetention(60))
         epg_221.add_vpp_config()
-        epg_222 = VppGbpEndpointGroup(self, 222, 442, rd1, gbd1,
+        epg_222 = VppGbpEndpointGroup(self.vclient, 222, 442, rd1, gbd1,
                                       None, gbd1.bvi,
                                       "10.0.2.128",
                                       "2001:12::128",
@@ -3340,34 +2805,34 @@ class TestGBP(VppTestCase):
         #
         # a GBP bridge domains for the SEPs
         #
-        bd_uu1 = VppVxlanGbpTunnel(self, self.pg7.local_ip4,
+        bd_uu1 = VppVxlanGbpTunnel(self.vclient, self.pg7.local_ip4,
                                    self.pg7.remote_ip4, 116)
         bd_uu1.add_vpp_config()
-        bd_uu2 = VppVxlanGbpTunnel(self, self.pg7.local_ip4,
+        bd_uu2 = VppVxlanGbpTunnel(self.vclient, self.pg7.local_ip4,
                                    self.pg7.remote_ip4, 117)
         bd_uu2.add_vpp_config()
 
-        bd3 = VppBridgeDomain(self, 3)
+        bd3 = VppBridgeDomain(self.vclient, 3)
         bd3.add_vpp_config()
-        gbd3 = VppGbpBridgeDomain(self, bd3, rd1, self.loop2,
+        gbd3 = VppGbpBridgeDomain(self.vclient, bd3, rd1, self.loop2,
                                   bd_uu1, learn=False)
         gbd3.add_vpp_config()
-        bd4 = VppBridgeDomain(self, 4)
+        bd4 = VppBridgeDomain(self.vclient, 4)
         bd4.add_vpp_config()
-        gbd4 = VppGbpBridgeDomain(self, bd4, rd1, self.loop3,
+        gbd4 = VppGbpBridgeDomain(self.vclient, bd4, rd1, self.loop3,
                                   bd_uu2, learn=False)
         gbd4.add_vpp_config()
 
         #
         # EPGs in which the service endpoints exist
         #
-        epg_320 = VppGbpEndpointGroup(self, 320, 550, rd1, gbd3,
+        epg_320 = VppGbpEndpointGroup(self.vclient, 320, 550, rd1, gbd3,
                                       None, gbd1.bvi,
                                       "12.0.0.128",
                                       "4001:10::128",
                                       VppGbpEndpointRetention(60))
         epg_320.add_vpp_config()
-        epg_321 = VppGbpEndpointGroup(self, 321, 551, rd1, gbd4,
+        epg_321 = VppGbpEndpointGroup(self.vclient, 321, 551, rd1, gbd4,
                                       None, gbd2.bvi,
                                       "12.0.1.128",
                                       "4001:11::128",
@@ -3377,17 +2842,17 @@ class TestGBP(VppTestCase):
         #
         # three local endpoints
         #
-        ep1 = VppGbpEndpoint(self, self.pg0,
+        ep1 = VppGbpEndpoint(self.vclient, self.pg0,
                              epg_220, None,
                              "10.0.0.1", "11.0.0.1",
                              "2001:10::1", "3001:10::1")
         ep1.add_vpp_config()
-        ep2 = VppGbpEndpoint(self, self.pg1,
+        ep2 = VppGbpEndpoint(self.vclient, self.pg1,
                              epg_221, None,
                              "10.0.1.1", "11.0.1.1",
                              "2001:11::1", "3001:11::1")
         ep2.add_vpp_config()
-        ep3 = VppGbpEndpoint(self, self.pg2,
+        ep3 = VppGbpEndpoint(self.vclient, self.pg2,
                              epg_222, None,
                              "10.0.2.2", "11.0.2.2",
                              "2001:12::1", "3001:12::1")
@@ -3396,23 +2861,23 @@ class TestGBP(VppTestCase):
         #
         # service endpoints
         #
-        sep1 = VppGbpEndpoint(self, self.pg3,
+        sep1 = VppGbpEndpoint(self.vclient, self.pg3,
                               epg_320, None,
                               "12.0.0.1", "13.0.0.1",
                               "4001:10::1", "5001:10::1")
         sep1.add_vpp_config()
-        sep2 = VppGbpEndpoint(self, self.pg4,
+        sep2 = VppGbpEndpoint(self.vclient, self.pg4,
                               epg_320, None,
                               "12.0.0.2", "13.0.0.2",
                               "4001:10::2", "5001:10::2")
         sep2.add_vpp_config()
-        sep3 = VppGbpEndpoint(self, self.pg5,
+        sep3 = VppGbpEndpoint(self.vclient, self.pg5,
                               epg_321, None,
                               "12.0.1.1", "13.0.1.1",
                               "4001:11::1", "5001:11::1")
         sep3.add_vpp_config()
         # this EP is not installed immediately
-        sep4 = VppGbpEndpoint(self, self.pg6,
+        sep4 = VppGbpEndpoint(self.vclient, self.pg6,
                               epg_321, None,
                               "12.0.1.2", "13.0.1.2",
                               "4001:11::2", "5001:11::2")
@@ -3449,14 +2914,14 @@ class TestGBP(VppTestCase):
         rule4 = AclRule(is_permit=1, proto=17)
         rule6 = AclRule(src_prefix=IPv6Network((0, 0)),
                         dst_prefix=IPv6Network((0, 0)), is_permit=1, proto=17)
-        acl = VppAcl(self, rules=[rule4, rule6])
+        acl = VppAcl(self.vclient, rules=[rule4, rule6])
         acl.add_vpp_config()
 
         #
         # test the src-ip hash mode
         #
         c1 = VppGbpContract(
-            self, 402, epg_220.sclass, epg_222.sclass, acl.acl_index,
+            self.vclient, 402, epg_220.sclass, epg_222.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -3475,7 +2940,7 @@ class TestGBP(VppTestCase):
         c1.add_vpp_config()
 
         c2 = VppGbpContract(
-            self, 402, epg_222.sclass, epg_220.sclass, acl.acl_index,
+            self.vclient, 402, epg_222.sclass, epg_220.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -3588,7 +3053,7 @@ class TestGBP(VppTestCase):
         # test the symmetric hash mode
         #
         c1 = VppGbpContract(
-            self, 402, epg_220.sclass, epg_222.sclass, acl.acl_index,
+            self.vclient, 402, epg_220.sclass, epg_222.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SYMMETRIC,
@@ -3607,7 +3072,7 @@ class TestGBP(VppTestCase):
         c1.add_vpp_config()
 
         c2 = VppGbpContract(
-            self, 402, epg_222.sclass, epg_220.sclass, acl.acl_index,
+            self.vclient, 402, epg_222.sclass, epg_220.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SYMMETRIC,
@@ -3672,7 +3137,7 @@ class TestGBP(VppTestCase):
                Raw(b'\xa5' * 100))]
 
         c3 = VppGbpContract(
-            self, 402, epg_220.sclass, epg_221.sclass, acl.acl_index,
+            self.vclient, 402, epg_220.sclass, epg_221.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SYMMETRIC,
@@ -3703,13 +3168,13 @@ class TestGBP(VppTestCase):
         #   packets coming from unknown remote EPs will be leant & redirected
         #
         vx_tun_l3 = VppGbpVxlanTunnel(
-            self, 444, rd1.rd_id,
+            self.vclient, 444, rd1.rd_id,
             VppEnum.vl_api_gbp_vxlan_tunnel_mode_t.GBP_VXLAN_TUNNEL_MODE_L3,
             self.pg2.local_ip4)
         vx_tun_l3.add_vpp_config()
 
         c4 = VppGbpContract(
-            self, 402, epg_221.sclass, epg_220.sclass, acl.acl_index,
+            self.vclient, 402, epg_221.sclass, epg_220.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -3748,7 +3213,7 @@ class TestGBP(VppTestCase):
             self.assertEqual(rx[IP].dst, ep1.ip4)
 
         # endpoint learnt via the parent GBP-vxlan interface
-        self.assertTrue(find_gbp_endpoint(self,
+        self.assertTrue(find_gbp_endpoint(self.vclient,
                                           vx_tun_l3._sw_if_index,
                                           ip="10.0.0.88"))
 
@@ -3773,7 +3238,7 @@ class TestGBP(VppTestCase):
             self.assertEqual(rx[IPv6].dst, ep1.ip6)
 
         # endpoint learnt via the parent GBP-vxlan interface
-        self.assertTrue(find_gbp_endpoint(self,
+        self.assertTrue(find_gbp_endpoint(self.vclient,
                                           vx_tun_l3._sw_if_index,
                                           ip="2001:10::88"))
 
@@ -3809,7 +3274,7 @@ class TestGBP(VppTestCase):
         # test the dst-ip hash mode
         #
         c5 = VppGbpContract(
-            self, 402, epg_220.sclass, epg_221.sclass, acl.acl_index,
+            self.vclient, 402, epg_220.sclass, epg_221.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_DST_IP,
@@ -3849,13 +3314,13 @@ class TestGBP(VppTestCase):
 
         # gbp vxlan tunnel for the remote SEP
         vx_tun_l3_sep = VppGbpVxlanTunnel(
-            self, 555, rd1.rd_id,
+            self.vclient, 555, rd1.rd_id,
             VppEnum.vl_api_gbp_vxlan_tunnel_mode_t.GBP_VXLAN_TUNNEL_MODE_L3,
             self.pg2.local_ip4)
         vx_tun_l3_sep.add_vpp_config()
 
         # remote SEP
-        sep5 = VppGbpEndpoint(self, vx_tun_l3_sep,
+        sep5 = VppGbpEndpoint(self.vclient, vx_tun_l3_sep,
                               epg_320, None,
                               "12.0.0.10", "13.0.0.10",
                               "4001:10::10", "5001:10::10",
@@ -3872,14 +3337,14 @@ class TestGBP(VppTestCase):
         # add local l3out
         # the external bd
         self.loop4.set_mac(self.router_mac)
-        b_lo4_ip4 = VppIpInterfaceBind(self, self.loop4, t4).add_vpp_config()
-        b_lo4_ip6 = VppIpInterfaceBind(self, self.loop4, t6).add_vpp_config()
-        ebd = VppBridgeDomain(self, 100)
+        b_lo4_ip4 = VppIpInterfaceBind(self.vclient, self.loop4, t4).add_vpp_config()
+        b_lo4_ip6 = VppIpInterfaceBind(self.vclient, self.loop4, t6).add_vpp_config()
+        ebd = VppBridgeDomain(self.vclient, 100)
         ebd.add_vpp_config()
-        gebd = VppGbpBridgeDomain(self, ebd, rd1, self.loop4, None, None)
+        gebd = VppGbpBridgeDomain(self.vclient, ebd, rd1, self.loop4, None, None)
         gebd.add_vpp_config()
         # the external epg
-        eepg = VppGbpEndpointGroup(self, 888, 765, rd1, gebd,
+        eepg = VppGbpEndpointGroup(self.vclient, 888, 765, rd1, gebd,
                                    None, gebd.bvi,
                                    "10.1.0.128",
                                    "2001:10:1::128",
@@ -3887,57 +3352,57 @@ class TestGBP(VppTestCase):
         eepg.add_vpp_config()
         # add subnets to BVI
         VppIpInterfaceAddress(
-            self,
+            self.vclient,
             gebd.bvi,
             "10.1.0.128",
             24, bind=b_lo4_ip4).add_vpp_config()
         VppIpInterfaceAddress(
-            self,
+            self.vclient,
             gebd.bvi,
             "2001:10:1::128",
             64, bind=b_lo4_ip6).add_vpp_config()
         # ... which are L3-out subnets
-        VppGbpSubnet(self, rd1, "10.1.0.0", 24,
+        VppGbpSubnet(self.vclient, rd1, "10.1.0.0", 24,
                      VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
                      sclass=765).add_vpp_config()
-        VppGbpSubnet(self, rd1, "2001:10:1::128", 64,
+        VppGbpSubnet(self.vclient, rd1, "2001:10:1::128", 64,
                      VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
                      sclass=765).add_vpp_config()
         # external endpoints
-        VppL2Vtr(self, self.vlan_100, L2_VTR_OP.L2_POP_1).add_vpp_config()
-        eep1 = VppGbpEndpoint(self, self.vlan_100, eepg, None, "10.1.0.1",
+        VppL2Vtr(self.vclient, self.vlan_100, L2_VTR_OP.L2_POP_1).add_vpp_config()
+        eep1 = VppGbpEndpoint(self.vclient, self.vlan_100, eepg, None, "10.1.0.1",
                               "11.1.0.1", "2001:10:1::1", "3001:10:1::1",
                               ep_flags.GBP_API_ENDPOINT_FLAG_EXTERNAL)
         eep1.add_vpp_config()
-        VppL2Vtr(self, self.vlan_101, L2_VTR_OP.L2_POP_1).add_vpp_config()
-        eep2 = VppGbpEndpoint(self, self.vlan_101, eepg, None, "10.1.0.2",
+        VppL2Vtr(self.vclient, self.vlan_101, L2_VTR_OP.L2_POP_1).add_vpp_config()
+        eep2 = VppGbpEndpoint(self.vclient, self.vlan_101, eepg, None, "10.1.0.2",
                               "11.1.0.2", "2001:10:1::2", "3001:10:1::2",
                               ep_flags.GBP_API_ENDPOINT_FLAG_EXTERNAL)
         eep2.add_vpp_config()
 
         # external subnets reachable though eep1 and eep2 respectively
-        VppIpRoute(self, "10.220.0.0", 24,
+        VppIpRoute(self.vclient, "10.220.0.0", 24,
                    [VppRoutePath(eep1.ip4, eep1.epg.bvi.sw_if_index)],
                    table_id=t4.table_id).add_vpp_config()
-        VppGbpSubnet(self, rd1, "10.220.0.0", 24,
+        VppGbpSubnet(self.vclient, rd1, "10.220.0.0", 24,
                      VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
                      sclass=4220).add_vpp_config()
-        VppIpRoute(self, "10:220::", 64,
+        VppIpRoute(self.vclient, "10:220::", 64,
                    [VppRoutePath(eep1.ip6, eep1.epg.bvi.sw_if_index)],
                    table_id=t6.table_id).add_vpp_config()
-        VppGbpSubnet(self, rd1, "10:220::", 64,
+        VppGbpSubnet(self.vclient, rd1, "10:220::", 64,
                      VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
                      sclass=4220).add_vpp_config()
-        VppIpRoute(self, "10.221.0.0", 24,
+        VppIpRoute(self.vclient, "10.221.0.0", 24,
                    [VppRoutePath(eep2.ip4, eep2.epg.bvi.sw_if_index)],
                    table_id=t4.table_id).add_vpp_config()
-        VppGbpSubnet(self, rd1, "10.221.0.0", 24,
+        VppGbpSubnet(self.vclient, rd1, "10.221.0.0", 24,
                      VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
                      sclass=4221).add_vpp_config()
-        VppIpRoute(self, "10:221::", 64,
+        VppIpRoute(self.vclient, "10:221::", 64,
                    [VppRoutePath(eep2.ip6, eep2.epg.bvi.sw_if_index)],
                    table_id=t6.table_id).add_vpp_config()
-        VppGbpSubnet(self, rd1, "10:221::", 64,
+        VppGbpSubnet(self.vclient, rd1, "10:221::", 64,
                      VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
                      sclass=4221).add_vpp_config()
 
@@ -3962,7 +3427,7 @@ class TestGBP(VppTestCase):
 
         # contract redirecting to sep5
         VppGbpContract(
-            self, 402, 4220, 4221, acl.acl_index,
+            self.vclient, 402, 4220, 4221, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_DST_IP,
@@ -4026,7 +3491,7 @@ class TestGBP(VppTestCase):
         # change the contract between l3out to redirect to local SEPs
         # instead of remote SEP
         VppGbpContract(
-            self, 402, 4220, 4221, acl.acl_index,
+            self.vclient, 402, 4220, 4221, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_DST_IP,
@@ -4057,7 +3522,7 @@ class TestGBP(VppTestCase):
 
         # contract to redirect to learnt SEP
         VppGbpContract(
-            self, 402, epg_221.sclass, epg_222.sclass, acl.acl_index,
+            self.vclient, 402, epg_221.sclass, epg_222.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_DST_IP,
@@ -4108,10 +3573,10 @@ class TestGBP(VppTestCase):
             self.assertEqual(rxip.dst, txip.dst)
 
         # endpoint learnt via the parent GBP-vxlan interface
-        self.assertTrue(find_gbp_endpoint(self,
+        self.assertTrue(find_gbp_endpoint(self.vclient,
                                           vx_tun_l3._sw_if_index,
                                           ip="10.0.1.100"))
-        self.assertTrue(find_gbp_endpoint(self,
+        self.assertTrue(find_gbp_endpoint(self.vclient,
                                           vx_tun_l3._sw_if_index,
                                           ip="2001:10::100"))
 
@@ -4149,7 +3614,7 @@ class TestGBP(VppTestCase):
     def test_gbp_redirect_extended(self):
         """ GBP Endpoint Redirect Extended """
 
-        self.vapi.cli("set logging class gbp level debug")
+        self.vclient.cli("set logging class gbp level debug")
 
         ep_flags = VppEnum.vl_api_gbp_endpoint_flags_t
         routed_dst_mac = "00:0c:0c:0c:0c:0c"
@@ -4165,34 +3630,34 @@ class TestGBP(VppTestCase):
         #
         # IP tables
         #
-        t4 = VppIpTable(self, 1)
+        t4 = VppIpTable(self.vclient, 1)
         t4.add_vpp_config()
-        t6 = VppIpTable(self, 1, True)
+        t6 = VppIpTable(self.vclient, 1, True)
         t6.add_vpp_config()
 
         # create IPv4 and IPv6 RD UU VxLAN-GBP TEP and bind them to the right
         # VRF
         rd_uu4 = VppVxlanGbpTunnel(
-            self,
+            self.vclient,
             self.pg7.local_ip4,
             self.pg7.remote_ip4,
             114,
             mode=(VppEnum.vl_api_vxlan_gbp_api_tunnel_mode_t.
                   VXLAN_GBP_API_TUNNEL_MODE_L3))
         rd_uu4.add_vpp_config()
-        VppIpInterfaceBind(self, rd_uu4, t4).add_vpp_config()
+        VppIpInterfaceBind(self.vclient, rd_uu4, t4).add_vpp_config()
 
         rd_uu6 = VppVxlanGbpTunnel(
-            self,
+            self.vclient,
             self.pg7.local_ip4,
             self.pg7.remote_ip4,
             115,
             mode=(VppEnum.vl_api_vxlan_gbp_api_tunnel_mode_t.
                   VXLAN_GBP_API_TUNNEL_MODE_L3))
         rd_uu6.add_vpp_config()
-        VppIpInterfaceBind(self, rd_uu6, t4).add_vpp_config()
+        VppIpInterfaceBind(self.vclient, rd_uu6, t4).add_vpp_config()
 
-        rd1 = VppGbpRouteDomain(self, 2, 402, t4, t6, rd_uu4, rd_uu6)
+        rd1 = VppGbpRouteDomain(self.vclient, 2, 402, t4, t6, rd_uu4, rd_uu6)
         rd1.add_vpp_config()
 
         self.loop0.set_mac(self.router_mac)
@@ -4202,12 +3667,12 @@ class TestGBP(VppTestCase):
         #
         # Bind the BVI to the RD
         #
-        b_lo0_ip4 = VppIpInterfaceBind(self, self.loop0, t4).add_vpp_config()
-        b_lo0_ip6 = VppIpInterfaceBind(self, self.loop0, t6).add_vpp_config()
-        b_lo1_ip4 = VppIpInterfaceBind(self, self.loop1, t4).add_vpp_config()
-        b_lo1_ip6 = VppIpInterfaceBind(self, self.loop1, t6).add_vpp_config()
-        b_lo2_ip4 = VppIpInterfaceBind(self, self.loop2, t4).add_vpp_config()
-        b_lo2_ip6 = VppIpInterfaceBind(self, self.loop2, t6).add_vpp_config()
+        b_lo0_ip4 = VppIpInterfaceBind(self.vclient, self.loop0, t4).add_vpp_config()
+        b_lo0_ip6 = VppIpInterfaceBind(self.vclient, self.loop0, t6).add_vpp_config()
+        b_lo1_ip4 = VppIpInterfaceBind(self.vclient, self.loop1, t4).add_vpp_config()
+        b_lo1_ip6 = VppIpInterfaceBind(self.vclient, self.loop1, t6).add_vpp_config()
+        b_lo2_ip4 = VppIpInterfaceBind(self.vclient, self.loop2, t4).add_vpp_config()
+        b_lo2_ip6 = VppIpInterfaceBind(self.vclient, self.loop2, t6).add_vpp_config()
 
         #
         # Pg7 hosts a BD's UU-fwd
@@ -4218,40 +3683,40 @@ class TestGBP(VppTestCase):
         #
         # a GBP bridge domains for the EPs
         #
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd1, self.loop0)
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd1, self.loop0)
         gbd1.add_vpp_config()
 
-        bd2 = VppBridgeDomain(self, 2)
+        bd2 = VppBridgeDomain(self.vclient, 2)
         bd2.add_vpp_config()
-        gbd2 = VppGbpBridgeDomain(self, bd2, rd1, self.loop1)
+        gbd2 = VppGbpBridgeDomain(self.vclient, bd2, rd1, self.loop1)
         gbd2.add_vpp_config()
 
         # ... and has a /32 and /128 applied
-        ip4_addr1 = VppIpInterfaceAddress(self, gbd1.bvi,
+        ip4_addr1 = VppIpInterfaceAddress(self.vclient, gbd1.bvi,
                                           "10.0.0.128", 32,
                                           bind=b_lo0_ip4).add_vpp_config()
-        ip6_addr1 = VppIpInterfaceAddress(self, gbd1.bvi,
+        ip6_addr1 = VppIpInterfaceAddress(self.vclient, gbd1.bvi,
                                           "2001:10::128", 128,
                                           bind=b_lo0_ip6).add_vpp_config()
-        ip4_addr2 = VppIpInterfaceAddress(self, gbd2.bvi,
+        ip4_addr2 = VppIpInterfaceAddress(self.vclient, gbd2.bvi,
                                           "10.0.1.128", 32,
                                           bind=b_lo1_ip4).add_vpp_config()
-        ip6_addr2 = VppIpInterfaceAddress(self, gbd2.bvi,
+        ip6_addr2 = VppIpInterfaceAddress(self.vclient, gbd2.bvi,
                                           "2001:11::128", 128,
                                           bind=b_lo1_ip6).add_vpp_config()
 
         #
         # The Endpoint-groups
         #
-        epg_220 = VppGbpEndpointGroup(self, 220, 440, rd1, gbd1,
+        epg_220 = VppGbpEndpointGroup(self.vclient, 220, 440, rd1, gbd1,
                                       None, gbd1.bvi,
                                       "10.0.0.128",
                                       "2001:10::128",
                                       VppGbpEndpointRetention(60))
         epg_220.add_vpp_config()
-        epg_221 = VppGbpEndpointGroup(self, 221, 441, rd1, gbd2,
+        epg_221 = VppGbpEndpointGroup(self.vclient, 221, 441, rd1, gbd2,
                                       None, gbd2.bvi,
                                       "10.0.1.128",
                                       "2001:11::128",
@@ -4261,34 +3726,34 @@ class TestGBP(VppTestCase):
         #
         # a GBP bridge domains for the SEPs
         #
-        bd_uu3 = VppVxlanGbpTunnel(self, self.pg7.local_ip4,
+        bd_uu3 = VppVxlanGbpTunnel(self.vclient, self.pg7.local_ip4,
                                    self.pg7.remote_ip4, 116)
         bd_uu3.add_vpp_config()
 
-        bd3 = VppBridgeDomain(self, 3)
+        bd3 = VppBridgeDomain(self.vclient, 3)
         bd3.add_vpp_config()
-        gbd3 = VppGbpBridgeDomain(self, bd3, rd1, self.loop2,
+        gbd3 = VppGbpBridgeDomain(self.vclient, bd3, rd1, self.loop2,
                                   bd_uu3, learn=False)
         gbd3.add_vpp_config()
 
-        ip4_addr3 = VppIpInterfaceAddress(self, gbd3.bvi,
+        ip4_addr3 = VppIpInterfaceAddress(self.vclient, gbd3.bvi,
                                           "12.0.0.128", 32,
                                           bind=b_lo2_ip4).add_vpp_config()
-        ip6_addr3 = VppIpInterfaceAddress(self, gbd3.bvi,
+        ip6_addr3 = VppIpInterfaceAddress(self.vclient, gbd3.bvi,
                                           "4001:10::128", 128,
                                           bind=b_lo2_ip6).add_vpp_config()
 
         #
-        # self.logger.info(self.vapi.cli("show gbp bridge"))
-        # self.logger.info(self.vapi.cli("show vxlan-gbp tunnel"))
-        # self.logger.info(self.vapi.cli("show gbp vxlan"))
-        # self.logger.info(self.vapi.cli("show int addr"))
+        # self.logger.info(self.vclient.cli("show gbp bridge"))
+        # self.logger.info(self.vclient.cli("show vxlan-gbp tunnel"))
+        # self.logger.info(self.vclient.cli("show gbp vxlan"))
+        # self.logger.info(self.vclient.cli("show int addr"))
         #
 
         #
         # EPGs in which the service endpoints exist
         #
-        epg_320 = VppGbpEndpointGroup(self, 320, 550, rd1, gbd3,
+        epg_320 = VppGbpEndpointGroup(self.vclient, 320, 550, rd1, gbd3,
                                       None, gbd3.bvi,
                                       "12.0.0.128",
                                       "4001:10::128",
@@ -4298,12 +3763,12 @@ class TestGBP(VppTestCase):
         #
         # endpoints
         #
-        ep1 = VppGbpEndpoint(self, self.pg0,
+        ep1 = VppGbpEndpoint(self.vclient, self.pg0,
                              epg_220, None,
                              "10.0.0.1", "11.0.0.1",
                              "2001:10::1", "3001:10::1")
         ep1.add_vpp_config()
-        ep2 = VppGbpEndpoint(self, self.pg1,
+        ep2 = VppGbpEndpoint(self.vclient, self.pg1,
                              epg_221, None,
                              "10.0.1.1", "11.0.1.1",
                              "2001:11::1", "3001:11::1")
@@ -4312,11 +3777,11 @@ class TestGBP(VppTestCase):
         #
         # service endpoints
         #
-        sep1 = VppGbpEndpoint(self, self.pg3,
+        sep1 = VppGbpEndpoint(self.vclient, self.pg3,
                               epg_320, None,
                               "12.0.0.1", "13.0.0.1",
                               "4001:10::1", "5001:10::1")
-        sep2 = VppGbpEndpoint(self, self.pg4,
+        sep2 = VppGbpEndpoint(self.vclient, self.pg4,
                               epg_320, None,
                               "12.0.0.2", "13.0.0.2",
                               "4001:10::2", "5001:10::2")
@@ -4327,10 +3792,10 @@ class TestGBP(VppTestCase):
         #
         # add routes to EPG subnets
         #
-        VppGbpSubnet(self, rd1, "10.0.0.0", 24,
+        VppGbpSubnet(self.vclient, rd1, "10.0.0.0", 24,
                      VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_TRANSPORT
                      ).add_vpp_config()
-        VppGbpSubnet(self, rd1, "10.0.1.0", 24,
+        VppGbpSubnet(self.vclient, rd1, "10.0.1.0", 24,
                      VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_TRANSPORT
                      ).add_vpp_config()
 
@@ -4367,14 +3832,14 @@ class TestGBP(VppTestCase):
         rule4 = AclRule(is_permit=1, proto=17)
         rule6 = AclRule(src_prefix=IPv6Network((0, 0)),
                         dst_prefix=IPv6Network((0, 0)), is_permit=1, proto=17)
-        acl = VppAcl(self, rules=[rule4, rule6])
+        acl = VppAcl(self.vclient, rules=[rule4, rule6])
         acl.add_vpp_config()
 
         #
         # test the src-ip hash mode
         #
         c1 = VppGbpContract(
-            self, 402, epg_220.sclass, epg_221.sclass, acl.acl_index,
+            self.vclient, 402, epg_220.sclass, epg_221.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SYMMETRIC,
@@ -4389,7 +3854,7 @@ class TestGBP(VppTestCase):
         c1.add_vpp_config()
 
         c2 = VppGbpContract(
-            self, 402, epg_221.sclass, epg_220.sclass, acl.acl_index,
+            self.vclient, 402, epg_221.sclass, epg_220.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_REDIRECT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SYMMETRIC,
@@ -4530,7 +3995,7 @@ class TestGBP(VppTestCase):
 
         # contract for SEP to communicate with dst EP
         c3 = VppGbpContract(
-            self, 402, epg_320.sclass, epg_221.sclass, acl.acl_index,
+            self.vclient, 402, epg_320.sclass, epg_221.sclass, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SYMMETRIC),
@@ -4569,11 +4034,11 @@ class TestGBP(VppTestCase):
             self.assertEqual(inner[IP].src, ep1.ip4)
             self.assertEqual(inner[IP].dst, ep2.ip4)
 
-        self.logger.info(self.vapi.cli("show bridge 3 detail"))
+        self.logger.info(self.vclient.cli("show bridge 3 detail"))
         sep1.remove_vpp_config()
 
-        self.logger.info(self.vapi.cli("show bridge 1 detail"))
-        self.logger.info(self.vapi.cli("show bridge 2 detail"))
+        self.logger.info(self.vclient.cli("show bridge 1 detail"))
+        self.logger.info(self.vclient.cli("show bridge 2 detail"))
 
         # re-add ep2: it is local again :)
         ep2.add_vpp_config()
@@ -4614,7 +4079,7 @@ class TestGBP(VppTestCase):
         """ GBP L3 Out """
 
         ep_flags = VppEnum.vl_api_gbp_endpoint_flags_t
-        self.vapi.cli("set logging class gbp level debug")
+        self.vclient.cli("set logging class gbp level debug")
 
         routed_dst_mac = "00:0c:0c:0c:0c:0c"
         routed_src_mac = "00:22:bd:f8:19:ff"
@@ -4622,12 +4087,12 @@ class TestGBP(VppTestCase):
         #
         # IP tables
         #
-        t4 = VppIpTable(self, 1)
+        t4 = VppIpTable(self.vclient, 1)
         t4.add_vpp_config()
-        t6 = VppIpTable(self, 1, True)
+        t6 = VppIpTable(self.vclient, 1, True)
         t6.add_vpp_config()
 
-        rd1 = VppGbpRouteDomain(self, 2, 55, t4, t6)
+        rd1 = VppGbpRouteDomain(self.vclient, 2, 55, t4, t6)
         rd1.add_vpp_config()
 
         self.loop0.set_mac(self.router_mac)
@@ -4635,8 +4100,8 @@ class TestGBP(VppTestCase):
         #
         # Bind the BVI to the RD
         #
-        b_ip4 = VppIpInterfaceBind(self, self.loop0, t4).add_vpp_config()
-        b_ip6 = VppIpInterfaceBind(self, self.loop0, t6).add_vpp_config()
+        b_ip4 = VppIpInterfaceBind(self.vclient, self.loop0, t4).add_vpp_config()
+        b_ip6 = VppIpInterfaceBind(self.vclient, self.loop0, t6).add_vpp_config()
 
         #
         # Pg7 hosts a BD's BUM
@@ -4648,7 +4113,7 @@ class TestGBP(VppTestCase):
         #
         # a multicast vxlan-gbp tunnel for broadcast in the BD
         #
-        tun_bm = VppVxlanGbpTunnel(self, self.pg7.local_ip4,
+        tun_bm = VppVxlanGbpTunnel(self.vclient, self.pg7.local_ip4,
                                    "239.1.1.1", 88,
                                    mcast_itf=self.pg7)
         tun_bm.add_vpp_config()
@@ -4656,15 +4121,15 @@ class TestGBP(VppTestCase):
         #
         # a GBP external bridge domains for the EPs
         #
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd1, self.loop0, None, tun_bm)
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd1, self.loop0, None, tun_bm)
         gbd1.add_vpp_config()
 
         #
         # The Endpoint-groups in which the external endpoints exist
         #
-        epg_220 = VppGbpEndpointGroup(self, 220, 113, rd1, gbd1,
+        epg_220 = VppGbpEndpointGroup(self.vclient, 220, 113, rd1, gbd1,
                                       None, gbd1.bvi,
                                       "10.0.0.128",
                                       "2001:10::128",
@@ -4672,14 +4137,14 @@ class TestGBP(VppTestCase):
         epg_220.add_vpp_config()
 
         # the BVIs have the subnets applied ...
-        ip4_addr = VppIpInterfaceAddress(self, gbd1.bvi, "10.0.0.128",
+        ip4_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi, "10.0.0.128",
                                          24, bind=b_ip4).add_vpp_config()
-        ip6_addr = VppIpInterfaceAddress(self, gbd1.bvi, "2001:10::128",
+        ip6_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi, "2001:10::128",
                                          64, bind=b_ip6).add_vpp_config()
 
         # ... which are L3-out subnets
         l3o_1 = VppGbpSubnet(
-            self, rd1, "10.0.0.0", 24,
+            self.vclient, rd1, "10.0.0.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=113)
         l3o_1.add_vpp_config()
@@ -4688,9 +4153,9 @@ class TestGBP(VppTestCase):
         # an external interface attached to the outside world and the
         # external BD
         #
-        VppL2Vtr(self, self.vlan_100, L2_VTR_OP.L2_POP_1).add_vpp_config()
-        VppL2Vtr(self, self.vlan_101, L2_VTR_OP.L2_POP_1).add_vpp_config()
-        vlan_144 = VppDot1QSubint(self, self.pg0, 144)
+        VppL2Vtr(self.vclient, self.vlan_100, L2_VTR_OP.L2_POP_1).add_vpp_config()
+        VppL2Vtr(self.vclient, self.vlan_101, L2_VTR_OP.L2_POP_1).add_vpp_config()
+        vlan_144 = VppDot1QSubint(self.vclient, self.pg0, 144)
         vlan_144.admin_up()
         # vlan_102 is not poped
 
@@ -4698,7 +4163,7 @@ class TestGBP(VppTestCase):
         # an unicast vxlan-gbp for inter-RD traffic
         #
         vx_tun_l3 = VppGbpVxlanTunnel(
-            self, 444, rd1.rd_id,
+            self.vclient, 444, rd1.rd_id,
             VppEnum.vl_api_gbp_vxlan_tunnel_mode_t.GBP_VXLAN_TUNNEL_MODE_L3,
             self.pg2.local_ip4)
         vx_tun_l3.add_vpp_config()
@@ -4706,19 +4171,19 @@ class TestGBP(VppTestCase):
         #
         # External Endpoints
         #
-        eep1 = VppGbpEndpoint(self, self.vlan_100,
+        eep1 = VppGbpEndpoint(self.vclient, self.vlan_100,
                               epg_220, None,
                               "10.0.0.1", "11.0.0.1",
                               "2001:10::1", "3001::1",
                               ep_flags.GBP_API_ENDPOINT_FLAG_EXTERNAL)
         eep1.add_vpp_config()
-        eep2 = VppGbpEndpoint(self, self.vlan_101,
+        eep2 = VppGbpEndpoint(self.vclient, self.vlan_101,
                               epg_220, None,
                               "10.0.0.2", "11.0.0.2",
                               "2001:10::2", "3001::2",
                               ep_flags.GBP_API_ENDPOINT_FLAG_EXTERNAL)
         eep2.add_vpp_config()
-        eep3 = VppGbpEndpoint(self, self.vlan_102,
+        eep3 = VppGbpEndpoint(self.vclient, self.vlan_102,
                               epg_220, None,
                               "10.0.0.3", "11.0.0.3",
                               "2001:10::3", "3001::3",
@@ -4728,7 +4193,7 @@ class TestGBP(VppTestCase):
         #
         # A remote external endpoint
         #
-        rep = VppGbpEndpoint(self, vx_tun_l3,
+        rep = VppGbpEndpoint(self.vclient, vx_tun_l3,
                              epg_220, None,
                              "10.0.0.101", "11.0.0.101",
                              "2001:10::101", "3001::101",
@@ -4865,14 +4330,14 @@ class TestGBP(VppTestCase):
         #
         # A ip4 subnet reachable through the external EP1
         #
-        ip_220 = VppIpRoute(self, "10.220.0.0", 24,
+        ip_220 = VppIpRoute(self.vclient, "10.220.0.0", 24,
                             [VppRoutePath(eep1.ip4,
                                           eep1.epg.bvi.sw_if_index)],
                             table_id=t4.table_id)
         ip_220.add_vpp_config()
 
         l3o_220 = VppGbpSubnet(
-            self, rd1, "10.220.0.0", 24,
+            self.vclient, rd1, "10.220.0.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=4220)
         l3o_220.add_vpp_config()
@@ -4880,14 +4345,14 @@ class TestGBP(VppTestCase):
         #
         # An ip6 subnet reachable through the external EP1
         #
-        ip6_220 = VppIpRoute(self, "10:220::", 64,
+        ip6_220 = VppIpRoute(self.vclient, "10:220::", 64,
                              [VppRoutePath(eep1.ip6,
                                            eep1.epg.bvi.sw_if_index)],
                              table_id=t6.table_id)
         ip6_220.add_vpp_config()
 
         l3o6_220 = VppGbpSubnet(
-            self, rd1, "10:220::", 64,
+            self.vclient, rd1, "10:220::", 64,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=4220)
         l3o6_220.add_vpp_config()
@@ -4895,14 +4360,14 @@ class TestGBP(VppTestCase):
         #
         # A subnet reachable through the external EP2
         #
-        ip_221 = VppIpRoute(self, "10.221.0.0", 24,
+        ip_221 = VppIpRoute(self.vclient, "10.221.0.0", 24,
                             [VppRoutePath(eep2.ip4,
                                           eep2.epg.bvi.sw_if_index)],
                             table_id=t4.table_id)
         ip_221.add_vpp_config()
 
         l3o_221 = VppGbpSubnet(
-            self, rd1, "10.221.0.0", 24,
+            self.vclient, rd1, "10.221.0.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=4221)
         l3o_221.add_vpp_config()
@@ -4924,14 +4389,14 @@ class TestGBP(VppTestCase):
         rule4 = AclRule(is_permit=1, proto=17)
         rule6 = AclRule(src_prefix=IPv6Network((0, 0)),
                         dst_prefix=IPv6Network((0, 0)), is_permit=1, proto=17)
-        acl = VppAcl(self, rules=[rule4, rule6])
+        acl = VppAcl(self.vclient, rules=[rule4, rule6])
         acl.add_vpp_config()
 
         #
         # A contract with the wrong scope is not matched
         #
         c_44 = VppGbpContract(
-            self, 44, 4220, 4221, acl.acl_index,
+            self.vclient, 44, 4220, 4221, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -4945,7 +4410,7 @@ class TestGBP(VppTestCase):
         self.send_and_assert_no_replies(self.pg0, p * 1)
 
         c1 = VppGbpContract(
-            self, 55, 4220, 4221, acl.acl_index,
+            self.vclient, 55, 4220, 4221, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -4961,7 +4426,7 @@ class TestGBP(VppTestCase):
         # Contracts allowing ext-net 200 to talk with external EPs
         #
         c2 = VppGbpContract(
-            self, 55, 4220, 113, acl.acl_index,
+            self.vclient, 55, 4220, 113, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -4973,7 +4438,7 @@ class TestGBP(VppTestCase):
             [ETH_P_IP, ETH_P_IPV6])
         c2.add_vpp_config()
         c3 = VppGbpContract(
-            self, 55, 113, 4220, acl.acl_index,
+            self.vclient, 55, 113, 4220, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -5002,8 +4467,8 @@ class TestGBP(VppTestCase):
             self.assertEqual(rx[Dot1Q].vlan, 101)
 
         # we did not learn these external hosts
-        self.assertFalse(find_gbp_endpoint(self, ip="10.220.0.1"))
-        self.assertFalse(find_gbp_endpoint(self, ip="10.221.0.1"))
+        self.assertFalse(find_gbp_endpoint(self.vclient, ip="10.220.0.1"))
+        self.assertFalse(find_gbp_endpoint(self.vclient, ip="10.221.0.1"))
 
         #
         # from remote external EP to local external EP
@@ -5058,19 +4523,19 @@ class TestGBP(VppTestCase):
         # first the VXLAN-GBP tunnel over which it is reached
         #
         vx_tun_r1 = VppVxlanGbpTunnel(
-            self, self.pg7.local_ip4,
+            self.vclient, self.pg7.local_ip4,
             self.pg7.remote_ip4, 445,
             mode=(VppEnum.vl_api_vxlan_gbp_api_tunnel_mode_t.
                   VXLAN_GBP_API_TUNNEL_MODE_L3))
         vx_tun_r1.add_vpp_config()
-        VppIpInterfaceBind(self, vx_tun_r1, t4).add_vpp_config()
+        VppIpInterfaceBind(self.vclient, vx_tun_r1, t4).add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh vxlan-gbp tunnel"))
+        self.logger.info(self.vclient.cli("sh vxlan-gbp tunnel"))
 
         #
         # then the special adj to resolve through on that tunnel
         #
-        n1 = VppNeighbor(self,
+        n1 = VppNeighbor(self.vclient,
                          vx_tun_r1.sw_if_index,
                          "00:0c:0c:0c:0c:0c",
                          self.pg7.remote_ip4)
@@ -5079,14 +4544,14 @@ class TestGBP(VppTestCase):
         #
         # the route via the adj above
         #
-        ip_222 = VppIpRoute(self, "10.222.0.0", 24,
+        ip_222 = VppIpRoute(self.vclient, "10.222.0.0", 24,
                             [VppRoutePath(self.pg7.remote_ip4,
                                           vx_tun_r1.sw_if_index)],
                             table_id=t4.table_id)
         ip_222.add_vpp_config()
 
         l3o_222 = VppGbpSubnet(
-            self, rd1, "10.222.0.0", 24,
+            self.vclient, rd1, "10.222.0.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=4222)
         l3o_222.add_vpp_config()
@@ -5107,7 +4572,7 @@ class TestGBP(VppTestCase):
         # Add contracts ext-nets for 220 -> 222
         #
         c4 = VppGbpContract(
-            self, 55, 4220, 4222, acl.acl_index,
+            self.vclient, 55, 4220, 4222, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -5153,16 +4618,16 @@ class TestGBP(VppTestCase):
         # make the external subnet ECMP
         #
         vx_tun_r2 = VppVxlanGbpTunnel(
-            self, self.pg7.local_ip4,
+            self.vclient, self.pg7.local_ip4,
             self.pg7.remote_ip4, 446,
             mode=(VppEnum.vl_api_vxlan_gbp_api_tunnel_mode_t.
                   VXLAN_GBP_API_TUNNEL_MODE_L3))
         vx_tun_r2.add_vpp_config()
-        VppIpInterfaceBind(self, vx_tun_r2, t4).add_vpp_config()
+        VppIpInterfaceBind(self.vclient, vx_tun_r2, t4).add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh vxlan-gbp tunnel"))
+        self.logger.info(self.vclient.cli("sh vxlan-gbp tunnel"))
 
-        n2 = VppNeighbor(self,
+        n2 = VppNeighbor(self.vclient,
                          vx_tun_r2.sw_if_index,
                          "00:0c:0c:0c:0c:0c",
                          self.pg7.remote_ip4)
@@ -5195,18 +4660,18 @@ class TestGBP(VppTestCase):
         #
         # Same LB test for v6
         #
-        n3 = VppNeighbor(self,
+        n3 = VppNeighbor(self.vclient,
                          vx_tun_r1.sw_if_index,
                          "00:0c:0c:0c:0c:0c",
                          self.pg7.remote_ip6)
         n3.add_vpp_config()
-        n4 = VppNeighbor(self,
+        n4 = VppNeighbor(self.vclient,
                          vx_tun_r2.sw_if_index,
                          "00:0c:0c:0c:0c:0c",
                          self.pg7.remote_ip6)
         n4.add_vpp_config()
 
-        ip_222_6 = VppIpRoute(self, "10:222::", 64,
+        ip_222_6 = VppIpRoute(self.vclient, "10:222::", 64,
                               [VppRoutePath(self.pg7.remote_ip6,
                                             vx_tun_r1.sw_if_index),
                                VppRoutePath(self.pg7.remote_ip6,
@@ -5215,7 +4680,7 @@ class TestGBP(VppTestCase):
         ip_222_6.add_vpp_config()
 
         l3o_222_6 = VppGbpSubnet(
-            self, rd1, "10:222::", 64,
+            self.vclient, rd1, "10:222::", 64,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=4222)
         l3o_222_6.add_vpp_config()
@@ -5231,7 +4696,7 @@ class TestGBP(VppTestCase):
               UDP(sport=7777, dport=8881) /
               Raw(b'\xa5' * 100))]
 
-        self.logger.info(self.vapi.cli("sh ip6 fib 10:222::1"))
+        self.logger.info(self.vclient.cli("sh ip6 fib 10:222::1"))
         rxs = self.send_and_expect(self.pg0, p, self.pg7)
 
         self.assertEqual(rxs[0][VXLAN].vni, 445)
@@ -5251,7 +4716,7 @@ class TestGBP(VppTestCase):
              Raw(b'\xa5' * 100))
 
         rxs = self.send_and_expect(self.pg7, p * 3, self.pg0)
-        self.assertFalse(find_gbp_endpoint(self, ip="10.222.0.1"))
+        self.assertFalse(find_gbp_endpoint(self.vclient, ip="10.222.0.1"))
 
         #
         # ping from host in remote to remote external subnets
@@ -5282,7 +4747,7 @@ class TestGBP(VppTestCase):
         #
         # local EP
         #
-        lep1 = VppGbpEndpoint(self, vlan_144,
+        lep1 = VppGbpEndpoint(self.vclient, vlan_144,
                               epg_220, None,
                               "10.0.0.44", "11.0.0.44",
                               "2001:10::44", "3001::44")
@@ -5323,7 +4788,7 @@ class TestGBP(VppTestCase):
         #
         # ip4 and ip6 subnets that load-balance
         #
-        ip_20 = VppIpRoute(self, "10.20.0.0", 24,
+        ip_20 = VppIpRoute(self.vclient, "10.20.0.0", 24,
                            [VppRoutePath(eep1.ip4,
                                          eep1.epg.bvi.sw_if_index),
                             VppRoutePath(eep2.ip4,
@@ -5332,12 +4797,12 @@ class TestGBP(VppTestCase):
         ip_20.add_vpp_config()
 
         l3o_20 = VppGbpSubnet(
-            self, rd1, "10.20.0.0", 24,
+            self.vclient, rd1, "10.20.0.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=4220)
         l3o_20.add_vpp_config()
 
-        ip6_20 = VppIpRoute(self, "10:20::", 64,
+        ip6_20 = VppIpRoute(self.vclient, "10:20::", 64,
                             [VppRoutePath(eep1.ip6,
                                           eep1.epg.bvi.sw_if_index),
                              VppRoutePath(eep2.ip6,
@@ -5346,13 +4811,13 @@ class TestGBP(VppTestCase):
         ip6_20.add_vpp_config()
 
         l3o6_20 = VppGbpSubnet(
-            self, rd1, "10:20::", 64,
+            self.vclient, rd1, "10:20::", 64,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=4220)
         l3o6_20.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh ip fib 10.20.0.1"))
-        self.logger.info(self.vapi.cli("sh ip6 fib 10:20::1"))
+        self.logger.info(self.vclient.cli("sh ip fib 10.20.0.1"))
+        self.logger.info(self.vclient.cli("sh ip6 fib 10:20::1"))
 
         # two ip6 packets whose port are chosen so they load-balance
         p = [(Ether(src=lep1.mac, dst=str(self.router_mac)) /
@@ -5400,7 +4865,7 @@ class TestGBP(VppTestCase):
         """ GBP Anonymous L3 Out """
 
         ep_flags = VppEnum.vl_api_gbp_endpoint_flags_t
-        self.vapi.cli("set logging class gbp level debug")
+        self.vclient.cli("set logging class gbp level debug")
 
         routed_dst_mac = "00:0c:0c:0c:0c:0c"
         routed_src_mac = "00:22:bd:f8:19:ff"
@@ -5408,12 +4873,12 @@ class TestGBP(VppTestCase):
         #
         # IP tables
         #
-        t4 = VppIpTable(self, 1)
+        t4 = VppIpTable(self.vclient, 1)
         t4.add_vpp_config()
-        t6 = VppIpTable(self, 1, True)
+        t6 = VppIpTable(self.vclient, 1, True)
         t6.add_vpp_config()
 
-        rd1 = VppGbpRouteDomain(self, 2, 55, t4, t6)
+        rd1 = VppGbpRouteDomain(self.vclient, 2, 55, t4, t6)
         rd1.add_vpp_config()
 
         self.loop0.set_mac(self.router_mac)
@@ -5421,8 +4886,8 @@ class TestGBP(VppTestCase):
         #
         # Bind the BVI to the RD
         #
-        bind_l0_ip4 = VppIpInterfaceBind(self, self.loop0, t4).add_vpp_config()
-        bind_l0_ip6 = VppIpInterfaceBind(self, self.loop0, t6).add_vpp_config()
+        bind_l0_ip4 = VppIpInterfaceBind(self.vclient, self.loop0, t4).add_vpp_config()
+        bind_l0_ip6 = VppIpInterfaceBind(self.vclient, self.loop0, t6).add_vpp_config()
 
         #
         # Pg7 hosts a BD's BUM
@@ -5434,15 +4899,15 @@ class TestGBP(VppTestCase):
         #
         # a GBP external bridge domains for the EPs
         #
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
-        gbd1 = VppGbpBridgeDomain(self, bd1, rd1, self.loop0, None, None)
+        gbd1 = VppGbpBridgeDomain(self.vclient, bd1, rd1, self.loop0, None, None)
         gbd1.add_vpp_config()
 
         #
         # The Endpoint-groups in which the external endpoints exist
         #
-        epg_220 = VppGbpEndpointGroup(self, 220, 113, rd1, gbd1,
+        epg_220 = VppGbpEndpointGroup(self.vclient, 220, 113, rd1, gbd1,
                                       None, gbd1.bvi,
                                       "10.0.0.128",
                                       "2001:10::128",
@@ -5450,13 +4915,13 @@ class TestGBP(VppTestCase):
         epg_220.add_vpp_config()
 
         # the BVIs have the subnet applied ...
-        ip4_addr = VppIpInterfaceAddress(self, gbd1.bvi,
+        ip4_addr = VppIpInterfaceAddress(self.vclient, gbd1.bvi,
                                          "10.0.0.128", 24,
                                          bind=bind_l0_ip4).add_vpp_config()
 
         # ... which is an Anonymous L3-out subnets
         l3o_1 = VppGbpSubnet(
-            self, rd1, "10.0.0.0", 24,
+            self.vclient, rd1, "10.0.0.0", 24,
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_ANON_L3_OUT,
             sclass=113)
         l3o_1.add_vpp_config()
@@ -5465,22 +4930,22 @@ class TestGBP(VppTestCase):
         # an external interface attached to the outside world and the
         # external BD
         #
-        VppL2Vtr(self, self.vlan_100, L2_VTR_OP.L2_POP_1).add_vpp_config()
-        VppL2Vtr(self, self.vlan_101, L2_VTR_OP.L2_POP_1).add_vpp_config()
+        VppL2Vtr(self.vclient, self.vlan_100, L2_VTR_OP.L2_POP_1).add_vpp_config()
+        VppL2Vtr(self.vclient, self.vlan_101, L2_VTR_OP.L2_POP_1).add_vpp_config()
 
         #
         # vlan_100 and vlan_101 are anonymous l3-out interfaces
         #
-        ext_itf = VppGbpExtItf(self, self.vlan_100, bd1, rd1, anon=True)
+        ext_itf = VppGbpExtItf(self.vclient, self.vlan_100, bd1, rd1, anon=True)
         ext_itf.add_vpp_config()
-        ext_itf = VppGbpExtItf(self, self.vlan_101, bd1, rd1, anon=True)
+        ext_itf = VppGbpExtItf(self.vclient, self.vlan_101, bd1, rd1, anon=True)
         ext_itf.add_vpp_config()
 
         #
         # an unicast vxlan-gbp for inter-RD traffic
         #
         vx_tun_l3 = VppGbpVxlanTunnel(
-            self, 444, rd1.rd_id,
+            self.vclient, 444, rd1.rd_id,
             VppEnum.vl_api_gbp_vxlan_tunnel_mode_t.GBP_VXLAN_TUNNEL_MODE_L3,
             self.pg2.local_ip4)
         vx_tun_l3.add_vpp_config()
@@ -5488,7 +4953,7 @@ class TestGBP(VppTestCase):
         #
         # A remote external endpoint
         #
-        rep = VppGbpEndpoint(self, vx_tun_l3,
+        rep = VppGbpEndpoint(self.vclient, vx_tun_l3,
                              epg_220, None,
                              "10.0.0.201", "11.0.0.201",
                              "2001:10::201", "3001::101",
@@ -5571,14 +5036,14 @@ class TestGBP(VppTestCase):
         #
         # A subnet reachable through an external router on vlan 100
         #
-        ip_220 = VppIpRoute(self, "10.220.0.0", 24,
+        ip_220 = VppIpRoute(self.vclient, "10.220.0.0", 24,
                             [VppRoutePath("10.0.0.100",
                                           epg_220.bvi.sw_if_index)],
                             table_id=t4.table_id)
         ip_220.add_vpp_config()
 
         l3o_220 = VppGbpSubnet(
-            self, rd1, "10.220.0.0", 24,
+            self.vclient, rd1, "10.220.0.0", 24,
             # note: this a "regular" L3 out subnet (not connected)
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=4220)
@@ -5587,14 +5052,14 @@ class TestGBP(VppTestCase):
         #
         # A subnet reachable through an external router on vlan 101
         #
-        ip_221 = VppIpRoute(self, "10.221.0.0", 24,
+        ip_221 = VppIpRoute(self.vclient, "10.221.0.0", 24,
                             [VppRoutePath("10.0.0.101",
                                           epg_220.bvi.sw_if_index)],
                             table_id=t4.table_id)
         ip_221.add_vpp_config()
 
         l3o_221 = VppGbpSubnet(
-            self, rd1, "10.221.0.0", 24,
+            self.vclient, rd1, "10.221.0.0", 24,
             # note: this a "regular" L3 out subnet (not connected)
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=4221)
@@ -5617,11 +5082,11 @@ class TestGBP(VppTestCase):
         rule4 = AclRule(is_permit=1, proto=17)
         rule6 = AclRule(src_prefix=IPv6Network((0, 0)),
                         dst_prefix=IPv6Network((0, 0)), is_permit=1, proto=17)
-        acl = VppAcl(self, rules=[rule4, rule6])
+        acl = VppAcl(self.vclient, rules=[rule4, rule6])
         acl.add_vpp_config()
 
         c1 = VppGbpContract(
-            self, 55, 4220, 4221, acl.acl_index,
+            self.vclient, 55, 4220, 4221, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -5637,7 +5102,7 @@ class TestGBP(VppTestCase):
         # Contracts allowing ext-net 200 to talk with external EPs
         #
         c2 = VppGbpContract(
-            self, 55, 4220, 113, acl.acl_index,
+            self.vclient, 55, 4220, 113, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -5649,7 +5114,7 @@ class TestGBP(VppTestCase):
             [ETH_P_IP, ETH_P_IPV6])
         c2.add_vpp_config()
         c3 = VppGbpContract(
-            self, 55, 113, 4220, acl.acl_index,
+            self.vclient, 55, 113, 4220, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -5678,8 +5143,8 @@ class TestGBP(VppTestCase):
             self.assertEqual(rx[Dot1Q].vlan, 101)
 
         # we did not learn these external hosts
-        self.assertFalse(find_gbp_endpoint(self, ip="10.220.0.1"))
-        self.assertFalse(find_gbp_endpoint(self, ip="10.221.0.1"))
+        self.assertFalse(find_gbp_endpoint(self.vclient, ip="10.220.0.1"))
+        self.assertFalse(find_gbp_endpoint(self.vclient, ip="10.221.0.1"))
 
         #
         # from remote external EP to local external EP
@@ -5734,19 +5199,19 @@ class TestGBP(VppTestCase):
         # first the VXLAN-GBP tunnel over which it is reached
         #
         vx_tun_r = VppVxlanGbpTunnel(
-            self, self.pg7.local_ip4,
+            self.vclient, self.pg7.local_ip4,
             self.pg7.remote_ip4, 445,
             mode=(VppEnum.vl_api_vxlan_gbp_api_tunnel_mode_t.
                   VXLAN_GBP_API_TUNNEL_MODE_L3))
         vx_tun_r.add_vpp_config()
-        VppIpInterfaceBind(self, vx_tun_r, t4).add_vpp_config()
+        VppIpInterfaceBind(self.vclient, vx_tun_r, t4).add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh vxlan-gbp tunnel"))
+        self.logger.info(self.vclient.cli("sh vxlan-gbp tunnel"))
 
         #
         # then the special adj to resolve through on that tunnel
         #
-        n1 = VppNeighbor(self,
+        n1 = VppNeighbor(self.vclient,
                          vx_tun_r.sw_if_index,
                          "00:0c:0c:0c:0c:0c",
                          self.pg7.remote_ip4)
@@ -5755,14 +5220,14 @@ class TestGBP(VppTestCase):
         #
         # the route via the adj above
         #
-        ip_222 = VppIpRoute(self, "10.222.0.0", 24,
+        ip_222 = VppIpRoute(self.vclient, "10.222.0.0", 24,
                             [VppRoutePath(self.pg7.remote_ip4,
                                           vx_tun_r.sw_if_index)],
                             table_id=t4.table_id)
         ip_222.add_vpp_config()
 
         l3o_222 = VppGbpSubnet(
-            self, rd1, "10.222.0.0", 24,
+            self.vclient, rd1, "10.222.0.0", 24,
             # note: this a "regular" l3out subnet (not connected)
             VppEnum.vl_api_gbp_subnet_type_t.GBP_API_SUBNET_L3_OUT,
             sclass=4222)
@@ -5784,7 +5249,7 @@ class TestGBP(VppTestCase):
         # Add contracts ext-nets for 220 -> 222
         #
         c4 = VppGbpContract(
-            self, 55, 4220, 4222, acl.acl_index,
+            self.vclient, 55, 4220, 4222, acl.acl_index,
             [VppGbpContractRule(
                 VppEnum.vl_api_gbp_rule_action_t.GBP_API_RULE_PERMIT,
                 VppEnum.vl_api_gbp_hash_mode_t.GBP_API_HASH_MODE_SRC_IP,
@@ -5840,7 +5305,7 @@ class TestGBP(VppTestCase):
              Raw(b'\xa5' * 100))
 
         rxs = self.send_and_expect(self.pg7, p * 3, self.pg0)
-        self.assertFalse(find_gbp_endpoint(self, ip="10.222.0.1"))
+        self.assertFalse(find_gbp_endpoint(self.vclient, ip="10.222.0.1"))
 
         #
         # ping from host in remote to remote external subnets
diff --git a/src/plugins/geneve/test/test_geneve.py b/src/plugins/geneve/test/test_geneve.py
index 9ce1f8ff6..07ad8afef 100644
--- a/src/plugins/geneve/test/test_geneve.py
+++ b/src/plugins/geneve/test/test_geneve.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 
 import socket
-from util import ip4_range
+from vpp_pom.util import ip4_range
 import unittest
 from framework import VppTestCase, VppTestRunner
 from template_bd import BridgeDomain
@@ -10,9 +10,9 @@ from scapy.layers.l2 import Ether, ARP
 from scapy.layers.inet import IP, UDP, ICMP
 from scapy.contrib.geneve import GENEVE
 
-import util
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_ip import INVALID_INDEX
+import vpp_pom.util as util
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip import INVALID_INDEX
 
 
 class TestGeneve(BridgeDomain, VppTestCase):
@@ -92,15 +92,15 @@ class TestGeneve(BridgeDomain, VppTestCase):
         for dest_ip4 in ip4_range(next_hop_address, ip_range_start,
                                   ip_range_end):
             # add host route so dest_ip4 will not be resolved
-            rip = VppIpRoute(cls, dest_ip4, 32,
+            rip = VppIpRoute(cls.vclient, dest_ip4, 32,
                              [VppRoutePath(next_hop_address,
                                            INVALID_INDEX)],
                              register=False)
             rip.add_vpp_config()
-            r = cls.vapi.geneve_add_del_tunnel(
+            r = cls.vclient.geneve_add_del_tunnel(
                 local_address=cls.pg0.local_ip4, remote_address=dest_ip4,
                 vni=vni)
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=vni)
 
     @classmethod
@@ -113,7 +113,7 @@ class TestGeneve(BridgeDomain, VppTestCase):
         vni_start = 10000
         vni_end = vni_start + n_shared_dst_tunnels
         for vni in range(vni_start, vni_end):
-            r = cls.vapi.geneve_add_del_tunnel(
+            r = cls.vclient.geneve_add_del_tunnel(
                 local_address=cls.pg0.local_ip4,
                 remote_address=cls.mcast_ip4, mcast_sw_if_index=1,
                 is_add=is_add, vni=vni)
@@ -139,7 +139,7 @@ class TestGeneve(BridgeDomain, VppTestCase):
         for dest_ip4 in ip4_range(cls.mcast_ip4, ip_range_start,
                                   ip_range_end):
             vni = int(dest_ip4.split('.')[3])
-            cls.vapi.geneve_add_del_tunnel(local_address=cls.pg0.local_ip4,
+            cls.vclient.geneve_add_del_tunnel(local_address=cls.pg0.local_ip4,
                                            remote_address=dest_ip4,
                                            mcast_sw_if_index=1, is_add=is_add,
                                            vni=vni)
@@ -183,12 +183,12 @@ class TestGeneve(BridgeDomain, VppTestCase):
             #  into BD.
             cls.single_tunnel_vni = 0xabcde
             cls.single_tunnel_bd = 1
-            r = cls.vapi.geneve_add_del_tunnel(
+            r = cls.vclient.geneve_add_del_tunnel(
                 local_address=cls.pg0.local_ip4,
                 remote_address=cls.pg0.remote_ip4, vni=cls.single_tunnel_vni)
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=cls.single_tunnel_bd)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg1.sw_if_index, bd_id=cls.single_tunnel_bd)
 
             # Setup vni 2 to test multicast flooding
@@ -196,13 +196,13 @@ class TestGeneve(BridgeDomain, VppTestCase):
             cls.mcast_flood_bd = 2
             cls.create_geneve_flood_test_bd(cls.mcast_flood_bd,
                                             cls.n_ucast_tunnels)
-            r = cls.vapi.geneve_add_del_tunnel(
+            r = cls.vclient.geneve_add_del_tunnel(
                 local_address=cls.pg0.local_ip4,
                 remote_address=cls.mcast_ip4, mcast_sw_if_index=1,
                 vni=cls.mcast_flood_bd)
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=cls.mcast_flood_bd)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg2.sw_if_index, bd_id=cls.mcast_flood_bd)
 
             # Add and delete mcast tunnels to check stability
@@ -215,7 +215,7 @@ class TestGeneve(BridgeDomain, VppTestCase):
             cls.ucast_flood_bd = 3
             cls.create_geneve_flood_test_bd(cls.ucast_flood_bd,
                                             cls.n_ucast_tunnels)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg3.sw_if_index, bd_id=cls.ucast_flood_bd)
         except Exception:
             super(TestGeneve, cls).tearDownClass()
@@ -228,10 +228,10 @@ class TestGeneve(BridgeDomain, VppTestCase):
         super(TestGeneve, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show bridge-domain 1 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 2 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 3 detail"))
-        self.logger.info(self.vapi.cli("show geneve tunnel"))
+        self.logger.info(self.vclient.cli("show bridge-domain 1 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 2 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 3 detail"))
+        self.logger.info(self.vclient.cli("show geneve tunnel"))
 
 
 class TestGeneveL3(VppTestCase):
@@ -260,14 +260,14 @@ class TestGeneveL3(VppTestCase):
         super(TestGeneveL3, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show geneve tunnel"))
-        self.logger.info(self.vapi.cli("show ip neighbor"))
+        self.logger.info(self.vclient.cli("show geneve tunnel"))
+        self.logger.info(self.vclient.cli("show ip neighbor"))
 
     def test_l3_packet(self):
         vni = 1234
-        r = self.vapi.add_node_next(node_name="geneve4-input",
+        r = self.vclient.add_node_next(node_name="geneve4-input",
                                     next_name="ethernet-input")
-        r = self.vapi.geneve_add_del_tunnel2(
+        r = self.vclient.geneve_add_del_tunnel2(
             is_add=1,
             local_address=self.pg0.local_ip4,
             remote_address=self.pg0.remote_ip4,
@@ -275,7 +275,7 @@ class TestGeneveL3(VppTestCase):
             l3_mode=1,
             decap_next_index=r.next_index)
 
-        self.vapi.sw_interface_add_del_address(
+        self.vclient.sw_interface_add_del_address(
             sw_if_index=r.sw_if_index, prefix="10.0.0.1/24")
 
         pkt = (Ether(src=self.pg0.remote_mac, dst="d0:0b:ee:d0:00:00") /
@@ -297,7 +297,7 @@ class TestGeneveL3(VppTestCase):
         rx = self.send_and_expect(self.pg0, encap/pkt*1, self.pg0)
         self.assertEqual(rx[0][ICMP].type, 0)  # echo reply
 
-        r = self.vapi.geneve_add_del_tunnel2(
+        r = self.vclient.geneve_add_del_tunnel2(
             is_add=0,
             local_address=self.pg0.local_ip4,
             remote_address=self.pg0.remote_ip4,
diff --git a/src/plugins/gtpu/test/test_gtpu.py b/src/plugins/gtpu/test/test_gtpu.py
index f68c86fbc..81d726c22 100644
--- a/src/plugins/gtpu/test/test_gtpu.py
+++ b/src/plugins/gtpu/test/test_gtpu.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 
 import socket
-from util import ip4_range
+from vpp_pom.util import ip4_range
 import unittest
 from framework import VppTestCase, VppTestRunner
 from template_bd import BridgeDomain
@@ -13,9 +13,9 @@ from scapy.layers.inet6 import IPv6
 from scapy.contrib.gtp import GTP_U_Header
 from scapy.utils import atol
 
-import util
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_ip import INVALID_INDEX
+import vpp_pom.util as util
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip import INVALID_INDEX
 
 
 class TestGtpuUDP(VppTestCase):
@@ -44,7 +44,7 @@ class TestGtpuUDP(VppTestCase):
         self.pg0.add_stream(pkt)
         self.pg_start()
 
-        err = self.statistics.get_counter(
+        err = self.vclient.statistics.get_counter(
             '/err/ip4-udp-lookup/No listener for dst port')[0]
 
         if enabled:
@@ -63,7 +63,7 @@ class TestGtpuUDP(VppTestCase):
         self.pg0.add_stream(pkt)
         self.pg_start()
 
-        err = self.statistics.get_counter(
+        err = self.vclient.statistics.get_counter(
             '/err/ip6-udp-lookup/No listener for dst port')[0]
 
         if enabled:
@@ -81,7 +81,7 @@ class TestGtpuUDP(VppTestCase):
         self._check_udp_port_ip4(False)
         self._check_udp_port_ip6(False)
 
-        r = self.vapi.gtpu_add_del_tunnel(is_add=True,
+        r = self.vclient.gtpu_add_del_tunnel(is_add=True,
                                           mcast_sw_if_index=0xFFFFFFFF,
                                           decap_next_index=0xFFFFFFFF,
                                           src_address=self.pg0.local_ip4,
@@ -90,7 +90,7 @@ class TestGtpuUDP(VppTestCase):
         # UDP port 2152 enabled for ip4
         self._check_udp_port_ip4()
 
-        r = self.vapi.gtpu_add_del_tunnel(is_add=True,
+        r = self.vclient.gtpu_add_del_tunnel(is_add=True,
                                           mcast_sw_if_index=0xFFFFFFFF,
                                           decap_next_index=0xFFFFFFFF,
                                           src_address=self.pg0.local_ip6,
@@ -99,13 +99,13 @@ class TestGtpuUDP(VppTestCase):
         # UDP port 2152 enabled for ip6
         self._check_udp_port_ip6()
 
-        r = self.vapi.gtpu_add_del_tunnel(is_add=False,
+        r = self.vclient.gtpu_add_del_tunnel(is_add=False,
                                           mcast_sw_if_index=0xFFFFFFFF,
                                           decap_next_index=0xFFFFFFFF,
                                           src_address=self.pg0.local_ip4,
                                           dst_address=self.pg0.remote_ip4)
 
-        r = self.vapi.gtpu_add_del_tunnel(is_add=False,
+        r = self.vclient.gtpu_add_del_tunnel(is_add=False,
                                           mcast_sw_if_index=0xFFFFFFFF,
                                           decap_next_index=0xFFFFFFFF,
                                           src_address=self.pg0.local_ip6,
@@ -241,19 +241,19 @@ class TestGtpu(BridgeDomain, VppTestCase):
         for dest_ip4 in ip4_range(next_hop_address, ip_range_start,
                                   ip_range_end):
             # add host route so dest_ip4 will not be resolved
-            rip = VppIpRoute(cls, dest_ip4, 32,
+            rip = VppIpRoute(cls.vclient, dest_ip4, 32,
                              [VppRoutePath(next_hop_address,
                                            INVALID_INDEX)],
                              register=False)
             rip.add_vpp_config()
-            r = cls.vapi.gtpu_add_del_tunnel(
+            r = cls.vclient.gtpu_add_del_tunnel(
                 is_add=True,
                 mcast_sw_if_index=0xFFFFFFFF,
                 decap_next_index=0xFFFFFFFF,
                 src_address=cls.pg0.local_ip4,
                 dst_address=dest_ip4,
                 teid=teid)
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=teid)
 
     @classmethod
@@ -266,7 +266,7 @@ class TestGtpu(BridgeDomain, VppTestCase):
         teid_start = 1000
         teid_end = teid_start + n_shared_dst_tunnels
         for teid in range(teid_start, teid_end):
-            r = cls.vapi.gtpu_add_del_tunnel(
+            r = cls.vclient.gtpu_add_del_tunnel(
                 decap_next_index=0xFFFFFFFF,
                 src_address=cls.pg0.local_ip4,
                 dst_address=cls.mcast_ip4,
@@ -295,7 +295,7 @@ class TestGtpu(BridgeDomain, VppTestCase):
         for dest_ip4 in ip4_range(cls.mcast_ip4, ip_range_start,
                                   ip_range_end):
             teid = int(dest_ip4.split('.')[3])
-            cls.vapi.gtpu_add_del_tunnel(
+            cls.vclient.gtpu_add_del_tunnel(
                 decap_next_index=0xFFFFFFFF,
                 src_address=cls.pg0.local_ip4,
                 dst_address=dest_ip4,
@@ -343,16 +343,16 @@ class TestGtpu(BridgeDomain, VppTestCase):
             #  into BD.
             cls.single_tunnel_bd = 11
             cls.single_tunnel_vni = 11
-            r = cls.vapi.gtpu_add_del_tunnel(
+            r = cls.vclient.gtpu_add_del_tunnel(
                 is_add=True,
                 mcast_sw_if_index=0xFFFFFFFF,
                 decap_next_index=0xFFFFFFFF,
                 src_address=cls.pg0.local_ip4,
                 dst_address=cls.pg0.remote_ip4,
                 teid=cls.single_tunnel_vni)
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=cls.single_tunnel_bd)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg1.sw_if_index, bd_id=cls.single_tunnel_bd)
 
             # Setup teid 2 to test multicast flooding
@@ -360,16 +360,16 @@ class TestGtpu(BridgeDomain, VppTestCase):
             cls.mcast_flood_bd = 12
             cls.create_gtpu_flood_test_bd(cls.mcast_flood_bd,
                                           cls.n_ucast_tunnels)
-            r = cls.vapi.gtpu_add_del_tunnel(
+            r = cls.vclient.gtpu_add_del_tunnel(
                 is_add=True,
                 src_address=cls.pg0.local_ip4,
                 dst_address=cls.mcast_ip4,
                 mcast_sw_if_index=1,
                 decap_next_index=0xFFFFFFFF,
                 teid=cls.mcast_flood_bd)
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=cls.mcast_flood_bd)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg2.sw_if_index, bd_id=cls.mcast_flood_bd)
 
             # Add and delete mcast tunnels to check stability
@@ -382,7 +382,7 @@ class TestGtpu(BridgeDomain, VppTestCase):
             cls.ucast_flood_bd = 13
             cls.create_gtpu_flood_test_bd(cls.ucast_flood_bd,
                                           cls.n_ucast_tunnels)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg3.sw_if_index, bd_id=cls.ucast_flood_bd)
         except Exception:
             super(TestGtpu, cls).tearDownClass()
@@ -399,12 +399,12 @@ class TestGtpu(BridgeDomain, VppTestCase):
         super(TestGtpu, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show bridge-domain 11 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 12 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 13 detail"))
-        self.logger.info(self.vapi.cli("show int"))
-        self.logger.info(self.vapi.cli("show gtpu tunnel"))
-        self.logger.info(self.vapi.cli("show trace"))
+        self.logger.info(self.vclient.cli("show bridge-domain 11 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 12 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 13 detail"))
+        self.logger.info(self.vclient.cli("show int"))
+        self.logger.info(self.vclient.cli("show gtpu tunnel"))
+        self.logger.info(self.vclient.cli("show trace"))
 
 
 if __name__ == '__main__':
diff --git a/src/plugins/igmp/test/test_igmp.py b/src/plugins/igmp/test/test_igmp.py
index 01f59bae0..a9ec03233 100644
--- a/src/plugins/igmp/test/test_igmp.py
+++ b/src/plugins/igmp/test/test_igmp.py
@@ -8,9 +8,9 @@ from scapy.layers.inet import IP, IPOption
 from scapy.contrib.igmpv3 import IGMPv3, IGMPv3gr, IGMPv3mq, IGMPv3mr
 
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from vpp_igmp import find_igmp_state, IGMP_FILTER, IgmpRecord, IGMP_MODE, \
+from vpp_pom.plugins.vpp_igmp import find_igmp_state, IGMP_FILTER, IgmpRecord, IGMP_MODE, \
     IgmpSG, VppHostState, wait_for_igmp_event
-from vpp_ip_route import find_mroute, VppIpTable
+from vpp_pom.vpp_ip_route import find_mroute, VppIpTable
 
 
 class IgmpMode:
@@ -37,7 +37,7 @@ class TestIgmp(VppTestCase):
         self.config_list = []
 
         self.ip_addr = []
-        self.ip_table = VppIpTable(self, 1)
+        self.ip_table = VppIpTable(self.vclient, 1)
         self.ip_table.add_vpp_config()
 
         for pg in self.pg_interfaces[2:]:
@@ -49,7 +49,7 @@ class TestIgmp(VppTestCase):
 
     def tearDown(self):
         for pg in self.pg_interfaces:
-            self.vapi.igmp_clear_interface(pg.sw_if_index)
+            self.vclient.igmp_clear_interface(pg.sw_if_index)
             pg.unconfig_ip4()
             pg.set_table_ip4(0)
             pg.admin_down()
@@ -72,29 +72,29 @@ class TestIgmp(VppTestCase):
 
         check for the addition/removal of the IGMP mroutes """
 
-        self.vapi.igmp_enable_disable(self.pg0.sw_if_index, 1, IGMP_MODE.HOST)
-        self.vapi.igmp_enable_disable(self.pg1.sw_if_index, 1, IGMP_MODE.HOST)
+        self.vclient.igmp_enable_disable(self.pg0.sw_if_index, 1, IGMP_MODE.HOST)
+        self.vclient.igmp_enable_disable(self.pg1.sw_if_index, 1, IGMP_MODE.HOST)
 
-        self.assertTrue(find_mroute(self, "224.0.0.1", "0.0.0.0", 32))
-        self.assertTrue(find_mroute(self, "224.0.0.22", "0.0.0.0", 32))
+        self.assertTrue(find_mroute(self.vclient, "224.0.0.1", "0.0.0.0", 32))
+        self.assertTrue(find_mroute(self.vclient, "224.0.0.22", "0.0.0.0", 32))
 
-        self.vapi.igmp_enable_disable(self.pg2.sw_if_index, 1, IGMP_MODE.HOST)
-        self.vapi.igmp_enable_disable(self.pg3.sw_if_index, 1, IGMP_MODE.HOST)
+        self.vclient.igmp_enable_disable(self.pg2.sw_if_index, 1, IGMP_MODE.HOST)
+        self.vclient.igmp_enable_disable(self.pg3.sw_if_index, 1, IGMP_MODE.HOST)
 
-        self.assertTrue(find_mroute(self, "224.0.0.1", "0.0.0.0", 32,
+        self.assertTrue(find_mroute(self.vclient, "224.0.0.1", "0.0.0.0", 32,
                                     table_id=1))
-        self.assertTrue(find_mroute(self, "224.0.0.22", "0.0.0.0", 32,
+        self.assertTrue(find_mroute(self.vclient, "224.0.0.22", "0.0.0.0", 32,
                                     table_id=1))
-        self.vapi.igmp_enable_disable(self.pg0.sw_if_index, 0, IGMP_MODE.HOST)
-        self.vapi.igmp_enable_disable(self.pg1.sw_if_index, 0, IGMP_MODE.HOST)
-        self.vapi.igmp_enable_disable(self.pg2.sw_if_index, 0, IGMP_MODE.HOST)
-        self.vapi.igmp_enable_disable(self.pg3.sw_if_index, 0, IGMP_MODE.HOST)
-
-        self.assertTrue(find_mroute(self, "224.0.0.1", "0.0.0.0", 32))
-        self.assertFalse(find_mroute(self, "224.0.0.22", "0.0.0.0", 32))
-        self.assertTrue(find_mroute(self, "224.0.0.1", "0.0.0.0", 32,
+        self.vclient.igmp_enable_disable(self.pg0.sw_if_index, 0, IGMP_MODE.HOST)
+        self.vclient.igmp_enable_disable(self.pg1.sw_if_index, 0, IGMP_MODE.HOST)
+        self.vclient.igmp_enable_disable(self.pg2.sw_if_index, 0, IGMP_MODE.HOST)
+        self.vclient.igmp_enable_disable(self.pg3.sw_if_index, 0, IGMP_MODE.HOST)
+
+        self.assertTrue(find_mroute(self.vclient, "224.0.0.1", "0.0.0.0", 32))
+        self.assertFalse(find_mroute(self.vclient, "224.0.0.22", "0.0.0.0", 32))
+        self.assertTrue(find_mroute(self.vclient, "224.0.0.1", "0.0.0.0", 32,
                                     table_id=1))
-        self.assertFalse(find_mroute(self, "224.0.0.22", "0.0.0.0", 32,
+        self.assertFalse(find_mroute(self.vclient, "224.0.0.22", "0.0.0.0", 32,
                                      table_id=1))
 
     def verify_general_query(self, p):
@@ -145,7 +145,7 @@ class TestIgmp(VppTestCase):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        hs = VppHostState(self,
+        hs = VppHostState(self.vclient,
                           IGMP_FILTER.INCLUDE,
                           itf.sw_if_index,
                           sg)
@@ -177,7 +177,7 @@ class TestIgmp(VppTestCase):
         #
         # Enable interface for host functions
         #
-        self.vapi.igmp_enable_disable(self.pg0.sw_if_index,
+        self.vclient.igmp_enable_disable(self.pg0.sw_if_index,
                                       1,
                                       IGMP_MODE.HOST)
 
@@ -188,7 +188,7 @@ class TestIgmp(VppTestCase):
         h1 = self.add_group(self.pg0, IgmpSG("239.1.1.1", ["1.1.1.1"]))
 
         # search for the corresponding state created in VPP
-        dump = self.vapi.igmp_dump(self.pg0.sw_if_index)
+        dump = self.vclient.igmp_dump(self.pg0.sw_if_index)
         self.assertEqual(len(dump), 1)
         self.assertTrue(find_igmp_state(dump, self.pg0,
                                         "239.1.1.1", "1.1.1.1"))
@@ -308,7 +308,7 @@ class TestIgmp(VppTestCase):
         #
         self.remove_group(h1)
 
-        dump = self.vapi.igmp_dump()
+        dump = self.vclient.igmp_dump()
         self.assertFalse(dump)
 
         #
@@ -319,7 +319,7 @@ class TestIgmp(VppTestCase):
                                    ["1.1.1.1", "1.1.1.2", "1.1.1.3"]))
 
         # search for the corresponding state created in VPP
-        dump = self.vapi.igmp_dump(self.pg0.sw_if_index)
+        dump = self.vclient.igmp_dump(self.pg0.sw_if_index)
         self.assertEqual(len(dump), 3)
         for s in h2.sg.saddrs:
             self.assertTrue(find_igmp_state(dump, self.pg0,
@@ -427,7 +427,7 @@ class TestIgmp(VppTestCase):
         # consumes the link MTU. We should therefore see multiple state
         # state reports when queried.
         #
-        self.vapi.sw_interface_set_mtu(self.pg0.sw_if_index, [560, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg0.sw_if_index, [560, 0, 0, 0])
 
         src_list = []
         for i in range(128):
@@ -458,12 +458,12 @@ class TestIgmp(VppTestCase):
         #
         # drop the MTU further (so a 128 sized group won't fit)
         #
-        self.vapi.sw_interface_set_mtu(self.pg0.sw_if_index, [512, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg0.sw_if_index, [512, 0, 0, 0])
 
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        h10 = VppHostState(self,
+        h10 = VppHostState(self.vclient,
                            IGMP_FILTER.INCLUDE,
                            self.pg0.sw_if_index,
                            IgmpSG("238.1.1.3", src_list))
@@ -477,7 +477,7 @@ class TestIgmp(VppTestCase):
         # remove state, expect the report for the removal
         # the dump should be empty
         #
-        self.vapi.sw_interface_set_mtu(self.pg0.sw_if_index, [600, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg0.sw_if_index, [600, 0, 0, 0])
         self.remove_group(h8)
         self.remove_group(h9)
         self.remove_group(h2)
@@ -488,15 +488,15 @@ class TestIgmp(VppTestCase):
         self.remove_group(h7)
         self.remove_group(h10)
 
-        self.logger.info(self.vapi.cli("sh igmp config"))
-        self.assertFalse(self.vapi.igmp_dump())
+        self.logger.info(self.vclient.cli("sh igmp config"))
+        self.assertFalse(self.vclient.igmp_dump())
 
         #
         # TODO
         #  ADD STATE ON MORE INTERFACES
         #
 
-        self.vapi.igmp_enable_disable(self.pg0.sw_if_index,
+        self.vclient.igmp_enable_disable(self.pg0.sw_if_index,
                                       0,
                                       IGMP_MODE.HOST)
 
@@ -524,28 +524,28 @@ class TestIgmp(VppTestCase):
                         maddr="239.1.1.1", srcaddrs=["10.1.1.1", "10.1.1.2"]))
 
         self.send(self.pg0, p_j)
-        self.assertFalse(self.vapi.igmp_dump())
+        self.assertFalse(self.vclient.igmp_dump())
 
         #
         # drop the default timer values so these tests execute in a
         # reasonable time frame
         #
-        self.vapi.cli("test igmp timers query 1 src 3 leave 1")
+        self.vclient.cli("test igmp timers query 1 src 3 leave 1")
 
         #
         # enable router functions on the interface
         #
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
-        self.vapi.igmp_enable_disable(self.pg0.sw_if_index,
+        self.vclient.igmp_enable_disable(self.pg0.sw_if_index,
                                       1,
                                       IGMP_MODE.ROUTER)
-        self.vapi.want_igmp_events(1)
+        self.vclient.want_igmp_events(1)
 
         #
         # wait for router to send general query
         #
-        for ii in range(3):
+        for _ in range(3):
             capture = self.pg0.get_capture(1, timeout=2)
             self.verify_general_query(capture[0])
             self.pg_enable_capture(self.pg_interfaces)
@@ -557,11 +557,11 @@ class TestIgmp(VppTestCase):
         #
         self.send(self.pg0, p_j)
 
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.1", "10.1.1.1", 1))
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.1", "10.1.1.2", 1))
-        dump = self.vapi.igmp_dump(self.pg0.sw_if_index)
+        dump = self.vclient.igmp_dump(self.pg0.sw_if_index)
         self.assertEqual(len(dump), 2)
         self.assertTrue(find_igmp_state(dump, self.pg0,
                                         "239.1.1.1", "10.1.1.1"))
@@ -573,11 +573,11 @@ class TestIgmp(VppTestCase):
         # the state should be reaped
         # VPP sends a notification that the group has been left
         #
-        self.assertTrue(wait_for_igmp_event(self, 4, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 4, self.pg0,
                                             "239.1.1.1", "10.1.1.1", 0))
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.1", "10.1.1.2", 0))
-        self.assertFalse(self.vapi.igmp_dump())
+        self.assertFalse(self.vclient.igmp_dump())
 
         #
         # resend the join. wait for two queries and then send a current-state
@@ -587,11 +587,11 @@ class TestIgmp(VppTestCase):
         # expired in 3 seconds.
         #
         self.send(self.pg0, p_j)
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.1", "10.1.1.1", 1))
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.1", "10.1.1.2", 1))
-        dump = self.vapi.igmp_dump(self.pg0.sw_if_index)
+        dump = self.vclient.igmp_dump(self.pg0.sw_if_index)
         self.assertEqual(len(dump), 2)
 
         capture = self.pg0.get_capture(2, timeout=3)
@@ -610,7 +610,7 @@ class TestIgmp(VppTestCase):
         self.send(self.pg0, p_cs)
 
         self.sleep(2)
-        dump = self.vapi.igmp_dump(self.pg0.sw_if_index)
+        dump = self.vclient.igmp_dump(self.pg0.sw_if_index)
         self.assertEqual(len(dump), 2)
         self.assertTrue(find_igmp_state(dump, self.pg0,
                                         "239.1.1.1", "10.1.1.1"))
@@ -621,11 +621,11 @@ class TestIgmp(VppTestCase):
         # wait for the per-source timer to expire
         # the state should be reaped
         #
-        self.assertTrue(wait_for_igmp_event(self, 4, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 4, self.pg0,
                                             "239.1.1.1", "10.1.1.1", 0))
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.1", "10.1.1.2", 0))
-        self.assertFalse(self.vapi.igmp_dump())
+        self.assertFalse(self.vclient.igmp_dump())
 
         #
         # resend the join, then a leave. Router sends a group+source
@@ -633,11 +633,11 @@ class TestIgmp(VppTestCase):
         #
         self.send(self.pg0, p_j)
 
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.1", "10.1.1.1", 1))
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.1", "10.1.1.2", 1))
-        dump = self.vapi.igmp_dump(self.pg0.sw_if_index)
+        dump = self.vclient.igmp_dump(self.pg0.sw_if_index)
         self.assertEqual(len(dump), 2)
 
         self.send(self.pg0, p_l)
@@ -648,12 +648,12 @@ class TestIgmp(VppTestCase):
         #
         # the group specific query drops the timeout to leave (=1) seconds
         #
-        self.assertTrue(wait_for_igmp_event(self, 2, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 2, self.pg0,
                                             "239.1.1.1", "10.1.1.1", 0))
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.1", "10.1.1.2", 0))
-        self.assertFalse(self.vapi.igmp_dump())
-        self.assertFalse(self.vapi.igmp_dump())
+        self.assertFalse(self.vclient.igmp_dump())
+        self.assertFalse(self.vclient.igmp_dump())
 
         #
         # a TO_EX({}) / IN_EX({}) is treated like a (*,G) join
@@ -668,7 +668,7 @@ class TestIgmp(VppTestCase):
 
         self.send(self.pg0, p_j)
 
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.2", "0.0.0.0", 1))
 
         p_j = (Ether(dst=self.pg0.local_mac, src=self.pg0.remote_mac) /
@@ -681,7 +681,7 @@ class TestIgmp(VppTestCase):
 
         self.send(self.pg0, p_j)
 
-        self.assertTrue(wait_for_igmp_event(self, 1, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 1, self.pg0,
                                             "239.1.1.3", "0.0.0.0", 1))
 
         #
@@ -698,7 +698,7 @@ class TestIgmp(VppTestCase):
 
         self.send(self.pg0, p_j)
 
-        dump = self.vapi.igmp_dump(self.pg0.sw_if_index)
+        dump = self.vclient.igmp_dump(self.pg0.sw_if_index)
         self.assertTrue(find_igmp_state(dump, self.pg0,
                                         "239.1.1.2", "0.0.0.0"))
         self.assertTrue(find_igmp_state(dump, self.pg0,
@@ -709,7 +709,7 @@ class TestIgmp(VppTestCase):
         #
         # a TO_IN({}) and IS_IN({}) are treated like a (*,G) leave
         #
-        self.vapi.cli("set logging class igmp level debug")
+        self.vclient.cli("set logging class igmp level debug")
         p_l = (Ether(dst=self.pg0.local_mac, src=self.pg0.remote_mac) /
                IP(src=self.pg0.remote_ip4, dst="224.0.0.22", tos=0xc0, ttl=1,
                   options=[IPOption(copy_flag=1, optclass="control",
@@ -719,7 +719,7 @@ class TestIgmp(VppTestCase):
                IGMPv3gr(rtype="Change To Include Mode", maddr="239.1.1.2"))
 
         self.send(self.pg0, p_l)
-        self.assertTrue(wait_for_igmp_event(self, 2, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 2, self.pg0,
                                             "239.1.1.2", "0.0.0.0", 0))
 
         p_l = (Ether(dst=self.pg0.local_mac, src=self.pg0.remote_mac) /
@@ -732,14 +732,14 @@ class TestIgmp(VppTestCase):
 
         self.send(self.pg0, p_l)
 
-        self.assertTrue(wait_for_igmp_event(self, 2, self.pg0,
+        self.assertTrue(wait_for_igmp_event(self.vclient, 2, self.pg0,
                                             "239.1.1.3", "0.0.0.0", 0))
-        self.assertFalse(self.vapi.igmp_dump(self.pg0.sw_if_index))
+        self.assertFalse(self.vclient.igmp_dump(self.pg0.sw_if_index))
 
         #
         # disable router config
         #
-        self.vapi.igmp_enable_disable(self.pg0.sw_if_index,
+        self.vclient.igmp_enable_disable(self.pg0.sw_if_index,
                                       0,
                                       IGMP_MODE.ROUTER)
 
@@ -762,20 +762,20 @@ class TestIgmp(VppTestCase):
         self.pg2.config_ip4()
         self.pg2.admin_up()
 
-        self.vapi.cli('test igmp timers query 10 src 3 leave 1')
+        self.vclient.cli('test igmp timers query 10 src 3 leave 1')
 
         # enable IGMP
-        self.vapi.igmp_enable_disable(self.pg0.sw_if_index, 1, IGMP_MODE.HOST)
-        self.vapi.igmp_enable_disable(self.pg1.sw_if_index, 1,
+        self.vclient.igmp_enable_disable(self.pg0.sw_if_index, 1, IGMP_MODE.HOST)
+        self.vclient.igmp_enable_disable(self.pg1.sw_if_index, 1,
                                       IGMP_MODE.ROUTER)
-        self.vapi.igmp_enable_disable(self.pg2.sw_if_index, 1,
+        self.vclient.igmp_enable_disable(self.pg2.sw_if_index, 1,
                                       IGMP_MODE.ROUTER)
 
         # create IGMP proxy device
-        self.vapi.igmp_proxy_device_add_del(0, self.pg0.sw_if_index, 1)
-        self.vapi.igmp_proxy_device_add_del_interface(0,
+        self.vclient.igmp_proxy_device_add_del(0, self.pg0.sw_if_index, 1)
+        self.vclient.igmp_proxy_device_add_del_interface(0,
                                                       self.pg1.sw_if_index, 1)
-        self.vapi.igmp_proxy_device_add_del_interface(0,
+        self.vclient.igmp_proxy_device_add_del_interface(0,
                                                       self.pg2.sw_if_index, 1)
 
         # send join on pg1. join should be proxied by pg0
@@ -786,7 +786,7 @@ class TestIgmp(VppTestCase):
         capture = self.pg0.get_capture(1, timeout=1)
         self.verify_report(capture[0], [IgmpRecord(IgmpSG("239.1.1.1",
                            ["10.1.1.1", "10.1.1.2"]), "Allow New Sources")])
-        self.assertTrue(find_mroute(self, "239.1.1.1", "0.0.0.0", 32))
+        self.assertTrue(find_mroute(self.vclient, "239.1.1.1", "0.0.0.0", 32))
 
         # send join on pg2. join should be proxied by pg0.
         # the group should contain only 10.1.1.3 as
@@ -798,7 +798,7 @@ class TestIgmp(VppTestCase):
         capture = self.pg0.get_capture(1, timeout=1)
         self.verify_report(capture[0], [IgmpRecord(IgmpSG("239.1.1.1",
                            ["10.1.1.3"]), "Allow New Sources")])
-        self.assertTrue(find_mroute(self, "239.1.1.1", "0.0.0.0", 32))
+        self.assertTrue(find_mroute(self.vclient, "239.1.1.1", "0.0.0.0", 32))
 
         # send leave on pg2. leave for 10.1.1.3 should be proxyed
         # as pg2 was the only interface interested in 10.1.1.3
@@ -809,26 +809,26 @@ class TestIgmp(VppTestCase):
         capture = self.pg0.get_capture(1, timeout=2)
         self.verify_report(capture[0], [IgmpRecord(IgmpSG("239.1.1.1",
                            ["10.1.1.3"]), "Block Old Sources")])
-        self.assertTrue(find_mroute(self, "239.1.1.1", "0.0.0.0", 32))
+        self.assertTrue(find_mroute(self.vclient, "239.1.1.1", "0.0.0.0", 32))
 
         # disable igmp on pg1 (also removes interface from proxy device)
         # proxy leave for 10.1.1.2. pg2 is still interested in 10.1.1.1
         self.pg_enable_capture(self.pg_interfaces)
-        self.vapi.igmp_enable_disable(self.pg1.sw_if_index, 0,
+        self.vclient.igmp_enable_disable(self.pg1.sw_if_index, 0,
                                       IGMP_MODE.ROUTER)
 
         capture = self.pg0.get_capture(1, timeout=1)
         self.verify_report(capture[0], [IgmpRecord(IgmpSG("239.1.1.1",
                            ["10.1.1.2"]), "Block Old Sources")])
-        self.assertTrue(find_mroute(self, "239.1.1.1", "0.0.0.0", 32))
+        self.assertTrue(find_mroute(self.vclient, "239.1.1.1", "0.0.0.0", 32))
 
         # disable IGMP on pg0 and pg1.
         #   disabling IGMP on pg0 (proxy device upstream interface)
         #   removes this proxy device
-        self.vapi.igmp_enable_disable(self.pg0.sw_if_index, 0, IGMP_MODE.HOST)
-        self.vapi.igmp_enable_disable(self.pg2.sw_if_index, 0,
+        self.vclient.igmp_enable_disable(self.pg0.sw_if_index, 0, IGMP_MODE.HOST)
+        self.vclient.igmp_enable_disable(self.pg2.sw_if_index, 0,
                                       IGMP_MODE.ROUTER)
-        self.assertFalse(find_mroute(self, "239.1.1.1", "0.0.0.0", 32))
+        self.assertFalse(find_mroute(self.vclient, "239.1.1.1", "0.0.0.0", 32))
 
 
 if __name__ == '__main__':
diff --git a/src/plugins/ikev2/test/test_ikev2.py b/src/plugins/ikev2/test/test_ikev2.py
index 453a47e04..55af9f272 100644
--- a/src/plugins/ikev2/test/test_ikev2.py
+++ b/src/plugins/ikev2/test/test_ikev2.py
@@ -18,7 +18,7 @@ from scapy.layers.inet6 import IPv6
 from scapy.packet import raw, Raw
 from scapy.utils import long_converter
 from framework import VppTestCase, VppTestRunner
-from vpp_ikev2 import Profile, IDType, AuthMethod
+from vpp_pom.plugins.vpp_ikev2 import Profile, IDType, AuthMethod
 from vpp_papi import VppEnum
 
 try:
@@ -569,9 +569,9 @@ class IkePeer(VppTestCase):
             self.initiate_del_sa_from_responder()
         else:
             self.initiate_del_sa_from_initiator()
-        r = self.vapi.ikev2_sa_dump()
+        r = self.vclient.ikev2_sa_dump()
         self.assertEqual(len(r), 0)
-        sas = self.vapi.ipsec_sa_dump()
+        sas = self.vclient.ipsec_sa_dump()
         self.assertEqual(len(sas), 0)
         self.p.remove_vpp_config()
         self.assertIsNone(self.p.query_vpp_config())
@@ -583,8 +583,8 @@ class IkePeer(VppTestCase):
         self.assertIsNotNone(self.p.query_vpp_config())
         if self.sa.is_initiator:
             self.sa.generate_dh_data()
-        self.vapi.cli('ikev2 set logging level 4')
-        self.vapi.cli('event-lo clear')
+        self.vclient.cli('ikev2 set logging level 4')
+        self.vclient.cli('event-lo clear')
 
     def create_packet(self, src_if, msg, sport=500, dport=500, natt=False,
                       use_ip6=False):
@@ -672,7 +672,7 @@ class IkePeer(VppTestCase):
             self.assertNotIn(e.IPSEC_API_SAD_FLAG_UDP_ENCAP, ipsec_sa.flags)
 
     def verify_ipsec_sas(self, is_rekey=False):
-        sas = self.vapi.ipsec_sa_dump()
+        sas = self.vclient.ipsec_sa_dump()
         if is_rekey:
             # after rekey there is a short period of time in which old
             # inbound SA is still present
@@ -739,7 +739,7 @@ class IkePeer(VppTestCase):
         self.assertEqual(bytes(api_id.data, 'ascii'), exp_id.type)
 
     def verify_ike_sas(self):
-        r = self.vapi.ikev2_sa_dump()
+        r = self.vclient.ikev2_sa_dump()
         self.assertEqual(len(r), 1)
         sa = r[0].sa
         self.assertEqual(self.sa.ispi, (sa.ispi).to_bytes(8, 'big'))
@@ -773,7 +773,7 @@ class IkePeer(VppTestCase):
         self.assertEqual(bytes(sa.i_id.data, 'ascii'), self.sa.i_id)
         self.assertEqual(bytes(sa.r_id.data, 'ascii'), self.sa.r_id)
 
-        r = self.vapi.ikev2_child_sa_dump(sa_index=sa.sa_index)
+        r = self.vclient.ikev2_child_sa_dump(sa_index=sa.sa_index)
         self.assertEqual(len(r), 1)
         csa = r[0].child_sa
         self.assertEqual(csa.sa_index, sa.sa_index)
@@ -789,23 +789,23 @@ class IkePeer(VppTestCase):
         tsi, tsr = self.sa.generate_ts(self.p.ts_is_ip4)
         tsi = tsi[0]
         tsr = tsr[0]
-        r = self.vapi.ikev2_traffic_selector_dump(
+        r = self.vclient.ikev2_traffic_selector_dump(
                 is_initiator=True, sa_index=sa.sa_index,
                 child_sa_index=csa.child_sa_index)
         self.assertEqual(len(r), 1)
         ts = r[0].ts
         self.verify_ts(r[0].ts, tsi[0], True)
 
-        r = self.vapi.ikev2_traffic_selector_dump(
+        r = self.vclient.ikev2_traffic_selector_dump(
                 is_initiator=False, sa_index=sa.sa_index,
                 child_sa_index=csa.child_sa_index)
         self.assertEqual(len(r), 1)
         self.verify_ts(r[0].ts, tsr[0], False)
 
-        n = self.vapi.ikev2_nonce_get(is_initiator=True,
+        n = self.vclient.ikev2_nonce_get(is_initiator=True,
                                       sa_index=sa.sa_index)
         self.verify_nonce(n, self.sa.i_nonce)
-        n = self.vapi.ikev2_nonce_get(is_initiator=False,
+        n = self.vclient.ikev2_nonce_get(is_initiator=False,
                                       sa_index=sa.sa_index)
         self.verify_nonce(n, self.sa.r_nonce)
 
@@ -841,7 +841,7 @@ class TemplateInitiator(IkePeer):
         ispi = int.from_bytes(self.sa.ispi, 'little')
         self.pg0.enable_capture()
         self.pg_start()
-        self.vapi.ikev2_initiate_del_ike_sa(ispi=ispi)
+        self.vclient.ikev2_initiate_del_ike_sa(ispi=ispi)
         capture = self.pg0.get_capture(1)
         ih = self.get_ike_header(capture[0])
         self.assertNotIn('Response', ih.flags)
@@ -1007,7 +1007,7 @@ class TemplateInitiator(IkePeer):
     def initiate_sa_init(self):
         self.pg0.enable_capture()
         self.pg_start()
-        self.vapi.ikev2_initiate_sa_init(name=self.p.profile_name)
+        self.vclient.ikev2_initiate_sa_init(name=self.p.profile_name)
 
         capture = self.pg0.get_capture(1)
         self.verify_sa_init_request(capture[0])
@@ -1072,7 +1072,7 @@ class TemplateResponder(IkePeer):
     def initiate_del_sa_from_responder(self):
         self.pg0.enable_capture()
         self.pg_start()
-        self.vapi.ikev2_initiate_del_ike_sa(
+        self.vclient.ikev2_initiate_del_ike_sa(
                 ispi=int.from_bytes(self.sa.ispi, 'little'))
         capture = self.pg0.get_capture(1)
         ih = self.get_ike_header(capture[0])
@@ -1196,6 +1196,7 @@ class TemplateResponder(IkePeer):
                  ikev2.IKEv2_payload_SA(next_payload='TSi', prop=props) /
                  ikev2.IKEv2_payload_TSi(next_payload='TSr',
                  number_of_TSs=len(tsi), traffic_selector=tsi) /
+                 
                  ikev2.IKEv2_payload_TSr(next_payload=last_payload,
                  number_of_TSs=len(tsr), traffic_selector=tsr))
 
@@ -1292,17 +1293,17 @@ class Ikev2Params(object):
         dpd_disabled = True if 'dpd_disabled' not in params else\
             params['dpd_disabled']
         if dpd_disabled:
-            self.vapi.cli('ikev2 dpd disable')
+            self.vclient.cli('ikev2 dpd disable')
         self.del_sa_from_responder = False if 'del_sa_from_responder'\
             not in params else params['del_sa_from_responder']
         is_natt = 'natt' in params and params['natt'] or False
-        self.p = Profile(self, 'pr1')
+        self.p = Profile(self.vclient, 'pr1')
         self.ip6 = False if 'ip6' not in params else params['ip6']
 
         if 'auth' in params and params['auth'] == 'rsa-sig':
             auth_method = 'rsa-sig'
             work_dir = os.getenv('BR') + '/../src/plugins/ikev2/test/certs/'
-            self.vapi.ikev2_set_local_key(
+            self.vclient.ikev2_set_local_key(
                     key_file=work_dir + params['server-key'])
 
             client_file = work_dir + params['client-cert']
@@ -1392,11 +1393,11 @@ class TestApi(VppTestCase):
         super(TestApi, self).tearDown()
         self.p1.remove_vpp_config()
         self.p2.remove_vpp_config()
-        r = self.vapi.ikev2_profile_dump()
+        r = self.vclient.ikev2_profile_dump()
         self.assertEqual(len(r), 0)
 
     def configure_profile(self, cfg):
-        p = Profile(self, cfg['name'])
+        p = Profile(self.vclient, cfg['name'])
         p.add_local_id(id_type=cfg['loc_id'][0], data=cfg['loc_id'][1])
         p.add_remote_id(id_type=cfg['rem_id'][0], data=cfg['rem_id'][1])
         p.add_local_ts(**cfg['loc_ts'])
@@ -1499,7 +1500,7 @@ class TestApi(VppTestCase):
         self.p1 = self.configure_profile(conf['p1'])
         self.p2 = self.configure_profile(conf['p2'])
 
-        r = self.vapi.ikev2_profile_dump()
+        r = self.vclient.ikev2_profile_dump()
         self.assertEqual(len(r), 2)
         self.verify_profile(r[0].profile, conf['p1'])
         self.verify_profile(r[1].profile, conf['p2'])
@@ -1598,7 +1599,7 @@ class TestInitiatorRekey(TestInitiatorPsk):
         ispi = int.from_bytes(self.sa.child_sas[0].ispi, 'little')
         self.pg0.enable_capture()
         self.pg_start()
-        self.vapi.ikev2_initiate_rekey_child_sa(ispi=ispi)
+        self.vclient.ikev2_initiate_rekey_child_sa(ispi=ispi)
         capture = self.pg0.get_capture(1)
         ih = self.get_ike_header(capture[0])
         self.assertEqual(ih.exch_type, 36)  # CHILD_SA
@@ -1678,7 +1679,7 @@ class TestResponderDpd(TestResponderPsk):
         pass
 
     def test_responder(self):
-        self.vapi.ikev2_profile_set_liveness(period=2, max_retries=1)
+        self.vclient.ikev2_profile_set_liveness(period=2, max_retries=1)
         super(TestResponderDpd, self).test_responder()
         self.pg0.enable_capture()
         self.pg_start()
@@ -1690,9 +1691,9 @@ class TestResponderDpd(TestResponderPsk):
         self.assertEqual(plain, b'')
         # wait for SA expiration
         time.sleep(3)
-        ike_sas = self.vapi.ikev2_sa_dump()
+        ike_sas = self.vclient.ikev2_sa_dump()
         self.assertEqual(len(ike_sas), 0)
-        ipsec_sas = self.vapi.ipsec_sa_dump()
+        ipsec_sas = self.vclient.ipsec_sa_dump()
         self.assertEqual(len(ipsec_sas), 0)
 
 
@@ -1827,7 +1828,7 @@ class TestMalformedMessages(TemplateResponder, Ikev2Params):
 
     def assert_counter(self, count, name, version='ip4'):
         node_name = '/err/ikev2-%s/' % version + name
-        self.assertEqual(count, self.statistics.get_err_counter(node_name))
+        self.assertEqual(count, self.vclient.statistics.get_err_counter(node_name))
 
     def create_ike_init_msg(self, length=None, payload=None):
         msg = ikev2.IKEv2(length=length, init_SPI='\x11' * 8,
diff --git a/src/plugins/l2tp/test/test_l2tp.py b/src/plugins/l2tp/test/test_l2tp.py
index c57b5912d..f3ae64585 100644
--- a/src/plugins/l2tp/test/test_l2tp.py
+++ b/src/plugins/l2tp/test/test_l2tp.py
@@ -29,19 +29,19 @@ class TestL2tp(VppTestCase):
         self.pg_start()
 
         # l2tp should not accept packets
-        err = self.statistics.get_counter(
+        err = self.vclient.statistics.get_counter(
             '/err/l2tp-decap-local/l2tpv3 session not found')[0]
         self.assertEqual(err, 0)
         err_count = err
 
-        self.vapi.l2tpv3_create_tunnel(client_address=self.pg0.local_ip6,
+        self.vclient.l2tpv3_create_tunnel(client_address=self.pg0.local_ip6,
                                        our_address=self.pg0.remote_ip6)
 
         self.pg0.add_stream(pkt)
         self.pg_start()
 
         # l2tp accepts packets
-        err = self.statistics.get_counter(
+        err = self.vclient.statistics.get_counter(
             '/err/l2tp-decap-local/l2tpv3 session not found')[0]
         self.assertEqual(err, 1)
         err_count = err
diff --git a/src/plugins/l3xc/test/test_l3xc.py b/src/plugins/l3xc/test/test_l3xc.py
index d7a82976c..5de630f65 100644
--- a/src/plugins/l3xc/test/test_l3xc.py
+++ b/src/plugins/l3xc/test/test_l3xc.py
@@ -4,15 +4,15 @@ from socket import inet_pton, inet_ntop, AF_INET, AF_INET6
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppMplsLabel, VppIpTable
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppMplsLabel, VppIpTable
 
 from scapy.packet import Raw
 from scapy.layers.l2 import Ether
 from scapy.layers.inet import IP, UDP
 from scapy.layers.inet6 import IPv6
 
-from vpp_object import VppObject
+from vpp_pom.vpp_object import VppObject
 
 NUM_PKTS = 67
 
@@ -20,7 +20,7 @@ NUM_PKTS = 67
 def find_l3xc(test, sw_if_index, dump_sw_if_index=None):
     if not dump_sw_if_index:
         dump_sw_if_index = sw_if_index
-    xcs = test.vapi.l3xc_dump(dump_sw_if_index)
+    xcs = test.vclient.l3xc_dump(dump_sw_if_index)
     for xc in xcs:
         if sw_if_index == xc.l3xc.sw_if_index:
             return True
@@ -39,7 +39,7 @@ class VppL3xc(VppObject):
             self.encoded_paths.append(path.encode())
 
     def add_vpp_config(self):
-        self._test.vapi.l3xc_update(
+        self._test.vclient.l3xc_update(
             l3xc={
                 'is_ip6': self.is_ip6,
                 'sw_if_index': self.intf.sw_if_index,
@@ -49,7 +49,7 @@ class VppL3xc(VppObject):
         self._test.registry.register(self, self._test.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.l3xc_del(
+        self._test.vclient.l3xc_del(
             is_ip6=self.is_ip6,
             sw_if_index=self.intf.sw_if_index)
 
@@ -121,7 +121,7 @@ class TestL3xc(VppTestCase):
 
         self.assertTrue(find_l3xc(self, self.pg2.sw_if_index, 0xffffffff))
 
-        self.logger.info(self.vapi.cli("sh l3xc"))
+        self.logger.info(self.vclient.cli("sh l3xc"))
 
         #
         # fire in packets. If it's forwarded then the L3XC was successful,
diff --git a/src/plugins/lacp/test/test_lacp.py b/src/plugins/lacp/test/test_lacp.py
index b5f2dae2c..29dec8d0f 100644
--- a/src/plugins/lacp/test/test_lacp.py
+++ b/src/plugins/lacp/test/test_lacp.py
@@ -7,8 +7,8 @@ from scapy.contrib.lacp import LACP, SlowProtocol, MarkerProtocol
 from scapy.layers.l2 import Ether
 
 from framework import VppTestCase, VppTestRunner
-from vpp_memif import remove_all_memif_vpp_config, VppSocketFilename, VppMemif
-from vpp_bond_interface import VppBondInterface
+from vpp_pom.plugins.vpp_memif import remove_all_memif_vpp_config, VppSocketFilename, VppMemif
+from vpp_pom.vpp_bond_interface import VppBondInterface
 from vpp_papi import VppEnum, MACAddress
 
 bond_mac = "02:02:02:02:02:02"
@@ -47,7 +47,7 @@ class TestMarker(VppTestCase):
         super().tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show interface"))
+        self.logger.info(self.vclient.ppcli("show interface"))
 
     def test_marker_request(self):
         """ Marker Request test """
@@ -63,19 +63,19 @@ class TestMarker(VppTestCase):
         #             +-+      +-+
 
         socket1 = VppSocketFilename(
-            self,
+            self.vclient,
             socket_id=1,
             socket_filename="%s/memif.sock1" % self.tempdir)
         socket1.add_vpp_config()
 
         socket11 = VppSocketFilename(
-            self,
+            self.vclient,
             socket_id=2,
             socket_filename="%s/memif.sock1" % self.tempdir)
         socket11.add_vpp_config()
 
         memif1 = VppMemif(
-            self,
+            self.vclient,
             role=VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_MASTER,
             mode=VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET,
             socket_id=1)
@@ -83,7 +83,7 @@ class TestMarker(VppTestCase):
         memif1.admin_up()
 
         memif11 = VppMemif(
-            self,
+            self.vclient,
             role=VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_SLAVE,
             mode=VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET,
             socket_id=2)
@@ -91,7 +91,7 @@ class TestMarker(VppTestCase):
         memif11.admin_up()
 
         bond0 = VppBondInterface(
-            self,
+            self.vclient,
             mode=VppEnum.vl_api_bond_mode_t.BOND_API_MODE_LACP,
             use_custom_mac=1,
             mac_address=bond_mac)
@@ -100,7 +100,7 @@ class TestMarker(VppTestCase):
         bond0.admin_up()
 
         bond1 = VppBondInterface(
-            self,
+            self.vclient,
             mode=VppEnum.vl_api_bond_mode_t.BOND_API_MODE_LACP)
         bond1.add_vpp_config()
         bond1.admin_up()
@@ -113,18 +113,18 @@ class TestMarker(VppTestCase):
         self.assertEqual(memif11.wait_for_link_up(10), True)
 
         # verify memif1 in bond0
-        intfs = self.vapi.sw_member_interface_dump(
+        intfs = self.vclient.sw_member_interface_dump(
             sw_if_index=bond0.sw_if_index)
         for intf in intfs:
             self.assertEqual(intf.sw_if_index, memif1.sw_if_index)
 
         # verify memif11 in bond1
-        intfs = self.vapi.sw_member_interface_dump(
+        intfs = self.vclient.sw_member_interface_dump(
             sw_if_index=bond1.sw_if_index)
         for intf in intfs:
             self.assertEqual(intf.sw_if_index, memif11.sw_if_index)
 
-        self.vapi.ppcli("trace add memif-input 100")
+        self.vclient.ppcli("trace add memif-input 100")
 
         # create marker request
         marker = (Ether(src=bond_mac, dst=lacp_dst_mac) /
@@ -139,7 +139,7 @@ class TestMarker(VppTestCase):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        show_trace = self.vapi.ppcli("show trace max 100")
+        show_trace = self.vclient.ppcli("show trace max 100")
         self.assertIn("Marker Information TLV:", show_trace)
 
         bond0.remove_vpp_config()
@@ -166,11 +166,11 @@ class TestLACP(VppTestCase):
         super().tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show interface"))
+        self.logger.info(self.vclient.ppcli("show interface"))
 
     def wait_for_lacp_connect(self, timeout, step=1):
         while 1:
-            intfs = self.vapi.sw_interface_lacp_dump()
+            intfs = self.vclient.sw_interface_lacp_dump()
             all_good = 1
             for intf in intfs:
                 if ((intf.actor_state !=
@@ -187,7 +187,7 @@ class TestLACP(VppTestCase):
 
     def wait_for_member_detach(self, bond, timeout, count, step=1):
         while 1:
-            intfs = self.vapi.sw_bond_interface_dump(
+            intfs = self.vclient.sw_bond_interface_dump(
                 sw_if_index=bond.sw_if_index)
             for intf in intfs:
                 if ((intf.members == count) and
@@ -213,31 +213,31 @@ class TestLACP(VppTestCase):
         #             +-+      +-+
 
         socket1 = VppSocketFilename(
-            self,
+            self.vclient,
             socket_id=1,
             socket_filename="%s/memif.sock1" % self.tempdir)
         socket1.add_vpp_config()
 
         socket11 = VppSocketFilename(
-            self,
+            self.vclient,
             socket_id=2,
             socket_filename="%s/memif.sock1" % self.tempdir)
         socket11.add_vpp_config()
 
         socket2 = VppSocketFilename(
-            self,
+            self.vclient,
             socket_id=3,
             socket_filename="%s/memif.sock2" % self.tempdir)
         socket2.add_vpp_config()
 
         socket22 = VppSocketFilename(
-            self,
+            self.vclient,
             socket_id=4,
             socket_filename="%s/memif.sock2" % self.tempdir)
         socket22.add_vpp_config()
 
         memif1 = VppMemif(
-            self,
+            self.vclient,
             role=VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_MASTER,
             mode=VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET,
             socket_id=1)
@@ -245,7 +245,7 @@ class TestLACP(VppTestCase):
         memif1.admin_up()
 
         memif11 = VppMemif(
-            self,
+            self.vclient,
             role=VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_SLAVE,
             mode=VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET,
             socket_id=2)
@@ -253,7 +253,7 @@ class TestLACP(VppTestCase):
         memif11.admin_up()
 
         memif2 = VppMemif(
-            self,
+            self.vclient,
             role=VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_MASTER,
             mode=VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET,
             socket_id=3)
@@ -261,16 +261,16 @@ class TestLACP(VppTestCase):
         memif2.admin_up()
 
         memif12 = VppMemif(
-            self,
+            self.vclient,
             role=VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_SLAVE,
             mode=VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET,
             socket_id=4)
         memif12.add_vpp_config()
         memif12.admin_up()
 
-        self.logger.info(self.vapi.ppcli("debug lacp on"))
+        self.logger.info(self.vclient.ppcli("debug lacp on"))
         bond0 = VppBondInterface(
-            self,
+            self.vclient,
             mode=VppEnum.vl_api_bond_mode_t.BOND_API_MODE_LACP,
             use_custom_mac=1,
             mac_address=bond_mac)
@@ -279,7 +279,7 @@ class TestLACP(VppTestCase):
         bond0.admin_up()
 
         bond1 = VppBondInterface(
-            self,
+            self.vclient,
             mode=VppEnum.vl_api_bond_mode_t.BOND_API_MODE_LACP)
         bond1.add_vpp_config()
         bond1.admin_up()
@@ -299,14 +299,14 @@ class TestLACP(VppTestCase):
         self.assertEqual(memif12.wait_for_link_up(10), True)
 
         # verify memif1 and memif2 in bond0
-        intfs = self.vapi.sw_member_interface_dump(
+        intfs = self.vclient.sw_member_interface_dump(
             sw_if_index=bond0.sw_if_index)
         for intf in intfs:
             self.assertIn(
                 intf.sw_if_index, (memif1.sw_if_index, memif2.sw_if_index))
 
         # verify memif11 and memif12 in bond1
-        intfs = self.vapi.sw_member_interface_dump(
+        intfs = self.vclient.sw_member_interface_dump(
             sw_if_index=bond1.sw_if_index)
         for intf in intfs:
             self.assertIn(
@@ -317,28 +317,28 @@ class TestLACP(VppTestCase):
         # Let LACP create the bundle
         self.wait_for_lacp_connect(30)
 
-        intfs = self.vapi.sw_interface_lacp_dump()
+        intfs = self.vclient.sw_interface_lacp_dump()
         for intf in intfs:
             self.assertEqual(
                 intf.actor_state, LACP_COLLECTION_AND_DISTRIBUTION_STATE)
             self.assertEqual(
                 intf.partner_state, LACP_COLLECTION_AND_DISTRIBUTION_STATE)
 
-        intfs = self.vapi.sw_bond_interface_dump(sw_if_index=0xFFFFFFFF)
+        intfs = self.vclient.sw_bond_interface_dump(sw_if_index=0xFFFFFFFF)
         for intf in intfs:
             self.assertEqual(intf.members, 2)
             self.assertEqual(intf.active_members, 2)
             self.assertEqual(
                 intf.mode, VppEnum.vl_api_bond_mode_t.BOND_API_MODE_LACP)
 
-        self.logger.info(self.vapi.ppcli("show lacp"))
-        self.logger.info(self.vapi.ppcli("show lacp details"))
+        self.logger.info(self.vclient.ppcli("show lacp"))
+        self.logger.info(self.vclient.ppcli("show lacp details"))
 
         # detach member memif1
         bond0.detach_vpp_bond_interface(sw_if_index=memif1.sw_if_index)
 
         self.wait_for_member_detach(bond0, timeout=10, count=1)
-        intfs = self.vapi.sw_bond_interface_dump(
+        intfs = self.vclient.sw_bond_interface_dump(
             sw_if_index=bond0.sw_if_index)
         for intf in intfs:
             self.assertEqual(intf.members, 1)
@@ -350,7 +350,7 @@ class TestLACP(VppTestCase):
         bond0.detach_vpp_bond_interface(sw_if_index=memif2.sw_if_index)
         self.wait_for_member_detach(bond0, timeout=10, count=0)
 
-        intfs = self.vapi.sw_bond_interface_dump(
+        intfs = self.vclient.sw_bond_interface_dump(
             sw_if_index=bond0.sw_if_index)
         for intf in intfs:
             self.assertEqual(intf.members, 0)
diff --git a/src/plugins/lb/test/test_lb.py b/src/plugins/lb/test/test_lb.py
index fafb87b62..48d71b3c3 100644
--- a/src/plugins/lb/test/test_lb.py
+++ b/src/plugins/lb/test/test_lb.py
@@ -8,9 +8,9 @@ from scapy.packet import Raw
 from scapy.data import IP_PROTOS
 
 from framework import VppTestCase
-from util import ppp
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_ip import INVALID_INDEX
+from vpp_pom.util import ppp
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip import INVALID_INDEX
 
 """ TestLB is a subclass of  VPPTestCase classes.
 
@@ -53,17 +53,17 @@ class TestLB(VppTestCase):
                 i.resolve_arp()
                 i.resolve_ndp()
 
-            dst4 = VppIpRoute(cls, "10.0.0.0", 24,
+            dst4 = VppIpRoute(cls.vclient, "10.0.0.0", 24,
                               [VppRoutePath(cls.pg1.remote_ip4,
                                             INVALID_INDEX)],
                               register=False)
             dst4.add_vpp_config()
-            dst6 = VppIpRoute(cls, "2002::", 16,
+            dst6 = VppIpRoute(cls.vclient, "2002::", 16,
                               [VppRoutePath(cls.pg1.remote_ip6,
                                             INVALID_INDEX)],
                               register=False)
             dst6.add_vpp_config()
-            cls.vapi.lb_conf(ip4_src_address="39.40.41.42",
+            cls.vclient.lb_conf(ip4_src_address="39.40.41.42",
                              ip6_src_address="2004::1")
         except Exception:
             super(TestLB, cls).tearDownClass()
@@ -77,7 +77,7 @@ class TestLB(VppTestCase):
         super(TestLB, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show lb vip verbose"))
+        self.logger.info(self.vclient.cli("show lb vip verbose"))
 
     def getIPv4Flow(self, id):
         return (IP(dst="90.0.%u.%u" % (id / 255, id % 255),
@@ -208,10 +208,10 @@ class TestLB(VppTestCase):
     def test_lb_ip4_gre4(self):
         """ Load Balancer IP4 GRE4 on vip case """
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 encap gre4")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 10.0.0.%u"
                     % (asid))
 
@@ -222,21 +222,21 @@ class TestLB(VppTestCase):
 
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 10.0.0.%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 encap gre4 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip6_gre4(self):
         """ Load Balancer IP6 GRE4 on vip case """
 
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 2001::/16 encap gre4")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 2001::/16 10.0.0.%u"
                     % (asid))
 
@@ -247,20 +247,20 @@ class TestLB(VppTestCase):
             self.checkCapture(encap='gre4', isv4=False)
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 2001::/16 10.0.0.%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 2001::/16 encap gre4 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip4_gre6(self):
         """ Load Balancer IP4 GRE6 on vip case """
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 encap gre6")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 2002::%u"
                     % (asid))
 
@@ -271,20 +271,20 @@ class TestLB(VppTestCase):
             self.checkCapture(encap='gre6', isv4=True)
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 2002::%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 encap gre6 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip6_gre6(self):
         """ Load Balancer IP6 GRE6 on vip case """
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 2001::/16 encap gre6")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 2001::/16 2002::%u"
                     % (asid))
 
@@ -295,20 +295,20 @@ class TestLB(VppTestCase):
             self.checkCapture(encap='gre6', isv4=False)
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 2001::/16 2002::%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 2001::/16 encap gre6 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip4_gre4_port(self):
         """ Load Balancer IP4 GRE4 on per-port-vip case """
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 protocol udp port 20000 encap gre4")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 protocol udp port 20000 10.0.0.%u"
                     % (asid))
 
@@ -319,21 +319,21 @@ class TestLB(VppTestCase):
 
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 protocol udp port 20000 10.0.0.%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 protocol udp port 20000 encap gre4 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip6_gre4_port(self):
         """ Load Balancer IP6 GRE4 on per-port-vip case """
 
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 2001::/16 protocol udp port 20000 encap gre4")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 2001::/16 protocol udp port 20000 10.0.0.%u"
                     % (asid))
 
@@ -344,20 +344,20 @@ class TestLB(VppTestCase):
             self.checkCapture(encap='gre4', isv4=False)
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 2001::/16 protocol udp port 20000 10.0.0.%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 2001::/16 protocol udp port 20000 encap gre4 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip4_gre6_port(self):
         """ Load Balancer IP4 GRE6 on per-port-vip case """
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 protocol udp port 20000 encap gre6")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 protocol udp port 20000 2002::%u"
                     % (asid))
 
@@ -368,20 +368,20 @@ class TestLB(VppTestCase):
             self.checkCapture(encap='gre6', isv4=True)
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 protocol udp port 20000 2002::%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 protocol udp port 20000 encap gre6 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip6_gre6_port(self):
         """ Load Balancer IP6 GRE6 on per-port-vip case """
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 2001::/16 protocol udp port 20000 encap gre6")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 2001::/16 protocol udp port 20000 2002::%u"
                     % (asid))
 
@@ -392,20 +392,20 @@ class TestLB(VppTestCase):
             self.checkCapture(encap='gre6', isv4=False)
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 2001::/16 protocol udp port 20000 2002::%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 2001::/16 protocol udp port 20000 encap gre6 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip4_l3dsr(self):
         """ Load Balancer IP4 L3DSR on vip case """
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 encap l3dsr dscp 7")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 10.0.0.%u"
                     % (asid))
 
@@ -416,21 +416,21 @@ class TestLB(VppTestCase):
 
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 10.0.0.%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 encap l3dsr"
                 " dscp 7 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip4_l3dsr_port(self):
         """ Load Balancer IP4 L3DSR on per-port-vip case """
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 protocol udp port 20000 encap l3dsr dscp 7")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 protocol udp port 20000 10.0.0.%u"
                     % (asid))
 
@@ -441,22 +441,22 @@ class TestLB(VppTestCase):
 
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 protocol udp port 20000 10.0.0.%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 protocol udp port 20000 encap l3dsr"
                 " dscp 7 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip4_nat4_port(self):
         """ Load Balancer IP4 NAT4 on per-port-vip case """
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 protocol udp port 20000 encap nat4"
                 " type clusterip target_port 3307")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 protocol udp port 20000 10.0.0.%u"
                     % (asid))
 
@@ -467,22 +467,22 @@ class TestLB(VppTestCase):
 
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 90.0.0.0/8 protocol udp port 20000 10.0.0.%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 90.0.0.0/8 protocol udp port 20000 encap nat4"
                 " type clusterip target_port 3307 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
 
     def test_lb_ip6_nat6_port(self):
         """ Load Balancer IP6 NAT6 on per-port-vip case """
         try:
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 2001::/16 protocol udp port 20000 encap nat6"
                 " type clusterip target_port 3307")
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 2001::/16 protocol udp port 20000 2002::%u"
                     % (asid))
 
@@ -493,10 +493,10 @@ class TestLB(VppTestCase):
 
         finally:
             for asid in self.ass:
-                self.vapi.cli(
+                self.vclient.cli(
                     "lb as 2001::/16 protocol udp port 20000 2002::%u del"
                     % (asid))
-            self.vapi.cli(
+            self.vclient.cli(
                 "lb vip 2001::/16 protocol udp port 20000 encap nat6"
                 " type clusterip target_port 3307 del")
-            self.vapi.cli("test lb flowtable flush")
+            self.vclient.cli("test lb flowtable flush")
diff --git a/src/plugins/lb/test/test_lb_api.py b/src/plugins/lb/test/test_lb_api.py
index 70d41d432..7f6a44f9f 100644
--- a/src/plugins/lb/test/test_lb_api.py
+++ b/src/plugins/lb/test/test_lb_api.py
@@ -25,14 +25,14 @@ class TestLbEmptyApi(framework.VppTestCase):
 
         # no records should  normally return [], but
         # lb initializes with a default VIP
-        rv = self.vapi.lb_vip_dump()
+        rv = self.vclient.lb_vip_dump()
         # print(rv)
         self.assertEqual(rv, [], 'Expected: [] Received: %r.' % rv)
 
     def test_lb_empty_as_dump(self):
 
         # no records should return []
-        rv = self.vapi.lb_as_dump()
+        rv = self.vclient.lb_as_dump()
         # print(rv)
         self.assertEqual(rv, [], 'Expected: [] Received: %r.' % rv)
 
@@ -42,17 +42,17 @@ class TestLbApi(framework.VppTestCase):
 
     def test_lb_vip_dump(self):
         # add some vips
-        # rv = self.vapi.lb_add_del_vip(pfx=ipaddress.IPv4Network(u'1.2.3.0/24'),  # noqa
+        # rv = self.vclient.lb_add_del_vip(pfx=ipaddress.IPv4Network(u'1.2.3.0/24'),  # noqa
         #                               protocol=17,
         #                               encap=0)
         # print(rv)
-        self.vapi.cli("lb vip 2001::/16 encap gre6")
-        rv = self.vapi.lb_vip_dump()
+        self.vclient.cli("lb vip 2001::/16 encap gre6")
+        rv = self.vclient.lb_vip_dump()
         # print(rv)
         self.assertEqual(str(rv[-1].vip.pfx), "2001::/16",
                          'Expected: 2001::/16 Received: %r.' % rv[-1].vip.pfx)
 
-        self.vapi.cli("lb vip 2001::/16 del")
+        self.vclient.cli("lb vip 2001::/16 del")
 
 
 class TestLbAsApi(framework.VppTestCase):
@@ -60,15 +60,15 @@ class TestLbAsApi(framework.VppTestCase):
 
     def test_lb_as_dump(self):
         # add some vips
-        self.vapi.cli("lb vip 2001::/16 encap gre6")
-        self.vapi.cli("lb as 2001::/16 2000::1")
+        self.vclient.cli("lb vip 2001::/16 encap gre6")
+        self.vclient.cli("lb as 2001::/16 2000::1")
         # add some as's for the vips
-        # rv = self.vapi.lb_add_del_as(
+        # rv = self.vclient.lb_add_del_as(
         #     pfx=ipaddress.IPv4Network(u"10.0.0.0/24"),
         #     as_address=ipaddress.IPv4Address(u"192.168.1.1"))
 
         # print(rv)
-        rv = self.vapi.lb_as_dump()
+        rv = self.vclient.lb_as_dump()
         # print(rv)
         self.assertEqual(str(rv[0].vip.pfx), "2001::/16",
                          'Expected: "2001::/16" Received: %r.' % rv[0].vip.pfx)
diff --git a/src/plugins/lisp/test/test_lisp.py b/src/plugins/lisp/test/test_lisp.py
index 70cb4f4bf..e8eaffe3b 100644
--- a/src/plugins/lisp/test/test_lisp.py
+++ b/src/plugins/lisp/test/test_lisp.py
@@ -12,7 +12,7 @@ from scapy.layers.inet6 import IPv6
 from framework import VppTestCase, VppTestRunner
 from lisp import VppLocalMapping, VppLispAdjacency, VppLispLocator, \
     VppLispLocatorSet, VppRemoteMapping, LispRemoteLocator
-from util import ppp, ForeignAddressFactory
+from vpp_pom.util import ppp, ForeignAddressFactory
 
 # From py_lispnetworking.lisp.py:  # GNU General Public License v2.0
 
@@ -151,7 +151,7 @@ class TestLisp(VppTestCase):
 
     def setUp(self):
         super(TestLisp, self).setUp()
-        self.vapi.lisp_enable_disable(is_enable=1)
+        self.vclient.lisp_enable_disable(is_enable=1)
 
     def test_lisp_basic_encap(self):
         """Test case for basic encapsulation"""
@@ -197,7 +197,7 @@ class TestLispUT(VppTestCase):
 
     def test_fib(self):
         """ LISP Unit Tests """
-        error = self.vapi.cli("test lisp cp")
+        error = self.vclient.cli("test lisp cp")
 
         if error:
             self.logger.critical(error)
diff --git a/src/plugins/mactime/test/test_mactime.py b/src/plugins/mactime/test/test_mactime.py
index 85ded33d1..4ea7c75ee 100644
--- a/src/plugins/mactime/test/test_mactime.py
+++ b/src/plugins/mactime/test/test_mactime.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner, running_gcov_tests
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 class TestMactime(VppTestCase):
@@ -25,7 +25,7 @@ class TestMactime(VppTestCase):
 
     def test_mactime_range_unittest(self):
         """ Time Range Test """
-        error = self.vapi.cli("test time-range")
+        error = self.vclient.cli("test time-range")
 
         if error:
             self.logger.critical(error)
@@ -149,7 +149,7 @@ class TestMactime(VppTestCase):
                 "show error"]
 
         for cmd in cmds:
-            r = self.vapi.cli_return_response(cmd)
+            r = self.vclient.cli_return_response(cmd)
             if r.retval != 0:
                 if hasattr(r, 'reply'):
                     self.logger.info(cmd + " FAIL reply " + r.reply)
diff --git a/src/plugins/map/test/test_map.py b/src/plugins/map/test/test_map.py
index 93ea3f069..d2bf30975 100644
--- a/src/plugins/map/test/test_map.py
+++ b/src/plugins/map/test/test_map.py
@@ -4,9 +4,9 @@ import ipaddress
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from util import fragment_rfc791, fragment_rfc8200
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.util import fragment_rfc791, fragment_rfc8200
 
 import scapy.compat
 from scapy.layers.l2 import Ether
@@ -78,15 +78,15 @@ class TestMAP(VppTestCase):
         map_src = '3000::1/128'
         client_pfx = '192.168.0.0/16'
         tag = 'MAP-E tag.'
-        index = self.vapi.map_add_domain(ip4_prefix=client_pfx,
+        index = self.vclient.map_add_domain(ip4_prefix=client_pfx,
                                          ip6_prefix=map_dst,
                                          ip6_src=map_src,
                                          tag=tag).index
-        rv = self.vapi.map_domain_dump()
+        rv = self.vclient.map_domain_dump()
 
         # restore the state early so as to not impact subsequent tests.
         # If an assert fails, we will not get the chance to do it at the end.
-        self.vapi.map_del_domain(index=index)
+        self.vclient.map_del_domain(index=index)
 
         self.assertGreater(len(rv), 0,
                            "Expected output from 'map_domain_dump'")
@@ -106,7 +106,7 @@ class TestMAP(VppTestCase):
         mod = ip4_pfx.num_addresses / 1024
         indicies = []
         for i in range(ip4_pfx.num_addresses):
-            rv = self.vapi.map_add_domain(ip6_prefix=ip6_pfx_str,
+            rv = self.vclient.map_add_domain(ip6_prefix=ip6_pfx_str,
                                           ip4_prefix=str(ip4_pfx[i]) + "/32",
                                           ip6_src=ip6_src_str)
             indicies.append(rv.index)
@@ -122,25 +122,25 @@ class TestMAP(VppTestCase):
         cursor = 0
 
         # Invalid cursor
-        rv, details = self.vapi.map_domains_get(cursor=1234)
+        rv, details = self.vclient.map_domains_get(cursor=1234)
         self.assertEqual(rv.retval, -7)
 
         # Delete a domain in the middle of walk
-        rv, details = self.vapi.map_domains_get(cursor=0)
+        rv, details = self.vclient.map_domains_get(cursor=0)
         self.assertEqual(rv.retval, -165)
-        self.vapi.map_del_domain(index=rv.cursor)
+        self.vclient.map_del_domain(index=rv.cursor)
         domains.remove(rv.cursor)
 
         # Continue at point of deleted cursor
-        rv, details = self.vapi.map_domains_get(cursor=rv.cursor)
+        rv, details = self.vclient.map_domains_get(cursor=rv.cursor)
         self.assertEqual(rv.retval, -165)
 
-        d = list(self.vapi.vpp.details_iter(self.vapi.map_domains_get))
+        d = list(self.vclient.vpp.details_iter(self.vclient.map_domains_get))
         self.assertEqual(len(d), 255)
 
         # Clean up
         for i in domains:
-            self.vapi.map_del_domain(index=i)
+            self.vclient.map_del_domain(index=i)
 
     def test_map_e_udp(self):
         """ MAP-E UDP"""
@@ -150,7 +150,7 @@ class TestMAP(VppTestCase):
         #
         map_br_pfx = "2001::"
         map_br_pfx_len = 32
-        map_route = VppIpRoute(self,
+        map_route = VppIpRoute(self.vclient,
                                map_br_pfx,
                                map_br_pfx_len,
                                [VppRoutePath(self.pg1.remote_ip6,
@@ -165,7 +165,7 @@ class TestMAP(VppTestCase):
         client_pfx = '192.168.0.0/16'
         map_translated_addr = '2001:0:101:7000:0:c0a8:101:7'
         tag = 'MAP-E tag.'
-        self.vapi.map_add_domain(ip4_prefix=client_pfx,
+        self.vclient.map_add_domain(ip4_prefix=client_pfx,
                                  ip6_prefix=map_dst,
                                  ip6_src=map_src,
                                  ea_bits_len=20,
@@ -173,10 +173,10 @@ class TestMAP(VppTestCase):
                                  psid_length=4,
                                  tag=tag)
 
-        self.vapi.map_param_set_security_check(enable=1, fragments=1)
+        self.vclient.map_param_set_security_check(enable=1, fragments=1)
 
         # Enable MAP on interface.
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg0.sw_if_index,
                                         is_translation=0)
 
@@ -215,7 +215,7 @@ class TestMAP(VppTestCase):
         self.send_and_assert_encapped(frags, "3000::1", map_translated_addr)
 
         # Enable MAP on interface.
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg1.sw_if_index,
                                         is_translation=0)
 
@@ -303,7 +303,7 @@ class TestMAP(VppTestCase):
         #
         # Pre-resolve. No API for this!!
         #
-        self.vapi.ppcli("map params pre-resolve ip6-nh 4001::1")
+        self.vclient.ppcli("map params pre-resolve ip6-nh 4001::1")
 
         self.send_and_assert_no_replies(self.pg0, v4,
                                         "resolved via default route")
@@ -312,7 +312,7 @@ class TestMAP(VppTestCase):
         # Add a route to 4001::1. Expect the encapped traffic to be
         # sent via that routes next-hop
         #
-        pre_res_route = VppIpRoute(self, "4001::1", 128,
+        pre_res_route = VppIpRoute(self.vclient, "4001::1", 128,
                                    [VppRoutePath(self.pg1.remote_hosts[2].ip6,
                                                  self.pg1.sw_if_index)])
         pre_res_route.add_vpp_config()
@@ -337,7 +337,7 @@ class TestMAP(VppTestCase):
         # the route is really gone and thus that the unresolve worked.
         #
         pre_res_route.remove_vpp_config()
-        self.vapi.ppcli("map params pre-resolve del ip6-nh 4001::1")
+        self.vclient.ppcli("map params pre-resolve del ip6-nh 4001::1")
 
     def test_map_e_inner_frag(self):
         """ MAP-E Inner fragmentation """
@@ -347,7 +347,7 @@ class TestMAP(VppTestCase):
         #
         map_br_pfx = "2001::"
         map_br_pfx_len = 32
-        map_route = VppIpRoute(self,
+        map_route = VppIpRoute(self.vclient,
                                map_br_pfx,
                                map_br_pfx_len,
                                [VppRoutePath(self.pg1.remote_ip6,
@@ -362,7 +362,7 @@ class TestMAP(VppTestCase):
         client_pfx = '192.168.0.0/16'
         map_translated_addr = '2001:0:101:7000:0:c0a8:101:7'
         tag = 'MAP-E tag.'
-        self.vapi.map_add_domain(ip4_prefix=client_pfx,
+        self.vclient.map_add_domain(ip4_prefix=client_pfx,
                                  ip6_prefix=map_dst,
                                  ip6_src=map_src,
                                  ea_bits_len=20,
@@ -372,12 +372,12 @@ class TestMAP(VppTestCase):
                                  tag=tag)
 
         # Enable MAP on interface.
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg0.sw_if_index,
                                         is_translation=0)
 
         # Enable inner fragmentation
-        self.vapi.map_param_set_fragmentation(inner=1)
+        self.vclient.map_param_set_fragmentation(inner=1)
 
         v4 = (Ether(dst=self.pg0.local_mac, src=self.pg0.remote_mac) /
               IP(src=self.pg0.remote_ip4, dst='192.168.1.1') /
@@ -417,7 +417,7 @@ class TestMAP(VppTestCase):
         #
         map_br_pfx = "2001::"
         map_br_pfx_len = 32
-        map_route = VppIpRoute(self,
+        map_route = VppIpRoute(self.vclient,
                                map_br_pfx,
                                map_br_pfx_len,
                                [VppRoutePath(self.pg1.remote_ip6,
@@ -432,7 +432,7 @@ class TestMAP(VppTestCase):
         client_pfx = '192.168.0.0/16'
         map_translated_addr = '2001:0:101:5000:0:c0a8:101:5'
         tag = 'MAP-E TCP tag.'
-        self.vapi.map_add_domain(ip4_prefix=client_pfx,
+        self.vclient.map_add_domain(ip4_prefix=client_pfx,
                                  ip6_prefix=map_dst,
                                  ip6_src=map_src,
                                  ea_bits_len=20,
@@ -441,18 +441,18 @@ class TestMAP(VppTestCase):
                                  tag=tag)
 
         # Enable MAP on pg0 interface.
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg0.sw_if_index,
                                         is_translation=0)
 
         # Enable MAP on pg1 interface.
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg1.sw_if_index,
                                         is_translation=0)
 
         # TCP MSS clamping
         mss_clamp = 1300
-        self.vapi.map_param_set_tcp(mss_clamp)
+        self.vclient.map_param_set_tcp(mss_clamp)
 
         #
         # Send a v4 packet that will be encapped.
@@ -531,7 +531,7 @@ class TestMAP(VppTestCase):
         ip4_pfx = '192.168.0.0/24'
         tag = 'MAP-T Tag.'
 
-        self.vapi.map_add_domain(ip6_prefix=map_dst,
+        self.vclient.map_add_domain(ip6_prefix=map_dst,
                                  ip4_prefix=ip4_pfx,
                                  ip6_src=map_src,
                                  ea_bits_len=16,
@@ -541,10 +541,10 @@ class TestMAP(VppTestCase):
                                  tag=tag)
 
         # Enable MAP-T on interfaces.
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg0.sw_if_index,
                                         is_translation=1)
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg1.sw_if_index,
                                         is_translation=1)
 
@@ -569,7 +569,7 @@ class TestMAP(VppTestCase):
         for p in rx:
             self.validate(p[1], v6_reply)
 
-        map_route = VppIpRoute(self,
+        map_route = VppIpRoute(self.vclient,
                                "2001:db8::",
                                32,
                                [VppRoutePath(self.pg1.remote_ip6,
@@ -758,7 +758,7 @@ class TestMAP(VppTestCase):
         self.validate_frag_payload_len6(rx, ICMPv6EchoRequest, payload_len)
 
         # TCP MSS clamping
-        self.vapi.map_param_set_tcp(1300)
+        self.vclient.map_param_set_tcp(1300)
 
         #
         # Send a v4 TCP SYN packet that will be translated and MSS clamped
@@ -792,11 +792,11 @@ class TestMAP(VppTestCase):
             self.validate(p[1], p4_translated)
 
         # TCP MSS clamping cleanup
-        self.vapi.map_param_set_tcp(0)
+        self.vclient.map_param_set_tcp(0)
 
         # Enable icmp6 param to get back ICMPv6 unreachable messages in case
         # of security check fails
-        self.vapi.map_param_set_icmp6(enable_unreachable=1)
+        self.vclient.map_param_set_icmp6(enable_unreachable=1)
 
         # Send back an IPv6 packet that will be droppped due to security
         # check fail
@@ -819,7 +819,7 @@ class TestMAP(VppTestCase):
             self.validate(p[1], icmp6_reply)
 
         # ICMPv6 unreachable messages cleanup
-        self.vapi.map_param_set_icmp6(enable_unreachable=0)
+        self.vclient.map_param_set_icmp6(enable_unreachable=0)
 
     def test_map_t_ip6_psid(self):
         """ MAP-T v6->v4 PSID validation"""
@@ -832,7 +832,7 @@ class TestMAP(VppTestCase):
         ip4_pfx = '192.168.0.0/24'
         tag = 'MAP-T Test Domain'
 
-        self.vapi.map_add_domain(ip6_prefix=map_dst,
+        self.vclient.map_add_domain(ip6_prefix=map_dst,
                                  ip4_prefix=ip4_pfx,
                                  ip6_src=map_src,
                                  ea_bits_len=16,
@@ -842,14 +842,14 @@ class TestMAP(VppTestCase):
                                  tag=tag)
 
         # Enable MAP-T on interfaces.
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg0.sw_if_index,
                                         is_translation=1)
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg1.sw_if_index,
                                         is_translation=1)
 
-        map_route = VppIpRoute(self,
+        map_route = VppIpRoute(self.vclient,
                                "2001:db8::",
                                32,
                                [VppRoutePath(self.pg1.remote_ip6,
@@ -886,7 +886,7 @@ class TestMAP(VppTestCase):
         ip4_pfx = '192.168.0.0/24'
         tag = 'MAP-T Test Domain.'
 
-        self.vapi.map_add_domain(ip6_prefix=map_dst,
+        self.vclient.map_add_domain(ip6_prefix=map_dst,
                                  ip4_prefix=ip4_pfx,
                                  ip6_src=map_src,
                                  ea_bits_len=16,
@@ -896,28 +896,28 @@ class TestMAP(VppTestCase):
                                  tag=tag)
 
         # Enable MAP-T on interfaces.
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg0.sw_if_index,
                                         is_translation=1)
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg1.sw_if_index,
                                         is_translation=1)
 
         # Enable pre-resolve option
-        self.vapi.map_param_add_del_pre_resolve(ip4_nh_address="10.1.2.3",
+        self.vclient.map_param_add_del_pre_resolve(ip4_nh_address="10.1.2.3",
                                                 ip6_nh_address="4001::1",
                                                 is_add=1)
 
         # Add a route to 4001::1 and expect the translated traffic to be
         # sent via that route next-hop.
-        pre_res_route6 = VppIpRoute(self, "4001::1", 128,
+        pre_res_route6 = VppIpRoute(self.vclient, "4001::1", 128,
                                     [VppRoutePath(self.pg1.remote_hosts[2].ip6,
                                                   self.pg1.sw_if_index)])
         pre_res_route6.add_vpp_config()
 
         # Add a route to 10.1.2.3 and expect the "untranslated" traffic to be
         # sent via that route next-hop.
-        pre_res_route4 = VppIpRoute(self, "10.1.2.3", 32,
+        pre_res_route4 = VppIpRoute(self.vclient, "10.1.2.3", 32,
                                     [VppRoutePath(self.pg0.remote_hosts[1].ip4,
                                                   self.pg0.sw_if_index)])
         pre_res_route4.add_vpp_config()
@@ -954,7 +954,7 @@ class TestMAP(VppTestCase):
             self.validate(p[1], p4_translated)
 
         # Cleanup pre-resolve option
-        self.vapi.map_param_add_del_pre_resolve(ip4_nh_address="10.1.2.3",
+        self.vclient.map_param_add_del_pre_resolve(ip4_nh_address="10.1.2.3",
                                                 ip6_nh_address="4001::1",
                                                 is_add=0)
 
diff --git a/src/plugins/map/test/test_map_br.py b/src/plugins/map/test/test_map_br.py
index 3602ddd2e..d3ec80f10 100644
--- a/src/plugins/map/test/test_map_br.py
+++ b/src/plugins/map/test/test_map_br.py
@@ -4,9 +4,9 @@ import ipaddress
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from util import fragment_rfc791, fragment_rfc8200
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.util import fragment_rfc791, fragment_rfc8200
 
 import scapy.compat
 from scapy.layers.l2 import Ether
@@ -89,7 +89,7 @@ class TestMAPBR(VppTestCase):
         #
         # Add an IPv6 route to the MAP-BR.
         #
-        map_route = VppIpRoute(self,
+        map_route = VppIpRoute(self.vclient,
                                self.map_br_prefix,
                                self.map_br_prefix_len,
                                [VppRoutePath(self.pg1.remote_ip6,
@@ -99,7 +99,7 @@ class TestMAPBR(VppTestCase):
         #
         # Add a MAP BR domain that maps from pg0 to pg1.
         #
-        self.vapi.map_add_domain(ip4_prefix=self.ip4_prefix,
+        self.vclient.map_add_domain(ip4_prefix=self.ip4_prefix,
                                  ip6_prefix=self.ip6_prefix,
                                  ip6_src=self.ip6_src,
                                  ea_bits_len=self.ea_bits_len,
@@ -111,23 +111,23 @@ class TestMAPBR(VppTestCase):
         #
         # Set BR parameters.
         #
-        self.vapi.map_param_set_fragmentation(inner=1, ignore_df=0)
-        self.vapi.map_param_set_fragmentation(inner=0, ignore_df=0)
-        self.vapi.map_param_set_icmp(ip4_err_relay_src=self.pg0.local_ip4)
-        self.vapi.map_param_set_traffic_class(copy=1)
+        self.vclient.map_param_set_fragmentation(inner=1, ignore_df=0)
+        self.vclient.map_param_set_fragmentation(inner=0, ignore_df=0)
+        self.vclient.map_param_set_icmp(ip4_err_relay_src=self.pg0.local_ip4)
+        self.vclient.map_param_set_traffic_class(copy=1)
 
         #
         # Enable MAP-T on interfaces.
         #
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg0.sw_if_index,
                                         is_translation=1)
 
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg1.sw_if_index,
                                         is_translation=1)
 
-        self.vapi.map_if_enable_disable(is_enable=1,
+        self.vclient.map_if_enable_disable(is_enable=1,
                                         sw_if_index=self.pg1.sw_if_index,
                                         is_translation=1)
 
diff --git a/src/plugins/memif/test/test_memif.py b/src/plugins/memif/test/test_memif.py
index 244818cfc..8da699ff0 100644
--- a/src/plugins/memif/test/test_memif.py
+++ b/src/plugins/memif/test/test_memif.py
@@ -6,10 +6,10 @@ from scapy.layers.inet import IP, ICMP
 import six
 
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from remote_test import RemoteClass, RemoteVppTestCase
-from vpp_memif import remove_all_memif_vpp_config, \
+from remote_test import RemoteClass, RemoteVppTestCase, RemoteVclient
+from vpp_pom.plugins.vpp_memif import remove_all_memif_vpp_config, \
     VppSocketFilename, VppMemif
-from vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
 from vpp_papi import VppEnum
 
 
@@ -45,8 +45,8 @@ class TestMemif(VppTestCase):
         super(TestMemif, cls).tearDownClass()
 
     def tearDown(self):
-        remove_all_memif_vpp_config(self)
-        remove_all_memif_vpp_config(self.remote_test)
+        remove_all_memif_vpp_config(self.vclient)
+        remove_all_memif_vpp_config(RemoteVclient(self.remote_test))
         super(TestMemif, self).tearDown()
 
     def _check_socket_filename(self, dump, socket_id, filename):
@@ -60,7 +60,7 @@ class TestMemif(VppTestCase):
         """ Memif socket filename add/del """
 
         # dump default socket filename
-        dump = self.vapi.memif_socket_filename_dump()
+        dump = self.vclient.memif_socket_filename_dump()
         self.assertTrue(
             self._check_socket_filename(
                 dump, 0, "%s/memif.sock" % self.tempdir))
@@ -69,25 +69,25 @@ class TestMemif(VppTestCase):
         # existing path
         memif_sockets.append(
             VppSocketFilename(
-                self, 1, "%s/memif1.sock" % self.tempdir))
+                self.vclient, 1, "%s/memif1.sock" % self.tempdir))
         # default path (test tempdir)
         memif_sockets.append(
             VppSocketFilename(
-                self,
+                self.vclient,
                 2,
                 "memif2.sock",
                 add_default_folder=True))
         # create new folder in default folder
         memif_sockets.append(
             VppSocketFilename(
-                self,
+                self.vclient,
                 3,
                 "sock/memif3.sock",
                 add_default_folder=True))
 
         for sock in memif_sockets:
             sock.add_vpp_config()
-            dump = sock.query_vpp_config()
+            dump = sock.get_vpp_config()
             self.assertTrue(
                 self._check_socket_filename(
                     dump,
@@ -97,7 +97,7 @@ class TestMemif(VppTestCase):
         for sock in memif_sockets:
             sock.remove_vpp_config()
 
-        dump = self.vapi.memif_socket_filename_dump()
+        dump = self.vclient.memif_socket_filename_dump()
         self.assertTrue(
             self._check_socket_filename(
                 dump, 0, "%s/memif.sock" % self.tempdir))
@@ -105,7 +105,7 @@ class TestMemif(VppTestCase):
     def _create_delete_test_one_interface(self, memif):
         memif.add_vpp_config()
 
-        dump = memif.query_vpp_config()
+        dump = memif.get_vpp_config()
 
         self.assertTrue(dump)
         self.assertEqual(dump.sw_if_index, memif.sw_if_index)
@@ -116,13 +116,13 @@ class TestMemif(VppTestCase):
 
         memif.remove_vpp_config()
 
-        dump = memif.query_vpp_config()
+        dump = memif.get_vpp_config()
 
         self.assertFalse(dump)
 
     def _connect_test_one_interface(self, memif):
         self.assertTrue(memif.wait_for_link_up(5))
-        dump = memif.query_vpp_config()
+        dump = memif.get_vpp_config()
 
         if memif.role == VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_SLAVE:
             self.assertEqual(dump.ring_size, memif.ring_size)
@@ -148,7 +148,7 @@ class TestMemif(VppTestCase):
         """ Memif create/delete interface """
 
         memif = VppMemif(
-            self,
+            self.vclient,
             VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_SLAVE,
             VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET)
         self._create_delete_test_one_interface(memif)
@@ -162,24 +162,24 @@ class TestMemif(VppTestCase):
         # existing path
         memif_sockets.append(
             VppSocketFilename(
-                self, 1, "%s/memif1.sock" % self.tempdir))
+                self.vclient, 1, "%s/memif1.sock" % self.tempdir))
         # default path (test tempdir)
         memif_sockets.append(
             VppSocketFilename(
-                self,
+                self.vclient,
                 2,
                 "memif2.sock",
                 add_default_folder=True))
         # create new folder in default folder
         memif_sockets.append(
             VppSocketFilename(
-                self,
+                self.vclient,
                 3,
                 "sock/memif3.sock",
                 add_default_folder=True))
 
         memif = VppMemif(
-            self,
+            self.vclient,
             VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_SLAVE,
             VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET)
 
@@ -194,19 +194,19 @@ class TestMemif(VppTestCase):
     def test_memif_connect(self):
         """ Memif connect """
         memif = VppMemif(
-            self,
+            self.vclient,
             VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_SLAVE,
             VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET,
             ring_size=1024,
             buffer_size=2048,
             secret="abc")
 
-        remote_socket = VppSocketFilename(self.remote_test, 1,
+        remote_socket = VppSocketFilename(RemoteVclient(self.remote_test), 1,
                                           "%s/memif.sock" % self.tempdir)
         remote_socket.add_vpp_config()
 
         remote_memif = VppMemif(
-            self.remote_test,
+            RemoteVclient(self.remote_test),
             VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_MASTER,
             VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET,
             socket_id=1,
@@ -245,16 +245,16 @@ class TestMemif(VppTestCase):
         """ Memif ping """
 
         memif = VppMemif(
-            self,
+            self.vclient,
             VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_SLAVE,
             VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET)
 
-        remote_socket = VppSocketFilename(self.remote_test, 1,
+        remote_socket = VppSocketFilename(RemoteVclient(self.remote_test), 1,
                                           "%s/memif.sock" % self.tempdir)
         remote_socket.add_vpp_config()
 
         remote_memif = VppMemif(
-            self.remote_test,
+            RemoteVclient(self.remote_test),
             VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_MASTER,
             VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET,
             socket_id=1)
@@ -271,7 +271,7 @@ class TestMemif(VppTestCase):
         self.assertTrue(remote_memif.wait_for_link_up(5))
 
         # add routing to remote vpp
-        route = VppIpRoute(self.remote_test, self.pg0._local_ip4_subnet, 24,
+        route = VppIpRoute(RemoteVclient(self.remote_test), self.pg0._local_ip4_subnet, 24,
                            [VppRoutePath(memif.ip_prefix.network_address,
                                          0xffffffff)],
                            register=False)
diff --git a/src/plugins/nat/test/test_det44.py b/src/plugins/nat/test/test_det44.py
index ced774689..c63f85574 100644
--- a/src/plugins/nat/test/test_det44.py
+++ b/src/plugins/nat/test/test_det44.py
@@ -10,7 +10,7 @@ from ipfix import IPFIX, Set, Template, Data, IPFIXDecoder
 from scapy.layers.inet import IP, TCP, UDP, ICMP
 from scapy.layers.inet import IPerror, UDPerror
 from scapy.layers.l2 import Ether
-from util import ppp
+from vpp_pom.util import ppp
 
 
 class TestDET44(VppTestCase):
@@ -19,7 +19,7 @@ class TestDET44(VppTestCase):
     @classmethod
     def setUpClass(cls):
         super(TestDET44, cls).setUpClass()
-        cls.vapi.cli("set log class det44 level debug")
+        cls.vclient.cli("set log class det44 level debug")
 
         cls.tcp_port_in = 6303
         cls.tcp_external_port = 6303
@@ -45,18 +45,18 @@ class TestDET44(VppTestCase):
 
     def setUp(self):
         super(TestDET44, self).setUp()
-        self.vapi.det44_plugin_enable_disable(enable=1)
+        self.vclient.det44_plugin_enable_disable(enable=1)
 
     def tearDown(self):
         super(TestDET44, self).tearDown()
         if not self.vpp_dead:
-            self.vapi.det44_plugin_enable_disable(enable=0)
+            self.vclient.det44_plugin_enable_disable(enable=0)
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show det44 interfaces"))
-        self.logger.info(self.vapi.cli("show det44 timeouts"))
-        self.logger.info(self.vapi.cli("show det44 mappings"))
-        self.logger.info(self.vapi.cli("show det44 sessions"))
+        self.logger.info(self.vclient.cli("show det44 interfaces"))
+        self.logger.info(self.vclient.cli("show det44 timeouts"))
+        self.logger.info(self.vclient.cli("show det44 mappings"))
+        self.logger.info(self.vclient.cli("show det44 sessions"))
 
     def verify_capture_in(self, capture, in_if):
         """
@@ -234,17 +234,17 @@ class TestDET44(VppTestCase):
         in_plen = 24
         out_plen = 32
 
-        self.vapi.det44_add_del_map(is_add=1, in_addr=in_addr,
+        self.vclient.det44_add_del_map(is_add=1, in_addr=in_addr,
                                     in_plen=in_plen, out_addr=out_addr,
                                     out_plen=out_plen)
 
-        rep1 = self.vapi.det44_forward(in_addr_t)
+        rep1 = self.vclient.det44_forward(in_addr_t)
         self.assertEqual(str(rep1.out_addr), out_addr)
-        rep2 = self.vapi.det44_reverse(rep1.out_port_hi, out_addr)
+        rep2 = self.vclient.det44_reverse(rep1.out_port_hi, out_addr)
 
         self.assertEqual(str(rep2.in_addr), in_addr_t)
 
-        deterministic_mappings = self.vapi.det44_map_dump()
+        deterministic_mappings = self.vclient.det44_map_dump()
         self.assertEqual(len(deterministic_mappings), 1)
         dsm = deterministic_mappings[0]
         self.assertEqual(in_addr, str(dsm.in_addr))
@@ -254,15 +254,15 @@ class TestDET44(VppTestCase):
 
     def test_set_timeouts(self):
         """ Set deterministic NAT timeouts """
-        timeouts_before = self.vapi.det44_get_timeouts()
+        timeouts_before = self.vclient.det44_get_timeouts()
 
-        self.vapi.det44_set_timeouts(
+        self.vclient.det44_set_timeouts(
             udp=timeouts_before.udp + 10,
             tcp_established=timeouts_before.tcp_established + 10,
             tcp_transitory=timeouts_before.tcp_transitory + 10,
             icmp=timeouts_before.icmp + 10)
 
-        timeouts_after = self.vapi.det44_get_timeouts()
+        timeouts_after = self.vclient.det44_get_timeouts()
 
         self.assertNotEqual(timeouts_before.udp, timeouts_after.udp)
         self.assertNotEqual(timeouts_before.icmp, timeouts_after.icmp)
@@ -276,15 +276,15 @@ class TestDET44(VppTestCase):
 
         nat_ip = "10.0.0.10"
 
-        self.vapi.det44_add_del_map(is_add=1, in_addr=self.pg0.remote_ip4,
+        self.vclient.det44_add_del_map(is_add=1, in_addr=self.pg0.remote_ip4,
                                     in_plen=32,
                                     out_addr=socket.inet_aton(nat_ip),
                                     out_plen=32)
 
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1, is_inside=1)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1, is_inside=0)
 
@@ -305,7 +305,7 @@ class TestDET44(VppTestCase):
         self.verify_capture_in(capture, self.pg0)
 
         # session dump test
-        sessions = self.vapi.det44_session_dump(self.pg0.remote_ip4)
+        sessions = self.vclient.det44_session_dump(self.pg0.remote_ip4)
         self.assertEqual(len(sessions), 3)
 
         # TCP session
@@ -338,13 +338,13 @@ class TestDET44(VppTestCase):
         host0 = self.pg0.remote_hosts[0]
         host1 = self.pg0.remote_hosts[1]
 
-        self.vapi.det44_add_del_map(is_add=1, in_addr=host0.ip4, in_plen=24,
+        self.vclient.det44_add_del_map(is_add=1, in_addr=host0.ip4, in_plen=24,
                                     out_addr=socket.inet_aton(nat_ip),
                                     out_plen=32)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1, is_inside=1)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1, is_inside=0)
 
@@ -388,7 +388,7 @@ class TestDET44(VppTestCase):
             self.logger.error(ppp("Unexpected or invalid packet:", p))
             raise
 
-        dms = self.vapi.det44_map_dump()
+        dms = self.vclient.det44_map_dump()
         self.assertEqual(1, len(dms))
         self.assertEqual(2, dms[0].ses_num)
 
@@ -433,30 +433,30 @@ class TestDET44(VppTestCase):
             raise
 
         # session close api test
-        self.vapi.det44_close_session_out(socket.inet_aton(nat_ip),
+        self.vclient.det44_close_session_out(socket.inet_aton(nat_ip),
                                           port_out1,
                                           self.pg1.remote_ip4,
                                           external_port)
-        dms = self.vapi.det44_map_dump()
+        dms = self.vclient.det44_map_dump()
         self.assertEqual(dms[0].ses_num, 1)
 
-        self.vapi.det44_close_session_in(host0.ip4,
+        self.vclient.det44_close_session_in(host0.ip4,
                                          port_in,
                                          self.pg1.remote_ip4,
                                          external_port)
-        dms = self.vapi.det44_map_dump()
+        dms = self.vclient.det44_map_dump()
         self.assertEqual(dms[0].ses_num, 0)
 
     def test_tcp_session_close_detection_in(self):
         """ DET44 TCP session close from inside network """
-        self.vapi.det44_add_del_map(is_add=1, in_addr=self.pg0.remote_ip4,
+        self.vclient.det44_add_del_map(is_add=1, in_addr=self.pg0.remote_ip4,
                                     in_plen=32,
                                     out_addr=socket.inet_aton(self.nat_addr),
                                     out_plen=32)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1, is_inside=1)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1, is_inside=0)
 
@@ -506,7 +506,7 @@ class TestDET44(VppTestCase):
             self.pg1.get_capture(1)
 
             # Check if deterministic NAT44 closed the session
-            dms = self.vapi.det44_map_dump()
+            dms = self.vclient.det44_map_dump()
             self.assertEqual(0, dms[0].ses_num)
         except:
             self.logger.error("TCP session termination failed")
@@ -514,14 +514,14 @@ class TestDET44(VppTestCase):
 
     def test_tcp_session_close_detection_out(self):
         """ Deterministic NAT TCP session close from outside network """
-        self.vapi.det44_add_del_map(is_add=1, in_addr=self.pg0.remote_ip4,
+        self.vclient.det44_add_del_map(is_add=1, in_addr=self.pg0.remote_ip4,
                                     in_plen=32,
                                     out_addr=socket.inet_aton(self.nat_addr),
                                     out_plen=32)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1, is_inside=1)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1, is_inside=0)
 
@@ -571,7 +571,7 @@ class TestDET44(VppTestCase):
             self.pg0.get_capture(1)
 
             # Check if deterministic NAT44 closed the session
-            dms = self.vapi.det44_map_dump()
+            dms = self.vclient.det44_map_dump()
             self.assertEqual(0, dms[0].ses_num)
         except:
             self.logger.error("TCP session termination failed")
@@ -580,19 +580,19 @@ class TestDET44(VppTestCase):
     @unittest.skipUnless(running_extended_tests, "part of extended tests")
     def test_session_timeout(self):
         """ Deterministic NAT session timeouts """
-        self.vapi.det44_add_del_map(is_add=1, in_addr=self.pg0.remote_ip4,
+        self.vclient.det44_add_del_map(is_add=1, in_addr=self.pg0.remote_ip4,
                                     in_plen=32,
                                     out_addr=socket.inet_aton(self.nat_addr),
                                     out_plen=32)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1, is_inside=1)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1, is_inside=0)
 
         self.initiate_tcp_session(self.pg0, self.pg1)
-        self.vapi.det44_set_timeouts(udp=5, tcp_established=5,
+        self.vclient.det44_set_timeouts(udp=5, tcp_established=5,
                                      tcp_transitory=5, icmp=5)
         pkts = self.create_stream_in(self.pg0, self.pg1)
         self.pg0.add_stream(pkts)
@@ -601,28 +601,28 @@ class TestDET44(VppTestCase):
         self.pg1.get_capture(len(pkts))
         sleep(15)
 
-        dms = self.vapi.det44_map_dump()
+        dms = self.vclient.det44_map_dump()
         self.assertEqual(0, dms[0].ses_num)
 
     # TODO: ipfix needs to be separated from NAT base plugin
     @unittest.skipUnless(running_extended_tests, "part of extended tests")
     def test_session_limit_per_user(self):
         """ Deterministic NAT maximum sessions per user limit """
-        self.vapi.det44_add_del_map(is_add=1, in_addr=self.pg0.remote_ip4,
+        self.vclient.det44_add_del_map(is_add=1, in_addr=self.pg0.remote_ip4,
                                     in_plen=32,
                                     out_addr=socket.inet_aton(self.nat_addr),
                                     out_plen=32)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1, is_inside=1)
-        self.vapi.det44_interface_add_del_feature(
+        self.vclient.det44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1, is_inside=0)
-        self.vapi.set_ipfix_exporter(collector_address=self.pg2.remote_ip4,
+        self.vclient.set_ipfix_exporter(collector_address=self.pg2.remote_ip4,
                                      src_address=self.pg2.local_ip4,
                                      path_mtu=512,
                                      template_interval=10)
-        self.vapi.nat_ipfix_enable_disable(domain_id=1, src_port=4739,
+        self.vclient.nat_ipfix_enable_disable(domain_id=1, src_port=4739,
                                            enable=1)
 
         pkts = []
@@ -657,12 +657,12 @@ class TestDET44(VppTestCase):
         self.assertEqual(inner_ip[UDPerror].sport, 3001)
         self.assertEqual(inner_ip[UDPerror].dport, 3002)
 
-        dms = self.vapi.det44_map_dump()
+        dms = self.vclient.det44_map_dump()
 
         self.assertEqual(1000, dms[0].ses_num)
 
         # verify IPFIX logging
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         sleep(1)
         capture = self.pg2.get_capture(2)
         ipfix = IPFIXDecoder()
@@ -678,5 +678,5 @@ class TestDET44(VppTestCase):
                 self.verify_ipfix_max_entries_per_user(data,
                                                        1000,
                                                        self.pg0.remote_ip4)
-        self.vapi.nat_ipfix_enable_disable(domain_id=1, src_port=4739,
+        self.vclient.nat_ipfix_enable_disable(domain_id=1, src_port=4739,
                                            enable=0)
diff --git a/src/plugins/nat/test/test_dslite.py b/src/plugins/nat/test/test_dslite.py
index af256e39f..04418b130 100644
--- a/src/plugins/nat/test/test_dslite.py
+++ b/src/plugins/nat/test/test_dslite.py
@@ -16,17 +16,17 @@ from scapy.layers.inet6 import ICMPv6DestUnreach, IPerror6, IPv6ExtHdrFragment
 from scapy.layers.l2 import Ether, ARP, GRE
 from scapy.data import IP_PROTOS
 from scapy.packet import bind_layers, Raw
-from util import ppp
+from vpp_pom.util import ppp
 from ipfix import IPFIX, Set, Template, Data, IPFIXDecoder
 from time import sleep
-from util import ip4_range
+from vpp_pom.util import ip4_range
 from vpp_papi import mac_pton
 from syslog_rfc5424_parser import SyslogMessage, ParseError
 from syslog_rfc5424_parser.constants import SyslogFacility, SyslogSeverity
 from io import BytesIO
 from vpp_papi import VppEnum
-from vpp_ip_route import VppIpRoute, VppRoutePath, FibPathType
-from vpp_neighbor import VppNeighbor
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, FibPathType
+from vpp_pom.vpp_neighbor import VppNeighbor
 from scapy.all import bind_layers, Packet, ByteEnumField, ShortField, \
     IPField, IntField, LongField, XByteField, FlagsField, FieldLenField, \
     PacketListField
@@ -88,16 +88,16 @@ class TestDSlite(VppTestCase):
 
     def test_dslite(self):
         """ Test DS-Lite """
-        nat_config = self.vapi.nat_show_config()
+        nat_config = self.vclient.nat_show_config()
         self.assertEqual(0, nat_config.dslite_ce)
 
-        self.vapi.dslite_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.dslite_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                  end_addr=self.nat_addr,
                                                  is_add=1)
         aftr_ip4 = '192.0.0.1'
         aftr_ip6 = '2001:db8:85a3::8a2e:370:1'
-        self.vapi.dslite_set_aftr_addr(ip4_addr=aftr_ip4, ip6_addr=aftr_ip6)
-        self.vapi.syslog_set_sender(self.pg2.local_ip4, self.pg2.remote_ip4)
+        self.vclient.dslite_set_aftr_addr(ip4_addr=aftr_ip4, ip6_addr=aftr_ip6)
+        self.vclient.syslog_set_sender(self.pg2.local_ip4, self.pg2.remote_ip4)
 
         # UDP
         p = (Ether(dst=self.pg1.local_mac, src=self.pg1.remote_mac) /
@@ -216,19 +216,19 @@ class TestDSlite(VppTestCase):
         self.assertEqual(capture[IPv6].dst, self.pg1.remote_hosts[1].ip6)
         self.assertTrue(capture.haslayer(ICMPv6EchoReply))
 
-        b4s = self.statistics.get_counter('/dslite/total-b4s')
+        b4s = self.vclient.statistics.get_counter('/dslite/total-b4s')
         self.assertEqual(b4s[0][0], 2)
-        sessions = self.statistics.get_counter('/dslite/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/dslite/total-sessions')
         self.assertEqual(sessions[0][0], 3)
 
     def tearDown(self):
         super(TestDSlite, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show dslite pool"))
+        self.logger.info(self.vclient.cli("show dslite pool"))
         self.logger.info(
-            self.vapi.cli("show dslite aftr-tunnel-endpoint-address"))
-        self.logger.info(self.vapi.cli("show dslite sessions"))
+            self.vclient.cli("show dslite aftr-tunnel-endpoint-address"))
+        self.logger.info(self.vclient.cli("show dslite sessions"))
 
 
 class TestDSliteCE(VppTestCase):
@@ -265,19 +265,19 @@ class TestDSliteCE(VppTestCase):
         """ Test DS-Lite CE """
 
         # TODO: add message to retrieve dslite config
-        # nat_config = self.vapi.nat_show_config()
+        # nat_config = self.vclient.nat_show_config()
         # self.assertEqual(1, nat_config.dslite_ce)
 
         b4_ip4 = '192.0.0.2'
         b4_ip6 = '2001:db8:62aa::375e:f4c1:1'
-        self.vapi.dslite_set_b4_addr(ip4_addr=b4_ip4, ip6_addr=b4_ip6)
+        self.vclient.dslite_set_b4_addr(ip4_addr=b4_ip4, ip6_addr=b4_ip6)
 
         aftr_ip4 = '192.0.0.1'
         aftr_ip6 = '2001:db8:85a3::8a2e:370:1'
         aftr_ip6_n = socket.inet_pton(socket.AF_INET6, aftr_ip6)
-        self.vapi.dslite_set_aftr_addr(ip4_addr=aftr_ip4, ip6_addr=aftr_ip6)
+        self.vclient.dslite_set_aftr_addr(ip4_addr=aftr_ip4, ip6_addr=aftr_ip6)
 
-        r1 = VppIpRoute(self, aftr_ip6, 128,
+        r1 = VppIpRoute(self.vclient, aftr_ip6, 128,
                         [VppRoutePath(self.pg1.remote_ip6,
                                       self.pg1.sw_if_index)])
         r1.add_vpp_config()
@@ -334,6 +334,6 @@ class TestDSliteCE(VppTestCase):
 
     def show_commands_at_teardown(self):
         self.logger.info(
-            self.vapi.cli("show dslite aftr-tunnel-endpoint-address"))
+            self.vclient.cli("show dslite aftr-tunnel-endpoint-address"))
         self.logger.info(
-            self.vapi.cli("show dslite b4-tunnel-endpoint-address"))
+            self.vclient.cli("show dslite b4-tunnel-endpoint-address"))
diff --git a/src/plugins/nat/test/test_ipsec_nat.py b/src/plugins/nat/test/test_ipsec_nat.py
index dcedf64b5..29820f844 100644
--- a/src/plugins/nat/test/test_ipsec_nat.py
+++ b/src/plugins/nat/test/test_ipsec_nat.py
@@ -7,12 +7,12 @@ from scapy.layers.l2 import Ether
 from scapy.layers.inet import ICMP, IP, TCP, UDP
 from scapy.layers.ipsec import SecurityAssociation, ESP
 
-from util import ppp, ppc
+from vpp_pom.util import ppp, ppc
 from template_ipsec import TemplateIpsec
-from vpp_ipsec import VppIpsecSA, VppIpsecSpd, VppIpsecSpdEntry,\
+from vpp_pom.vpp_ipsec import VppIpsecSA, VppIpsecSpd, VppIpsecSpdEntry,\
         VppIpsecSpdItfBinding
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip import DpoProto
 from vpp_papi import VppEnum
 
 
@@ -50,17 +50,17 @@ class IPSecNATTestCase(TemplateIpsec):
         super(IPSecNATTestCase, self).setUp()
         self.tun_if = self.pg0
 
-        self.tun_spd = VppIpsecSpd(self, self.tun_spd_id)
+        self.tun_spd = VppIpsecSpd(self.vclient, self.tun_spd_id)
         self.tun_spd.add_vpp_config()
-        VppIpsecSpdItfBinding(self, self.tun_spd,
+        VppIpsecSpdItfBinding(self.vclient, self.tun_spd,
                               self.tun_if).add_vpp_config()
 
         p = self.ipv4_params
         self.config_esp_tun(p)
-        self.logger.info(self.vapi.ppcli("show ipsec all"))
+        self.logger.info(self.vclient.ppcli("show ipsec all"))
 
         d = DpoProto.DPO_PROTO_IP6 if p.is_ipv6 else DpoProto.DPO_PROTO_IP4
-        VppIpRoute(self,  p.remote_tun_if_host, p.addr_len,
+        VppIpRoute(self.vclient,  p.remote_tun_if_host, p.addr_len,
                    [VppRoutePath(self.tun_if.remote_addr[p.addr_type],
                                  0xffffffff,
                                  proto=d)]).add_vpp_config()
@@ -169,14 +169,14 @@ class IPSecNATTestCase(TemplateIpsec):
                  IPSEC_API_SAD_FLAG_UDP_ENCAP)
         e = VppEnum.vl_api_ipsec_spd_action_t
 
-        VppIpsecSA(self, scapy_tun_sa_id, scapy_tun_spi,
+        VppIpsecSA(self.vclient, scapy_tun_sa_id, scapy_tun_spi,
                    auth_algo_vpp_id, auth_key,
                    crypt_algo_vpp_id, crypt_key,
                    self.vpp_esp_protocol,
                    self.pg1.remote_addr[addr_type],
                    self.tun_if.remote_addr[addr_type],
                    flags=flags).add_vpp_config()
-        VppIpsecSA(self, vpp_tun_sa_id, vpp_tun_spi,
+        VppIpsecSA(self.vclient, vpp_tun_sa_id, vpp_tun_spi,
                    auth_algo_vpp_id, auth_key,
                    crypt_algo_vpp_id, crypt_key,
                    self.vpp_esp_protocol,
@@ -184,29 +184,29 @@ class IPSecNATTestCase(TemplateIpsec):
                    self.pg1.remote_addr[addr_type],
                    flags=flags).add_vpp_config()
 
-        VppIpsecSpdEntry(self, self.tun_spd, scapy_tun_sa_id,
+        VppIpsecSpdEntry(self.vclient, self.tun_spd, scapy_tun_sa_id,
                          addr_any, addr_bcast,
                          addr_any, addr_bcast,
                          socket.IPPROTO_ESP).add_vpp_config()
-        VppIpsecSpdEntry(self, self.tun_spd, scapy_tun_sa_id,
+        VppIpsecSpdEntry(self.vclient, self.tun_spd, scapy_tun_sa_id,
                          addr_any, addr_bcast,
                          addr_any, addr_bcast,
                          socket.IPPROTO_ESP,
                          is_outbound=0).add_vpp_config()
-        VppIpsecSpdEntry(self, self.tun_spd, scapy_tun_sa_id,
+        VppIpsecSpdEntry(self.vclient, self.tun_spd, scapy_tun_sa_id,
                          addr_any, addr_bcast,
                          addr_any, addr_bcast,
                          socket.IPPROTO_UDP,
                          remote_port_start=4500,
                          remote_port_stop=4500).add_vpp_config()
-        VppIpsecSpdEntry(self, self.tun_spd, scapy_tun_sa_id,
+        VppIpsecSpdEntry(self.vclient, self.tun_spd, scapy_tun_sa_id,
                          addr_any, addr_bcast,
                          addr_any, addr_bcast,
                          socket.IPPROTO_UDP,
                          remote_port_start=4500,
                          remote_port_stop=4500,
                          is_outbound=0).add_vpp_config()
-        VppIpsecSpdEntry(self, self.tun_spd, vpp_tun_sa_id,
+        VppIpsecSpdEntry(self.vclient, self.tun_spd, vpp_tun_sa_id,
                          self.tun_if.remote_addr[addr_type],
                          self.tun_if.remote_addr[addr_type],
                          self.pg1.remote_addr[addr_type],
@@ -214,7 +214,7 @@ class IPSecNATTestCase(TemplateIpsec):
                          0, priority=10,
                          policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                          is_outbound=0).add_vpp_config()
-        VppIpsecSpdEntry(self, self.tun_spd, scapy_tun_sa_id,
+        VppIpsecSpdEntry(self.vclient, self.tun_spd, scapy_tun_sa_id,
                          self.pg1.remote_addr[addr_type],
                          self.pg1.remote_addr[addr_type],
                          self.tun_if.remote_addr[addr_type],
diff --git a/src/plugins/nat/test/test_nat.py b/src/plugins/nat/test/test_nat.py
index d635abf98..a3f0c790f 100644
--- a/src/plugins/nat/test/test_nat.py
+++ b/src/plugins/nat/test/test_nat.py
@@ -24,12 +24,13 @@ from scapy.layers.l2 import Ether, ARP, GRE
 from scapy.packet import Raw
 from syslog_rfc5424_parser import SyslogMessage, ParseError
 from syslog_rfc5424_parser.constants import SyslogSeverity
-from util import ip4_range
-from util import ppc, ppp
-from vpp_acl import AclRule, VppAcl, VppAclInterface
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_neighbor import VppNeighbor
+from vpp_pom.util import ip4_range
+from vpp_pom.util import ppc, ppp
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl, VppAclInterface
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_neighbor import VppNeighbor
 from vpp_papi import VppEnum
+from vpp_pom.vpp_papi_provider import UnexpectedApiReturnValueError
 
 
 # NAT HA protocol event data
@@ -71,6 +72,13 @@ class HANATStateSync(Packet):
 class MethodHolder(VppTestCase):
     """ NAT create capture and verify method holder """
 
+    def setUp(self):
+        """ make sure nat44 is disabled """
+        try:
+            self.vclient.nat44_plugin_enable_disable(enable=0)
+        except UnexpectedApiReturnValueError:
+            pass
+
     @property
     def config_flags(self):
         return VppEnum.vl_api_nat_config_flags_t
@@ -83,6 +91,100 @@ class MethodHolder(VppTestCase):
     def SYSLOG_SEVERITY(self):
         return VppEnum.vl_api_syslog_severity_t
 
+    def clear_nat44(self):
+        """
+        Clear NAT44 configuration.
+        """
+        if hasattr(self, 'pg7') and hasattr(self, 'pg8'):
+            if self.pg7.has_ip4_config:
+                self.pg7.unconfig_ip4()
+
+        self.vclient.nat44_forwarding_enable_disable(enable=0)
+
+        interfaces = self.vclient.nat44_interface_addr_dump()
+        for intf in interfaces:
+            self.vclient.nat44_add_del_interface_addr(
+                is_add=0,
+                sw_if_index=intf.sw_if_index,
+                flags=intf.flags)
+
+        self.vclient.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
+                                           src_port=self.ipfix_src_port,
+                                           enable=0)
+        self.ipfix_src_port = 4739
+        self.ipfix_domain_id = 1
+
+        self.vclient.syslog_set_filter(
+            self.SYSLOG_SEVERITY.SYSLOG_API_SEVERITY_EMERG)
+
+        self.vclient.nat_ha_set_listener(ip_address='0.0.0.0', port=0,
+                                      path_mtu=512)
+        self.vclient.nat_ha_set_failover(ip_address='0.0.0.0', port=0,
+                                      session_refresh_interval=10)
+
+        interfaces = self.vclient.nat44_interface_dump()
+        for intf in interfaces:
+            if intf.flags & self.config_flags.NAT_IS_INSIDE and \
+                    intf.flags & self.config_flags.NAT_IS_OUTSIDE:
+                self.vclient.nat44_interface_add_del_feature(
+                    sw_if_index=intf.sw_if_index)
+            self.vclient.nat44_interface_add_del_feature(
+                sw_if_index=intf.sw_if_index,
+                flags=intf.flags)
+
+        interfaces = self.vclient.nat44_interface_output_feature_dump()
+        for intf in interfaces:
+            self.vclient.nat44_interface_add_del_output_feature(
+                is_add=0,
+                flags=intf.flags,
+                sw_if_index=intf.sw_if_index)
+        static_mappings = self.vclient.nat44_static_mapping_dump()
+        for sm in static_mappings:
+            self.vclient.nat44_add_del_static_mapping(
+                is_add=0,
+                local_ip_address=sm.local_ip_address,
+                external_ip_address=sm.external_ip_address,
+                external_sw_if_index=sm.external_sw_if_index,
+                local_port=sm.local_port,
+                external_port=sm.external_port,
+                vrf_id=sm.vrf_id,
+                protocol=sm.protocol,
+                flags=sm.flags, tag=sm.tag)
+
+        lb_static_mappings = self.vclient.nat44_lb_static_mapping_dump()
+        for lb_sm in lb_static_mappings:
+            self.vclient.nat44_add_del_lb_static_mapping(
+                is_add=0,
+                flags=lb_sm.flags,
+                external_addr=lb_sm.external_addr,
+                external_port=lb_sm.external_port,
+                protocol=lb_sm.protocol,
+                local_num=0, locals=[],
+                tag=lb_sm.tag)
+
+        identity_mappings = self.vclient.nat44_identity_mapping_dump()
+        for id_m in identity_mappings:
+            self.vclient.nat44_add_del_identity_mapping(
+                ip_address=id_m.ip_address,
+                sw_if_index=id_m.sw_if_index,
+                port=id_m.port,
+                flags=id_m.flags,
+                vrf_id=id_m.vrf_id,
+                protocol=id_m.protocol)
+
+        addresses = self.vclient.nat44_address_dump()
+        for addr in addresses:
+            self.vclient.nat44_add_del_address_range(
+                first_ip_address=addr.ip_address,
+                last_ip_address=addr.ip_address,
+                vrf_id=0xFFFFFFFF, flags=addr.flags)
+
+        self.verify_no_nat44_user()
+        self.vclient.nat_set_timeouts(udp=300, tcp_established=7440,
+                                   tcp_transitory=240, icmp=60)
+        self.vclient.nat_set_addr_and_port_alloc_alg()
+        self.vclient.nat_set_mss_clamping(enable=0, mss_value=1500)
+
     def nat44_add_static_mapping(self, local_ip, external_ip='0.0.0.0',
                                  local_port=0, external_port=0, vrf_id=0,
                                  is_add=1, external_sw_if_index=0xFFFFFFFF,
@@ -105,7 +207,7 @@ class MethodHolder(VppTestCase):
         if not (local_port and external_port):
             flags |= self.config_flags.NAT_IS_ADDR_ONLY
 
-        self.vapi.nat44_add_del_static_mapping(
+        self.vclient.nat44_add_del_static_mapping(
             is_add=is_add,
             local_ip_address=local_ip,
             external_ip_address=external_ip,
@@ -125,7 +227,7 @@ class MethodHolder(VppTestCase):
         :param twice_nat: twice NAT address for external hosts
         """
         flags = self.config_flags.NAT_IS_TWICE_NAT if twice_nat else 0
-        self.vapi.nat44_add_del_address_range(first_ip_address=ip,
+        self.vclient.nat44_add_del_address_range(first_ip_address=ip,
                                               last_ip_address=ip,
                                               vrf_id=vrf_id,
                                               is_add=is_add,
@@ -781,11 +883,11 @@ class MethodHolder(VppTestCase):
 
     def verify_no_nat44_user(self):
         """ Verify that there is no NAT44 user """
-        users = self.vapi.nat44_user_dump()
+        users = self.vclient.nat44_user_dump()
         self.assertEqual(len(users), 0)
-        users = self.statistics.get_counter('/nat44/total-users')
+        users = self.vclient.statistics.get_counter('/nat44/total-users')
         self.assertEqual(users[0][0], 0)
-        sessions = self.statistics.get_counter('/nat44/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/nat44/total-sessions')
         self.assertEqual(sessions[0][0], 0)
 
     def verify_ipfix_max_entries_per_user(self, data, limit, src_addr):
@@ -1168,19 +1270,19 @@ class TestNATMisc(MethodHolder):
 
     def setUp(self):
         super(TestNATMisc, self).setUp()
-        self.vapi.nat44_plugin_enable_disable(
+        self.vclient.nat44_plugin_enable_disable(
             sessions=self.max_translations,
             users=self.max_users, enable=1)
 
     def tearDown(self):
         super(TestNATMisc, self).tearDown()
         if not self.vpp_dead:
-            self.vapi.nat44_plugin_enable_disable(enable=0)
-            self.vapi.cli("clear logging")
+            self.vclient.nat44_plugin_enable_disable(enable=0)
+            self.vclient.cli("clear logging")
 
     def test_show_max_translations(self):
         """ API test - max translations per thread """
-        nat_config = self.vapi.nat_show_config_2()
+        nat_config = self.vclient.nat_show_config_2()
         self.assertEqual(self.max_translations,
                          nat_config.max_translations_per_thread)
 
@@ -1194,7 +1296,7 @@ class TestNAT44(MethodHolder):
     @classmethod
     def setUpClass(cls):
         super(TestNAT44, cls).setUpClass()
-        cls.vapi.cli("set log class nat level debug")
+        cls.vclient.cli("set log class nat level debug")
 
         cls.tcp_port_in = 6303
         cls.tcp_port_out = 6303
@@ -1223,8 +1325,8 @@ class TestNAT44(MethodHolder):
         cls.pg1.configure_ipv4_neighbors()
 
         cls.overlapping_interfaces = list(list(cls.pg_interfaces[4:7]))
-        cls.vapi.ip_table_add_del(is_add=1, table={'table_id': 10})
-        cls.vapi.ip_table_add_del(is_add=1, table={'table_id': 20})
+        cls.vclient.ip_table_add_del(is_add=1, table={'table_id': 10})
+        cls.vclient.ip_table_add_del(is_add=1, table={'table_id': 20})
 
         cls.pg4._local_ip4 = "172.16.255.1"
         cls.pg4._remote_hosts[0]._ip4 = "172.16.255.2"
@@ -1245,7 +1347,7 @@ class TestNAT44(MethodHolder):
 
         cls.pg9.generate_remote_hosts(2)
         cls.pg9.config_ip4()
-        cls.vapi.sw_interface_add_del_address(
+        cls.vclient.sw_interface_add_del_address(
             sw_if_index=cls.pg9.sw_if_index,
             prefix="10.0.0.1/24")
 
@@ -1257,7 +1359,7 @@ class TestNAT44(MethodHolder):
 
     def setUp(self):
         super(TestNAT44, self).setUp()
-        self.vapi.nat44_plugin_enable_disable(
+        self.vclient.nat44_plugin_enable_disable(
             sessions=self.max_translations,
             users=self.max_users, enable=1)
 
@@ -1268,28 +1370,28 @@ class TestNAT44(MethodHolder):
     def tearDown(self):
         super(TestNAT44, self).tearDown()
         if not self.vpp_dead:
-            self.vapi.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
+            self.vclient.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
                                                src_port=self.ipfix_src_port,
                                                enable=0)
             self.ipfix_src_port = 4739
             self.ipfix_domain_id = 1
 
-            self.vapi.nat44_plugin_enable_disable(enable=0)
-            self.vapi.cli("clear logging")
+            self.vclient.nat44_plugin_enable_disable(enable=0)
+            self.vclient.cli("clear logging")
 
     def test_clear_sessions(self):
         """ NAT44 session clearing test """
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
-        nat_config = self.vapi.nat_show_config()
+        nat_config = self.vclient.nat_show_config()
         self.assertEqual(0, nat_config.endpoint_dependent)
 
         pkts = self.create_stream_in(self.pg0, self.pg1)
@@ -1299,13 +1401,13 @@ class TestNAT44(MethodHolder):
         capture = self.pg1.get_capture(len(pkts))
         self.verify_capture_out(capture)
 
-        sessions = self.statistics.get_counter('/nat44/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/nat44/total-sessions')
         self.assertTrue(sessions[0][0] > 0)
         self.logger.info("sessions before clearing: %s" % sessions[0][0])
 
-        self.vapi.cli("clear nat44 sessions")
+        self.vclient.cli("clear nat44 sessions")
 
-        sessions = self.statistics.get_counter('/nat44/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/nat44/total-sessions')
         self.assertEqual(sessions[0][0], 0)
         self.logger.info("sessions after clearing: %s" % sessions[0][0])
 
@@ -1313,18 +1415,18 @@ class TestNAT44(MethodHolder):
         """ NAT44 dynamic translation test """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
         # in2out
-        tcpn = self.statistics.get_counter('/nat44/in2out/slowpath/tcp')[0]
-        udpn = self.statistics.get_counter('/nat44/in2out/slowpath/udp')[0]
-        icmpn = self.statistics.get_counter('/nat44/in2out/slowpath/icmp')[0]
-        drops = self.statistics.get_counter('/nat44/in2out/slowpath/drops')[0]
+        tcpn = self.vclient.statistics.get_counter('/nat44/in2out/slowpath/tcp')[0]
+        udpn = self.vclient.statistics.get_counter('/nat44/in2out/slowpath/udp')[0]
+        icmpn = self.vclient.statistics.get_counter('/nat44/in2out/slowpath/icmp')[0]
+        drops = self.vclient.statistics.get_counter('/nat44/in2out/slowpath/drops')[0]
 
         pkts = self.create_stream_in(self.pg0, self.pg1)
         self.pg0.add_stream(pkts)
@@ -1334,20 +1436,20 @@ class TestNAT44(MethodHolder):
         self.verify_capture_out(capture)
 
         if_idx = self.pg0.sw_if_index
-        cnt = self.statistics.get_counter('/nat44/in2out/slowpath/tcp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/in2out/slowpath/tcp')[0]
         self.assertEqual(cnt[if_idx] - tcpn[if_idx], 2)
-        cnt = self.statistics.get_counter('/nat44/in2out/slowpath/udp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/in2out/slowpath/udp')[0]
         self.assertEqual(cnt[if_idx] - udpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat44/in2out/slowpath/icmp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/in2out/slowpath/icmp')[0]
         self.assertEqual(cnt[if_idx] - icmpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat44/in2out/slowpath/drops')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/in2out/slowpath/drops')[0]
         self.assertEqual(cnt[if_idx] - drops[if_idx], 0)
 
         # out2in
-        tcpn = self.statistics.get_counter('/nat44/out2in/slowpath/tcp')[0]
-        udpn = self.statistics.get_counter('/nat44/out2in/slowpath/udp')[0]
-        icmpn = self.statistics.get_counter('/nat44/out2in/slowpath/icmp')[0]
-        drops = self.statistics.get_counter('/nat44/out2in/slowpath/drops')[0]
+        tcpn = self.vclient.statistics.get_counter('/nat44/out2in/slowpath/tcp')[0]
+        udpn = self.vclient.statistics.get_counter('/nat44/out2in/slowpath/udp')[0]
+        icmpn = self.vclient.statistics.get_counter('/nat44/out2in/slowpath/icmp')[0]
+        drops = self.vclient.statistics.get_counter('/nat44/out2in/slowpath/drops')[0]
 
         pkts = self.create_stream_out(self.pg1)
         self.pg1.add_stream(pkts)
@@ -1357,18 +1459,18 @@ class TestNAT44(MethodHolder):
         self.verify_capture_in(capture, self.pg0)
 
         if_idx = self.pg1.sw_if_index
-        cnt = self.statistics.get_counter('/nat44/out2in/slowpath/tcp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/out2in/slowpath/tcp')[0]
         self.assertEqual(cnt[if_idx] - tcpn[if_idx], 2)
-        cnt = self.statistics.get_counter('/nat44/out2in/slowpath/udp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/out2in/slowpath/udp')[0]
         self.assertEqual(cnt[if_idx] - udpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat44/out2in/slowpath/icmp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/out2in/slowpath/icmp')[0]
         self.assertEqual(cnt[if_idx] - icmpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat44/out2in/slowpath/drops')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/out2in/slowpath/drops')[0]
         self.assertEqual(cnt[if_idx] - drops[if_idx], 0)
 
-        users = self.statistics.get_counter('/nat44/total-users')
+        users = self.vclient.statistics.get_counter('/nat44/total-users')
         self.assertEqual(users[0][0], 1)
-        sessions = self.statistics.get_counter('/nat44/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/nat44/total-sessions')
         self.assertEqual(sessions[0][0], 3)
 
     def test_dynamic_icmp_errors_in2out_ttl_1(self):
@@ -1376,10 +1478,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -1398,10 +1500,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -1429,10 +1531,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -1460,10 +1562,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -1499,10 +1601,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -1530,10 +1632,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_static_mapping(self.pg0.remote_ip4, self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -1563,18 +1665,18 @@ class TestNAT44(MethodHolder):
         """ NAT44 forwarding test """
 
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
 
         real_ip = self.pg0.remote_ip4
         alias_ip = self.nat_addr
         flags = self.config_flags.NAT_IS_ADDR_ONLY
-        self.vapi.nat44_add_del_static_mapping(is_add=1,
+        self.vclient.nat44_add_del_static_mapping(is_add=1,
                                                local_ip_address=real_ip,
                                                external_ip_address=alias_ip,
                                                external_sw_if_index=0xFFFFFFFF,
@@ -1622,9 +1724,9 @@ class TestNAT44(MethodHolder):
                 self.pg0.remote_hosts[0] = host0
 
         finally:
-            self.vapi.nat44_forwarding_enable_disable(enable=0)
+            self.vclient.nat44_forwarding_enable_disable(enable=0)
             flags = self.config_flags.NAT_IS_ADDR_ONLY
-            self.vapi.nat44_add_del_static_mapping(
+            self.vclient.nat44_add_del_static_mapping(
                 is_add=0,
                 local_ip_address=real_ip,
                 external_ip_address=alias_ip,
@@ -1641,13 +1743,13 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_static_mapping(self.pg0.remote_ip4, nat_ip)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        sm = self.vapi.nat44_static_mapping_dump()
+        sm = self.vclient.nat44_static_mapping_dump()
         self.assertEqual(len(sm), 1)
         self.assertEqual(sm[0].tag, '')
         self.assertEqual(sm[0].protocol, 0)
@@ -1681,13 +1783,13 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_static_mapping(self.pg0.remote_ip4, nat_ip, tag=tag)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        sm = self.vapi.nat44_static_mapping_dump()
+        sm = self.vclient.nat44_static_mapping_dump()
         self.assertEqual(len(sm), 1)
         self.assertEqual(sm[0].tag, tag)
 
@@ -1725,10 +1827,10 @@ class TestNAT44(MethodHolder):
                                       self.icmp_id_in, self.icmp_id_out,
                                       proto=IP_PROTOS.icmp)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -1766,10 +1868,10 @@ class TestNAT44(MethodHolder):
                                       self.icmp_id_in, self.icmp_id_out,
                                       proto=IP_PROTOS.icmp)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -1803,13 +1905,13 @@ class TestNAT44(MethodHolder):
         self.nat44_add_static_mapping(self.pg0.remote_ip4, nat_ip2,
                                       vrf_id=10)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg3.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg4.sw_if_index,
             flags=flags, is_add=1)
 
@@ -1838,10 +1940,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -1855,7 +1957,7 @@ class TestNAT44(MethodHolder):
 
         # 1:1NAT
         self.nat44_add_static_mapping(self.pg0.remote_ip4, nat_ip)
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         self.assertEqual(len(sessions), 0)
         pkts = self.create_stream_in(self.pg0, self.pg1)
         self.pg0.add_stream(pkts)
@@ -1867,14 +1969,14 @@ class TestNAT44(MethodHolder):
     def test_identity_nat(self):
         """ Identity NAT """
         flags = self.config_flags.NAT_IS_ADDR_ONLY
-        self.vapi.nat44_add_del_identity_mapping(
+        self.vclient.nat44_add_del_identity_mapping(
             ip_address=self.pg0.remote_ip4, sw_if_index=0xFFFFFFFF,
             flags=flags, is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -1898,13 +2000,13 @@ class TestNAT44(MethodHolder):
             self.logger.error(ppp("Unexpected or invalid packet:", p))
             raise
 
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         self.assertEqual(len(sessions), 0)
         flags = self.config_flags.NAT_IS_ADDR_ONLY
-        self.vapi.nat44_add_del_identity_mapping(
+        self.vclient.nat44_add_del_identity_mapping(
             ip_address=self.pg0.remote_ip4, sw_if_index=0xFFFFFFFF,
             flags=flags, vrf_id=1, is_add=1)
-        identity_mappings = self.vapi.nat44_identity_mapping_dump()
+        identity_mappings = self.vclient.nat44_identity_mapping_dump()
         self.assertEqual(len(identity_mappings), 2)
 
     def test_multiple_inside_interfaces(self):
@@ -1912,13 +2014,13 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg3.sw_if_index,
             is_add=1)
 
@@ -1976,16 +2078,16 @@ class TestNAT44(MethodHolder):
         static_nat_ip = "10.0.0.10"
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg3.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg4.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg5.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg6.sw_if_index,
             flags=flags, is_add=1)
         self.nat44_add_static_mapping(self.pg6.remote_ip4, static_nat_ip,
@@ -2052,9 +2154,9 @@ class TestNAT44(MethodHolder):
         self.verify_capture_in(capture, self.pg5)
 
         # pg5 session dump
-        addresses = self.vapi.nat44_address_dump()
+        addresses = self.vclient.nat44_address_dump()
         self.assertEqual(len(addresses), 1)
-        sessions = self.vapi.nat44_user_session_dump(self.pg5.remote_ip4, 10)
+        sessions = self.vclient.nat44_user_session_dump(self.pg5.remote_ip4, 10)
         self.assertEqual(len(sessions), 3)
         for session in sessions:
             self.assertFalse(session.flags & self.config_flags.NAT_IS_STATIC)
@@ -2089,12 +2191,12 @@ class TestNAT44(MethodHolder):
         self.verify_capture_in(capture, self.pg6)
 
         # general user and session dump verifications
-        users = self.vapi.nat44_user_dump()
+        users = self.vclient.nat44_user_dump()
         self.assertGreaterEqual(len(users), 3)
-        addresses = self.vapi.nat44_address_dump()
+        addresses = self.vclient.nat44_address_dump()
         self.assertEqual(len(addresses), 1)
         for user in users:
-            sessions = self.vapi.nat44_user_session_dump(user.ip_address,
+            sessions = self.vclient.nat44_user_session_dump(user.ip_address,
                                                          user.vrf_id)
             for session in sessions:
                 self.assertEqual(user.ip_address, session.inside_ip_address)
@@ -2106,7 +2208,7 @@ class TestNAT44(MethodHolder):
                                  self.config_flags.NAT_IS_EXT_HOST_VALID)
 
         # pg4 session dump
-        sessions = self.vapi.nat44_user_session_dump(self.pg4.remote_ip4, 10)
+        sessions = self.vclient.nat44_user_session_dump(self.pg4.remote_ip4, 10)
         self.assertGreaterEqual(len(sessions), 4)
         for session in sessions:
             self.assertFalse(session.flags & self.config_flags.NAT_IS_STATIC)
@@ -2116,7 +2218,7 @@ class TestNAT44(MethodHolder):
                              addresses[0].ip_address)
 
         # pg6 session dump
-        sessions = self.vapi.nat44_user_session_dump(self.pg6.remote_ip4, 20)
+        sessions = self.vclient.nat44_user_session_dump(self.pg6.remote_ip4, 20)
         self.assertGreaterEqual(len(sessions), 3)
         for session in sessions:
             self.assertTrue(session.flags & self.config_flags.NAT_IS_STATIC)
@@ -2140,10 +2242,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -2152,7 +2254,7 @@ class TestNAT44(MethodHolder):
                                       server_in_port, server_out_port,
                                       proto=IP_PROTOS.tcp)
 
-        cnt = self.statistics.get_counter('/nat44/hairpinning')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/hairpinning')[0]
         # send packet from host to server
         p = (Ether(src=host.mac, dst=self.pg0.local_mac) /
              IP(src=host.ip4, dst=self.nat_addr) /
@@ -2175,7 +2277,7 @@ class TestNAT44(MethodHolder):
             self.logger.error(ppp("Unexpected or invalid packet:", p))
             raise
 
-        after = self.statistics.get_counter('/nat44/hairpinning')[0]
+        after = self.vclient.statistics.get_counter('/nat44/hairpinning')[0]
         if_idx = self.pg0.sw_if_index
         self.assertEqual(after[if_idx] - cnt[if_idx], 1)
 
@@ -2200,7 +2302,7 @@ class TestNAT44(MethodHolder):
             self.logger.error(ppp("Unexpected or invalid packet:", p))
             raise
 
-        after = self.statistics.get_counter('/nat44/hairpinning')[0]
+        after = self.vclient.statistics.get_counter('/nat44/hairpinning')[0]
         if_idx = self.pg0.sw_if_index
         self.assertEqual(after[if_idx] - cnt[if_idx], 2)
 
@@ -2217,10 +2319,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -2376,30 +2478,30 @@ class TestNAT44(MethodHolder):
 
     def test_interface_addr(self):
         """ Acquire NAT44 addresses from interface """
-        self.vapi.nat44_add_del_interface_addr(
+        self.vclient.nat44_add_del_interface_addr(
             is_add=1,
             sw_if_index=self.pg7.sw_if_index)
 
         # no address in NAT pool
-        addresses = self.vapi.nat44_address_dump()
+        addresses = self.vclient.nat44_address_dump()
         self.assertEqual(0, len(addresses))
 
         # configure interface address and check NAT address pool
         self.pg7.config_ip4()
-        addresses = self.vapi.nat44_address_dump()
+        addresses = self.vclient.nat44_address_dump()
         self.assertEqual(1, len(addresses))
         self.assertEqual(str(addresses[0].ip_address), self.pg7.local_ip4)
 
         # remove interface address and check NAT address pool
         self.pg7.unconfig_ip4()
-        addresses = self.vapi.nat44_address_dump()
+        addresses = self.vclient.nat44_address_dump()
         self.assertEqual(0, len(addresses))
 
     def test_interface_addr_static_mapping(self):
         """ Static mapping with addresses from interface """
         tag = "testTAG"
 
-        self.vapi.nat44_add_del_interface_addr(
+        self.vclient.nat44_add_del_interface_addr(
             is_add=1,
             sw_if_index=self.pg7.sw_if_index)
         self.nat44_add_static_mapping(
@@ -2408,7 +2510,7 @@ class TestNAT44(MethodHolder):
             tag=tag)
 
         # static mappings with external interface
-        static_mappings = self.vapi.nat44_static_mapping_dump()
+        static_mappings = self.vclient.nat44_static_mapping_dump()
         self.assertEqual(1, len(static_mappings))
         self.assertEqual(self.pg7.sw_if_index,
                          static_mappings[0].external_sw_if_index)
@@ -2416,7 +2518,7 @@ class TestNAT44(MethodHolder):
 
         # configure interface address and check static mappings
         self.pg7.config_ip4()
-        static_mappings = self.vapi.nat44_static_mapping_dump()
+        static_mappings = self.vclient.nat44_static_mapping_dump()
         self.assertEqual(2, len(static_mappings))
         resolved = False
         for sm in static_mappings:
@@ -2429,7 +2531,7 @@ class TestNAT44(MethodHolder):
 
         # remove interface address and check static mappings
         self.pg7.unconfig_ip4()
-        static_mappings = self.vapi.nat44_static_mapping_dump()
+        static_mappings = self.vclient.nat44_static_mapping_dump()
         self.assertEqual(1, len(static_mappings))
         self.assertEqual(self.pg7.sw_if_index,
                          static_mappings[0].external_sw_if_index)
@@ -2437,7 +2539,7 @@ class TestNAT44(MethodHolder):
 
         # configure interface address again and check static mappings
         self.pg7.config_ip4()
-        static_mappings = self.vapi.nat44_static_mapping_dump()
+        static_mappings = self.vclient.nat44_static_mapping_dump()
         self.assertEqual(2, len(static_mappings))
         resolved = False
         for sm in static_mappings:
@@ -2454,17 +2556,17 @@ class TestNAT44(MethodHolder):
             external_sw_if_index=self.pg7.sw_if_index,
             tag=tag,
             is_add=0)
-        static_mappings = self.vapi.nat44_static_mapping_dump()
+        static_mappings = self.vclient.nat44_static_mapping_dump()
         self.assertEqual(0, len(static_mappings))
 
     def test_interface_addr_identity_nat(self):
         """ Identity NAT with addresses from interface """
 
         port = 53053
-        self.vapi.nat44_add_del_interface_addr(
+        self.vclient.nat44_add_del_interface_addr(
             is_add=1,
             sw_if_index=self.pg7.sw_if_index)
-        self.vapi.nat44_add_del_identity_mapping(
+        self.vclient.nat44_add_del_identity_mapping(
             ip_address=b'0',
             sw_if_index=self.pg7.sw_if_index,
             port=port,
@@ -2472,14 +2574,14 @@ class TestNAT44(MethodHolder):
             is_add=1)
 
         # identity mappings with external interface
-        identity_mappings = self.vapi.nat44_identity_mapping_dump()
+        identity_mappings = self.vclient.nat44_identity_mapping_dump()
         self.assertEqual(1, len(identity_mappings))
         self.assertEqual(self.pg7.sw_if_index,
                          identity_mappings[0].sw_if_index)
 
         # configure interface address and check identity mappings
         self.pg7.config_ip4()
-        identity_mappings = self.vapi.nat44_identity_mapping_dump()
+        identity_mappings = self.vclient.nat44_identity_mapping_dump()
         resolved = False
         self.assertEqual(2, len(identity_mappings))
         for sm in identity_mappings:
@@ -2493,7 +2595,7 @@ class TestNAT44(MethodHolder):
 
         # remove interface address and check identity mappings
         self.pg7.unconfig_ip4()
-        identity_mappings = self.vapi.nat44_identity_mapping_dump()
+        identity_mappings = self.vclient.nat44_identity_mapping_dump()
         self.assertEqual(1, len(identity_mappings))
         self.assertEqual(self.pg7.sw_if_index,
                          identity_mappings[0].sw_if_index)
@@ -2506,18 +2608,18 @@ class TestNAT44(MethodHolder):
         bind_layers(UDP, IPFIX, dport=30303)
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.set_ipfix_exporter(collector_address=self.pg3.remote_ip4,
+        self.vclient.set_ipfix_exporter(collector_address=self.pg3.remote_ip4,
                                      src_address=self.pg3.local_ip4,
                                      path_mtu=512,
                                      template_interval=10,
                                      collector_port=collector_port)
-        self.vapi.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
+        self.vclient.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
                                            src_port=self.ipfix_src_port,
                                            enable=1)
 
@@ -2528,7 +2630,7 @@ class TestNAT44(MethodHolder):
         capture = self.pg1.get_capture(len(pkts))
         self.verify_capture_out(capture)
         self.nat44_add_address(self.nat_addr, is_add=0)
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         capture = self.pg3.get_capture(7)
         ipfix = IPFIXDecoder()
         # first load template
@@ -2551,17 +2653,17 @@ class TestNAT44(MethodHolder):
     def test_ipfix_addr_exhausted(self):
         """ IPFIX logging NAT addresses exhausted """
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.set_ipfix_exporter(collector_address=self.pg3.remote_ip4,
+        self.vclient.set_ipfix_exporter(collector_address=self.pg3.remote_ip4,
                                      src_address=self.pg3.local_ip4,
                                      path_mtu=512,
                                      template_interval=10)
-        self.vapi.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
+        self.vclient.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
                                            src_port=self.ipfix_src_port,
                                            enable=1)
 
@@ -2573,7 +2675,7 @@ class TestNAT44(MethodHolder):
         self.pg_start()
         self.pg1.assert_nothing_captured()
         sleep(1)
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         capture = self.pg3.get_capture(7)
         ipfix = IPFIXDecoder()
         # first load template
@@ -2598,10 +2700,10 @@ class TestNAT44(MethodHolder):
         """ IPFIX logging maximum session entries exceeded """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -2619,11 +2721,11 @@ class TestNAT44(MethodHolder):
         self.pg_start()
 
         self.pg1.get_capture(max_sessions)
-        self.vapi.set_ipfix_exporter(collector_address=self.pg3.remote_ip4,
+        self.vclient.set_ipfix_exporter(collector_address=self.pg3.remote_ip4,
                                      src_address=self.pg3.local_ip4,
                                      path_mtu=512,
                                      template_interval=10)
-        self.vapi.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
+        self.vclient.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
                                            src_port=self.ipfix_src_port,
                                            enable=1)
 
@@ -2635,7 +2737,7 @@ class TestNAT44(MethodHolder):
         self.pg_start()
         self.pg1.assert_nothing_captured()
         sleep(1)
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         capture = self.pg3.get_capture(7)
         ipfix = IPFIXDecoder()
         # first load template
@@ -2657,15 +2759,15 @@ class TestNAT44(MethodHolder):
 
     def test_syslog_apmap(self):
         """ Test syslog address and port mapping creation and deletion """
-        self.vapi.syslog_set_filter(
+        self.vclient.syslog_set_filter(
             self.SYSLOG_SEVERITY.SYSLOG_API_SEVERITY_INFO)
-        self.vapi.syslog_set_sender(self.pg3.local_ip4, self.pg3.remote_ip4)
+        self.vclient.syslog_set_sender(self.pg3.local_ip4, self.pg3.remote_ip4)
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -2691,10 +2793,10 @@ class TestNAT44(MethodHolder):
         static_addr = '10.0.0.10'
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
         self.nat44_add_static_mapping(self.pg0.remote_ip4, static_addr)
@@ -2761,8 +2863,8 @@ class TestNAT44(MethodHolder):
 
         self.pg0.unconfig_ip4()
         self.pg1.unconfig_ip4()
-        self.vapi.ip_table_add_del(is_add=1, table={'table_id': vrf_id1})
-        self.vapi.ip_table_add_del(is_add=1, table={'table_id': vrf_id2})
+        self.vclient.ip_table_add_del(is_add=1, table={'table_id': vrf_id1})
+        self.vclient.ip_table_add_del(is_add=1, table={'table_id': vrf_id2})
         self.pg0.set_table_ip4(vrf_id1)
         self.pg1.set_table_ip4(vrf_id2)
         self.pg0.config_ip4()
@@ -2773,13 +2875,13 @@ class TestNAT44(MethodHolder):
         self.nat44_add_address(nat_ip1, vrf_id=vrf_id1)
         self.nat44_add_address(nat_ip2, vrf_id=vrf_id2)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg2.sw_if_index,
             is_add=1)
 
@@ -2809,8 +2911,8 @@ class TestNAT44(MethodHolder):
             self.pg1.config_ip4()
             self.pg0.resolve_arp()
             self.pg1.resolve_arp()
-            self.vapi.ip_table_add_del(is_add=0, table={'table_id': vrf_id1})
-            self.vapi.ip_table_add_del(is_add=0, table={'table_id': vrf_id2})
+            self.vclient.ip_table_add_del(is_add=0, table={'table_id': vrf_id1})
+            self.vclient.ip_table_add_del(is_add=0, table={'table_id': vrf_id2})
 
     def test_vrf_feature_independent(self):
         """ NAT44 tenant VRF independent address pool mode """
@@ -2821,13 +2923,13 @@ class TestNAT44(MethodHolder):
         self.nat44_add_address(nat_ip1)
         self.nat44_add_address(nat_ip2, vrf_id=99)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg2.sw_if_index,
             is_add=1)
 
@@ -2848,21 +2950,21 @@ class TestNAT44(MethodHolder):
         self.verify_capture_out(capture, nat_ip1)
 
     def create_routes_and_neigbors(self):
-        r1 = VppIpRoute(self, self.pg7.remote_ip4, 32,
+        r1 = VppIpRoute(self.vclient, self.pg7.remote_ip4, 32,
                         [VppRoutePath(self.pg7.remote_ip4,
                                       self.pg7.sw_if_index)])
-        r2 = VppIpRoute(self, self.pg8.remote_ip4, 32,
+        r2 = VppIpRoute(self.vclient, self.pg8.remote_ip4, 32,
                         [VppRoutePath(self.pg8.remote_ip4,
                                       self.pg8.sw_if_index)])
         r1.add_vpp_config()
         r2.add_vpp_config()
 
-        n1 = VppNeighbor(self,
+        n1 = VppNeighbor(self.vclient,
                          self.pg7.sw_if_index,
                          self.pg7.remote_mac,
                          self.pg7.remote_ip4,
                          is_static=1)
-        n2 = VppNeighbor(self,
+        n2 = VppNeighbor(self.vclient,
                          self.pg8.sw_if_index,
                          self.pg8.remote_mac,
                          self.pg8.remote_ip4,
@@ -2875,10 +2977,10 @@ class TestNAT44(MethodHolder):
         self.create_routes_and_neigbors()
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg7.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg8.sw_if_index,
             is_add=1)
 
@@ -2904,10 +3006,10 @@ class TestNAT44(MethodHolder):
         self.create_routes_and_neigbors()
         self.nat44_add_static_mapping(self.pg7.remote_ip4, self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg7.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg8.sw_if_index,
             is_add=1)
 
@@ -2946,10 +3048,10 @@ class TestNAT44(MethodHolder):
                                       self.icmp_id_in, self.icmp_id_out,
                                       proto=IP_PROTOS.icmp)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg7.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg8.sw_if_index,
             is_add=1)
 
@@ -2974,10 +3076,10 @@ class TestNAT44(MethodHolder):
         nat_ip = "10.0.0.10"
         self.nat44_add_static_mapping(self.pg0.remote_ip4, nat_ip)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -3033,10 +3135,10 @@ class TestNAT44(MethodHolder):
         self.nat44_add_static_mapping(host.ip4, host_nat_ip)
         self.nat44_add_static_mapping(server.ip4, server_nat_ip)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -3084,13 +3186,13 @@ class TestNAT44(MethodHolder):
         """ NAT44 interface output feature (in2out postrouting) """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1, flags=flags,
             sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1, flags=flags,
             sw_if_index=self.pg1.sw_if_index)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1,
             sw_if_index=self.pg3.sw_if_index)
 
@@ -3123,11 +3225,11 @@ class TestNAT44(MethodHolder):
         nat_ip_vrf10 = "10.0.0.10"
         nat_ip_vrf20 = "10.0.0.20"
 
-        r1 = VppIpRoute(self, self.pg3.remote_ip4, 32,
+        r1 = VppIpRoute(self.vclient, self.pg3.remote_ip4, 32,
                         [VppRoutePath(self.pg3.remote_ip4,
                                       self.pg3.sw_if_index)],
                         table_id=10)
-        r2 = VppIpRoute(self, self.pg3.remote_ip4, 32,
+        r2 = VppIpRoute(self.vclient, self.pg3.remote_ip4, 32,
                         [VppRoutePath(self.pg3.remote_ip4,
                                       self.pg3.sw_if_index)],
                         table_id=20)
@@ -3137,13 +3239,13 @@ class TestNAT44(MethodHolder):
         self.nat44_add_address(nat_ip_vrf10, vrf_id=10)
         self.nat44_add_address(nat_ip_vrf20, vrf_id=20)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1, flags=flags,
             sw_if_index=self.pg4.sw_if_index)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1, flags=flags,
             sw_if_index=self.pg6.sw_if_index)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1,
             sw_if_index=self.pg3.sw_if_index)
 
@@ -3190,10 +3292,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1, flags=flags,
             sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1,
             sw_if_index=self.pg1.sw_if_index)
 
@@ -3253,10 +3355,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg9.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg9.sw_if_index,
             flags=flags, is_add=1)
 
@@ -3303,10 +3405,10 @@ class TestNAT44(MethodHolder):
             self.logger.error(ppp("Unexpected or invalid packet:", p))
             raise
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/nat44-classify/next in2out')
         self.assertEqual(err, 1)
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/nat44-classify/next out2in')
         self.assertEqual(err, 1)
 
@@ -3314,10 +3416,10 @@ class TestNAT44(MethodHolder):
         """ Delete NAT44 session """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -3327,21 +3429,21 @@ class TestNAT44(MethodHolder):
         self.pg_start()
         self.pg1.get_capture(len(pkts))
 
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         nsessions = len(sessions)
 
-        self.vapi.nat44_del_session(address=sessions[0].inside_ip_address,
+        self.vclient.nat44_del_session(address=sessions[0].inside_ip_address,
                                     port=sessions[0].inside_port,
                                     protocol=sessions[0].protocol,
                                     flags=self.config_flags.NAT_IS_INSIDE)
-        self.vapi.nat44_del_session(address=sessions[1].outside_ip_address,
+        self.vclient.nat44_del_session(address=sessions[1].outside_ip_address,
                                     port=sessions[1].outside_port,
                                     protocol=sessions[1].protocol)
 
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         self.assertEqual(nsessions - len(sessions), 2)
 
-        self.vapi.nat44_del_session(address=sessions[0].inside_ip_address,
+        self.vclient.nat44_del_session(address=sessions[0].inside_ip_address,
                                     port=sessions[0].inside_port,
                                     protocol=sessions[0].protocol,
                                     flags=self.config_flags.NAT_IS_INSIDE)
@@ -3353,10 +3455,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -3366,17 +3468,17 @@ class TestNAT44(MethodHolder):
 
     def test_frag_forwarding(self):
         """ NAT44 forwarding fragment test """
-        self.vapi.nat44_add_del_interface_addr(
+        self.vclient.nat44_add_del_interface_addr(
             is_add=1,
             sw_if_index=self.pg1.sw_if_index)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
 
         data = b"A" * 16 + b"B" * 16 + b"C" * 3
         pkts = self.create_stream_frag(self.pg1,
@@ -3406,10 +3508,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
         # add static mapping for server
@@ -3432,10 +3534,10 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -3447,13 +3549,13 @@ class TestNAT44(MethodHolder):
         """ Port restricted NAT44 (MAP-E CE) """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat_set_addr_and_port_alloc_alg(alg=1,
+        self.vclient.nat_set_addr_and_port_alloc_alg(alg=1,
                                                   psid_offset=6,
                                                   psid_length=6,
                                                   psid=10)
@@ -3483,13 +3585,13 @@ class TestNAT44(MethodHolder):
         """ External address port range """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat_set_addr_and_port_alloc_alg(alg=2,
+        self.vclient.nat_set_addr_and_port_alloc_alg(alg=2,
                                                   start_port=1025,
                                                   end_port=1027)
 
@@ -3515,8 +3617,8 @@ class TestNAT44(MethodHolder):
 
         self.pg1.unconfig_ip4()
         self.pg2.unconfig_ip4()
-        self.vapi.ip_table_add_del(is_add=1, table={'table_id': vrf_id1})
-        self.vapi.ip_table_add_del(is_add=1, table={'table_id': vrf_id2})
+        self.vclient.ip_table_add_del(is_add=1, table={'table_id': vrf_id1})
+        self.vclient.ip_table_add_del(is_add=1, table={'table_id': vrf_id2})
         self.pg1.set_table_ip4(vrf_id1)
         self.pg2.set_table_ip4(vrf_id2)
         self.pg1.config_ip4()
@@ -3526,13 +3628,13 @@ class TestNAT44(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg2.sw_if_index,
             is_add=1)
 
@@ -3587,13 +3689,13 @@ class TestNAT44(MethodHolder):
         """ NAT44 session timeouts """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat_set_timeouts(udp=5, tcp_established=7440,
+        self.vclient.nat_set_timeouts(udp=5, tcp_established=7440,
                                    tcp_transitory=240, icmp=60)
 
         max_sessions = 1000
@@ -3624,7 +3726,7 @@ class TestNAT44(MethodHolder):
         self.pg1.get_capture(max_sessions)
 
         nsessions = 0
-        users = self.vapi.nat44_user_dump()
+        users = self.vclient.nat44_user_dump()
         for user in users:
             nsessions = nsessions + user.nsessions
         self.assertLess(nsessions, 2 * max_sessions)
@@ -3633,10 +3735,10 @@ class TestNAT44(MethodHolder):
         """ TCP MSS clamping """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -3645,7 +3747,7 @@ class TestNAT44(MethodHolder):
              TCP(sport=self.tcp_port_in, dport=self.tcp_external_port,
                  flags="S", options=[('MSS', 1400)]))
 
-        self.vapi.nat_set_mss_clamping(enable=1, mss_value=1000)
+        self.vclient.nat_set_mss_clamping(enable=1, mss_value=1000)
         self.pg0.add_stream(p)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -3653,7 +3755,7 @@ class TestNAT44(MethodHolder):
         # Negotiated MSS value greater than configured - changed
         self.verify_mss_value(capture[0], 1000)
 
-        self.vapi.nat_set_mss_clamping(enable=0, mss_value=1500)
+        self.vclient.nat_set_mss_clamping(enable=0, mss_value=1500)
         self.pg0.add_stream(p)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -3661,7 +3763,7 @@ class TestNAT44(MethodHolder):
         # MSS clamping disabled - negotiated MSS unchanged
         self.verify_mss_value(capture[0], 1400)
 
-        self.vapi.nat_set_mss_clamping(enable=1, mss_value=1500)
+        self.vclient.nat_set_mss_clamping(enable=1, mss_value=1500)
         self.pg0.add_stream(p)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -3674,16 +3776,16 @@ class TestNAT44(MethodHolder):
         """ Send HA session synchronization events (active) """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat_ha_set_listener(ip_address=self.pg3.local_ip4,
+        self.vclient.nat_ha_set_listener(ip_address=self.pg3.local_ip4,
                                       port=12345,
                                       path_mtu=512)
-        self.vapi.nat_ha_set_failover(ip_address=self.pg3.remote_ip4,
+        self.vclient.nat_ha_set_failover(ip_address=self.pg3.remote_ip4,
                                       port=12346, session_refresh_interval=10)
         bind_layers(UDP, HANATStateSync, sport=12345)
 
@@ -3695,8 +3797,8 @@ class TestNAT44(MethodHolder):
         capture = self.pg1.get_capture(len(pkts))
         self.verify_capture_out(capture)
         # active send HA events
-        self.vapi.nat_ha_flush()
-        stats = self.statistics.get_counter('/nat44/ha/add-event-send')
+        self.vclient.nat_ha_flush()
+        stats = self.vclient.statistics.get_counter('/nat44/ha/add-event-send')
         self.assertEqual(stats[0][0], 3)
         capture = self.pg3.get_capture(1)
         p = capture[0]
@@ -3730,17 +3832,17 @@ class TestNAT44(MethodHolder):
                HANATStateSync(sequence_number=seq, flags='ACK'))
         self.pg3.add_stream(ack)
         self.pg_start()
-        stats = self.statistics.get_counter('/nat44/ha/ack-recv')
+        stats = self.vclient.statistics.get_counter('/nat44/ha/ack-recv')
         self.assertEqual(stats[0][0], 1)
 
         # delete one session
         self.pg_enable_capture(self.pg_interfaces)
-        self.vapi.nat44_del_session(address=self.pg0.remote_ip4,
+        self.vclient.nat44_del_session(address=self.pg0.remote_ip4,
                                     port=self.tcp_port_in,
                                     protocol=IP_PROTOS.tcp,
                                     flags=self.config_flags.NAT_IS_INSIDE)
-        self.vapi.nat_ha_flush()
-        stats = self.statistics.get_counter('/nat44/ha/del-event-send')
+        self.vclient.nat_ha_flush()
+        stats = self.vclient.statistics.get_counter('/nat44/ha/del-event-send')
         self.assertEqual(stats[0][0], 1)
         capture = self.pg3.get_capture(1)
         p = capture[0]
@@ -3755,9 +3857,9 @@ class TestNAT44(MethodHolder):
         # do not send ACK, active retry send HA event again
         self.pg_enable_capture(self.pg_interfaces)
         sleep(12)
-        stats = self.statistics.get_counter('/nat44/ha/retry-count')
+        stats = self.vclient.statistics.get_counter('/nat44/ha/retry-count')
         self.assertEqual(stats[0][0], 3)
-        stats = self.statistics.get_counter('/nat44/ha/missed-count')
+        stats = self.vclient.statistics.get_counter('/nat44/ha/missed-count')
         self.assertEqual(stats[0][0], 1)
         capture = self.pg3.get_capture(3)
         for packet in capture:
@@ -3769,8 +3871,8 @@ class TestNAT44(MethodHolder):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
         self.pg0.get_capture(2)
-        self.vapi.nat_ha_flush()
-        stats = self.statistics.get_counter('/nat44/ha/refresh-event-send')
+        self.vclient.nat_ha_flush()
+        stats = self.vclient.statistics.get_counter('/nat44/ha/refresh-event-send')
         self.assertEqual(stats[0][0], 2)
         capture = self.pg3.get_capture(1)
         p = capture[0]
@@ -3803,20 +3905,20 @@ class TestNAT44(MethodHolder):
                HANATStateSync(sequence_number=seq, flags='ACK'))
         self.pg3.add_stream(ack)
         self.pg_start()
-        stats = self.statistics.get_counter('/nat44/ha/ack-recv')
+        stats = self.vclient.statistics.get_counter('/nat44/ha/ack-recv')
         self.assertEqual(stats[0][0], 2)
 
     def test_ha_recv(self):
         """ Receive HA session synchronization events (passive) """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat_ha_set_listener(ip_address=self.pg3.local_ip4,
+        self.vclient.nat_ha_set_listener(ip_address=self.pg3.local_ip4,
                                       port=12345,
                                       path_mtu=512)
         bind_layers(UDP, HANATStateSync, sport=12345)
@@ -3860,20 +3962,20 @@ class TestNAT44(MethodHolder):
             self.assertEqual(hanat.flags, 'ACK')
             self.assertEqual(hanat.version, 1)
             self.assertEqual(hanat.thread_index, 0)
-        stats = self.statistics.get_counter('/nat44/ha/ack-send')
+        stats = self.vclient.statistics.get_counter('/nat44/ha/ack-send')
         self.assertEqual(stats[0][0], 1)
-        stats = self.statistics.get_counter('/nat44/ha/add-event-recv')
+        stats = self.vclient.statistics.get_counter('/nat44/ha/add-event-recv')
         self.assertEqual(stats[0][0], 2)
-        users = self.statistics.get_counter('/nat44/total-users')
+        users = self.vclient.statistics.get_counter('/nat44/total-users')
         self.assertEqual(users[0][0], 1)
-        sessions = self.statistics.get_counter('/nat44/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/nat44/total-sessions')
         self.assertEqual(sessions[0][0], 2)
-        users = self.vapi.nat44_user_dump()
+        users = self.vclient.nat44_user_dump()
         self.assertEqual(len(users), 1)
         self.assertEqual(str(users[0].ip_address),
                          self.pg0.remote_ip4)
         # there should be 2 sessions created by HA
-        sessions = self.vapi.nat44_user_session_dump(users[0].ip_address,
+        sessions = self.vclient.nat44_user_session_dump(users[0].ip_address,
                                                      users[0].vrf_id)
         self.assertEqual(len(sessions), 2)
         for session in sessions:
@@ -3915,18 +4017,18 @@ class TestNAT44(MethodHolder):
             self.assertEqual(hanat.sequence_number, 2)
             self.assertEqual(hanat.flags, 'ACK')
             self.assertEqual(hanat.version, 1)
-        users = self.vapi.nat44_user_dump()
+        users = self.vclient.nat44_user_dump()
         self.assertEqual(len(users), 1)
         self.assertEqual(str(users[0].ip_address),
                          self.pg0.remote_ip4)
         # now we should have only 1 session, 1 deleted by HA
-        sessions = self.vapi.nat44_user_session_dump(users[0].ip_address,
+        sessions = self.vclient.nat44_user_session_dump(users[0].ip_address,
                                                      users[0].vrf_id)
         self.assertEqual(len(sessions), 1)
-        stats = self.statistics.get_counter('/nat44/ha/del-event-recv')
+        stats = self.vclient.statistics.get_counter('/nat44/ha/del-event-recv')
         self.assertEqual(stats[0][0], 1)
 
-        stats = self.statistics.get_err_counter('/err/nat-ha/pkts-processed')
+        stats = self.vclient.statistics.get_err_counter('/err/nat-ha/pkts-processed')
         self.assertEqual(stats, 2)
 
         # send HA session refresh event to failover/passive
@@ -3957,20 +4059,20 @@ class TestNAT44(MethodHolder):
             self.assertEqual(hanat.sequence_number, 3)
             self.assertEqual(hanat.flags, 'ACK')
             self.assertEqual(hanat.version, 1)
-        users = self.vapi.nat44_user_dump()
+        users = self.vclient.nat44_user_dump()
         self.assertEqual(len(users), 1)
         self.assertEqual(str(users[0].ip_address),
                          self.pg0.remote_ip4)
-        sessions = self.vapi.nat44_user_session_dump(users[0].ip_address,
+        sessions = self.vclient.nat44_user_session_dump(users[0].ip_address,
                                                      users[0].vrf_id)
         self.assertEqual(len(sessions), 1)
         session = sessions[0]
         self.assertEqual(session.total_bytes, 1024)
         self.assertEqual(session.total_pkts, 2)
-        stats = self.statistics.get_counter('/nat44/ha/refresh-event-recv')
+        stats = self.vclient.statistics.get_counter('/nat44/ha/refresh-event-recv')
         self.assertEqual(stats[0][0], 1)
 
-        stats = self.statistics.get_err_counter('/err/nat-ha/pkts-processed')
+        stats = self.vclient.statistics.get_err_counter('/err/nat-ha/pkts-processed')
         self.assertEqual(stats, 3)
 
         # send packet to test session created by HA
@@ -3994,17 +4096,22 @@ class TestNAT44(MethodHolder):
             self.assertEqual(tcp.sport, self.tcp_external_port)
             self.assertEqual(tcp.dport, self.tcp_port_in)
 
+    def tearDown(self):
+        super(TestNAT44, self).tearDown()
+        self.clear_nat44()
+        self.vclient.cli("clear logging")
+
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show nat44 addresses"))
-        self.logger.info(self.vapi.cli("show nat44 interfaces"))
-        self.logger.info(self.vapi.cli("show nat44 static mappings"))
-        self.logger.info(self.vapi.cli("show nat44 interface address"))
-        self.logger.info(self.vapi.cli("show nat44 sessions detail"))
-        self.logger.info(self.vapi.cli("show nat44 hash tables detail"))
-        self.logger.info(self.vapi.cli("show nat timeouts"))
+        self.logger.info(self.vclient.cli("show nat44 addresses"))
+        self.logger.info(self.vclient.cli("show nat44 interfaces"))
+        self.logger.info(self.vclient.cli("show nat44 static mappings"))
+        self.logger.info(self.vclient.cli("show nat44 interface address"))
+        self.logger.info(self.vclient.cli("show nat44 sessions detail"))
+        self.logger.info(self.vclient.cli("show nat44 hash tables detail"))
+        self.logger.info(self.vclient.cli("show nat timeouts"))
         self.logger.info(
-            self.vapi.cli("show nat addr-port-assignment-alg"))
-        self.logger.info(self.vapi.cli("show nat ha"))
+            self.vclient.cli("show nat addr-port-assignment-alg"))
+        self.logger.info(self.vclient.cli("show nat ha"))
 
 
 class TestNAT44EndpointDependent2(MethodHolder):
@@ -4019,7 +4126,7 @@ class TestNAT44EndpointDependent2(MethodHolder):
 
     @classmethod
     def create_and_add_ip4_table(cls, i, table_id):
-        cls.vapi.ip_table_add_del(is_add=1, table={'table_id': table_id})
+        cls.vclient.ip_table_add_del(is_add=1, table={'table_id': table_id})
         i.set_table_ip4(table_id)
 
     @classmethod
@@ -4042,27 +4149,27 @@ class TestNAT44EndpointDependent2(MethodHolder):
     def setUp(self):
         super(TestNAT44EndpointDependent2, self).setUp()
         flags = self.nat44_config_flags.NAT44_IS_ENDPOINT_DEPENDENT
-        self.vapi.nat44_plugin_enable_disable(enable=1, flags=flags)
+        self.vclient.nat44_plugin_enable_disable(enable=1, flags=flags)
 
     def tearDown(self):
         super(TestNAT44EndpointDependent2, self).tearDown()
         if not self.vpp_dead:
-            self.vapi.nat44_plugin_enable_disable(enable=0)
-            self.vapi.cli("clear logging")
+            self.vclient.nat44_plugin_enable_disable(enable=0)
+            self.vclient.cli("clear logging")
 
     def nat_add_inside_interface(self, i):
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             flags=self.config_flags.NAT_IS_INSIDE,
             sw_if_index=i.sw_if_index, is_add=1)
 
     def nat_add_outside_interface(self, i):
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             flags=self.config_flags.NAT_IS_OUTSIDE,
             sw_if_index=i.sw_if_index, is_add=1)
 
     def nat_add_interface_address(self, i):
         self.nat_addr = i.local_ip4
-        self.vapi.nat44_add_del_interface_addr(
+        self.vclient.nat44_add_del_interface_addr(
             sw_if_index=i.sw_if_index, is_add=1)
 
     def nat_add_address(self, address, vrf_id=0xFFFFFFFF):
@@ -4070,7 +4177,7 @@ class TestNAT44EndpointDependent2(MethodHolder):
         self.nat44_add_address(address, vrf_id=vrf_id)
 
     def cli(self, command):
-        result = self.vapi.cli(command)
+        result = self.vclient.cli(command)
         self.logger.info(result)
         # print(result)
 
@@ -4109,7 +4216,7 @@ class TestNAT44EndpointDependent2(MethodHolder):
 
         # 2 interfaces pg0, pg1 (vrf10, limit 1 tcp session)
         # non existing vrf_id makes process core dump
-        self.vapi.nat44_set_session_limit(session_limit=limit, vrf_id=10)
+        self.vclient.nat44_set_session_limit(session_limit=limit, vrf_id=10)
 
         self.nat_add_inside_interface(inside)
         self.nat_add_inside_interface(inside_vrf10)
@@ -4146,7 +4253,7 @@ class TestNAT44EndpointDependent(MethodHolder):
     @classmethod
     def setUpClass(cls):
         super(TestNAT44EndpointDependent, cls).setUpClass()
-        cls.vapi.cli("set log class nat level debug")
+        cls.vclient.cli("set log class nat level debug")
 
         cls.tcp_port_in = 6303
         cls.tcp_port_out = 6303
@@ -4174,7 +4281,7 @@ class TestNAT44EndpointDependent(MethodHolder):
 
         cls.pg4.generate_remote_hosts(2)
         cls.pg4.config_ip4()
-        cls.vapi.sw_interface_add_del_address(
+        cls.vclient.sw_interface_add_del_address(
             sw_if_index=cls.pg4.sw_if_index,
             prefix="10.0.0.1/24")
 
@@ -4184,14 +4291,14 @@ class TestNAT44EndpointDependent(MethodHolder):
         cls.pg4.resolve_arp()
 
         zero_ip4 = socket.inet_pton(socket.AF_INET, "0.0.0.0")
-        cls.vapi.ip_table_add_del(is_add=1, table={'table_id': 1})
+        cls.vclient.ip_table_add_del(is_add=1, table={'table_id': 1})
 
         cls.pg5._local_ip4 = "10.1.1.1"
         cls.pg5._remote_hosts[0]._ip4 = "10.1.1.2"
         cls.pg5.set_table_ip4(1)
         cls.pg5.config_ip4()
         cls.pg5.admin_up()
-        r1 = VppIpRoute(cls, cls.pg5.remote_ip4, 32,
+        r1 = VppIpRoute(cls.vclient, cls.pg5.remote_ip4, 32,
                         [VppRoutePath("0.0.0.0",
                                       cls.pg5.sw_if_index)],
                         table_id=1,
@@ -4204,23 +4311,23 @@ class TestNAT44EndpointDependent(MethodHolder):
         cls.pg6.config_ip4()
         cls.pg6.admin_up()
 
-        r2 = VppIpRoute(cls, cls.pg6.remote_ip4, 32,
+        r2 = VppIpRoute(cls.vclient, cls.pg6.remote_ip4, 32,
                         [VppRoutePath("0.0.0.0",
                                       cls.pg6.sw_if_index)],
                         table_id=1,
                         register=False)
-        r3 = VppIpRoute(cls, cls.pg6.remote_ip4, 16,
+        r3 = VppIpRoute(cls.vclient, cls.pg6.remote_ip4, 16,
                         [VppRoutePath("0.0.0.0",
                                       0xffffffff,
                                       nh_table_id=1)],
                         table_id=0,
                         register=False)
-        r4 = VppIpRoute(cls, "0.0.0.0", 0,
+        r4 = VppIpRoute(cls.vclient, "0.0.0.0", 0,
                         [VppRoutePath("0.0.0.0", 0xffffffff,
                                       nh_table_id=0)],
                         table_id=1,
                         register=False)
-        r5 = VppIpRoute(cls, "0.0.0.0", 0,
+        r5 = VppIpRoute(cls.vclient, "0.0.0.0", 0,
                         [VppRoutePath(cls.pg1.local_ip4,
                                       cls.pg1.sw_if_index)],
                         register=False)
@@ -4249,25 +4356,25 @@ class TestNAT44EndpointDependent(MethodHolder):
     def setUp(self):
         super(TestNAT44EndpointDependent, self).setUp()
         flags = self.nat44_config_flags.NAT44_IS_ENDPOINT_DEPENDENT
-        self.vapi.nat44_plugin_enable_disable(enable=1, flags=flags)
-        self.vapi.nat_set_timeouts(
+        self.vclient.nat44_plugin_enable_disable(enable=1, flags=flags)
+        self.vclient.nat_set_timeouts(
             udp=300, tcp_established=7440,
             tcp_transitory=240, icmp=60)
 
     def tearDown(self):
         super(TestNAT44EndpointDependent, self).tearDown()
         if not self.vpp_dead:
-            self.vapi.nat44_plugin_enable_disable(enable=0)
-            self.vapi.cli("clear logging")
+            self.vclient.nat44_plugin_enable_disable(enable=0)
+            self.vclient.cli("clear logging")
 
     def test_frag_in_order(self):
         """ NAT44 translate fragments arriving in order """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
         self.frag_in_order(proto=IP_PROTOS.tcp, ignore_port=True)
@@ -4277,23 +4384,23 @@ class TestNAT44EndpointDependent(MethodHolder):
     def test_frag_in_order_dont_translate(self):
         """ NAT44 don't translate fragments arriving in order """
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat44_forwarding_enable_disable(enable=True)
+        self.vclient.nat44_forwarding_enable_disable(enable=True)
         self.frag_in_order(proto=IP_PROTOS.tcp, dont_translate=True)
 
     def test_frag_out_of_order(self):
         """ NAT44 translate fragments arriving out of order """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
         self.frag_out_of_order(proto=IP_PROTOS.tcp, ignore_port=True)
@@ -4303,28 +4410,28 @@ class TestNAT44EndpointDependent(MethodHolder):
     def test_frag_out_of_order_dont_translate(self):
         """ NAT44 don't translate fragments arriving out of order """
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat44_forwarding_enable_disable(enable=True)
+        self.vclient.nat44_forwarding_enable_disable(enable=True)
         self.frag_out_of_order(proto=IP_PROTOS.tcp, dont_translate=True)
 
     def test_frag_in_order_in_plus_out(self):
         """ in+out interface fragments in order """
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             flags=flags, is_add=1)
 
@@ -4359,16 +4466,16 @@ class TestNAT44EndpointDependent(MethodHolder):
     def test_frag_out_of_order_in_plus_out(self):
         """ in+out interface fragments out of order """
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             flags=flags, is_add=1)
 
@@ -4409,10 +4516,10 @@ class TestNAT44EndpointDependent(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
         # add static mapping for server
@@ -4435,14 +4542,14 @@ class TestNAT44EndpointDependent(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
-        nat_config = self.vapi.nat_show_config()
+        nat_config = self.vclient.nat_show_config()
         self.assertEqual(1, nat_config.endpoint_dependent)
 
         pkts = self.create_stream_in(self.pg0, self.pg1)
@@ -4452,18 +4559,18 @@ class TestNAT44EndpointDependent(MethodHolder):
         capture = self.pg1.get_capture(len(pkts))
         self.verify_capture_out(capture, ignore_port=True)
 
-        sessions = self.statistics.get_counter('/nat44/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/nat44/total-sessions')
         self.assertTrue(sessions[0][0] > 0)
         self.logger.info("sessions before clearing: %s" % sessions[0][0])
 
         # just for testing purposes
-        self.logger.info(self.vapi.cli("show nat44 summary"))
+        self.logger.info(self.vclient.cli("show nat44 summary"))
 
-        self.vapi.cli("clear nat44 sessions")
+        self.vclient.cli("clear nat44 sessions")
 
-        self.logger.info(self.vapi.cli("show nat44 summary"))
+        self.logger.info(self.vclient.cli("show nat44 summary"))
 
-        sessions = self.statistics.get_counter('/nat44/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/nat44/total-sessions')
         self.assertEqual(sessions[0][0], 0)
         self.logger.info("sessions after clearing: %s" % sessions[0][0])
 
@@ -4472,22 +4579,22 @@ class TestNAT44EndpointDependent(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
-        nat_config = self.vapi.nat_show_config()
+        nat_config = self.vclient.nat_show_config()
         self.assertEqual(1, nat_config.endpoint_dependent)
 
         # in2out
-        tcpn = self.statistics.get_counter('/nat44/ed/in2out/slowpath/tcp')[0]
-        udpn = self.statistics.get_counter('/nat44/ed/in2out/slowpath/udp')[0]
-        icmpn = self.statistics.get_counter(
+        tcpn = self.vclient.statistics.get_counter('/nat44/ed/in2out/slowpath/tcp')[0]
+        udpn = self.vclient.statistics.get_counter('/nat44/ed/in2out/slowpath/udp')[0]
+        icmpn = self.vclient.statistics.get_counter(
             '/nat44/ed/in2out/slowpath/icmp')[0]
-        drops = self.statistics.get_counter(
+        drops = self.vclient.statistics.get_counter(
             '/nat44/ed/in2out/slowpath/drops')[0]
 
         pkts = self.create_stream_in(self.pg0, self.pg1)
@@ -4498,21 +4605,21 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.verify_capture_out(capture, ignore_port=True)
 
         if_idx = self.pg0.sw_if_index
-        cnt = self.statistics.get_counter('/nat44/ed/in2out/slowpath/tcp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/ed/in2out/slowpath/tcp')[0]
         self.assertEqual(cnt[if_idx] - tcpn[if_idx], 2)
-        cnt = self.statistics.get_counter('/nat44/ed/in2out/slowpath/udp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/ed/in2out/slowpath/udp')[0]
         self.assertEqual(cnt[if_idx] - udpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat44/ed/in2out/slowpath/icmp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/ed/in2out/slowpath/icmp')[0]
         self.assertEqual(cnt[if_idx] - icmpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat44/ed/in2out/slowpath/drops')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/ed/in2out/slowpath/drops')[0]
         self.assertEqual(cnt[if_idx] - drops[if_idx], 0)
 
         # out2in
-        tcpn = self.statistics.get_counter('/nat44/ed/out2in/fastpath/tcp')[0]
-        udpn = self.statistics.get_counter('/nat44/ed/out2in/fastpath/udp')[0]
-        icmpn = self.statistics.get_counter(
+        tcpn = self.vclient.statistics.get_counter('/nat44/ed/out2in/fastpath/tcp')[0]
+        udpn = self.vclient.statistics.get_counter('/nat44/ed/out2in/fastpath/udp')[0]
+        icmpn = self.vclient.statistics.get_counter(
             '/nat44/ed/out2in/slowpath/icmp')[0]
-        drops = self.statistics.get_counter(
+        drops = self.vclient.statistics.get_counter(
             '/nat44/ed/out2in/fastpath/drops')[0]
 
         pkts = self.create_stream_out(self.pg1)
@@ -4523,34 +4630,34 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.verify_capture_in(capture, self.pg0)
 
         if_idx = self.pg1.sw_if_index
-        cnt = self.statistics.get_counter('/nat44/ed/out2in/fastpath/tcp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/ed/out2in/fastpath/tcp')[0]
         self.assertEqual(cnt[if_idx] - tcpn[if_idx], 2)
-        cnt = self.statistics.get_counter('/nat44/ed/out2in/fastpath/udp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/ed/out2in/fastpath/udp')[0]
         self.assertEqual(cnt[if_idx] - udpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat44/ed/out2in/slowpath/icmp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/ed/out2in/slowpath/icmp')[0]
         self.assertEqual(cnt[if_idx] - icmpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat44/ed/out2in/fastpath/drops')[0]
+        cnt = self.vclient.statistics.get_counter('/nat44/ed/out2in/fastpath/drops')[0]
         self.assertEqual(cnt[if_idx] - drops[if_idx], 0)
 
-        sessions = self.statistics.get_counter('/nat44/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/nat44/total-sessions')
         self.assertEqual(sessions[0][0], 3)
 
     def test_dynamic_out_of_ports(self):
         """ NAT44 dynamic translation test: out of ports """
 
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
-        nat_config = self.vapi.nat_show_config()
+        nat_config = self.vclient.nat_show_config()
         self.assertEqual(1, nat_config.endpoint_dependent)
 
         # in2out and no NAT addresses added
-        err_old = self.statistics.get_err_counter(
+        err_old = self.vclient.statistics.get_err_counter(
             '/err/nat44-ed-in2out-slowpath/out of ports')
 
         pkts = self.create_stream_in(self.pg0, self.pg1)
@@ -4559,7 +4666,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_start()
         self.pg1.get_capture(0, timeout=1)
 
-        err_new = self.statistics.get_err_counter(
+        err_new = self.vclient.statistics.get_err_counter(
             '/err/nat44-ed-in2out-slowpath/out of ports')
 
         self.assertEqual(err_new - err_old, len(pkts))
@@ -4567,7 +4674,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         # in2out after NAT addresses added
         self.nat44_add_address(self.nat_addr)
 
-        err_old = self.statistics.get_err_counter(
+        err_old = self.vclient.statistics.get_err_counter(
             '/err/nat44-ed-in2out-slowpath/out of ports')
 
         pkts = self.create_stream_in(self.pg0, self.pg1)
@@ -4577,7 +4684,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         capture = self.pg1.get_capture(len(pkts))
         self.verify_capture_out(capture, ignore_port=True)
 
-        err_new = self.statistics.get_err_counter(
+        err_new = self.vclient.statistics.get_err_counter(
             '/err/nat44-ed-in2out-slowpath/out of ports')
 
         self.assertEqual(err_new, err_old)
@@ -4590,15 +4697,15 @@ class TestNAT44EndpointDependent(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             sw_if_index=self.pg7.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             sw_if_index=self.pg8.sw_if_index,
             is_add=1)
 
         try:
-            self.vapi.ip_table_add_del(is_add=1,
+            self.vclient.ip_table_add_del(is_add=1,
                                        table={'table_id': new_vrf_id})
 
             self.pg7.unconfig_ip4()
@@ -4611,17 +4718,17 @@ class TestNAT44EndpointDependent(MethodHolder):
             self.pg8.config_ip4()
             self.pg8.resolve_arp()
 
-            nat_config = self.vapi.nat_show_config()
+            nat_config = self.vclient.nat_show_config()
             self.assertEqual(1, nat_config.endpoint_dependent)
 
             # in2out
-            tcpn = self.statistics.get_counter(
+            tcpn = self.vclient.statistics.get_counter(
                 '/nat44/ed/in2out/slowpath/tcp')[0]
-            udpn = self.statistics.get_counter(
+            udpn = self.vclient.statistics.get_counter(
                 '/nat44/ed/in2out/slowpath/udp')[0]
-            icmpn = self.statistics.get_counter(
+            icmpn = self.vclient.statistics.get_counter(
                 '/nat44/ed/in2out/slowpath/icmp')[0]
-            drops = self.statistics.get_counter(
+            drops = self.vclient.statistics.get_counter(
                 '/nat44/ed/in2out/slowpath/drops')[0]
 
             pkts = self.create_stream_in(self.pg7, self.pg8)
@@ -4632,27 +4739,27 @@ class TestNAT44EndpointDependent(MethodHolder):
             self.verify_capture_out(capture, ignore_port=True)
 
             if_idx = self.pg7.sw_if_index
-            cnt = self.statistics.get_counter(
+            cnt = self.vclient.statistics.get_counter(
                 '/nat44/ed/in2out/slowpath/tcp')[0]
             self.assertEqual(cnt[if_idx] - tcpn[if_idx], 2)
-            cnt = self.statistics.get_counter(
+            cnt = self.vclient.statistics.get_counter(
                 '/nat44/ed/in2out/slowpath/udp')[0]
             self.assertEqual(cnt[if_idx] - udpn[if_idx], 1)
-            cnt = self.statistics.get_counter(
+            cnt = self.vclient.statistics.get_counter(
                 '/nat44/ed/in2out/slowpath/icmp')[0]
             self.assertEqual(cnt[if_idx] - icmpn[if_idx], 1)
-            cnt = self.statistics.get_counter(
+            cnt = self.vclient.statistics.get_counter(
                 '/nat44/ed/in2out/slowpath/drops')[0]
             self.assertEqual(cnt[if_idx] - drops[if_idx], 0)
 
             # out2in
-            tcpn = self.statistics.get_counter(
+            tcpn = self.vclient.statistics.get_counter(
                 '/nat44/ed/out2in/fastpath/tcp')[0]
-            udpn = self.statistics.get_counter(
+            udpn = self.vclient.statistics.get_counter(
                 '/nat44/ed/out2in/fastpath/udp')[0]
-            icmpn = self.statistics.get_counter(
+            icmpn = self.vclient.statistics.get_counter(
                 '/nat44/ed/out2in/slowpath/icmp')[0]
-            drops = self.statistics.get_counter(
+            drops = self.vclient.statistics.get_counter(
                 '/nat44/ed/out2in/fastpath/drops')[0]
 
             pkts = self.create_stream_out(self.pg8)
@@ -4663,20 +4770,20 @@ class TestNAT44EndpointDependent(MethodHolder):
             self.verify_capture_in(capture, self.pg7)
 
             if_idx = self.pg8.sw_if_index
-            cnt = self.statistics.get_counter(
+            cnt = self.vclient.statistics.get_counter(
                 '/nat44/ed/out2in/fastpath/tcp')[0]
             self.assertEqual(cnt[if_idx] - tcpn[if_idx], 2)
-            cnt = self.statistics.get_counter(
+            cnt = self.vclient.statistics.get_counter(
                 '/nat44/ed/out2in/fastpath/udp')[0]
             self.assertEqual(cnt[if_idx] - udpn[if_idx], 1)
-            cnt = self.statistics.get_counter(
+            cnt = self.vclient.statistics.get_counter(
                 '/nat44/ed/out2in/slowpath/icmp')[0]
             self.assertEqual(cnt[if_idx] - icmpn[if_idx], 1)
-            cnt = self.statistics.get_counter(
+            cnt = self.vclient.statistics.get_counter(
                 '/nat44/ed/out2in/fastpath/drops')[0]
             self.assertEqual(cnt[if_idx] - drops[if_idx], 0)
 
-            sessions = self.statistics.get_counter('/nat44/total-sessions')
+            sessions = self.vclient.statistics.get_counter('/nat44/total-sessions')
             self.assertEqual(sessions[0][0], 3)
 
         finally:
@@ -4690,25 +4797,25 @@ class TestNAT44EndpointDependent(MethodHolder):
             self.pg8.config_ip4()
             self.pg8.resolve_arp()
 
-            self.vapi.ip_table_add_del(is_add=0,
+            self.vclient.ip_table_add_del(is_add=0,
                                        table={'table_id': new_vrf_id})
 
     def test_forwarding(self):
         """ NAT44 forwarding test """
 
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
 
         real_ip = self.pg0.remote_ip4
         alias_ip = self.nat_addr
         flags = self.config_flags.NAT_IS_ADDR_ONLY
-        self.vapi.nat44_add_del_static_mapping(is_add=1,
+        self.vclient.nat44_add_del_static_mapping(is_add=1,
                                                local_ip_address=real_ip,
                                                external_ip_address=alias_ip,
                                                external_sw_if_index=0xFFFFFFFF,
@@ -4756,11 +4863,11 @@ class TestNAT44EndpointDependent(MethodHolder):
                 self.pg0.remote_hosts[0] = host0
 
             user = self.pg0.remote_hosts[1]
-            sessions = self.vapi.nat44_user_session_dump(user.ip4, 0)
+            sessions = self.vclient.nat44_user_session_dump(user.ip4, 0)
             self.assertEqual(len(sessions), 3)
             self.assertTrue(sessions[0].flags &
                             self.config_flags.NAT_IS_EXT_HOST_VALID)
-            self.vapi.nat44_del_session(
+            self.vclient.nat44_del_session(
                 address=sessions[0].inside_ip_address,
                 port=sessions[0].inside_port,
                 protocol=sessions[0].protocol,
@@ -4768,13 +4875,13 @@ class TestNAT44EndpointDependent(MethodHolder):
                        self.config_flags.NAT_IS_EXT_HOST_VALID),
                 ext_host_address=sessions[0].ext_host_address,
                 ext_host_port=sessions[0].ext_host_port)
-            sessions = self.vapi.nat44_user_session_dump(user.ip4, 0)
+            sessions = self.vclient.nat44_user_session_dump(user.ip4, 0)
             self.assertEqual(len(sessions), 2)
 
         finally:
-            self.vapi.nat44_forwarding_enable_disable(enable=0)
+            self.vclient.nat44_forwarding_enable_disable(enable=0)
             flags = self.config_flags.NAT_IS_ADDR_ONLY
-            self.vapi.nat44_add_del_static_mapping(
+            self.vclient.nat44_add_del_static_mapping(
                 is_add=0,
                 local_ip_address=real_ip,
                 external_ip_address=alias_ip,
@@ -4799,7 +4906,7 @@ class TestNAT44EndpointDependent(MethodHolder):
                    'vrf_id': 0}]
 
         self.nat44_add_address(self.nat_addr)
-        self.vapi.nat44_add_del_lb_static_mapping(
+        self.vclient.nat44_add_del_lb_static_mapping(
             is_add=1,
             external_addr=external_addr_n,
             external_port=external_port,
@@ -4807,10 +4914,10 @@ class TestNAT44EndpointDependent(MethodHolder):
             local_num=len(locals),
             locals=locals)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -4857,11 +4964,11 @@ class TestNAT44EndpointDependent(MethodHolder):
             self.logger.error(ppp("Unexpected or invalid packet:", p))
             raise
 
-        sessions = self.vapi.nat44_user_session_dump(server.ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(server.ip4, 0)
         self.assertEqual(len(sessions), 1)
         self.assertTrue(sessions[0].flags &
                         self.config_flags.NAT_IS_EXT_HOST_VALID)
-        self.vapi.nat44_del_session(
+        self.vclient.nat44_del_session(
             address=sessions[0].inside_ip_address,
             port=sessions[0].inside_port,
             protocol=sessions[0].protocol,
@@ -4869,7 +4976,7 @@ class TestNAT44EndpointDependent(MethodHolder):
                    self.config_flags.NAT_IS_EXT_HOST_VALID),
             ext_host_address=sessions[0].ext_host_address,
             ext_host_port=sessions[0].ext_host_port)
-        sessions = self.vapi.nat44_user_session_dump(server.ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(server.ip4, 0)
         self.assertEqual(len(sessions), 0)
 
     @unittest.skipUnless(running_extended_tests, "part of extended tests")
@@ -4893,17 +5000,17 @@ class TestNAT44EndpointDependent(MethodHolder):
                    'vrf_id': 0}]
 
         self.nat44_add_address(self.nat_addr)
-        self.vapi.nat44_add_del_lb_static_mapping(is_add=1,
+        self.vclient.nat44_add_del_lb_static_mapping(is_add=1,
                                                   external_addr=external_addr,
                                                   external_port=external_port,
                                                   protocol=IP_PROTOS.tcp,
                                                   local_num=len(locals),
                                                   locals=locals)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -4935,7 +5042,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         }
 
         # add new back-end
-        self.vapi.nat44_lb_static_mapping_add_del_local(
+        self.vclient.nat44_lb_static_mapping_add_del_local(
             is_add=1,
             external_addr=external_addr,
             external_port=external_port,
@@ -4975,7 +5082,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         }
 
         # remove one back-end
-        self.vapi.nat44_lb_static_mapping_add_del_local(
+        self.vclient.nat44_lb_static_mapping_add_del_local(
             is_add=0,
             external_addr=external_addr,
             external_port=external_port,
@@ -5016,19 +5123,19 @@ class TestNAT44EndpointDependent(MethodHolder):
                    'probability': 30,
                    'vrf_id': 0}]
 
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
         flags = self.config_flags.NAT_IS_OUT2IN_ONLY
-        self.vapi.nat44_add_del_lb_static_mapping(is_add=1, flags=flags,
+        self.vclient.nat44_add_del_lb_static_mapping(is_add=1, flags=flags,
                                                   external_addr=external_addr,
                                                   external_port=external_port,
                                                   protocol=IP_PROTOS.tcp,
                                                   local_num=len(locals),
                                                   locals=locals)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -5132,7 +5239,7 @@ class TestNAT44EndpointDependent(MethodHolder):
                    'vrf_id': 0}]
 
         self.nat44_add_address(self.nat_addr)
-        self.vapi.nat44_add_del_lb_static_mapping(is_add=1,
+        self.vclient.nat44_add_del_lb_static_mapping(is_add=1,
                                                   external_addr=external_addr,
                                                   external_port=external_port,
                                                   protocol=IP_PROTOS.tcp,
@@ -5140,10 +5247,10 @@ class TestNAT44EndpointDependent(MethodHolder):
                                                   local_num=len(locals),
                                                   locals=locals)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -5156,11 +5263,11 @@ class TestNAT44EndpointDependent(MethodHolder):
         capture = self.pg0.get_capture(1)
         backend = capture[0][IP].dst
 
-        sessions = self.vapi.nat44_user_session_dump(backend, 0)
+        sessions = self.vclient.nat44_user_session_dump(backend, 0)
         self.assertEqual(len(sessions), 1)
         self.assertTrue(sessions[0].flags &
                         self.config_flags.NAT_IS_EXT_HOST_VALID)
-        self.vapi.nat44_del_session(
+        self.vclient.nat44_del_session(
             address=sessions[0].inside_ip_address,
             port=sessions[0].inside_port,
             protocol=sessions[0].protocol,
@@ -5186,10 +5293,10 @@ class TestNAT44EndpointDependent(MethodHolder):
         """ NAT44 translate packet with unknown protocol """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -5251,10 +5358,10 @@ class TestNAT44EndpointDependent(MethodHolder):
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -5315,10 +5422,10 @@ class TestNAT44EndpointDependent(MethodHolder):
         external_port = 80
         local_port = 8080
 
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_ADDR_ONLY
-        self.vapi.nat44_add_del_identity_mapping(
+        self.vclient.nat44_add_del_identity_mapping(
             ip_address=self.pg1.remote_ip4, sw_if_index=0xFFFFFFFF,
             flags=flags, is_add=1)
         flags = self.config_flags.NAT_IS_OUT2IN_ONLY
@@ -5326,13 +5433,13 @@ class TestNAT44EndpointDependent(MethodHolder):
                                       local_port, external_port,
                                       proto=IP_PROTOS.tcp, flags=flags)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1,
             sw_if_index=self.pg1.sw_if_index)
 
@@ -5398,9 +5505,9 @@ class TestNAT44EndpointDependent(MethodHolder):
 
     def test_output_feature_and_service2(self):
         """ NAT44 interface output feature and service host direct access """
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
         self.nat44_add_address(self.nat_addr)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1,
             sw_if_index=self.pg1.sw_if_index)
 
@@ -5446,20 +5553,20 @@ class TestNAT44EndpointDependent(MethodHolder):
         external_port = 80
         local_port = 8080
 
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_OUT2IN_ONLY
         self.nat44_add_static_mapping(self.pg1.remote_ip4, external_addr,
                                       local_port, external_port,
                                       proto=IP_PROTOS.tcp, flags=flags)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1,
             sw_if_index=self.pg1.sw_if_index)
 
@@ -5510,7 +5617,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         local_port = 8080
         post_twice_nat_port = 0
 
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
         self.nat44_add_address(twice_nat_addr, twice_nat=1)
         flags = (self.config_flags.NAT_IS_OUT2IN_ONLY |
                  self.config_flags.NAT_IS_SELF_TWICE_NAT)
@@ -5518,7 +5625,7 @@ class TestNAT44EndpointDependent(MethodHolder):
                                       local_port, external_port,
                                       proto=IP_PROTOS.tcp, vrf_id=1,
                                       flags=flags)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg6.sw_if_index,
             is_add=1)
 
@@ -5620,17 +5727,17 @@ class TestNAT44EndpointDependent(MethodHolder):
                        'vrf_id': 0}]
             out_addr = self.nat_addr
 
-            self.vapi.nat44_add_del_lb_static_mapping(is_add=1, flags=flags,
+            self.vclient.nat44_add_del_lb_static_mapping(is_add=1, flags=flags,
                                                       external_addr=out_addr,
                                                       external_port=port_out,
                                                       protocol=IP_PROTOS.tcp,
                                                       local_num=len(locals),
                                                       locals=locals)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=pg1.sw_if_index,
             is_add=1)
 
@@ -5703,14 +5810,14 @@ class TestNAT44EndpointDependent(MethodHolder):
             raise
 
         if eh_translate:
-            sessions = self.vapi.nat44_user_session_dump(server.ip4, 0)
+            sessions = self.vclient.nat44_user_session_dump(server.ip4, 0)
             self.assertEqual(len(sessions), 1)
             self.assertTrue(sessions[0].flags &
                             self.config_flags.NAT_IS_EXT_HOST_VALID)
             self.assertTrue(sessions[0].flags &
                             self.config_flags.NAT_IS_TWICE_NAT)
-            self.logger.info(self.vapi.cli("show nat44 sessions detail"))
-            self.vapi.nat44_del_session(
+            self.logger.info(self.vclient.cli("show nat44 sessions detail"))
+            self.vclient.nat44_del_session(
                 address=sessions[0].inside_ip_address,
                 port=sessions[0].inside_port,
                 protocol=sessions[0].protocol,
@@ -5718,7 +5825,7 @@ class TestNAT44EndpointDependent(MethodHolder):
                        self.config_flags.NAT_IS_EXT_HOST_VALID),
                 ext_host_address=sessions[0].ext_host_nat_address,
                 ext_host_port=sessions[0].ext_host_nat_port)
-            sessions = self.vapi.nat44_user_session_dump(server.ip4, 0)
+            sessions = self.vclient.nat44_user_session_dump(server.ip4, 0)
             self.assertEqual(len(sessions), 0)
 
     def test_twice_nat(self):
@@ -5750,18 +5857,18 @@ class TestNAT44EndpointDependent(MethodHolder):
     def test_twice_nat_interface_addr(self):
         """ Acquire twice NAT44 addresses from interface """
         flags = self.config_flags.NAT_IS_TWICE_NAT
-        self.vapi.nat44_add_del_interface_addr(
+        self.vclient.nat44_add_del_interface_addr(
             is_add=1,
             sw_if_index=self.pg3.sw_if_index,
             flags=flags)
 
         # no address in NAT pool
-        adresses = self.vapi.nat44_address_dump()
+        adresses = self.vclient.nat44_address_dump()
         self.assertEqual(0, len(adresses))
 
         # configure interface address and check NAT address pool
         self.pg3.config_ip4()
-        adresses = self.vapi.nat44_address_dump()
+        adresses = self.vclient.nat44_address_dump()
         self.assertEqual(1, len(adresses))
         self.assertEqual(str(adresses[0].ip_address),
                          self.pg3.local_ip4)
@@ -5769,24 +5876,24 @@ class TestNAT44EndpointDependent(MethodHolder):
 
         # remove interface address and check NAT address pool
         self.pg3.unconfig_ip4()
-        adresses = self.vapi.nat44_address_dump()
+        adresses = self.vclient.nat44_address_dump()
         self.assertEqual(0, len(adresses))
 
     def test_tcp_close(self):
         """ Close TCP session from inside network - output feature """
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
         self.nat44_add_address(self.pg1.local_ip4)
         twice_nat_addr = '10.0.1.3'
         service_ip = '192.168.16.150'
         self.nat44_add_address(twice_nat_addr, twice_nat=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1,
             sw_if_index=self.pg1.sw_if_index)
         flags = (self.config_flags.NAT_IS_OUT2IN_ONLY |
@@ -5797,7 +5904,7 @@ class TestNAT44EndpointDependent(MethodHolder):
                                       80,
                                       proto=IP_PROTOS.tcp,
                                       flags=flags)
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         start_sessnum = len(sessions)
 
         # SYN packet out->in
@@ -5856,7 +5963,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_start()
         self.pg1.get_capture(1)
 
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4,
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4,
                                                      0)
         self.assertEqual(len(sessions) - start_sessnum, 0)
 
@@ -5872,17 +5979,17 @@ class TestNAT44EndpointDependent(MethodHolder):
                                       proto=IP_PROTOS.tcp,
                                       flags=flags)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         start_sessnum = len(sessions)
 
-        self.vapi.nat_set_timeouts(udp=300, tcp_established=7440,
+        self.vclient.nat_set_timeouts(udp=300, tcp_established=7440,
                                    tcp_transitory=2, icmp=5)
 
         self.initiate_tcp_session(self.pg0, self.pg1)
@@ -5928,13 +6035,13 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_start()
         self.pg1.get_capture(1)
 
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         self.assertEqual(len(sessions) - start_sessnum, 1)
 
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-out2in/drops due to TCP in transitory timeout')
         out2in_drops = stats[0]
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-in2out/drops due to TCP in transitory timeout')
         in2out_drops = stats[0]
 
@@ -5959,10 +6066,10 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_start()
         self.pg1.assert_nothing_captured()
 
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-out2in/drops due to TCP in transitory timeout')
         self.assertEqual(stats[0] - out2in_drops, 1)
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-in2out/drops due to TCP in transitory timeout')
         self.assertEqual(stats[0] - in2out_drops, 1)
 
@@ -5976,7 +6083,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
         self.pg1.assert_nothing_captured()
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         self.assertEqual(len(sessions) - start_sessnum, 0)
 
     def test_tcp_session_close_out(self):
@@ -5991,17 +6098,17 @@ class TestNAT44EndpointDependent(MethodHolder):
                                       proto=IP_PROTOS.tcp,
                                       flags=flags)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         start_sessnum = len(sessions)
 
-        self.vapi.nat_set_timeouts(udp=300, tcp_established=7440,
+        self.vclient.nat_set_timeouts(udp=300, tcp_established=7440,
                                    tcp_transitory=2, icmp=5)
 
         self.initiate_tcp_session(self.pg0, self.pg1)
@@ -6037,13 +6144,13 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_start()
         self.pg0.get_capture(1)
 
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         self.assertEqual(len(sessions) - start_sessnum, 1)
 
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-out2in/drops due to TCP in transitory timeout')
         out2in_drops = stats[0]
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-in2out/drops due to TCP in transitory timeout')
         in2out_drops = stats[0]
 
@@ -6068,10 +6175,10 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_start()
         self.pg1.assert_nothing_captured()
 
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-out2in/drops due to TCP in transitory timeout')
         self.assertEqual(stats[0] - out2in_drops, 1)
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-in2out/drops due to TCP in transitory timeout')
         self.assertEqual(stats[0] - in2out_drops, 1)
 
@@ -6085,7 +6192,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
         self.pg1.assert_nothing_captured()
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         self.assertEqual(len(sessions) - start_sessnum, 0)
 
     def test_tcp_session_close_simultaneous(self):
@@ -6100,17 +6207,17 @@ class TestNAT44EndpointDependent(MethodHolder):
                                       proto=IP_PROTOS.tcp,
                                       flags=flags)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         start_sessnum = len(sessions)
 
-        self.vapi.nat_set_timeouts(udp=300, tcp_established=7440,
+        self.vclient.nat_set_timeouts(udp=300, tcp_established=7440,
                                    tcp_transitory=2, icmp=5)
 
         self.initiate_tcp_session(self.pg0, self.pg1)
@@ -6155,13 +6262,13 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_start()
         self.pg0.get_capture(1)
 
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         self.assertEqual(len(sessions) - start_sessnum, 1)
 
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-out2in/drops due to TCP in transitory timeout')
         out2in_drops = stats[0]
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-in2out/drops due to TCP in transitory timeout')
         in2out_drops = stats[0]
 
@@ -6186,10 +6293,10 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_start()
         self.pg1.assert_nothing_captured()
 
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-out2in/drops due to TCP in transitory timeout')
         self.assertEqual(stats[0] - out2in_drops, 1)
-        stats = self.statistics.get_counter(
+        stats = self.vclient.statistics.get_counter(
             '/err/nat44-ed-in2out/drops due to TCP in transitory timeout')
         self.assertEqual(stats[0] - in2out_drops, 1)
 
@@ -6203,7 +6310,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
         self.pg1.assert_nothing_captured()
-        sessions = self.vapi.nat44_user_session_dump(self.pg0.remote_ip4, 0)
+        sessions = self.vclient.nat44_user_session_dump(self.pg0.remote_ip4, 0)
         self.assertEqual(len(sessions) - start_sessnum, 0)
 
     def test_one_armed_nat44_static(self):
@@ -6214,7 +6321,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         local_port = 8080
         eh_port_in = 0
 
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
         self.nat44_add_address(self.nat_addr, twice_nat=1)
         flags = (self.config_flags.NAT_IS_OUT2IN_ONLY |
                  self.config_flags.NAT_IS_TWICE_NAT)
@@ -6222,10 +6329,10 @@ class TestNAT44EndpointDependent(MethodHolder):
                                       local_port, external_port,
                                       proto=IP_PROTOS.tcp, flags=flags)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg4.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg4.sw_if_index,
             flags=flags, is_add=1)
 
@@ -6278,16 +6385,16 @@ class TestNAT44EndpointDependent(MethodHolder):
         external_port = 80
         local_port = 8080
 
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
         flags = self.config_flags.NAT_IS_OUT2IN_ONLY
         self.nat44_add_static_mapping(self.pg0.remote_ip4, self.nat_addr,
                                       local_port, external_port,
                                       proto=IP_PROTOS.tcp, flags=flags)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -6405,12 +6512,12 @@ class TestNAT44EndpointDependent(MethodHolder):
 
     def test_output_feature(self):
         """ NAT44 interface output feature (in2out postrouting) """
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
         self.nat44_add_address(self.nat_addr)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             is_add=1,
             sw_if_index=self.pg1.sw_if_index)
 
@@ -6433,11 +6540,11 @@ class TestNAT44EndpointDependent(MethodHolder):
     def test_output_feature_stateful_acl(self):
         """ NAT44 endpoint-dependent output feature works with stateful ACL """
         self.nat44_add_address(self.nat_addr)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=self.config_flags.NAT_IS_INSIDE,
             is_add=1)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             sw_if_index=self.pg1.sw_if_index,
             flags=self.config_flags.NAT_IS_OUTSIDE,
             is_add=1)
@@ -6462,16 +6569,16 @@ class TestNAT44EndpointDependent(MethodHolder):
 
         # Create an ACL blocking everything
         out2in_deny_rule = AclRule(is_permit=0)
-        out2in_acl = VppAcl(self, rules=[out2in_deny_rule])
+        out2in_acl = VppAcl(self.vclient, rules=[out2in_deny_rule])
         out2in_acl.add_vpp_config()
 
         # create an ACL to permit/reflect everything
         in2out_reflect_rule = AclRule(is_permit=2)
-        in2out_acl = VppAcl(self, rules=[in2out_reflect_rule])
+        in2out_acl = VppAcl(self.vclient, rules=[in2out_reflect_rule])
         in2out_acl.add_vpp_config()
 
         # apply as input acl on interface and confirm it blocks everything
-        acl_if = VppAclInterface(self, sw_if_index=self.pg1.sw_if_index,
+        acl_if = VppAclInterface(self.vclient, sw_if_index=self.pg1.sw_if_index,
                                  n_input=1, acls=[out2in_acl])
         acl_if.add_vpp_config()
         self.send_and_assert_no_replies(self.pg1, pkts_out2in)
@@ -6492,7 +6599,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         capture = self.send_and_expect(self.pg1, pkts_out2in, self.pg0,
                                        len(pkts_out2in))
         self.verify_capture_in(capture, self.pg0)
-        self.logger.info(self.vapi.cli("show trace"))
+        self.logger.info(self.vclient.cli("show trace"))
 
     def test_multiple_vrf(self):
         """ Multiple VRF setup """
@@ -6501,25 +6608,25 @@ class TestNAT44EndpointDependent(MethodHolder):
         local_port = 8080
         port = 0
 
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             is_add=1, flags=flags)
-        self.vapi.nat44_interface_add_del_output_feature(
+        self.vclient.nat44_interface_add_del_output_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg5.sw_if_index,
             is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg5.sw_if_index,
             is_add=1, flags=flags)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg6.sw_if_index,
             is_add=1)
         flags = self.config_flags.NAT_IS_OUT2IN_ONLY
@@ -6806,13 +6913,13 @@ class TestNAT44EndpointDependent(MethodHolder):
         """ NAT44 session timeouts """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat_set_timeouts(udp=300, tcp_established=7440,
+        self.vclient.nat_set_timeouts(udp=300, tcp_established=7440,
                                    tcp_transitory=240, icmp=5)
 
         max_sessions = 1000
@@ -6843,7 +6950,7 @@ class TestNAT44EndpointDependent(MethodHolder):
         self.pg1.get_capture(max_sessions)
 
         nsessions = 0
-        users = self.vapi.nat44_user_dump()
+        users = self.vclient.nat44_user_dump()
         for user in users:
             nsessions = nsessions + user.nsessions
         self.assertLess(nsessions, 2 * max_sessions)
@@ -6853,13 +6960,13 @@ class TestNAT44EndpointDependent(MethodHolder):
         """ NAT44 session RST timeouts """
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat_set_timeouts(udp=300, tcp_established=7440,
+        self.vclient.nat_set_timeouts(udp=300, tcp_established=7440,
                                    tcp_transitory=5, icmp=60)
 
         self.initiate_tcp_session(self.pg0, self.pg1)
@@ -6885,15 +6992,15 @@ class TestNAT44EndpointDependent(MethodHolder):
 
     def test_syslog_sess(self):
         """ Test syslog session creation and deletion """
-        self.vapi.syslog_set_filter(
+        self.vclient.syslog_set_filter(
             self.SYSLOG_SEVERITY.SYSLOG_API_SEVERITY_INFO)
-        self.vapi.syslog_set_sender(self.pg2.local_ip4, self.pg2.remote_ip4)
+        self.vclient.syslog_set_sender(self.pg2.local_ip4, self.pg2.remote_ip4)
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
 
@@ -6917,24 +7024,24 @@ class TestNAT44EndpointDependent(MethodHolder):
     def test_ed_users_dump(self):
         """ API test - nat44_user_dump """
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index,
             is_add=1)
-        self.vapi.nat44_forwarding_enable_disable(enable=1)
+        self.vclient.nat44_forwarding_enable_disable(enable=1)
 
         real_ip = self.pg0.remote_ip4
         alias_ip = self.nat_addr
         flags = self.config_flags.NAT_IS_ADDR_ONLY
-        self.vapi.nat44_add_del_static_mapping(is_add=1,
+        self.vclient.nat44_add_del_static_mapping(is_add=1,
                                                local_ip_address=real_ip,
                                                external_ip_address=alias_ip,
                                                external_sw_if_index=0xFFFFFFFF,
                                                flags=flags)
 
-        users = self.vapi.nat44_user_dump()
+        users = self.vclient.nat44_user_dump()
         self.assertEqual(len(users), 0)
         try:
             # in2out - static mapping match
@@ -6953,7 +7060,7 @@ class TestNAT44EndpointDependent(MethodHolder):
             capture = self.pg1.get_capture(len(pkts))
             self.verify_capture_out(capture, same_port=True)
 
-            users = self.vapi.nat44_user_dump()
+            users = self.vclient.nat44_user_dump()
             self.assertEqual(len(users), 1)
             static_user = users[0]
             self.assertEqual(static_user.nstaticsessions, 3)
@@ -6983,7 +7090,7 @@ class TestNAT44EndpointDependent(MethodHolder):
             finally:
                 self.pg0.remote_hosts[0] = host0
 
-            users = self.vapi.nat44_user_dump()
+            users = self.vclient.nat44_user_dump()
             self.assertEqual(len(users), 2)
             if str(users[0].ip_address) == self.pg0.remote_hosts[0].ip4:
                 non_static_user = users[1]
@@ -6996,7 +7103,7 @@ class TestNAT44EndpointDependent(MethodHolder):
             self.assertEqual(non_static_user.nstaticsessions, 0)
             self.assertEqual(non_static_user.nsessions, 3)
 
-            users = self.vapi.nat44_user_dump()
+            users = self.vclient.nat44_user_dump()
             self.assertEqual(len(users), 2)
             if str(users[0].ip_address) == self.pg0.remote_hosts[0].ip4:
                 non_static_user = users[1]
@@ -7010,25 +7117,31 @@ class TestNAT44EndpointDependent(MethodHolder):
             self.assertEqual(non_static_user.nsessions, 3)
 
         finally:
-            self.vapi.nat44_forwarding_enable_disable(enable=0)
+            self.vclient.nat44_forwarding_enable_disable(enable=0)
             flags = self.config_flags.NAT_IS_ADDR_ONLY
-            self.vapi.nat44_add_del_static_mapping(
+            self.vclient.nat44_add_del_static_mapping(
                 is_add=0,
                 local_ip_address=real_ip,
                 external_ip_address=alias_ip,
                 external_sw_if_index=0xFFFFFFFF,
                 flags=flags)
 
+    def tearDown(self):
+        super(TestNAT44EndpointDependent, self).tearDown()
+        if not self.vpp_dead:
+            self.clear_nat44()
+            self.vclient.cli("clear logging")
+
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show errors"))
-        self.logger.info(self.vapi.cli("show nat44 addresses"))
-        self.logger.info(self.vapi.cli("show nat44 interfaces"))
-        self.logger.info(self.vapi.cli("show nat44 static mappings"))
-        self.logger.info(self.vapi.cli("show nat44 interface address"))
-        self.logger.info(self.vapi.cli("show nat44 sessions detail"))
-        self.logger.info(self.vapi.cli("show nat44 hash tables detail"))
-        self.logger.info(self.vapi.cli("show nat timeouts"))
-        self.logger.info(self.vapi.cli("debug nat44 fib registration"))
+        self.logger.info(self.vclient.cli("show errors"))
+        self.logger.info(self.vclient.cli("show nat44 addresses"))
+        self.logger.info(self.vclient.cli("show nat44 interfaces"))
+        self.logger.info(self.vclient.cli("show nat44 static mappings"))
+        self.logger.info(self.vclient.cli("show nat44 interface address"))
+        self.logger.info(self.vclient.cli("show nat44 sessions detail"))
+        self.logger.info(self.vclient.cli("show nat44 hash tables detail"))
+        self.logger.info(self.vclient.cli("show nat timeouts"))
+        self.logger.info(self.vclient.cli("debug nat44 fib registration"))
 
 
 class TestNAT44EndpointDependent3(MethodHolder):
@@ -7039,7 +7152,7 @@ class TestNAT44EndpointDependent3(MethodHolder):
     @classmethod
     def setUpClass(cls):
         super(TestNAT44EndpointDependent3, cls).setUpClass()
-        cls.vapi.cli("set log class nat level debug")
+        cls.vclient.cli("set log class nat level debug")
 
         cls.nat_addr = '10.0.0.3'
 
@@ -7053,17 +7166,17 @@ class TestNAT44EndpointDependent3(MethodHolder):
     def setUp(self):
         super(TestNAT44EndpointDependent3, self).setUp()
         flags = self.nat44_config_flags.NAT44_IS_ENDPOINT_DEPENDENT
-        self.vapi.nat44_plugin_enable_disable(
+        self.vclient.nat44_plugin_enable_disable(
             sessions=self.max_translations,
             flags=flags, enable=1)
-        self.vapi.nat_set_timeouts(
+        self.vclient.nat_set_timeouts(
             udp=1, tcp_established=7440, tcp_transitory=30, icmp=1)
 
         self.nat44_add_address(self.nat_addr)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index, flags=flags, is_add=1)
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg1.sw_if_index, is_add=1)
 
     @classmethod
@@ -7073,8 +7186,8 @@ class TestNAT44EndpointDependent3(MethodHolder):
     def tearDown(self):
         super(TestNAT44EndpointDependent3, self).tearDown()
         if not self.vpp_dead:
-            self.vapi.nat44_plugin_enable_disable(enable=0)
-            self.vapi.cli("clear logging")
+            self.vclient.nat44_plugin_enable_disable(enable=0)
+            self.vclient.cli("clear logging")
 
     def init_tcp_session(self, in_if, out_if, sport, ext_dport):
         # SYN packet in->out
@@ -7143,7 +7256,7 @@ class TestNAT44Out2InDPO(MethodHolder):
     @classmethod
     def setUpClass(cls):
         super(TestNAT44Out2InDPO, cls).setUpClass()
-        cls.vapi.cli("set log class nat level debug")
+        cls.vclient.cli("set log class nat level debug")
 
         cls.tcp_port_in = 6303
         cls.tcp_port_out = 6303
@@ -7164,7 +7277,7 @@ class TestNAT44Out2InDPO(MethodHolder):
         cls.pg1.config_ip6()
         cls.pg1.resolve_ndp()
 
-        r1 = VppIpRoute(cls, "::", 0,
+        r1 = VppIpRoute(cls.vclient, "::", 0,
                         [VppRoutePath(cls.pg1.remote_ip6,
                                       cls.pg1.sw_if_index)],
                         register=False)
@@ -7177,13 +7290,13 @@ class TestNAT44Out2InDPO(MethodHolder):
     def setUp(self):
         super(TestNAT44Out2InDPO, self).setUp()
         flags = self.nat44_config_flags.NAT44_API_IS_OUT2IN_DPO
-        self.vapi.nat44_plugin_enable_disable(enable=1, flags=flags)
+        self.vclient.nat44_plugin_enable_disable(enable=1, flags=flags)
 
     def tearDown(self):
         super(TestNAT44Out2InDPO, self).tearDown()
         if not self.vpp_dead:
-            self.vapi.nat44_plugin_enable_disable(enable=0)
-            self.vapi.cli("clear logging")
+            self.vclient.nat44_plugin_enable_disable(enable=0)
+            self.vclient.cli("clear logging")
 
     def configure_xlat(self):
         self.dst_ip6_pfx = '1:2:3::'
@@ -7194,7 +7307,7 @@ class TestNAT44Out2InDPO(MethodHolder):
         self.src_ip6_pfx_n = socket.inet_pton(socket.AF_INET6,
                                               self.src_ip6_pfx)
         self.src_ip6_pfx_len = 96
-        self.vapi.map_add_domain(self.dst_ip6_pfx_n, self.dst_ip6_pfx_len,
+        self.vclient.map_add_domain(self.dst_ip6_pfx_n, self.dst_ip6_pfx_len,
                                  self.src_ip6_pfx_n, self.src_ip6_pfx_len,
                                  '\x00\x00\x00\x00', 0)
 
@@ -7202,16 +7315,16 @@ class TestNAT44Out2InDPO(MethodHolder):
     def test_464xlat_ce(self):
         """ Test 464XLAT CE with NAT44 """
 
-        nat_config = self.vapi.nat_show_config()
+        nat_config = self.vclient.nat_show_config()
         self.assertEqual(1, nat_config.out2in_dpo)
 
         self.configure_xlat()
 
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat44_interface_add_del_feature(
+        self.vclient.nat44_interface_add_del_feature(
             sw_if_index=self.pg0.sw_if_index,
             flags=flags, is_add=1)
-        self.vapi.nat44_add_del_address_range(first_ip_address=self.nat_addr_n,
+        self.vclient.nat44_add_del_address_range(first_ip_address=self.nat_addr_n,
                                               last_ip_address=self.nat_addr_n,
                                               vrf_id=0xFFFFFFFF, is_add=1)
 
@@ -7237,10 +7350,10 @@ class TestNAT44Out2InDPO(MethodHolder):
             capture = self.pg0.get_capture(len(pkts))
             self.verify_capture_in(capture, self.pg0)
         finally:
-            self.vapi.nat44_interface_add_del_feature(
+            self.vclient.nat44_interface_add_del_feature(
                 sw_if_index=self.pg0.sw_if_index,
                 flags=flags)
-            self.vapi.nat44_add_del_address_range(
+            self.vclient.nat44_add_del_address_range(
                 first_ip_address=self.nat_addr_n,
                 last_ip_address=self.nat_addr_n,
                 vrf_id=0xFFFFFFFF)
diff --git a/src/plugins/nat/test/test_nat64.py b/src/plugins/nat/test/test_nat64.py
index d3bec9780..055da21f7 100644
--- a/src/plugins/nat/test/test_nat64.py
+++ b/src/plugins/nat/test/test_nat64.py
@@ -21,7 +21,7 @@ from scapy.layers.l2 import Ether, GRE
 from scapy.packet import Raw
 from syslog_rfc5424_parser import SyslogMessage, ParseError
 from syslog_rfc5424_parser.constants import SyslogSeverity
-from util import ppc, ppp
+from vpp_pom.util import ppc, ppp
 from vpp_papi import VppEnum
 
 
@@ -59,7 +59,7 @@ class TestNAT64(VppTestCase):
         cls.ip6_interfaces.append(cls.pg_interfaces[2])
         cls.ip4_interfaces = list(cls.pg_interfaces[1:2])
 
-        cls.vapi.ip_table_add_del(is_add=1,
+        cls.vclient.ip_table_add_del(is_add=1,
                                   table={'table_id': cls.vrf1_id,
                                          'is_ip6': 1})
 
@@ -92,20 +92,20 @@ class TestNAT64(VppTestCase):
 
     def setUp(self):
         super(TestNAT64, self).setUp()
-        self.vapi.nat64_plugin_enable_disable(enable=1,
+        self.vclient.nat64_plugin_enable_disable(enable=1,
                                               bib_buckets=128, st_buckets=256)
 
     def tearDown(self):
         super(TestNAT64, self).tearDown()
         if not self.vpp_dead:
-            self.vapi.nat64_plugin_enable_disable(enable=0)
+            self.vclient.nat64_plugin_enable_disable(enable=0)
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show nat64 pool"))
-        self.logger.info(self.vapi.cli("show nat64 interfaces"))
-        self.logger.info(self.vapi.cli("show nat64 prefix"))
-        self.logger.info(self.vapi.cli("show nat64 bib all"))
-        self.logger.info(self.vapi.cli("show nat64 session table all"))
+        self.logger.info(self.vclient.cli("show nat64 pool"))
+        self.logger.info(self.vclient.cli("show nat64 interfaces"))
+        self.logger.info(self.vclient.cli("show nat64 prefix"))
+        self.logger.info(self.vclient.cli("show nat64 bib all"))
+        self.logger.info(self.vclient.cli("show nat64 session table all"))
 
     def create_stream_in_ip6(self, in_if, out_if, hlim=64, pref=None, plen=0):
         """
@@ -597,7 +597,7 @@ class TestNAT64(VppTestCase):
         """ NAT64 inside interface handles Neighbor Advertisement """
 
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg5.sw_if_index)
 
         # Try to send ping
@@ -651,30 +651,30 @@ class TestNAT64(VppTestCase):
         """ Add/delete address to NAT64 pool """
         nat_addr = '1.2.3.4'
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=nat_addr,
                                                 end_addr=nat_addr,
                                                 vrf_id=0xFFFFFFFF, is_add=1)
 
-        addresses = self.vapi.nat64_pool_addr_dump()
+        addresses = self.vclient.nat64_pool_addr_dump()
         self.assertEqual(len(addresses), 1)
         self.assertEqual(str(addresses[0].address), nat_addr)
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=nat_addr,
                                                 end_addr=nat_addr,
                                                 vrf_id=0xFFFFFFFF, is_add=0)
 
-        addresses = self.vapi.nat64_pool_addr_dump()
+        addresses = self.vclient.nat64_pool_addr_dump()
         self.assertEqual(len(addresses), 0)
 
     def test_interface(self):
         """ Enable/disable NAT64 feature on the interface """
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
 
-        interfaces = self.vapi.nat64_interface_dump()
+        interfaces = self.vclient.nat64_interface_dump()
         self.assertEqual(len(interfaces), 2)
         pg0_found = False
         pg1_found = False
@@ -688,17 +688,17 @@ class TestNAT64(VppTestCase):
         self.assertTrue(pg0_found)
         self.assertTrue(pg1_found)
 
-        features = self.vapi.cli("show interface features pg0")
+        features = self.vclient.cli("show interface features pg0")
         self.assertIn('nat64-in2out', features)
-        features = self.vapi.cli("show interface features pg1")
+        features = self.vclient.cli("show interface features pg1")
         self.assertIn('nat64-out2in', features)
 
-        self.vapi.nat64_add_del_interface(is_add=0, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=0, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=0, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=0, flags=flags,
                                           sw_if_index=self.pg1.sw_if_index)
 
-        interfaces = self.vapi.nat64_interface_dump()
+        interfaces = self.vclient.nat64_interface_dump()
         self.assertEqual(len(interfaces), 0)
 
     def test_static_bib(self):
@@ -709,10 +709,10 @@ class TestNAT64(VppTestCase):
         out_port = 5678
         proto = IP_PROTOS.tcp
 
-        self.vapi.nat64_add_del_static_bib(i_addr=in_addr, o_addr=out_addr,
+        self.vclient.nat64_add_del_static_bib(i_addr=in_addr, o_addr=out_addr,
                                            i_port=in_port, o_port=out_port,
                                            proto=proto, vrf_id=0, is_add=1)
-        bib = self.vapi.nat64_bib_dump(proto=IP_PROTOS.tcp)
+        bib = self.vclient.nat64_bib_dump(proto=IP_PROTOS.tcp)
         static_bib_num = 0
         for bibe in bib:
             if bibe.flags & self.config_flags.NAT_IS_STATIC:
@@ -722,34 +722,34 @@ class TestNAT64(VppTestCase):
                 self.assertEqual(bibe.i_port, in_port)
                 self.assertEqual(bibe.o_port, out_port)
         self.assertEqual(static_bib_num, 1)
-        bibs = self.statistics.get_counter('/nat64/total-bibs')
+        bibs = self.vclient.statistics.get_counter('/nat64/total-bibs')
         self.assertEqual(bibs[0][0], 1)
 
-        self.vapi.nat64_add_del_static_bib(i_addr=in_addr, o_addr=out_addr,
+        self.vclient.nat64_add_del_static_bib(i_addr=in_addr, o_addr=out_addr,
                                            i_port=in_port, o_port=out_port,
                                            proto=proto, vrf_id=0, is_add=0)
-        bib = self.vapi.nat64_bib_dump(proto=IP_PROTOS.tcp)
+        bib = self.vclient.nat64_bib_dump(proto=IP_PROTOS.tcp)
         static_bib_num = 0
         for bibe in bib:
             if bibe.flags & self.config_flags.NAT_IS_STATIC:
                 static_bib_num += 1
         self.assertEqual(static_bib_num, 0)
-        bibs = self.statistics.get_counter('/nat64/total-bibs')
+        bibs = self.vclient.statistics.get_counter('/nat64/total-bibs')
         self.assertEqual(bibs[0][0], 0)
 
     def test_set_timeouts(self):
         """ Set NAT64 timeouts """
         # verify default values
-        timeouts = self.vapi.nat64_get_timeouts()
+        timeouts = self.vclient.nat64_get_timeouts()
         self.assertEqual(timeouts.udp, 300)
         self.assertEqual(timeouts.icmp, 60)
         self.assertEqual(timeouts.tcp_transitory, 240)
         self.assertEqual(timeouts.tcp_established, 7440)
 
         # set and verify custom values
-        self.vapi.nat64_set_timeouts(udp=200, tcp_established=7450,
+        self.vclient.nat64_set_timeouts(udp=200, tcp_established=7450,
                                      tcp_transitory=250, icmp=30)
-        timeouts = self.vapi.nat64_get_timeouts()
+        timeouts = self.vclient.nat64_get_timeouts()
         self.assertEqual(timeouts.udp, 200)
         self.assertEqual(timeouts.icmp, 30)
         self.assertEqual(timeouts.tcp_transitory, 250)
@@ -763,21 +763,21 @@ class TestNAT64(VppTestCase):
 
         ses_num_start = self.nat64_get_ses_num()
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
 
         # in2out
-        tcpn = self.statistics.get_counter('/nat64/in2out/tcp')[0]
-        udpn = self.statistics.get_counter('/nat64/in2out/udp')[0]
-        icmpn = self.statistics.get_counter('/nat64/in2out/icmp')[0]
-        drops = self.statistics.get_counter('/nat64/in2out/drops')[0]
+        tcpn = self.vclient.statistics.get_counter('/nat64/in2out/tcp')[0]
+        udpn = self.vclient.statistics.get_counter('/nat64/in2out/udp')[0]
+        icmpn = self.vclient.statistics.get_counter('/nat64/in2out/icmp')[0]
+        drops = self.vclient.statistics.get_counter('/nat64/in2out/drops')[0]
 
         pkts = self.create_stream_in_ip6(self.pg0, self.pg1)
         self.pg0.add_stream(pkts)
@@ -788,20 +788,20 @@ class TestNAT64(VppTestCase):
                                 dst_ip=self.pg1.remote_ip4)
 
         if_idx = self.pg0.sw_if_index
-        cnt = self.statistics.get_counter('/nat64/in2out/tcp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat64/in2out/tcp')[0]
         self.assertEqual(cnt[if_idx] - tcpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat64/in2out/udp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat64/in2out/udp')[0]
         self.assertEqual(cnt[if_idx] - udpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat64/in2out/icmp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat64/in2out/icmp')[0]
         self.assertEqual(cnt[if_idx] - icmpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat64/in2out/drops')[0]
+        cnt = self.vclient.statistics.get_counter('/nat64/in2out/drops')[0]
         self.assertEqual(cnt[if_idx] - drops[if_idx], 0)
 
         # out2in
-        tcpn = self.statistics.get_counter('/nat64/out2in/tcp')[0]
-        udpn = self.statistics.get_counter('/nat64/out2in/udp')[0]
-        icmpn = self.statistics.get_counter('/nat64/out2in/icmp')[0]
-        drops = self.statistics.get_counter('/nat64/out2in/drops')[0]
+        tcpn = self.vclient.statistics.get_counter('/nat64/out2in/tcp')[0]
+        udpn = self.vclient.statistics.get_counter('/nat64/out2in/udp')[0]
+        icmpn = self.vclient.statistics.get_counter('/nat64/out2in/icmp')[0]
+        drops = self.vclient.statistics.get_counter('/nat64/out2in/drops')[0]
 
         pkts = self.create_stream_out(self.pg1, dst_ip=self.nat_addr)
         self.pg1.add_stream(pkts)
@@ -812,18 +812,18 @@ class TestNAT64(VppTestCase):
         self.verify_capture_in_ip6(capture, ip[IPv6].src, self.pg0.remote_ip6)
 
         if_idx = self.pg1.sw_if_index
-        cnt = self.statistics.get_counter('/nat64/out2in/tcp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat64/out2in/tcp')[0]
         self.assertEqual(cnt[if_idx] - tcpn[if_idx], 2)
-        cnt = self.statistics.get_counter('/nat64/out2in/udp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat64/out2in/udp')[0]
         self.assertEqual(cnt[if_idx] - udpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat64/out2in/icmp')[0]
+        cnt = self.vclient.statistics.get_counter('/nat64/out2in/icmp')[0]
         self.assertEqual(cnt[if_idx] - icmpn[if_idx], 1)
-        cnt = self.statistics.get_counter('/nat64/out2in/drops')[0]
+        cnt = self.vclient.statistics.get_counter('/nat64/out2in/drops')[0]
         self.assertEqual(cnt[if_idx] - drops[if_idx], 0)
 
-        bibs = self.statistics.get_counter('/nat64/total-bibs')
+        bibs = self.vclient.statistics.get_counter('/nat64/total-bibs')
         self.assertEqual(bibs[0][0], 3)
-        sessions = self.statistics.get_counter('/nat64/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/nat64/total-sessions')
         self.assertEqual(sessions[0][0], 3)
 
         # in2out
@@ -848,11 +848,11 @@ class TestNAT64(VppTestCase):
         self.assertEqual(ses_num_end - ses_num_start, 3)
 
         # tenant with specific VRF
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.vrf1_nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.vrf1_nat_addr,
                                                 end_addr=self.vrf1_nat_addr,
                                                 vrf_id=self.vrf1_id, is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg2.sw_if_index)
 
         pkts = self.create_stream_in_ip6(self.pg2, self.pg1)
@@ -881,29 +881,29 @@ class TestNAT64(VppTestCase):
 
         ses_num_start = self.nat64_get_ses_num()
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
 
-        self.vapi.nat64_add_del_static_bib(i_addr=self.pg0.remote_ip6,
+        self.vclient.nat64_add_del_static_bib(i_addr=self.pg0.remote_ip6,
                                            o_addr=self.nat_addr,
                                            i_port=self.tcp_port_in,
                                            o_port=self.tcp_port_out,
                                            proto=IP_PROTOS.tcp, vrf_id=0,
                                            is_add=1)
-        self.vapi.nat64_add_del_static_bib(i_addr=self.pg0.remote_ip6,
+        self.vclient.nat64_add_del_static_bib(i_addr=self.pg0.remote_ip6,
                                            o_addr=self.nat_addr,
                                            i_port=self.udp_port_in,
                                            o_port=self.udp_port_out,
                                            proto=IP_PROTOS.udp, vrf_id=0,
                                            is_add=1)
-        self.vapi.nat64_add_del_static_bib(i_addr=self.pg0.remote_ip6,
+        self.vclient.nat64_add_del_static_bib(i_addr=self.pg0.remote_ip6,
                                            o_addr=self.nat_addr,
                                            i_port=self.icmp_id_in,
                                            o_port=self.icmp_id_out,
@@ -936,16 +936,16 @@ class TestNAT64(VppTestCase):
     def test_session_timeout(self):
         """ NAT64 session timeout """
         self.icmp_id_in = 1234
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
-        self.vapi.nat64_set_timeouts(udp=300, tcp_established=5,
+        self.vclient.nat64_set_timeouts(udp=300, tcp_established=5,
                                      tcp_transitory=5,
                                      icmp=5)
 
@@ -969,14 +969,14 @@ class TestNAT64(VppTestCase):
         self.udp_port_in = 6304
         self.icmp_id_in = 6305
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
 
         # send some packets to create sessions
@@ -1073,23 +1073,23 @@ class TestNAT64(VppTestCase):
         ip = IPv6(src=''.join(['64:ff9b::', self.nat_addr]))
         nat_addr_ip6 = ip.src
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
 
-        self.vapi.nat64_add_del_static_bib(i_addr=server.ip6n,
+        self.vclient.nat64_add_del_static_bib(i_addr=server.ip6n,
                                            o_addr=self.nat_addr,
                                            i_port=server_tcp_in_port,
                                            o_port=server_tcp_out_port,
                                            proto=IP_PROTOS.tcp, vrf_id=0,
                                            is_add=1)
-        self.vapi.nat64_add_del_static_bib(i_addr=server.ip6n,
+        self.vclient.nat64_add_del_static_bib(i_addr=server.ip6n,
                                            o_addr=self.nat_addr,
                                            i_port=server_udp_in_port,
                                            o_port=server_udp_out_port,
@@ -1191,29 +1191,29 @@ class TestNAT64(VppTestCase):
     def test_prefix(self):
         """ NAT64 Network-Specific Prefix """
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.vrf1_nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.vrf1_nat_addr,
                                                 end_addr=self.vrf1_nat_addr,
                                                 vrf_id=self.vrf1_id, is_add=1)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg2.sw_if_index)
 
         # Add global prefix
         global_pref64 = "2001:db8::"
         global_pref64_len = 32
         global_pref64_str = "{}/{}".format(global_pref64, global_pref64_len)
-        self.vapi.nat64_add_del_prefix(prefix=global_pref64_str, vrf_id=0,
+        self.vclient.nat64_add_del_prefix(prefix=global_pref64_str, vrf_id=0,
                                        is_add=1)
 
-        prefix = self.vapi.nat64_prefix_dump()
+        prefix = self.vclient.nat64_prefix_dump()
         self.assertEqual(len(prefix), 1)
         self.assertEqual(str(prefix[0].prefix), global_pref64_str)
         self.assertEqual(prefix[0].vrf_id, 0)
@@ -1222,10 +1222,10 @@ class TestNAT64(VppTestCase):
         vrf1_pref64 = "2001:db8:122:300::"
         vrf1_pref64_len = 56
         vrf1_pref64_str = "{}/{}".format(vrf1_pref64, vrf1_pref64_len)
-        self.vapi.nat64_add_del_prefix(prefix=vrf1_pref64_str,
+        self.vclient.nat64_add_del_prefix(prefix=vrf1_pref64_str,
                                        vrf_id=self.vrf1_id, is_add=1)
 
-        prefix = self.vapi.nat64_prefix_dump()
+        prefix = self.vclient.nat64_prefix_dump()
         self.assertEqual(len(prefix), 2)
 
         # Global prefix
@@ -1275,14 +1275,14 @@ class TestNAT64(VppTestCase):
     def test_unknown_proto(self):
         """ NAT64 translate packet with unknown protocol """
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
         remote_ip6 = self.compose_ip6(self.pg1.remote_ip4, '64:ff9b::', 96)
 
@@ -1347,30 +1347,30 @@ class TestNAT64(VppTestCase):
         server_nat_ip6 = self.compose_ip6(server_nat_ip, '64:ff9b::', 96)
         client_nat_ip6 = self.compose_ip6(client_nat_ip, '64:ff9b::', 96)
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=server_nat_ip,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=server_nat_ip,
                                                 end_addr=client_nat_ip,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
 
-        self.vapi.nat64_add_del_static_bib(i_addr=server.ip6n,
+        self.vclient.nat64_add_del_static_bib(i_addr=server.ip6n,
                                            o_addr=server_nat_ip,
                                            i_port=server_tcp_in_port,
                                            o_port=server_tcp_out_port,
                                            proto=IP_PROTOS.tcp, vrf_id=0,
                                            is_add=1)
 
-        self.vapi.nat64_add_del_static_bib(i_addr=server.ip6n,
+        self.vclient.nat64_add_del_static_bib(i_addr=server.ip6n,
                                            o_addr=server_nat_ip, i_port=0,
                                            o_port=0,
                                            proto=IP_PROTOS.gre, vrf_id=0,
                                            is_add=1)
 
-        self.vapi.nat64_add_del_static_bib(i_addr=client.ip6n,
+        self.vclient.nat64_add_del_static_bib(i_addr=client.ip6n,
                                            o_addr=client_nat_ip,
                                            i_port=client_tcp_in_port,
                                            o_port=client_tcp_out_port,
@@ -1430,14 +1430,14 @@ class TestNAT64(VppTestCase):
                                            '64:ff9b::',
                                            96)
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg3.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg3.sw_if_index)
 
         # in2out
@@ -1487,14 +1487,14 @@ class TestNAT64(VppTestCase):
         """ NAT64 translate fragments arriving in order """
         self.tcp_port_in = random.randint(1025, 65535)
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
 
         # in2out
@@ -1541,18 +1541,18 @@ class TestNAT64(VppTestCase):
         ip = IPv6(src=''.join(['64:ff9b::', self.nat_addr]))
         nat_addr_ip6 = ip.src
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
 
         # add static BIB entry for server
-        self.vapi.nat64_add_del_static_bib(i_addr=server.ip6n,
+        self.vclient.nat64_add_del_static_bib(i_addr=server.ip6n,
                                            o_addr=self.nat_addr,
                                            i_port=server_in_port,
                                            o_port=server_out_port,
@@ -1579,14 +1579,14 @@ class TestNAT64(VppTestCase):
         """ NAT64 translate fragments arriving out of order """
         self.tcp_port_in = random.randint(1025, 65535)
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
 
         # in2out
@@ -1626,17 +1626,17 @@ class TestNAT64(VppTestCase):
 
     def test_interface_addr(self):
         """ Acquire NAT64 pool addresses from interface """
-        self.vapi.nat64_add_del_interface_addr(
+        self.vclient.nat64_add_del_interface_addr(
             is_add=1,
             sw_if_index=self.pg4.sw_if_index)
 
         # no address in NAT64 pool
-        addresses = self.vapi.nat44_address_dump()
+        addresses = self.vclient.nat44_address_dump()
         self.assertEqual(0, len(addresses))
 
         # configure interface address and check NAT64 address pool
         self.pg4.config_ip4()
-        addresses = self.vapi.nat64_pool_addr_dump()
+        addresses = self.vclient.nat64_pool_addr_dump()
         self.assertEqual(len(addresses), 1)
 
         self.assertEqual(str(addresses[0].address),
@@ -1644,7 +1644,7 @@ class TestNAT64(VppTestCase):
 
         # remove interface address and check NAT64 address pool
         self.pg4.unconfig_ip4()
-        addresses = self.vapi.nat64_pool_addr_dump()
+        addresses = self.vclient.nat64_pool_addr_dump()
         self.assertEqual(0, len(addresses))
 
     @unittest.skipUnless(running_extended_tests, "part of extended tests")
@@ -1656,14 +1656,14 @@ class TestNAT64(VppTestCase):
                                            '64:ff9b::',
                                            96)
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
 
         pkts = []
@@ -1683,11 +1683,11 @@ class TestNAT64(VppTestCase):
         self.pg_start()
         self.pg1.get_capture(max_sessions)
 
-        self.vapi.set_ipfix_exporter(collector_address=self.pg3.remote_ip4,
+        self.vclient.set_ipfix_exporter(collector_address=self.pg3.remote_ip4,
                                      src_address=self.pg3.local_ip4,
                                      path_mtu=512,
                                      template_interval=10)
-        self.vapi.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
+        self.vclient.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
                                            src_port=self.ipfix_src_port,
                                            enable=1)
 
@@ -1699,7 +1699,7 @@ class TestNAT64(VppTestCase):
         self.pg_start()
         self.pg1.assert_nothing_captured()
         sleep(1)
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         capture = self.pg3.get_capture(7)
         ipfix = IPFIXDecoder()
         # first load template
@@ -1727,7 +1727,7 @@ class TestNAT64(VppTestCase):
         self.pg_start()
         self.pg1.assert_nothing_captured()
         sleep(1)
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         capture = self.pg3.get_capture(1)
         # verify events in data set
         for p in capture:
@@ -1749,20 +1749,20 @@ class TestNAT64(VppTestCase):
                                            '64:ff9b::',
                                            96)
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
-        self.vapi.set_ipfix_exporter(collector_address=self.pg3.remote_ip4,
+        self.vclient.set_ipfix_exporter(collector_address=self.pg3.remote_ip4,
                                      src_address=self.pg3.local_ip4,
                                      path_mtu=512,
                                      template_interval=10)
-        self.vapi.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
+        self.vclient.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
                                            src_port=self.ipfix_src_port,
                                            enable=1)
 
@@ -1775,7 +1775,7 @@ class TestNAT64(VppTestCase):
         self.pg_start()
         p = self.pg1.get_capture(1)
         self.tcp_port_out = p[0][TCP].sport
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         capture = self.pg3.get_capture(8)
         ipfix = IPFIXDecoder()
         # first load template
@@ -1806,11 +1806,11 @@ class TestNAT64(VppTestCase):
 
         # Delete
         self.pg_enable_capture(self.pg_interfaces)
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=0)
-        self.vapi.ipfix_flush()
+        self.vclient.ipfix_flush()
         capture = self.pg3.get_capture(2)
         # verify events in data set
         for p in capture:
@@ -1841,18 +1841,18 @@ class TestNAT64(VppTestCase):
                                            '64:ff9b::',
                                            96)
 
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=1)
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat64_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat64_add_del_interface(is_add=1, flags=0,
+        self.vclient.nat64_add_del_interface(is_add=1, flags=0,
                                           sw_if_index=self.pg1.sw_if_index)
-        self.vapi.syslog_set_filter(
+        self.vclient.syslog_set_filter(
             self.SYSLOG_SEVERITY.SYSLOG_API_SEVERITY_INFO)
-        self.vapi.syslog_set_sender(self.pg3.local_ip4, self.pg3.remote_ip4)
+        self.vclient.syslog_set_sender(self.pg3.local_ip4, self.pg3.remote_ip4)
 
         p = (Ether(src=self.pg0.remote_mac, dst=self.pg0.local_mac) /
              IPv6(src=self.pg0.remote_ip6, dst=remote_host_ip6) /
@@ -1867,7 +1867,7 @@ class TestNAT64(VppTestCase):
 
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
-        self.vapi.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
+        self.vclient.nat64_add_del_pool_addr_range(start_addr=self.nat_addr,
                                                 end_addr=self.nat_addr,
                                                 vrf_id=0xFFFFFFFF,
                                                 is_add=0)
@@ -1878,34 +1878,34 @@ class TestNAT64(VppTestCase):
         """
         Return number of active NAT64 sessions.
         """
-        st = self.vapi.nat64_st_dump(proto=255)
+        st = self.vclient.nat64_st_dump(proto=255)
         return len(st)
 
     def clear_nat64(self):
         """
         Clear NAT64 configuration.
         """
-        self.vapi.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
+        self.vclient.nat_ipfix_enable_disable(domain_id=self.ipfix_domain_id,
                                            src_port=self.ipfix_src_port,
                                            enable=0)
         self.ipfix_src_port = 4739
         self.ipfix_domain_id = 1
 
-        self.vapi.syslog_set_filter(
+        self.vclient.syslog_set_filter(
             self.SYSLOG_SEVERITY.SYSLOG_API_SEVERITY_EMERG)
 
-        self.vapi.nat64_set_timeouts(udp=300, tcp_established=7440,
+        self.vclient.nat64_set_timeouts(udp=300, tcp_established=7440,
                                      tcp_transitory=240, icmp=60)
 
-        interfaces = self.vapi.nat64_interface_dump()
+        interfaces = self.vclient.nat64_interface_dump()
         for intf in interfaces:
-            self.vapi.nat64_add_del_interface(is_add=0, flags=intf.flags,
+            self.vclient.nat64_add_del_interface(is_add=0, flags=intf.flags,
                                               sw_if_index=intf.sw_if_index)
 
-        bib = self.vapi.nat64_bib_dump(proto=255)
+        bib = self.vclient.nat64_bib_dump(proto=255)
         for bibe in bib:
             if bibe.flags & self.config_flags.NAT_IS_STATIC:
-                self.vapi.nat64_add_del_static_bib(i_addr=bibe.i_addr,
+                self.vclient.nat64_add_del_static_bib(i_addr=bibe.i_addr,
                                                    o_addr=bibe.o_addr,
                                                    i_port=bibe.i_port,
                                                    o_port=bibe.o_port,
@@ -1913,21 +1913,21 @@ class TestNAT64(VppTestCase):
                                                    vrf_id=bibe.vrf_id,
                                                    is_add=0)
 
-        adresses = self.vapi.nat64_pool_addr_dump()
+        adresses = self.vclient.nat64_pool_addr_dump()
         for addr in adresses:
-            self.vapi.nat64_add_del_pool_addr_range(start_addr=addr.address,
+            self.vclient.nat64_add_del_pool_addr_range(start_addr=addr.address,
                                                     end_addr=addr.address,
                                                     vrf_id=addr.vrf_id,
                                                     is_add=0)
 
-        prefixes = self.vapi.nat64_prefix_dump()
+        prefixes = self.vclient.nat64_prefix_dump()
         for prefix in prefixes:
-            self.vapi.nat64_add_del_prefix(prefix=str(prefix.prefix),
+            self.vclient.nat64_add_del_prefix(prefix=str(prefix.prefix),
                                            vrf_id=prefix.vrf_id, is_add=0)
 
-        bibs = self.statistics.get_counter('/nat64/total-bibs')
+        bibs = self.vclient.statistics.get_counter('/nat64/total-bibs')
         self.assertEqual(bibs[0][0], 0)
-        sessions = self.statistics.get_counter('/nat64/total-sessions')
+        sessions = self.vclient.statistics.get_counter('/nat64/total-sessions')
         self.assertEqual(sessions[0][0], 0)
 
 
diff --git a/src/plugins/nat/test/test_nat66.py b/src/plugins/nat/test/test_nat66.py
index bd1b50b9e..e8dd3b7b6 100644
--- a/src/plugins/nat/test/test_nat66.py
+++ b/src/plugins/nat/test/test_nat66.py
@@ -24,11 +24,11 @@ from scapy.layers.l2 import Ether, ARP, GRE
 from scapy.packet import Raw
 from syslog_rfc5424_parser import SyslogMessage, ParseError
 from syslog_rfc5424_parser.constants import SyslogSeverity
-from util import ip4_range
-from util import ppc, ppp
-from vpp_acl import AclRule, VppAcl, VppAclInterface
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_neighbor import VppNeighbor
+from vpp_pom.util import ip4_range
+from vpp_pom.util import ppc, ppp
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl, VppAclInterface
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_neighbor import VppNeighbor
 from vpp_papi import VppEnum
 
 
@@ -63,11 +63,11 @@ class TestNAT66(MethodHolder):
     def test_static(self):
         """ 1:1 NAT66 test """
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat66_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat66_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat66_add_del_interface(is_add=1,
+        self.vclient.nat66_add_del_interface(is_add=1,
                                           sw_if_index=self.pg1.sw_if_index)
-        self.vapi.nat66_add_del_static_mapping(
+        self.vclient.nat66_add_del_static_mapping(
             local_ip_address=self.pg0.remote_ip6,
             external_ip_address=self.nat_addr,
             is_add=1)
@@ -135,18 +135,18 @@ class TestNAT66(MethodHolder):
                 self.logger.error(ppp("Unexpected or invalid packet:", packet))
                 raise
 
-        sm = self.vapi.nat66_static_mapping_dump()
+        sm = self.vclient.nat66_static_mapping_dump()
         self.assertEqual(len(sm), 1)
         self.assertEqual(sm[0].total_pkts, 8)
 
     def test_check_no_translate(self):
         """ NAT66 translate only when egress interface is outside interface """
         flags = self.config_flags.NAT_IS_INSIDE
-        self.vapi.nat66_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat66_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg0.sw_if_index)
-        self.vapi.nat66_add_del_interface(is_add=1, flags=flags,
+        self.vclient.nat66_add_del_interface(is_add=1, flags=flags,
                                           sw_if_index=self.pg1.sw_if_index)
-        self.vapi.nat66_add_del_static_mapping(
+        self.vclient.nat66_add_del_static_mapping(
             local_ip_address=self.pg0.remote_ip6,
             external_ip_address=self.nat_addr,
             is_add=1)
@@ -171,14 +171,14 @@ class TestNAT66(MethodHolder):
         """
         Clear NAT66 configuration.
         """
-        interfaces = self.vapi.nat66_interface_dump()
+        interfaces = self.vclient.nat66_interface_dump()
         for intf in interfaces:
-            self.vapi.nat66_add_del_interface(is_add=0, flags=intf.flags,
+            self.vclient.nat66_add_del_interface(is_add=0, flags=intf.flags,
                                               sw_if_index=intf.sw_if_index)
 
-        static_mappings = self.vapi.nat66_static_mapping_dump()
+        static_mappings = self.vclient.nat66_static_mapping_dump()
         for sm in static_mappings:
-            self.vapi.nat66_add_del_static_mapping(
+            self.vclient.nat66_add_del_static_mapping(
                 local_ip_address=sm.local_ip_address,
                 external_ip_address=sm.external_ip_address, vrf_id=sm.vrf_id,
                 is_add=0)
@@ -188,8 +188,8 @@ class TestNAT66(MethodHolder):
         self.clear_nat66()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show nat66 interfaces"))
-        self.logger.info(self.vapi.cli("show nat66 static mappings"))
+        self.logger.info(self.vclient.cli("show nat66 interfaces"))
+        self.logger.info(self.vclient.cli("show nat66 static mappings"))
 
 
 if __name__ == '__main__':
diff --git a/src/plugins/pppoe/test/test_pppoe.py b/src/plugins/pppoe/test/test_pppoe.py
index cce8fe7fc..bfa4ae419 100644
--- a/src/plugins/pppoe/test/test_pppoe.py
+++ b/src/plugins/pppoe/test/test_pppoe.py
@@ -9,9 +9,9 @@ from scapy.layers.ppp import PPPoE, PPPoED, PPP
 from scapy.layers.inet import IP
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_pppoe_interface import VppPppoeInterface
-from util import ppp, ppc
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.plugins.vpp_pppoe_interface import VppPppoeInterface
+from vpp_pom.util import ppp, ppc
 
 
 class TestPPPoE(VppTestCase):
@@ -48,11 +48,11 @@ class TestPPPoE(VppTestCase):
             i.admin_down()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show int"))
-        self.logger.info(self.vapi.cli("show pppoe fib"))
-        self.logger.info(self.vapi.cli("show pppoe session"))
-        self.logger.info(self.vapi.cli("show ip fib"))
-        self.logger.info(self.vapi.cli("show trace"))
+        self.logger.info(self.vclient.cli("show int"))
+        self.logger.info(self.vclient.cli("show pppoe fib"))
+        self.logger.info(self.vclient.cli("show pppoe session"))
+        self.logger.info(self.vclient.cli("show ip fib"))
+        self.logger.info(self.vclient.cli("show trace"))
 
     def create_stream_pppoe_discovery(self, src_if, dst_if,
                                       client_mac, count=1):
@@ -182,12 +182,12 @@ class TestPPPoE(VppTestCase):
     def test_PPPoE_Decap(self):
         """ PPPoE Decap Test """
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
 
         #
         # Add a route that resolves the server's destination
         #
-        route_sever_dst = VppIpRoute(self, "100.1.1.100", 32,
+        route_sever_dst = VppIpRoute(self.vclient, "100.1.1.100", 32,
                                      [VppRoutePath(self.pg1.remote_ip4,
                                                    self.pg1.sw_if_index)])
         route_sever_dst.add_vpp_config()
@@ -206,7 +206,7 @@ class TestPPPoE(VppTestCase):
         self.pg_start()
 
         # Create PPPoE session
-        pppoe_if = VppPppoeInterface(self,
+        pppoe_if = VppPppoeInterface(self.vclient,
                                      self.pg0.remote_ip4,
                                      self.pg0.remote_mac,
                                      self.session_id)
@@ -228,9 +228,9 @@ class TestPPPoE(VppTestCase):
         rx2 = self.pg1.get_capture(len(tx2))
         self.verify_decapped_pppoe(self.pg0, rx2, tx2)
 
-        self.logger.info(self.vapi.cli("show pppoe fib"))
-        self.logger.info(self.vapi.cli("show pppoe session"))
-        self.logger.info(self.vapi.cli("show ip fib"))
+        self.logger.info(self.vclient.cli("show pppoe fib"))
+        self.logger.info(self.vclient.cli("show pppoe session"))
+        self.logger.info(self.vclient.cli("show ip fib"))
 
         #
         # test case cleanup
@@ -245,12 +245,12 @@ class TestPPPoE(VppTestCase):
     def test_PPPoE_Encap(self):
         """ PPPoE Encap Test """
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
 
         #
         # Add a route that resolves the server's destination
         #
-        route_sever_dst = VppIpRoute(self, "100.1.1.100", 32,
+        route_sever_dst = VppIpRoute(self.vclient, "100.1.1.100", 32,
                                      [VppRoutePath(self.pg1.remote_ip4,
                                                    self.pg1.sw_if_index)])
         route_sever_dst.add_vpp_config()
@@ -269,7 +269,7 @@ class TestPPPoE(VppTestCase):
         self.pg_start()
 
         # Create PPPoE session
-        pppoe_if = VppPppoeInterface(self,
+        pppoe_if = VppPppoeInterface(self.vclient,
                                      self.pg0.remote_ip4,
                                      self.pg0.remote_mac,
                                      self.session_id)
@@ -279,7 +279,7 @@ class TestPPPoE(VppTestCase):
         # Send a packet stream that is routed into the session
         #  - packets are PPPoE encapped
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx2 = self.create_stream_ip4(self.pg1, self.pg0,
                                      self.pg0.remote_ip4, self.dst_ip, 65)
         self.pg1.add_stream(tx2)
@@ -290,10 +290,10 @@ class TestPPPoE(VppTestCase):
         rx2 = self.pg0.get_capture(len(tx2))
         self.verify_encaped_pppoe(self.pg1, rx2, tx2, self.session_id)
 
-        self.logger.info(self.vapi.cli("show pppoe fib"))
-        self.logger.info(self.vapi.cli("show pppoe session"))
-        self.logger.info(self.vapi.cli("show ip fib"))
-        self.logger.info(self.vapi.cli("show adj"))
+        self.logger.info(self.vclient.cli("show pppoe fib"))
+        self.logger.info(self.vclient.cli("show pppoe session"))
+        self.logger.info(self.vclient.cli("show ip fib"))
+        self.logger.info(self.vclient.cli("show adj"))
 
         #
         # test case cleanup
@@ -308,12 +308,12 @@ class TestPPPoE(VppTestCase):
     def test_PPPoE_Add_Twice(self):
         """ PPPoE Add Same Session Twice Test """
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
 
         #
         # Add a route that resolves the server's destination
         #
-        route_sever_dst = VppIpRoute(self, "100.1.1.100", 32,
+        route_sever_dst = VppIpRoute(self.vclient, "100.1.1.100", 32,
                                      [VppRoutePath(self.pg1.remote_ip4,
                                                    self.pg1.sw_if_index)])
         route_sever_dst.add_vpp_config()
@@ -332,7 +332,7 @@ class TestPPPoE(VppTestCase):
         self.pg_start()
 
         # Create PPPoE session
-        pppoe_if = VppPppoeInterface(self,
+        pppoe_if = VppPppoeInterface(self.vclient,
                                      self.pg0.remote_ip4,
                                      self.pg0.remote_mac,
                                      self.session_id)
@@ -362,12 +362,12 @@ class TestPPPoE(VppTestCase):
     def test_PPPoE_Del_Twice(self):
         """ PPPoE Delete Same Session Twice Test """
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
 
         #
         # Add a route that resolves the server's destination
         #
-        route_sever_dst = VppIpRoute(self, "100.1.1.100", 32,
+        route_sever_dst = VppIpRoute(self.vclient, "100.1.1.100", 32,
                                      [VppRoutePath(self.pg1.remote_ip4,
                                                    self.pg1.sw_if_index)])
         route_sever_dst.add_vpp_config()
@@ -386,7 +386,7 @@ class TestPPPoE(VppTestCase):
         self.pg_start()
 
         # Create PPPoE session
-        pppoe_if = VppPppoeInterface(self,
+        pppoe_if = VppPppoeInterface(self.vclient,
                                      self.pg0.remote_ip4,
                                      self.pg0.remote_mac,
                                      self.session_id)
@@ -416,12 +416,12 @@ class TestPPPoE(VppTestCase):
     def test_PPPoE_Decap_Multiple(self):
         """ PPPoE Decap Multiple Sessions Test """
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
 
         #
         # Add a route that resolves the server's destination
         #
-        route_sever_dst = VppIpRoute(self, "100.1.1.100", 32,
+        route_sever_dst = VppIpRoute(self.vclient, "100.1.1.100", 32,
                                      [VppRoutePath(self.pg1.remote_ip4,
                                                    self.pg1.sw_if_index)])
         route_sever_dst.add_vpp_config()
@@ -440,7 +440,7 @@ class TestPPPoE(VppTestCase):
         self.pg_start()
 
         # Create PPPoE session 1
-        pppoe_if1 = VppPppoeInterface(self,
+        pppoe_if1 = VppPppoeInterface(self.vclient,
                                       self.pg0.remote_ip4,
                                       self.pg0.remote_mac,
                                       self.session_id)
@@ -460,7 +460,7 @@ class TestPPPoE(VppTestCase):
         self.pg_start()
 
         # Create PPPoE session 2
-        pppoe_if2 = VppPppoeInterface(self,
+        pppoe_if2 = VppPppoeInterface(self.vclient,
                                       self.pg2.remote_ip4,
                                       self.pg2.remote_mac,
                                       self.session_id + 1)
@@ -494,9 +494,9 @@ class TestPPPoE(VppTestCase):
         rx5 = self.pg1.get_capture(len(tx5))
         self.verify_decapped_pppoe(self.pg2, rx5, tx5)
 
-        self.logger.info(self.vapi.cli("show pppoe fib"))
-        self.logger.info(self.vapi.cli("show pppoe session"))
-        self.logger.info(self.vapi.cli("show ip fib"))
+        self.logger.info(self.vclient.cli("show pppoe fib"))
+        self.logger.info(self.vclient.cli("show pppoe session"))
+        self.logger.info(self.vclient.cli("show ip fib"))
 
         #
         # test case cleanup
@@ -512,12 +512,12 @@ class TestPPPoE(VppTestCase):
     def test_PPPoE_Encap_Multiple(self):
         """ PPPoE Encap Multiple Sessions Test """
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
 
         #
         # Add a route that resolves the server's destination
         #
-        route_sever_dst = VppIpRoute(self, "100.1.1.100", 32,
+        route_sever_dst = VppIpRoute(self.vclient, "100.1.1.100", 32,
                                      [VppRoutePath(self.pg1.remote_ip4,
                                                    self.pg1.sw_if_index)])
         route_sever_dst.add_vpp_config()
@@ -536,7 +536,7 @@ class TestPPPoE(VppTestCase):
         self.pg_start()
 
         # Create PPPoE session 1
-        pppoe_if1 = VppPppoeInterface(self,
+        pppoe_if1 = VppPppoeInterface(self.vclient,
                                       self.pg0.remote_ip4,
                                       self.pg0.remote_mac,
                                       self.session_id)
@@ -556,7 +556,7 @@ class TestPPPoE(VppTestCase):
         self.pg_start()
 
         # Create PPPoE session 2
-        pppoe_if2 = VppPppoeInterface(self,
+        pppoe_if2 = VppPppoeInterface(self.vclient,
                                       self.pg2.remote_ip4,
                                       self.pg2.remote_mac,
                                       self.session_id + 1)
@@ -566,7 +566,7 @@ class TestPPPoE(VppTestCase):
         # Send a packet stream that is routed into the session
         #  - packets are PPPoE encapped
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx2 = self.create_stream_ip4(self.pg1, self.pg0,
                                      self.pg0.remote_ip4, self.dst_ip)
         self.pg1.add_stream(tx2)
@@ -587,9 +587,9 @@ class TestPPPoE(VppTestCase):
         rx5 = self.pg2.get_capture(len(tx5))
         self.verify_encaped_pppoe(self.pg1, rx5, tx5, self.session_id + 1)
 
-        self.logger.info(self.vapi.cli("show pppoe fib"))
-        self.logger.info(self.vapi.cli("show pppoe session"))
-        self.logger.info(self.vapi.cli("show ip fib"))
+        self.logger.info(self.vclient.cli("show pppoe fib"))
+        self.logger.info(self.vclient.cli("show pppoe session"))
+        self.logger.info(self.vclient.cli("show ip fib"))
 
         #
         # test case cleanup
diff --git a/src/plugins/quic/test/test_quic.py b/src/plugins/quic/test/test_quic.py
index d2c2476b7..f1d825fd2 100644
--- a/src/plugins/quic/test/test_quic.py
+++ b/src/plugins/quic/test/test_quic.py
@@ -7,7 +7,7 @@ import subprocess
 import signal
 from framework import VppTestCase, VppTestRunner, running_extended_tests, \
     Worker
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 class QUICAppWorker(Worker):
@@ -69,7 +69,7 @@ class QUICTestCase(VppTestCase):
             i.admin_up()
 
             if table_id != 0:
-                tbl = VppIpTable(self, table_id)
+                tbl = VppIpTable(self.vclient, table_id)
                 tbl.add_vpp_config()
 
             i.set_table_ip4(table_id)
@@ -77,23 +77,23 @@ class QUICTestCase(VppTestCase):
             table_id += 1
 
         # Configure namespaces
-        self.vapi.app_namespace_add_del(namespace_id="server",
+        self.vclient.app_namespace_add_del(namespace_id="server",
                                         sw_if_index=self.loop0.sw_if_index)
-        self.vapi.app_namespace_add_del(namespace_id="client",
+        self.vclient.app_namespace_add_del(namespace_id="client",
                                         sw_if_index=self.loop1.sw_if_index)
 
         # Add inter-table routes
-        self.ip_t01 = VppIpRoute(self, self.loop1.local_ip4, 32,
+        self.ip_t01 = VppIpRoute(self.vclient, self.loop1.local_ip4, 32,
                                  [VppRoutePath("0.0.0.0",
                                                0xffffffff,
                                                nh_table_id=2)], table_id=1)
-        self.ip_t10 = VppIpRoute(self, self.loop0.local_ip4, 32,
+        self.ip_t10 = VppIpRoute(self.vclient, self.loop0.local_ip4, 32,
                                  [VppRoutePath("0.0.0.0",
                                                0xffffffff,
                                                nh_table_id=1)], table_id=2)
         self.ip_t01.add_vpp_config()
         self.ip_t10.add_vpp_config()
-        self.logger.debug(self.vapi.cli("show ip fib"))
+        self.logger.debug(self.vclient.cli("show ip fib"))
 
     def tearDown(self):
         # Delete inter-table routes
@@ -122,7 +122,7 @@ class QUICEchoIntTestCase(QUICTestCase):
         super(QUICEchoIntTestCase, self).tearDown()
 
     def server(self, *args):
-        error = self.vapi.cli(
+        error = self.vclient.cli(
             "test echo server %s %s" %
             (self.server_args, ' '.join(args)))
         if error:
@@ -130,7 +130,7 @@ class QUICEchoIntTestCase(QUICTestCase):
             self.assertNotIn("failed", error)
 
     def client(self, *args):
-        error = self.vapi.cli(
+        error = self.vclient.cli(
             "test echo client %s %s" %
             (self.client_args, ' '.join(args)))
         if error:
@@ -206,7 +206,7 @@ class QUICEchoExtTestCase(QUICTestCase):
         self.client_echo_test_args = common_args + \
             ["client", "appns", "client", "fifo-size",
              f"{self.client_fifo_size}"]
-        error = self.vapi.cli("quic set fifo-size 2M")
+        error = self.vclient.cli("quic set fifo-size 2M")
         if error:
             self.logger.critical(error)
             self.assertNotIn("failed", error)
diff --git a/src/plugins/srv6-ad/test/test_srv6_ad.py b/src/plugins/srv6-ad/test/test_srv6_ad.py
index 2627df32a..a893c770a 100644
--- a/src/plugins/srv6-ad/test/test_srv6_ad.py
+++ b/src/plugins/srv6-ad/test/test_srv6_ad.py
@@ -5,9 +5,9 @@ import binascii
 from socket import AF_INET6
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable
-from vpp_srv6 import SRv6LocalSIDBehaviors, VppSRv6LocalSID, VppSRv6Policy, \
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable
+from vpp_pom.plugins.vpp_srv6 import SRv6LocalSIDBehaviors, VppSRv6LocalSID, VppSRv6Policy, \
     SRv6PolicyType, VppSRv6Steering, SRv6PolicySteeringTypes
 
 import scapy.compat
@@ -16,7 +16,7 @@ from scapy.layers.l2 import Ether, Dot1Q
 from scapy.layers.inet6 import IPv6, UDP, IPv6ExtHdrSegmentRouting
 from scapy.layers.inet import IP, UDP
 
-from util import ppp
+from vpp_pom.util import ppp
 
 
 class TestSRv6(VppTestCase):
@@ -113,11 +113,11 @@ class TestSRv6(VppTestCase):
                                      ipv6_table_id[i], ipv4_table_id[i])
 
         if any(ipv6):
-            self.logger.debug(self.vapi.cli("show ip6 neighbors"))
+            self.logger.debug(self.vclient.cli("show ip6 neighbors"))
         if any(ipv4):
-            self.logger.debug(self.vapi.cli("show ip4 neighbors"))
-        self.logger.debug(self.vapi.cli("show interface"))
-        self.logger.debug(self.vapi.cli("show hardware"))
+            self.logger.debug(self.vclient.cli("show ip4 neighbors"))
+        self.logger.debug(self.vclient.cli("show interface"))
+        self.logger.debug(self.vclient.cli("show hardware"))
 
         return self.pg_interfaces
 
@@ -146,7 +146,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[True, True])
 
         # configure route to next segment
-        route = VppIpRoute(self, self.sid_list[self.test_sid_index + 1], 128,
+        route = VppIpRoute(self.vclient, self.sid_list[self.test_sid_index + 1], 128,
                            [VppRoutePath(self.pg0.remote_ip6,
                                          self.pg0.sw_if_index,
                                          proto=DpoProto.DPO_PROTO_IP6)])
@@ -159,10 +159,10 @@ class TestSRv6(VppTestCase):
                   " nh " + self.pg1.remote_ip6 + \
                   " oif " + self.pg1.name + \
                   " iif " + self.pg1.name
-        self.vapi.cli(cli_str)
+        self.vclient.cli(cli_str)
 
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # send one packet per packet size
         count = len(self.pg_packet_sizes)
@@ -182,7 +182,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AD_IPv6_out)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # prepare IPv6 header for returning packets
         packet_header2 = self.create_packet_header_IPv6()
@@ -196,12 +196,12 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AD_IPv6_in)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         cli_str = "sr localsid del address " + \
                   self.sid_list[self.test_sid_index]
-        self.vapi.cli(cli_str)
+        self.vclient.cli(cli_str)
 
         # cleanup interfaces
         self.teardown_interfaces()
@@ -280,7 +280,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[True, False], ipv4=[False, True])
 
         # configure route to next segment
-        route = VppIpRoute(self, self.sid_list[self.test_sid_index + 1], 128,
+        route = VppIpRoute(self.vclient, self.sid_list[self.test_sid_index + 1], 128,
                            [VppRoutePath(self.pg0.remote_ip6,
                                          self.pg0.sw_if_index,
                                          proto=DpoProto.DPO_PROTO_IP6)])
@@ -293,10 +293,10 @@ class TestSRv6(VppTestCase):
                   " nh " + self.pg1.remote_ip4 + \
                   " oif " + self.pg1.name + \
                   " iif " + self.pg1.name
-        self.vapi.cli(cli_str)
+        self.vclient.cli(cli_str)
 
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # send one packet per packet size
         count = len(self.pg_packet_sizes)
@@ -316,7 +316,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AD_IPv4_out)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # prepare IPv6 header for returning packets
         packet_header2 = self.create_packet_header_IPv4()
@@ -330,12 +330,12 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AD_IPv4_in)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         cli_str = "sr localsid del address " + \
                   self.sid_list[self.test_sid_index]
-        self.vapi.cli(cli_str)
+        self.vclient.cli(cli_str)
 
         # cleanup interfaces
         self.teardown_interfaces()
@@ -422,7 +422,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[True, False])
 
         # configure route to next segment
-        route = VppIpRoute(self, self.sid_list[self.test_sid_index + 1], 128,
+        route = VppIpRoute(self.vclient, self.sid_list[self.test_sid_index + 1], 128,
                            [VppRoutePath(self.pg0.remote_ip6,
                                          self.pg0.sw_if_index,
                                          proto=DpoProto.DPO_PROTO_IP6)])
@@ -434,10 +434,10 @@ class TestSRv6(VppTestCase):
                   " behavior end.ad" + \
                   " oif " + self.pg1.name + \
                   " iif " + self.pg1.name
-        self.vapi.cli(cli_str)
+        self.vclient.cli(cli_str)
 
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # send one packet per packet size
         count = len(self.pg_packet_sizes)
@@ -458,7 +458,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AD_L2_out)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # prepare L2 header for returning packets
         packet_header2 = self.create_packet_header_L2()
@@ -472,12 +472,12 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AD_L2_in)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         cli_str = "sr localsid del address " + \
                   self.sid_list[self.test_sid_index]
-        self.vapi.cli(cli_str)
+        self.vclient.cli(cli_str)
 
         # cleanup interfaces
         self.teardown_interfaces()
diff --git a/src/plugins/srv6-am/test/test_srv6.py b/src/plugins/srv6-am/test/test_srv6.py
index 449ad59ac..2c5a9c234 100644
--- a/src/plugins/srv6-am/test/test_srv6.py
+++ b/src/plugins/srv6-am/test/test_srv6.py
@@ -5,8 +5,8 @@ import binascii
 from socket import AF_INET6
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpRoute, VppRoutePath, FibPathProto, VppIpTable
-from vpp_srv6 import SRv6LocalSIDBehaviors, VppSRv6LocalSID, VppSRv6Policy, \
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, FibPathProto, VppIpTable
+from vpp_pom.plugins.vpp_srv6 import SRv6LocalSIDBehaviors, VppSRv6LocalSID, VppSRv6Policy, \
     SRv6PolicyType, VppSRv6Steering, SRv6PolicySteeringTypes
 
 import scapy.compat
@@ -15,7 +15,7 @@ from scapy.layers.l2 import Ether, Dot1Q
 from scapy.layers.inet6 import IPv6, UDP, IPv6ExtHdrSegmentRouting
 from scapy.layers.inet import IP, UDP
 
-from util import ppp
+from vpp_pom.util import ppp
 
 
 class TestSRv6(VppTestCase):
@@ -112,11 +112,11 @@ class TestSRv6(VppTestCase):
                                      ipv6_table_id[i], ipv4_table_id[i])
 
         if any(ipv6):
-            self.logger.debug(self.vapi.cli("show ip6 neighbors"))
+            self.logger.debug(self.vclient.cli("show ip6 neighbors"))
         if any(ipv4):
-            self.logger.debug(self.vapi.cli("show ip4 neighbors"))
-        self.logger.debug(self.vapi.cli("show interface"))
-        self.logger.debug(self.vapi.cli("show hardware"))
+            self.logger.debug(self.vclient.cli("show ip4 neighbors"))
+        self.logger.debug(self.vclient.cli("show interface"))
+        self.logger.debug(self.vclient.cli("show hardware"))
 
         return self.pg_interfaces
 
@@ -142,7 +142,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[True, True])
 
         # configure FIB entries
-        route = VppIpRoute(self, "a4::", 64,
+        route = VppIpRoute(self.vclient, "a4::", 64,
                            [VppRoutePath(self.pg1.remote_ip6,
                                          self.pg1.sw_if_index)])
         route.add_vpp_config()
@@ -150,13 +150,13 @@ class TestSRv6(VppTestCase):
         # configure encaps IPv6 source address
         # needs to be done before SR Policy config
         # TODO: API?
-        self.vapi.cli("set sr encaps source addr a3::")
+        self.vclient.cli("set sr encaps source addr a3::")
 
         bsid = 'a3::9999:1'
         # configure SRv6 Policy
         # Note: segment list order: first -> last
         sr_policy = VppSRv6Policy(
-            self, bsid=bsid,
+            self.vclient, bsid=bsid,
             is_encap=1,
             sr_type=SRv6PolicyType.SR_POLICY_TYPE_DEFAULT,
             weight=1, fib_table=0,
@@ -166,12 +166,12 @@ class TestSRv6(VppTestCase):
         self.sr_policy = sr_policy
 
         # log the sr policies
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
         # steer IPv6 traffic to a7::/64 into SRv6 Policy
         # use the bsid of the above self.sr_policy
         pol_steering = VppSRv6Steering(
-                        self,
+                        self.vclient,
                         bsid=self.sr_policy.bsid,
                         prefix="a7::", mask_width=64,
                         traffic_type=SRv6PolicySteeringTypes.SR_STEER_IPV6,
@@ -180,7 +180,7 @@ class TestSRv6(VppTestCase):
         pol_steering.add_vpp_config()
 
         # log the sr steering policies
-        self.logger.info(self.vapi.cli("show sr steering policies"))
+        self.logger.info(self.vclient.cli("show sr steering policies"))
 
         # create packets
         count = len(self.pg_packet_sizes)
@@ -217,15 +217,15 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_T_Encaps)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SR steering
         pol_steering.remove_vpp_config()
-        self.logger.info(self.vapi.cli("show sr steering policies"))
+        self.logger.info(self.vclient.cli("show sr steering policies"))
 
         # remove SR Policies
         self.sr_policy.remove_vpp_config()
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
         # remove FIB entries
         # done by tearDown
@@ -242,7 +242,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[True, True])
 
         # configure FIB entries
-        route = VppIpRoute(self, "a4::", 64,
+        route = VppIpRoute(self.vclient, "a4::", 64,
                            [VppRoutePath(self.pg1.remote_ip6,
                                          self.pg1.sw_if_index)])
         route.add_vpp_config()
@@ -250,13 +250,13 @@ class TestSRv6(VppTestCase):
         # configure encaps IPv6 source address
         # needs to be done before SR Policy config
         # TODO: API?
-        self.vapi.cli("set sr encaps source addr a3::")
+        self.vclient.cli("set sr encaps source addr a3::")
 
         bsid = 'a3::9999:1'
         # configure SRv6 Policy
         # Note: segment list order: first -> last
         sr_policy = VppSRv6Policy(
-            self, bsid=bsid,
+            self.vclient, bsid=bsid,
             is_encap=0,
             sr_type=SRv6PolicyType.SR_POLICY_TYPE_DEFAULT,
             weight=1, fib_table=0,
@@ -266,12 +266,12 @@ class TestSRv6(VppTestCase):
         self.sr_policy = sr_policy
 
         # log the sr policies
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
         # steer IPv6 traffic to a7::/64 into SRv6 Policy
         # use the bsid of the above self.sr_policy
         pol_steering = VppSRv6Steering(
-                        self,
+                        self.vclient,
                         bsid=self.sr_policy.bsid,
                         prefix="a7::", mask_width=64,
                         traffic_type=SRv6PolicySteeringTypes.SR_STEER_IPV6,
@@ -280,7 +280,7 @@ class TestSRv6(VppTestCase):
         pol_steering.add_vpp_config()
 
         # log the sr steering policies
-        self.logger.info(self.vapi.cli("show sr steering policies"))
+        self.logger.info(self.vclient.cli("show sr steering policies"))
 
         # create packets
         count = len(self.pg_packet_sizes)
@@ -307,15 +307,15 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_T_Insert)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SR steering
         pol_steering.remove_vpp_config()
-        self.logger.info(self.vapi.cli("show sr steering policies"))
+        self.logger.info(self.vclient.cli("show sr steering policies"))
 
         # remove SR Policies
         self.sr_policy.remove_vpp_config()
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
         # remove FIB entries
         # done by tearDown
@@ -333,7 +333,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[False, True], ipv4=[True, False])
 
         # configure FIB entries
-        route = VppIpRoute(self, "a4::", 64,
+        route = VppIpRoute(self.vclient, "a4::", 64,
                            [VppRoutePath(self.pg1.remote_ip6,
                                          self.pg1.sw_if_index)])
         route.add_vpp_config()
@@ -341,13 +341,13 @@ class TestSRv6(VppTestCase):
         # configure encaps IPv6 source address
         # needs to be done before SR Policy config
         # TODO: API?
-        self.vapi.cli("set sr encaps source addr a3::")
+        self.vclient.cli("set sr encaps source addr a3::")
 
         bsid = 'a3::9999:1'
         # configure SRv6 Policy
         # Note: segment list order: first -> last
         sr_policy = VppSRv6Policy(
-            self, bsid=bsid,
+            self.vclient, bsid=bsid,
             is_encap=1,
             sr_type=SRv6PolicyType.SR_POLICY_TYPE_DEFAULT,
             weight=1, fib_table=0,
@@ -357,12 +357,12 @@ class TestSRv6(VppTestCase):
         self.sr_policy = sr_policy
 
         # log the sr policies
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
         # steer IPv4 traffic to 7.1.1.0/24 into SRv6 Policy
         # use the bsid of the above self.sr_policy
         pol_steering = VppSRv6Steering(
-                        self,
+                        self.vclient,
                         bsid=self.sr_policy.bsid,
                         prefix="7.1.1.0", mask_width=24,
                         traffic_type=SRv6PolicySteeringTypes.SR_STEER_IPV4,
@@ -371,7 +371,7 @@ class TestSRv6(VppTestCase):
         pol_steering.add_vpp_config()
 
         # log the sr steering policies
-        self.logger.info(self.vapi.cli("show sr steering policies"))
+        self.logger.info(self.vclient.cli("show sr steering policies"))
 
         # create packets
         count = len(self.pg_packet_sizes)
@@ -389,15 +389,15 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_T_Encaps_IPv4)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SR steering
         pol_steering.remove_vpp_config()
-        self.logger.info(self.vapi.cli("show sr steering policies"))
+        self.logger.info(self.vclient.cli("show sr steering policies"))
 
         # remove SR Policies
         self.sr_policy.remove_vpp_config()
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
         # remove FIB entries
         # done by tearDown
@@ -415,7 +415,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[False, True], ipv4=[False, False])
 
         # configure FIB entries
-        route = VppIpRoute(self, "a4::", 64,
+        route = VppIpRoute(self.vclient, "a4::", 64,
                            [VppRoutePath(self.pg1.remote_ip6,
                                          self.pg1.sw_if_index)])
         route.add_vpp_config()
@@ -423,13 +423,13 @@ class TestSRv6(VppTestCase):
         # configure encaps IPv6 source address
         # needs to be done before SR Policy config
         # TODO: API?
-        self.vapi.cli("set sr encaps source addr a3::")
+        self.vclient.cli("set sr encaps source addr a3::")
 
         bsid = 'a3::9999:1'
         # configure SRv6 Policy
         # Note: segment list order: first -> last
         sr_policy = VppSRv6Policy(
-            self, bsid=bsid,
+            self.vclient, bsid=bsid,
             is_encap=1,
             sr_type=SRv6PolicyType.SR_POLICY_TYPE_DEFAULT,
             weight=1, fib_table=0,
@@ -439,12 +439,12 @@ class TestSRv6(VppTestCase):
         self.sr_policy = sr_policy
 
         # log the sr policies
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
         # steer L2 traffic into SRv6 Policy
         # use the bsid of the above self.sr_policy
         pol_steering = VppSRv6Steering(
-                        self,
+                        self.vclient,
                         bsid=self.sr_policy.bsid,
                         prefix="::", mask_width=0,
                         traffic_type=SRv6PolicySteeringTypes.SR_STEER_L2,
@@ -453,7 +453,7 @@ class TestSRv6(VppTestCase):
         pol_steering.add_vpp_config()
 
         # log the sr steering policies
-        self.logger.info(self.vapi.cli("show sr steering policies"))
+        self.logger.info(self.vclient.cli("show sr steering policies"))
 
         # create packets
         count = len(self.pg_packet_sizes)
@@ -476,15 +476,15 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_T_Encaps_L2)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SR steering
         pol_steering.remove_vpp_config()
-        self.logger.info(self.vapi.cli("show sr steering policies"))
+        self.logger.info(self.vclient.cli("show sr steering policies"))
 
         # remove SR Policies
         self.sr_policy.remove_vpp_config()
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
         # remove FIB entries
         # done by tearDown
@@ -500,14 +500,14 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[True, True])
 
         # configure FIB entries
-        route = VppIpRoute(self, "a4::", 64,
+        route = VppIpRoute(self.vclient, "a4::", 64,
                            [VppRoutePath(self.pg1.remote_ip6,
                                          self.pg1.sw_if_index)])
         route.add_vpp_config()
 
         # configure SRv6 localSID End without PSP behavior
         localsid = VppSRv6LocalSID(
-                        self, localsid='A3::0',
+                        self.vclient, localsid='A3::0',
                         behavior=SRv6LocalSIDBehaviors.SR_BEHAVIOR_END,
                         nh_addr=0,
                         end_psp=0,
@@ -516,7 +516,7 @@ class TestSRv6(VppTestCase):
                         fib_table=0)
         localsid.add_vpp_config()
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # create IPv6 packets with SRH (SL=2, SL=1, SL=0)
         # send one packet per SL value per packet size
@@ -559,7 +559,7 @@ class TestSRv6(VppTestCase):
                                   expected_count=expected_count)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         localsid.remove_vpp_config()
@@ -578,14 +578,14 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[True, True])
 
         # configure FIB entries
-        route = VppIpRoute(self, "a4::", 64,
+        route = VppIpRoute(self.vclient, "a4::", 64,
                            [VppRoutePath(self.pg1.remote_ip6,
                                          self.pg1.sw_if_index)])
         route.add_vpp_config()
 
         # configure SRv6 localSID End with PSP behavior
         localsid = VppSRv6LocalSID(
-                        self, localsid='A3::0',
+                        self.vclient, localsid='A3::0',
                         behavior=SRv6LocalSIDBehaviors.SR_BEHAVIOR_END,
                         nh_addr=0,
                         end_psp=1,
@@ -594,7 +594,7 @@ class TestSRv6(VppTestCase):
                         fib_table=0)
         localsid.add_vpp_config()
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # create IPv6 packets with SRH (SL=2, SL=1)
         # send one packet per SL value per packet size
@@ -626,7 +626,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_PSP)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         localsid.remove_vpp_config()
@@ -646,18 +646,18 @@ class TestSRv6(VppTestCase):
 
         # configure FIB entries
         # a4::/64 via pg1 and pg2
-        route = VppIpRoute(self, "a4::", 64,
+        route = VppIpRoute(self.vclient, "a4::", 64,
                            [VppRoutePath(self.pg1.remote_ip6,
                                          self.pg1.sw_if_index),
                             VppRoutePath(self.pg2.remote_ip6,
                                          self.pg2.sw_if_index)])
         route.add_vpp_config()
-        self.logger.debug(self.vapi.cli("show ip6 fib"))
+        self.logger.debug(self.vclient.cli("show ip6 fib"))
 
         # configure SRv6 localSID End.X without PSP behavior
         # End.X points to interface pg1
         localsid = VppSRv6LocalSID(
-                        self, localsid='A3::C4',
+                        self.vclient, localsid='A3::C4',
                         behavior=SRv6LocalSIDBehaviors.SR_BEHAVIOR_X,
                         nh_addr=self.pg1.remote_ip6,
                         end_psp=0,
@@ -666,7 +666,7 @@ class TestSRv6(VppTestCase):
                         fib_table=0)
         localsid.add_vpp_config()
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # create IPv6 packets with SRH (SL=2, SL=1)
         # send one packet per SL value per packet size
@@ -702,7 +702,7 @@ class TestSRv6(VppTestCase):
         self.pg2.assert_nothing_captured("mis-directed packet(s)")
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         localsid.remove_vpp_config()
@@ -722,7 +722,7 @@ class TestSRv6(VppTestCase):
 
         # configure FIB entries
         # a4::/64 via pg1 and pg2
-        route = VppIpRoute(self, "a4::", 64,
+        route = VppIpRoute(self.vclient, "a4::", 64,
                            [VppRoutePath(
                                self.pg1.remote_ip6,
                                self.pg1.sw_if_index),
@@ -732,7 +732,7 @@ class TestSRv6(VppTestCase):
 
         # configure SRv6 localSID End with PSP behavior
         localsid = VppSRv6LocalSID(
-                        self, localsid='A3::C4',
+                        self.vclient, localsid='A3::C4',
                         behavior=SRv6LocalSIDBehaviors.SR_BEHAVIOR_X,
                         nh_addr=self.pg1.remote_ip6,
                         end_psp=1,
@@ -741,7 +741,7 @@ class TestSRv6(VppTestCase):
                         fib_table=0)
         localsid.add_vpp_config()
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # create IPv6 packets with SRH (SL=2, SL=1)
         # send one packet per SL value per packet size
@@ -777,7 +777,7 @@ class TestSRv6(VppTestCase):
         self.pg2.assert_nothing_captured("mis-directed packet(s)")
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         localsid.remove_vpp_config()
@@ -797,7 +797,7 @@ class TestSRv6(VppTestCase):
 
         # configure SRv6 localSID End.DX6 behavior
         localsid = VppSRv6LocalSID(
-                        self, localsid='A3::C4',
+                        self.vclient, localsid='A3::C4',
                         behavior=SRv6LocalSIDBehaviors.SR_BEHAVIOR_DX6,
                         nh_addr=self.pg1.remote_ip6,
                         end_psp=0,
@@ -806,7 +806,7 @@ class TestSRv6(VppTestCase):
                         fib_table=0)
         localsid.add_vpp_config()
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # create IPv6 packets with SRH (SL=0)
         # send one packet per packet size
@@ -837,7 +837,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_DX6)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         localsid.remove_vpp_config()
@@ -853,7 +853,7 @@ class TestSRv6(VppTestCase):
         # source interface in global FIB (0)
         # destination interfaces in global and vrf
         vrf_1 = 1
-        ipt = VppIpTable(self, vrf_1, is_ip6=True)
+        ipt = VppIpTable(self.vclient, vrf_1, is_ip6=True)
         ipt.add_vpp_config()
         self.setup_interfaces(ipv6=[True, True, True],
                               ipv6_table_id=[0, 0, vrf_1])
@@ -862,26 +862,26 @@ class TestSRv6(VppTestCase):
         # a4::/64 is reachable
         #     via pg1 in table 0 (global)
         #     and via pg2 in table vrf_1
-        route0 = VppIpRoute(self, "a4::", 64,
+        route0 = VppIpRoute(self.vclient, "a4::", 64,
                             [VppRoutePath(self.pg1.remote_ip6,
                                           self.pg1.sw_if_index,
                                           nh_table_id=0)],
                             table_id=0)
         route0.add_vpp_config()
-        route1 = VppIpRoute(self, "a4::", 64,
+        route1 = VppIpRoute(self.vclient, "a4::", 64,
                             [VppRoutePath(self.pg2.remote_ip6,
                                           self.pg2.sw_if_index,
                                           nh_table_id=vrf_1)],
                             table_id=vrf_1)
         route1.add_vpp_config()
-        self.logger.debug(self.vapi.cli("show ip6 fib"))
+        self.logger.debug(self.vclient.cli("show ip6 fib"))
 
         # configure SRv6 localSID End.DT6 behavior
         # Note:
         # fib_table: where the localsid is installed
         # sw_if_index: in T-variants of localsid this is the vrf table_id
         localsid = VppSRv6LocalSID(
-                        self, localsid='A3::C4',
+                        self.vclient, localsid='A3::C4',
                         behavior=SRv6LocalSIDBehaviors.SR_BEHAVIOR_DT6,
                         nh_addr=0,
                         end_psp=0,
@@ -890,7 +890,7 @@ class TestSRv6(VppTestCase):
                         fib_table=0)
         localsid.add_vpp_config()
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # create IPv6 packets with SRH (SL=0)
         # send one packet per packet size
@@ -925,7 +925,7 @@ class TestSRv6(VppTestCase):
         self.pg1.assert_nothing_captured("mis-directed packet(s)")
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         localsid.remove_vpp_config()
@@ -946,7 +946,7 @@ class TestSRv6(VppTestCase):
 
         # configure SRv6 localSID End.DX4 behavior
         localsid = VppSRv6LocalSID(
-                        self, localsid='A3::C4',
+                        self.vclient, localsid='A3::C4',
                         behavior=SRv6LocalSIDBehaviors.SR_BEHAVIOR_DX4,
                         nh_addr=self.pg1.remote_ip4,
                         end_psp=0,
@@ -955,7 +955,7 @@ class TestSRv6(VppTestCase):
                         fib_table=0)
         localsid.add_vpp_config()
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # send one packet per packet size
         count = len(self.pg_packet_sizes)
@@ -985,7 +985,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_DX4)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         localsid.remove_vpp_config()
@@ -1002,7 +1002,7 @@ class TestSRv6(VppTestCase):
         # source interface in global FIB (0)
         # destination interfaces in global and vrf
         vrf_1 = 1
-        ipt = VppIpTable(self, vrf_1)
+        ipt = VppIpTable(self.vclient, vrf_1)
         ipt.add_vpp_config()
         self.setup_interfaces(ipv6=[True, False, False],
                               ipv4=[False, True, True],
@@ -1013,26 +1013,26 @@ class TestSRv6(VppTestCase):
         # 4.1.1.0/24 is reachable
         #     via pg1 in table 0 (global)
         #     and via pg2 in table vrf_1
-        route0 = VppIpRoute(self, "4.1.1.0", 24,
+        route0 = VppIpRoute(self.vclient, "4.1.1.0", 24,
                             [VppRoutePath(self.pg1.remote_ip4,
                                           self.pg1.sw_if_index,
                                           nh_table_id=0)],
                             table_id=0)
         route0.add_vpp_config()
-        route1 = VppIpRoute(self, "4.1.1.0", 24,
+        route1 = VppIpRoute(self.vclient, "4.1.1.0", 24,
                             [VppRoutePath(self.pg2.remote_ip4,
                                           self.pg2.sw_if_index,
                                           nh_table_id=vrf_1)],
                             table_id=vrf_1)
         route1.add_vpp_config()
-        self.logger.debug(self.vapi.cli("show ip fib"))
+        self.logger.debug(self.vclient.cli("show ip fib"))
 
         # configure SRv6 localSID End.DT6 behavior
         # Note:
         # fib_table: where the localsid is installed
         # sw_if_index: in T-variants of localsid: vrf table_id
         localsid = VppSRv6LocalSID(
-                        self, localsid='A3::C4',
+                        self.vclient, localsid='A3::C4',
                         behavior=SRv6LocalSIDBehaviors.SR_BEHAVIOR_DT4,
                         nh_addr=0,
                         end_psp=0,
@@ -1041,7 +1041,7 @@ class TestSRv6(VppTestCase):
                         fib_table=0)
         localsid.add_vpp_config()
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # create IPv6 packets with SRH (SL=0)
         # send one packet per packet size
@@ -1076,7 +1076,7 @@ class TestSRv6(VppTestCase):
         self.pg1.assert_nothing_captured("mis-directed packet(s)")
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         localsid.remove_vpp_config()
@@ -1096,7 +1096,7 @@ class TestSRv6(VppTestCase):
 
         # configure SRv6 localSID End.DX2 behavior
         localsid = VppSRv6LocalSID(
-                        self, localsid='A3::C4',
+                        self.vclient, localsid='A3::C4',
                         behavior=SRv6LocalSIDBehaviors.SR_BEHAVIOR_DX2,
                         nh_addr=0,
                         end_psp=0,
@@ -1105,7 +1105,7 @@ class TestSRv6(VppTestCase):
                         fib_table=0)
         localsid.add_vpp_config()
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # send one packet per packet size
         count = len(self.pg_packet_sizes)
@@ -1156,7 +1156,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_DX2)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
         localsid.remove_vpp_config()
@@ -1174,7 +1174,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[False, False, False, True, True])
 
         # configure FIB entries
-        route = VppIpRoute(self, "a4::", 64,
+        route = VppIpRoute(self.vclient, "a4::", 64,
                            [VppRoutePath(
                                self.pg4.remote_ip6,
                                self.pg4.sw_if_index)])
@@ -1183,13 +1183,13 @@ class TestSRv6(VppTestCase):
         # configure encaps IPv6 source address
         # needs to be done before SR Policy config
         # TODO: API?
-        self.vapi.cli("set sr encaps source addr a3::")
+        self.vclient.cli("set sr encaps source addr a3::")
 
         bsid = 'a3::9999:1'
         # configure SRv6 Policy
         # Note: segment list order: first -> last
         sr_policy = VppSRv6Policy(
-            self, bsid=bsid,
+            self.vclient, bsid=bsid,
             is_encap=0,
             sr_type=SRv6PolicyType.SR_POLICY_TYPE_DEFAULT,
             weight=1, fib_table=0,
@@ -1199,12 +1199,12 @@ class TestSRv6(VppTestCase):
         self.sr_policy = sr_policy
 
         # log the sr policies
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
         # add classify table
         # mask on dst ip address prefix a7::/8
         mask = '{!s:0<16}'.format('ff')
-        r = self.vapi.classify_add_del_table(
+        r = self.vclient.classify_add_del_table(
             1,
             binascii.unhexlify(mask),
             match_n_vectors=(len(mask) - 1) // 32 + 1,
@@ -1214,12 +1214,12 @@ class TestSRv6(VppTestCase):
         table_index = r.new_table_index
 
         # add the source routing node as a ip6 inacl netxt node
-        r = self.vapi.add_node_next('ip6-inacl',
+        r = self.vclient.add_node_next('ip6-inacl',
                                     'sr-pl-rewrite-insert')
         inacl_next_node_index = r.node_index
 
         match = '{!s:0<16}'.format('a7')
-        r = self.vapi.classify_add_del_session(
+        r = self.vclient.classify_add_del_session(
             1,
             table_index,
             binascii.unhexlify(match),
@@ -1229,9 +1229,9 @@ class TestSRv6(VppTestCase):
         self.assertIsNotNone(r, 'No response msg for add_del_session')
 
         # log the classify table used in the steering policy
-        self.logger.info(self.vapi.cli("show classify table"))
+        self.logger.info(self.vclient.cli("show classify table"))
 
-        r = self.vapi.input_acl_set_interface(
+        r = self.vclient.input_acl_set_interface(
             is_add=1,
             sw_if_index=self.pg3.sw_if_index,
             ip6_table_index=table_index)
@@ -1239,7 +1239,7 @@ class TestSRv6(VppTestCase):
                              'No response msg for input_acl_set_interface')
 
         # log the ip6 inacl
-        self.logger.info(self.vapi.cli("show inacl type ip6"))
+        self.logger.info(self.vclient.cli("show inacl type ip6"))
 
         # create packets
         count = len(self.pg_packet_sizes)
@@ -1266,7 +1266,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_T_Insert)
 
         # remove the interface l2 input feature
-        r = self.vapi.input_acl_set_interface(
+        r = self.vclient.input_acl_set_interface(
             is_add=0,
             sw_if_index=self.pg3.sw_if_index,
             ip6_table_index=table_index)
@@ -1274,33 +1274,33 @@ class TestSRv6(VppTestCase):
                              'No response msg for input_acl_set_interface')
 
         # log the ip6 inacl after cleaning
-        self.logger.info(self.vapi.cli("show inacl type ip6"))
+        self.logger.info(self.vclient.cli("show inacl type ip6"))
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove classifier SR steering
         # classifier_steering.remove_vpp_config()
-        self.logger.info(self.vapi.cli("show sr steering policies"))
+        self.logger.info(self.vclient.cli("show sr steering policies"))
 
         # remove SR Policies
         self.sr_policy.remove_vpp_config()
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
         # remove classify session and table
-        r = self.vapi.classify_add_del_session(
+        r = self.vclient.classify_add_del_session(
             0,
             table_index,
             binascii.unhexlify(match))
         self.assertIsNotNone(r, 'No response msg for add_del_session')
 
-        r = self.vapi.classify_add_del_table(
+        r = self.vclient.classify_add_del_table(
             0,
             binascii.unhexlify(mask),
             table_index=table_index)
         self.assertIsNotNone(r, 'No response msg for add_del_table')
 
-        self.logger.info(self.vapi.cli("show classify table"))
+        self.logger.info(self.vclient.cli("show classify table"))
 
         # remove FIB entries
         # done by tearDown
diff --git a/src/plugins/srv6-am/test/vpp_srv6.py b/src/plugins/srv6-am/test/vpp_srv6.py
deleted file mode 120000
index 78f756605..000000000
--- a/src/plugins/srv6-am/test/vpp_srv6.py
+++ /dev/null
@@ -1 +0,0 @@
-../../srv6-ad/test/vpp_srv6.py
\ No newline at end of file
diff --git a/src/plugins/srv6-as/test/test_srv6_as.py b/src/plugins/srv6-as/test/test_srv6_as.py
index eec44e31e..bfbcad98b 100755
--- a/src/plugins/srv6-as/test/test_srv6_as.py
+++ b/src/plugins/srv6-as/test/test_srv6_as.py
@@ -5,8 +5,8 @@ import binascii
 from socket import AF_INET6
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpRoute, VppRoutePath, FibPathProto, VppIpTable
-from vpp_srv6 import SRv6LocalSIDBehaviors, VppSRv6LocalSID, VppSRv6Policy, \
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, FibPathProto, VppIpTable
+from vpp_pom.plugins.vpp_srv6 import SRv6LocalSIDBehaviors, VppSRv6LocalSID, VppSRv6Policy, \
     SRv6PolicyType, VppSRv6Steering, SRv6PolicySteeringTypes
 
 import scapy.compat
@@ -15,7 +15,7 @@ from scapy.layers.l2 import Ether, Dot1Q
 from scapy.layers.inet6 import IPv6, UDP, IPv6ExtHdrSegmentRouting
 from scapy.layers.inet import IP, UDP
 
-from util import ppp
+from vpp_pom.util import ppp
 
 
 class TestSRv6(VppTestCase):
@@ -112,11 +112,11 @@ class TestSRv6(VppTestCase):
                                      ipv6_table_id[i], ipv4_table_id[i])
 
         if any(ipv6):
-            self.logger.debug(self.vapi.cli("show ip6 neighbors"))
+            self.logger.debug(self.vclient.cli("show ip6 neighbors"))
         if any(ipv4):
-            self.logger.debug(self.vapi.cli("show ip4 neighbors"))
-        self.logger.debug(self.vapi.cli("show interface"))
-        self.logger.debug(self.vapi.cli("show hardware"))
+            self.logger.debug(self.vclient.cli("show ip4 neighbors"))
+        self.logger.debug(self.vclient.cli("show interface"))
+        self.logger.debug(self.vclient.cli("show hardware"))
 
         return self.pg_interfaces
 
@@ -192,7 +192,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[True, False])
 
         # configure route to next segment
-        route = VppIpRoute(self, sid_list[test_sid_index + 1], 128,
+        route = VppIpRoute(self.vclient, sid_list[test_sid_index + 1], 128,
                            [VppRoutePath(self.pg0.remote_ip6,
                                          self.pg0.sw_if_index)])
         route.add_vpp_config()
@@ -205,10 +205,10 @@ class TestSRv6(VppTestCase):
             + " src " + self.rewrite_src_addr
         for s in self.rewrite_sid_list:
             cli_str += " next " + s
-        self.vapi.cli(cli_str)
+        self.vclient.cli(cli_str)
 
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # send one packet per packet size
         count = len(self.pg_packet_sizes)
@@ -228,7 +228,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AS_L2_out)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # prepare L2 header for returning packets
         packet_header2 = self.create_packet_header_L2()
@@ -242,10 +242,10 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AS_L2_in)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
-        self.vapi.cli("sr localsid del address " + sid_list[test_sid_index])
+        self.vclient.cli("sr localsid del address " + sid_list[test_sid_index])
 
         # cleanup interfaces
         self.teardown_interfaces()
@@ -261,7 +261,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[True, True])
 
         # configure route to next segment
-        route = VppIpRoute(self, sid_list[test_sid_index + 1], 128,
+        route = VppIpRoute(self.vclient, sid_list[test_sid_index + 1], 128,
                            [VppRoutePath(self.pg0.remote_ip6,
                                          self.pg0.sw_if_index)])
         route.add_vpp_config()
@@ -275,10 +275,10 @@ class TestSRv6(VppTestCase):
             + " src " + self.rewrite_src_addr
         for s in self.rewrite_sid_list:
             cli_str += " next " + s
-        self.vapi.cli(cli_str)
+        self.vclient.cli(cli_str)
 
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # send one packet per packet size
         count = len(self.pg_packet_sizes)
@@ -297,7 +297,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AS_IPv6_out)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # prepare IPv6 header for returning packets
         packet_header2 = self.create_packet_header_IPv6()
@@ -311,10 +311,10 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AS_IPv6_in)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
-        self.vapi.cli("sr localsid del address " + sid_list[test_sid_index])
+        self.vclient.cli("sr localsid del address " + sid_list[test_sid_index])
 
         # cleanup interfaces
         self.teardown_interfaces()
@@ -330,7 +330,7 @@ class TestSRv6(VppTestCase):
         self.setup_interfaces(ipv6=[True, False], ipv4=[True, True])
 
         # configure route to next segment
-        route = VppIpRoute(self, sid_list[test_sid_index + 1], 128,
+        route = VppIpRoute(self.vclient, sid_list[test_sid_index + 1], 128,
                            [VppRoutePath(self.pg0.remote_ip6,
                                          self.pg0.sw_if_index)])
         route.add_vpp_config()
@@ -344,10 +344,10 @@ class TestSRv6(VppTestCase):
             + " src " + self.rewrite_src_addr
         for s in self.rewrite_sid_list:
             cli_str += " next " + s
-        self.vapi.cli(cli_str)
+        self.vclient.cli(cli_str)
 
         # log the localsids
-        self.logger.debug(self.vapi.cli("show sr localsid"))
+        self.logger.debug(self.vclient.cli("show sr localsid"))
 
         # send one packet per packet size
         count = len(self.pg_packet_sizes)
@@ -366,7 +366,7 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AS_IPv4_out)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # prepare IPv6 header for returning packets
         packet_header2 = self.create_packet_header_IPv4()
@@ -380,10 +380,10 @@ class TestSRv6(VppTestCase):
                                   self.compare_rx_tx_packet_End_AS_IPv4_in)
 
         # log the localsid counters
-        self.logger.info(self.vapi.cli("show sr localsid"))
+        self.logger.info(self.vclient.cli("show sr localsid"))
 
         # remove SRv6 localSIDs
-        self.vapi.cli("sr localsid del address " + sid_list[test_sid_index])
+        self.vclient.cli("sr localsid del address " + sid_list[test_sid_index])
 
         # cleanup interfaces
         self.teardown_interfaces()
diff --git a/src/plugins/srv6-as/test/vpp_srv6.py b/src/plugins/srv6-as/test/vpp_srv6.py
deleted file mode 120000
index 78f756605..000000000
--- a/src/plugins/srv6-as/test/vpp_srv6.py
+++ /dev/null
@@ -1 +0,0 @@
-../../srv6-ad/test/vpp_srv6.py
\ No newline at end of file
diff --git a/src/plugins/srv6-mobile/test/test_srv6_mobile.py b/src/plugins/srv6-mobile/test/test_srv6_mobile.py
index ec94b8b9c..aae16e9ee 100644
--- a/src/plugins/srv6-mobile/test/test_srv6_mobile.py
+++ b/src/plugins/srv6-mobile/test/test_srv6_mobile.py
@@ -68,19 +68,19 @@ class TestSRv6EndMGTP4E(VppTestCase):
         """ test_srv6_mobile """
         pkts = self.create_packets([("A::1", "B::1"), ("C::1", "D::1")])
 
-        self.vapi.cli(
+        self.vclient.cli(
             "sr localsid address {} behavior end.m.gtp4.e v4src_position 64"
             .format(pkts[0]['IPv6'].dst))
-        self.logger.info(self.vapi.cli("show sr localsids"))
+        self.logger.info(self.vclient.cli("show sr localsids"))
 
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
 
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.logger.info(self.vapi.cli("show errors"))
-        self.logger.info(self.vapi.cli("show int address"))
+        self.logger.info(self.vclient.cli("show errors"))
+        self.logger.info(self.vclient.cli("show int address"))
 
         capture = self.pg1.get_capture(len(pkts))
 
@@ -147,25 +147,25 @@ class TestSRv6TMGTP4D(VppTestCase):
         """ test_srv6_mobile """
         pkts = self.create_packets([("A::1", "B::1"), ("C::1", "D::1")])
 
-        self.vapi.cli("set sr encaps source addr A1::1")
-        self.vapi.cli("sr policy add bsid D4:: next D2:: next D3::")
-        self.vapi.cli(
+        self.vclient.cli("set sr encaps source addr A1::1")
+        self.vclient.cli("sr policy add bsid D4:: next D2:: next D3::")
+        self.vclient.cli(
             "sr policy add bsid D5:: behavior t.m.gtp4.d"
             "D4::/32 v6src_prefix C1::/64 nhtype ipv6")
-        self.vapi.cli("sr steer l3 {}/32 via bsid D5::".format(self.ip4_dst))
-        self.vapi.cli("ip route add D2::/32 via {}".format(self.ip6_dst))
+        self.vclient.cli("sr steer l3 {}/32 via bsid D5::".format(self.ip4_dst))
+        self.vclient.cli("ip route add D2::/32 via {}".format(self.ip6_dst))
 
-        self.logger.info(self.vapi.cli("show sr steer"))
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr steer"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
 
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.logger.info(self.vapi.cli("show errors"))
-        self.logger.info(self.vapi.cli("show int address"))
+        self.logger.info(self.vclient.cli("show errors"))
+        self.logger.info(self.vclient.cli("show int address"))
 
         capture = self.pg1.get_capture(len(pkts))
 
@@ -235,21 +235,21 @@ class TestSRv6EndMGTP6E(VppTestCase):
         """ test_srv6_mobile """
         pkts = self.create_packets([("A::1", "B::1"), ("C::1", "D::1")])
 
-        self.vapi.cli(
+        self.vclient.cli(
             "sr localsid prefix {}/64 behavior end.m.gtp6.e"
             .format(pkts[0]['IPv6'].dst))
-        self.vapi.cli(
+        self.vclient.cli(
             "ip route add a1::/64 via {}".format(self.ip6_nhop))
-        self.logger.info(self.vapi.cli("show sr localsids"))
+        self.logger.info(self.vclient.cli("show sr localsids"))
 
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
 
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.logger.info(self.vapi.cli("show errors"))
-        self.logger.info(self.vapi.cli("show int address"))
+        self.logger.info(self.vclient.cli("show errors"))
+        self.logger.info(self.vclient.cli("show int address"))
 
         capture = self.pg1.get_capture(len(pkts))
 
@@ -313,22 +313,22 @@ class TestSRv6EndMGTP6D(VppTestCase):
         """ test_srv6_mobile """
         pkts = self.create_packets([("A::1", "B::1"), ("C::1", "D::1")])
 
-        self.vapi.cli("set sr encaps source addr A1::1")
-        self.vapi.cli("sr policy add bsid D4:: next D2:: next D3::")
-        self.vapi.cli(
+        self.vclient.cli("set sr encaps source addr A1::1")
+        self.vclient.cli("sr policy add bsid D4:: next D2:: next D3::")
+        self.vclient.cli(
             "sr localsid prefix 2001::/64 behavior end.m.gtp6.d D4::/64")
-        self.vapi.cli("ip route add D2::/64 via {}".format(self.ip6_nhop))
+        self.vclient.cli("ip route add D2::/64 via {}".format(self.ip6_nhop))
 
-        self.logger.info(self.vapi.cli("show sr policies"))
+        self.logger.info(self.vclient.cli("show sr policies"))
 
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
 
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.logger.info(self.vapi.cli("show errors"))
-        self.logger.info(self.vapi.cli("show int address"))
+        self.logger.info(self.vclient.cli("show errors"))
+        self.logger.info(self.vclient.cli("show int address"))
 
         capture = self.pg1.get_capture(len(pkts))
 
diff --git a/src/plugins/svs/test/test_svs.py b/src/plugins/svs/test/test_svs.py
index 3daf7a50a..9eb2e64e8 100644
--- a/src/plugins/svs/test/test_svs.py
+++ b/src/plugins/svs/test/test_svs.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpTable
+from vpp_pom.vpp_ip_route import VppIpTable
 
 from scapy.packet import Raw
 from scapy.layers.l2 import Ether
@@ -38,9 +38,9 @@ class TestSVS(VppTestCase):
             i.admin_up()
 
             if table_id != 0:
-                tbl = VppIpTable(self, table_id)
+                tbl = VppIpTable(self.vclient, table_id)
                 tbl.add_vpp_config()
-                tbl = VppIpTable(self, table_id, is_ip6=1)
+                tbl = VppIpTable(self.vclient, table_id, is_ip6=1)
                 tbl.add_vpp_config()
 
             i.set_table_ip4(table_id)
@@ -105,23 +105,23 @@ class TestSVS(VppTestCase):
         table_ids = [101, 102]
 
         for table_id in table_ids:
-            self.vapi.svs_table_add_del(
+            self.vclient.svs_table_add_del(
                 VppEnum.vl_api_address_family_t.ADDRESS_IP4, table_id)
 
             #
             # map X.0.0.0/8 to each SVS table for lookup in table X
             #
             for i in range(1, 4):
-                self.vapi.svs_route_add_del(
+                self.vclient.svs_route_add_del(
                     table_id, "%d.0.0.0/8" % i, i)
 
         #
         # Enable SVS on pg0/pg1 using table 1001/1002
         #
-        self.vapi.svs_enable_disable(
+        self.vclient.svs_enable_disable(
             VppEnum.vl_api_address_family_t.ADDRESS_IP4, table_ids[0],
             self.pg0.sw_if_index)
-        self.vapi.svs_enable_disable(
+        self.vclient.svs_enable_disable(
             VppEnum.vl_api_address_family_t.ADDRESS_IP4, table_ids[1],
             self.pg1.sw_if_index)
 
@@ -154,7 +154,7 @@ class TestSVS(VppTestCase):
         #
         # dump the SVS configs
         #
-        ss = self.vapi.svs_dump()
+        ss = self.vclient.svs_dump()
 
         self.assertEqual(ss[0].table_id, table_ids[0])
         self.assertEqual(ss[0].sw_if_index, self.pg0.sw_if_index)
@@ -166,12 +166,12 @@ class TestSVS(VppTestCase):
         #
         # cleanup
         #
-        self.vapi.svs_enable_disable(
+        self.vclient.svs_enable_disable(
             VppEnum.vl_api_address_family_t.ADDRESS_IP4,
             table_ids[0],
             self.pg0.sw_if_index,
             is_enable=0)
-        self.vapi.svs_enable_disable(
+        self.vclient.svs_enable_disable(
             VppEnum.vl_api_address_family_t.ADDRESS_IP4,
             table_ids[1],
             self.pg1.sw_if_index,
@@ -179,10 +179,10 @@ class TestSVS(VppTestCase):
 
         for table_id in table_ids:
             for i in range(1, 4):
-                self.vapi.svs_route_add_del(
+                self.vclient.svs_route_add_del(
                     table_id, "%d.0.0.0/8" % i,
                     0, is_add=0)
-            self.vapi.svs_table_add_del(
+            self.vclient.svs_table_add_del(
                 VppEnum.vl_api_address_family_t.ADDRESS_IP4,
                 table_id,
                 is_add=0)
@@ -232,25 +232,25 @@ class TestSVS(VppTestCase):
         table_ids = [101, 102]
 
         for table_id in table_ids:
-            self.vapi.svs_table_add_del(
+            self.vclient.svs_table_add_del(
                 VppEnum.vl_api_address_family_t.ADDRESS_IP6, table_id)
 
             #
             # map X.0.0.0/8 to each SVS table for lookup in table X
             #
             for i in range(1, 4):
-                self.vapi.svs_route_add_del(
+                self.vclient.svs_route_add_del(
                     table_id, "2001:%d::/32" % i,
                     i)
 
         #
         # Enable SVS on pg0/pg1 using table 1001/1002
         #
-        self.vapi.svs_enable_disable(
+        self.vclient.svs_enable_disable(
             VppEnum.vl_api_address_family_t.ADDRESS_IP6,
             table_ids[0],
             self.pg0.sw_if_index)
-        self.vapi.svs_enable_disable(
+        self.vclient.svs_enable_disable(
             VppEnum.vl_api_address_family_t.ADDRESS_IP6,
             table_ids[1],
             self.pg1.sw_if_index)
@@ -284,7 +284,7 @@ class TestSVS(VppTestCase):
         #
         # dump the SVS configs
         #
-        ss = self.vapi.svs_dump()
+        ss = self.vclient.svs_dump()
 
         self.assertEqual(ss[0].table_id, table_ids[0])
         self.assertEqual(ss[0].sw_if_index, self.pg0.sw_if_index)
@@ -296,22 +296,22 @@ class TestSVS(VppTestCase):
         #
         # cleanup
         #
-        self.vapi.svs_enable_disable(
+        self.vclient.svs_enable_disable(
             VppEnum.vl_api_address_family_t.ADDRESS_IP6,
             table_ids[0],
             self.pg0.sw_if_index,
             is_enable=0)
-        self.vapi.svs_enable_disable(
+        self.vclient.svs_enable_disable(
             VppEnum.vl_api_address_family_t.ADDRESS_IP6,
             table_ids[1],
             self.pg1.sw_if_index,
             is_enable=0)
         for table_id in table_ids:
             for i in range(1, 4):
-                self.vapi.svs_route_add_del(
+                self.vclient.svs_route_add_del(
                     table_id, "2001:%d::/32" % i,
                     0, is_add=0)
-            self.vapi.svs_table_add_del(
+            self.vclient.svs_table_add_del(
                 VppEnum.vl_api_address_family_t.ADDRESS_IP6,
                 table_id,
                 is_add=0)
diff --git a/src/plugins/urpf/test/test_urpf.py b/src/plugins/urpf/test/test_urpf.py
index 64b246cd6..fe2e21460 100644
--- a/src/plugins/urpf/test/test_urpf.py
+++ b/src/plugins/urpf/test/test_urpf.py
@@ -78,7 +78,7 @@ class TestURPF(VppTestCase):
         #
         # apply loose uRPF check on pg0 rx
         #
-        self.vapi.urpf_update(is_input=True,
+        self.vclient.urpf_update(is_input=True,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_LOOSE,
                               af=e.vl_api_address_family_t.ADDRESS_IP4,
                               sw_if_index=self.pg0.sw_if_index)
@@ -95,7 +95,7 @@ class TestURPF(VppTestCase):
         #
         # crank it up to strict mode
         #
-        self.vapi.urpf_update(is_input=True,
+        self.vclient.urpf_update(is_input=True,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_STRICT,
                               af=e.vl_api_address_family_t.ADDRESS_IP4,
                               sw_if_index=self.pg0.sw_if_index)
@@ -111,7 +111,7 @@ class TestURPF(VppTestCase):
         #
         # disable uRPF, all traffic should pass
         #
-        self.vapi.urpf_update(is_input=True,
+        self.vclient.urpf_update(is_input=True,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_OFF,
                               af=e.vl_api_address_family_t.ADDRESS_IP4,
                               sw_if_index=self.pg0.sw_if_index)
@@ -127,7 +127,7 @@ class TestURPF(VppTestCase):
         #  for strict they should not be forwarded if they would be
         #  forwarded thru that interface.
         #
-        self.vapi.urpf_update(is_input=False,
+        self.vclient.urpf_update(is_input=False,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_LOOSE,
                               af=e.vl_api_address_family_t.ADDRESS_IP4,
                               sw_if_index=self.pg1.sw_if_index)
@@ -138,7 +138,7 @@ class TestURPF(VppTestCase):
 
         self.assert_error_counter_equal("ip4-tx-urpf-loose", N_PKTS)
 
-        self.vapi.urpf_update(is_input=False,
+        self.vclient.urpf_update(is_input=False,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_STRICT,
                               af=e.vl_api_address_family_t.ADDRESS_IP4,
                               sw_if_index=self.pg1.sw_if_index)
@@ -163,7 +163,7 @@ class TestURPF(VppTestCase):
         self.assert_error_counter_equal("ip4-tx-urpf-strict", 2 * N_PKTS)
 
         # cleanup
-        self.vapi.urpf_update(is_input=False,
+        self.vclient.urpf_update(is_input=False,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_OFF,
                               af=e.vl_api_address_family_t.ADDRESS_IP4,
                               sw_if_index=self.pg1.sw_if_index)
@@ -200,7 +200,7 @@ class TestURPF(VppTestCase):
         #
         # apply loose uRPF check on pg0 rx
         #
-        self.vapi.urpf_update(is_input=True,
+        self.vclient.urpf_update(is_input=True,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_LOOSE,
                               af=e.vl_api_address_family_t.ADDRESS_IP6,
                               sw_if_index=self.pg0.sw_if_index)
@@ -217,7 +217,7 @@ class TestURPF(VppTestCase):
         #
         # crank it up to strict mode
         #
-        self.vapi.urpf_update(is_input=True,
+        self.vclient.urpf_update(is_input=True,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_STRICT,
                               af=e.vl_api_address_family_t.ADDRESS_IP6,
                               sw_if_index=self.pg0.sw_if_index)
@@ -233,7 +233,7 @@ class TestURPF(VppTestCase):
         #
         # disable uRPF, all traffic should pass
         #
-        self.vapi.urpf_update(is_input=True,
+        self.vclient.urpf_update(is_input=True,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_OFF,
                               af=e.vl_api_address_family_t.ADDRESS_IP6,
                               sw_if_index=self.pg0.sw_if_index)
@@ -249,7 +249,7 @@ class TestURPF(VppTestCase):
         #  for strict they should not be forwarded if they would be
         #  forwarded thru that interface.
         #
-        self.vapi.urpf_update(is_input=False,
+        self.vclient.urpf_update(is_input=False,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_LOOSE,
                               af=e.vl_api_address_family_t.ADDRESS_IP6,
                               sw_if_index=self.pg1.sw_if_index)
@@ -260,7 +260,7 @@ class TestURPF(VppTestCase):
 
         self.assert_error_counter_equal("ip6-tx-urpf-loose", N_PKTS)
 
-        self.vapi.urpf_update(is_input=False,
+        self.vclient.urpf_update(is_input=False,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_STRICT,
                               af=e.vl_api_address_family_t.ADDRESS_IP6,
                               sw_if_index=self.pg1.sw_if_index)
@@ -285,7 +285,7 @@ class TestURPF(VppTestCase):
         self.assert_error_counter_equal("ip6-tx-urpf-strict", 2 * N_PKTS)
 
         # cleanup
-        self.vapi.urpf_update(is_input=False,
+        self.vclient.urpf_update(is_input=False,
                               mode=e.vl_api_urpf_mode_t.URPF_API_MODE_OFF,
                               af=e.vl_api_address_family_t.ADDRESS_IP6,
                               sw_if_index=self.pg1.sw_if_index)
diff --git a/src/plugins/vrrp/test/test_vrrp.py b/src/plugins/vrrp/test/test_vrrp.py
index 3a85d2e6b..ea2d0333c 100644
--- a/src/plugins/vrrp/test/test_vrrp.py
+++ b/src/plugins/vrrp/test/test_vrrp.py
@@ -11,7 +11,7 @@ import time
 import socket
 from socket import inet_pton, inet_ntop
 
-from vpp_object import VppObject
+from vpp_pom.vpp_object import VppObject
 from vpp_papi import VppEnum
 
 from scapy.packet import raw
@@ -24,7 +24,7 @@ from scapy.contrib.igmpv3 import IGMPv3, IGMPv3mr, IGMPv3gr
 from scapy.layers.vrrp import IPPROTO_VRRP, VRRPv3
 from scapy.utils6 import in6_getnsma, in6_getnsmac
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from util import ip6_normalize
+from vpp_pom.util import ip6_normalize
 
 VRRP_VR_FLAG_PREEMPT = 1
 VRRP_VR_FLAG_ACCEPT = 2
@@ -96,7 +96,7 @@ class VppVRRPVirtualRouter(VppObject):
         self._tracked_ifs = []
 
     def add_vpp_config(self):
-        self._test.vapi.vrrp_vr_add_del(is_add=1,
+        self._test.vclient.vrrp_vr_add_del(is_add=1,
                                         sw_if_index=self._intf.sw_if_index,
                                         vr_id=self._vr_id,
                                         priority=self._prio,
@@ -106,7 +106,7 @@ class VppVRRPVirtualRouter(VppObject):
                                         addrs=self._vips)
 
     def query_vpp_config(self):
-        vrs = self._test.vapi.vrrp_vr_dump(sw_if_index=self._intf.sw_if_index)
+        vrs = self._test.vclient.vrrp_vr_dump(sw_if_index=self._intf.sw_if_index)
         for vr in vrs:
             if vr.config.vr_id != self._vr_id:
                 continue
@@ -120,7 +120,7 @@ class VppVRRPVirtualRouter(VppObject):
         return None
 
     def remove_vpp_config(self):
-        self._test.vapi.vrrp_vr_add_del(is_add=0,
+        self._test.vclient.vrrp_vr_add_del(is_add=0,
                                         sw_if_index=self._intf.sw_if_index,
                                         vr_id=self._vr_id,
                                         priority=self._prio,
@@ -130,7 +130,7 @@ class VppVRRPVirtualRouter(VppObject):
                                         addrs=self._vips)
 
     def start_stop(self, is_start):
-        self._test.vapi.vrrp_vr_start_stop(is_start=is_start,
+        self._test.vclient.vrrp_vr_start_stop(is_start=is_start,
                                            sw_if_index=self._intf.sw_if_index,
                                            vr_id=self._vr_id,
                                            is_ipv6=self._is_ipv6)
@@ -145,7 +145,7 @@ class VppVRRPVirtualRouter(VppObject):
             'n_ifs': 1,
             'ifs': [{'sw_if_index': sw_if_index, 'priority': prio}]
         }
-        self._test.vapi.vrrp_vr_track_if_add_del(**args)
+        self._test.vclient.vrrp_vr_track_if_add_del(**args)
         self._tracked_ifs.append(args['ifs'][0])
 
     def set_unicast_peers(self, addrs):
@@ -156,7 +156,7 @@ class VppVRRPVirtualRouter(VppObject):
             'n_addrs': len(addrs),
             'addrs': addrs
         }
-        self._test.vapi.vrrp_vr_set_peers(**args)
+        self._test.vclient.vrrp_vr_set_peers(**args)
         self._unicast_peers = addrs
 
     def vrrp_adv_packet(self, prio=None, src_ip=None):
@@ -324,9 +324,9 @@ class TestVRRP4(VppTestCase):
 
         vr.add_vpp_config()
         vr.start_stop(is_start=1)
-        self.logger.info(self.vapi.cli("show vrrp vr"))
+        self.logger.info(self.vclient.cli("show vrrp vr"))
         vr.start_stop(is_start=0)
-        self.logger.info(self.vapi.cli("show vrrp vr"))
+        self.logger.info(self.vclient.cli("show vrrp vr"))
 
         pkts = self.pg0.get_capture(4)
 
@@ -373,10 +373,10 @@ class TestVRRP4(VppTestCase):
         pkts = [vr.vrrp_adv_packet(prio=prio+10, src_ip=src_ip)]
         while time.time() < end_time:
             self.send_and_assert_no_replies(self.pg0, pkts, timeout=intvl_s)
-            self.logger.info(self.vapi.cli("show trace"))
+            self.logger.info(self.vclient.cli("show trace"))
 
         vr.start_stop(is_start=0)
-        self.logger.info(self.vapi.cli("show vrrp vr"))
+        self.logger.info(self.vclient.cli("show vrrp vr"))
         vr.remove_vpp_config()
         self._vrs = []
 
@@ -513,7 +513,7 @@ class TestVRRP4(VppTestCase):
         pkts = [vr.vrrp_adv_packet(prio=prio-10, src_ip=src_ip)]
         while time.time() + intvl_s < end_time:
             self.send_and_assert_no_replies(self.pg0, pkts, timeout=intvl_s)
-            self.logger.info(self.vapi.cli("show trace"))
+            self.logger.info(self.vclient.cli("show trace"))
 
         # when timer expires, VR should take over as master
         self.pg0.enable_capture()
@@ -856,11 +856,11 @@ class TestVRRP6(VppTestCase):
         self._vrs.append(vr)
 
         vr.add_vpp_config()
-        self.logger.info(self.vapi.cli("show vrrp vr"))
+        self.logger.info(self.vclient.cli("show vrrp vr"))
         vr.start_stop(is_start=1)
-        self.logger.info(self.vapi.cli("show vrrp vr"))
+        self.logger.info(self.vclient.cli("show vrrp vr"))
         vr.start_stop(is_start=0)
-        self.logger.info(self.vapi.cli("show vrrp vr"))
+        self.logger.info(self.vclient.cli("show vrrp vr"))
 
         pkts = self.pg0.get_capture(4, filter_out_fn=None)
 
@@ -905,14 +905,14 @@ class TestVRRP6(VppTestCase):
         src_ip = self.pg0.remote_ip6_ll
         num_advs = 5
         pkts = [vr.vrrp_adv_packet(prio=prio+10, src_ip=src_ip)]
-        self.logger.info(self.vapi.cli("show vlib graph"))
+        self.logger.info(self.vclient.cli("show vlib graph"))
         while time.time() < end_time:
             self.send_and_assert_no_replies(self.pg0, pkts, timeout=intvl_s)
-            self.logger.info(self.vapi.cli("show trace"))
+            self.logger.info(self.vclient.cli("show trace"))
             num_advs -= 1
 
         vr.start_stop(is_start=0)
-        self.logger.info(self.vapi.cli("show vrrp vr"))
+        self.logger.info(self.vclient.cli("show vrrp vr"))
         vr.remove_vpp_config()
         self._vrs = []
 
@@ -1051,7 +1051,7 @@ class TestVRRP6(VppTestCase):
         pkts = [vr.vrrp_adv_packet(prio=prio-10, src_ip=src_ip)]
         while (time.time() + intvl_s) < end_time:
             self.send_and_assert_no_replies(self.pg0, pkts, timeout=intvl_s)
-            self.logger.info(self.vapi.cli("show trace"))
+            self.logger.info(self.vclient.cli("show trace"))
 
         # when timer expires, VR should take over as master
         self.pg0.enable_capture()
diff --git a/src/plugins/wireguard/test/test_wireguard.py b/src/plugins/wireguard/test/test_wireguard.py
index 82ba26254..0810a725a 100755
--- a/src/plugins/wireguard/test/test_wireguard.py
+++ b/src/plugins/wireguard/test/test_wireguard.py
@@ -1,11 +1,9 @@
 #!/usr/bin/env python3
 """ Wg tests """
 
-import datetime
 import base64
 
 from hashlib import blake2s
-from scapy.packet import Packet
 from scapy.packet import Raw
 from scapy.layers.l2 import Ether, ARP
 from scapy.layers.inet import IP, UDP
@@ -13,16 +11,11 @@ from scapy.contrib.wireguard import Wireguard, WireguardResponse, \
     WireguardInitiation, WireguardTransport
 from cryptography.hazmat.primitives.asymmetric.x25519 import \
     X25519PrivateKey, X25519PublicKey
-from cryptography.hazmat.primitives.serialization import Encoding, \
-    PrivateFormat, PublicFormat, NoEncryption
 from cryptography.hazmat.primitives.hashes import BLAKE2s, Hash
 from cryptography.hazmat.primitives.hmac import HMAC
 from cryptography.hazmat.backends import default_backend
-from noise.connection import NoiseConnection, Keypair
 
-from vpp_ipip_tun_interface import VppIpIpTunInterface
-from vpp_interface import VppInterface
-from vpp_object import VppObject
+from vpp_pom.plugins.vpp_wireguard import VppWgInterface, public_key_bytes, VppWgPeer, find_route
 from framework import VppTestCase
 from re import compile
 import unittest
@@ -34,217 +27,36 @@ Wg test.
 """
 
 
-def private_key_bytes(k):
-    return k.private_bytes(Encoding.Raw,
-                           PrivateFormat.Raw,
-                           NoEncryption())
-
-
-def public_key_bytes(k):
-    return k.public_bytes(Encoding.Raw,
-                          PublicFormat.Raw)
-
-
-class VppWgInterface(VppInterface):
-    """
-    VPP WireGuard interface
-    """
-
-    def __init__(self, test, src, port):
-        super(VppWgInterface, self).__init__(test)
-
-        self.port = port
-        self.src = src
-        self.private_key = X25519PrivateKey.generate()
-        self.public_key = self.private_key.public_key()
-
-    def public_key_bytes(self):
-        return public_key_bytes(self.public_key)
-
-    def private_key_bytes(self):
-        return private_key_bytes(self.private_key)
-
-    def add_vpp_config(self):
-        r = self.test.vapi.wireguard_interface_create(interface={
-            'user_instance': 0xffffffff,
-            'port': self.port,
-            'src_ip': self.src,
-            'private_key': private_key_bytes(self.private_key),
-            'generate_key': False
-        })
-        self.set_sw_if_index(r.sw_if_index)
-        self.test.registry.register(self, self.test.logger)
-        return self
-
-    def remove_vpp_config(self):
-        self.test.vapi.wireguard_interface_delete(
-            sw_if_index=self._sw_if_index)
-
-    def query_vpp_config(self):
-        ts = self.test.vapi.wireguard_interface_dump(sw_if_index=0xffffffff)
-        for t in ts:
-            if t.interface.sw_if_index == self._sw_if_index and \
-               str(t.interface.src_ip) == self.src and \
-               t.interface.port == self.port and \
-               t.interface.private_key == private_key_bytes(self.private_key):
-                return True
-        return False
-
-    def __str__(self):
-        return self.object_id()
-
-    def object_id(self):
-        return "wireguard-%d" % self._sw_if_index
-
-
-def find_route(test, prefix, table_id=0):
-    routes = test.vapi.ip_route_dump(table_id, False)
-
-    for e in routes:
-        if table_id == e.route.table_id \
-           and str(e.route.prefix) == str(prefix):
-            return True
-    return False
-
-
-NOISE_HANDSHAKE_NAME = b"Noise_IKpsk2_25519_ChaChaPoly_BLAKE2s"
-NOISE_IDENTIFIER_NAME = b"WireGuard v1 zx2c4 Jason@zx2c4.com"
-
-
-class VppWgPeer(VppObject):
-
+class MyVppWgPeer(VppWgPeer):
     def __init__(self,
                  test,
-                 itf,
+                 intf,
                  endpoint,
                  port,
                  allowed_ips,
                  persistent_keepalive=15):
         self._test = test
-        self.itf = itf
-        self.endpoint = endpoint
-        self.port = port
-        self.allowed_ips = allowed_ips
-        self.persistent_keepalive = persistent_keepalive
-
-        # remote peer's public
-        self.private_key = X25519PrivateKey.generate()
-        self.public_key = self.private_key.public_key()
-
-        self.noise = NoiseConnection.from_name(NOISE_HANDSHAKE_NAME)
-
+        super(MyVppWgPeer, self).__init__(
+            test.vclient, intf, endpoint, port, allowed_ips,
+            persistent_keepalive=persistent_keepalive)
+    
     def validate_routing(self):
         for a in self.allowed_ips:
-            self._test.assertTrue(find_route(self._test, a))
+            self._test.assertTrue(find_route(self._vclient, a))
 
     def validate_no_routing(self):
         for a in self.allowed_ips:
-            self._test.assertFalse(find_route(self._test, a))
+            self._test.assertFalse(find_route(self._vclient, a))
 
     def add_vpp_config(self):
-        rv = self._test.vapi.wireguard_peer_add(
-            peer={
-                'public_key': self.public_key_bytes(),
-                'port': self.port,
-                'endpoint': self.endpoint,
-                'n_allowed_ips': len(self.allowed_ips),
-                'allowed_ips': self.allowed_ips,
-                'sw_if_index': self.itf.sw_if_index,
-                'persistent_keepalive': self.persistent_keepalive})
-        self.index = rv.peer_index
-        self.receiver_index = self.index + 1
-        self._test.registry.register(self, self._test.logger)
+        ret = super(MyVppWgPeer, self).add_vpp_config()
         self.validate_routing()
-        return self
-
+        return ret
+    
     def remove_vpp_config(self):
-        self._test.vapi.wireguard_peer_remove(peer_index=self.index)
+        super(MyVppWgPeer, self).remove_vpp_config()
         self.validate_no_routing()
-
-    def object_id(self):
-        return ("wireguard-peer-%s" % self.index)
-
-    def public_key_bytes(self):
-        return public_key_bytes(self.public_key)
-
-    def query_vpp_config(self):
-        peers = self._test.vapi.wireguard_peers_dump()
-
-        for p in peers:
-            if p.peer.public_key == self.public_key_bytes() and \
-               p.peer.port == self.port and \
-               str(p.peer.endpoint) == self.endpoint and \
-               p.peer.sw_if_index == self.itf.sw_if_index and \
-               len(self.allowed_ips) == p.peer.n_allowed_ips:
-                self.allowed_ips.sort()
-                p.peer.allowed_ips.sort()
-
-                for (a1, a2) in zip(self.allowed_ips, p.peer.allowed_ips):
-                    if str(a1) != str(a2):
-                        return False
-                return True
-        return False
-
-    def set_responder(self):
-        self.noise.set_as_responder()
-
-    def mk_tunnel_header(self, tx_itf):
-        return (Ether(dst=tx_itf.local_mac, src=tx_itf.remote_mac) /
-                IP(src=self.endpoint, dst=self.itf.src) /
-                UDP(sport=self.port, dport=self.itf.port))
-
-    def noise_init(self, public_key=None):
-        self.noise.set_prologue(NOISE_IDENTIFIER_NAME)
-        self.noise.set_psks(psk=bytes(bytearray(32)))
-
-        if not public_key:
-            public_key = self.itf.public_key
-
-        # local/this private
-        self.noise.set_keypair_from_private_bytes(
-            Keypair.STATIC,
-            private_key_bytes(self.private_key))
-        # remote's public
-        self.noise.set_keypair_from_public_bytes(
-            Keypair.REMOTE_STATIC,
-            public_key_bytes(public_key))
-
-        self.noise.start_handshake()
-
-    def mk_handshake(self, tx_itf, public_key=None):
-        self.noise.set_as_initiator()
-        self.noise_init(public_key)
-
-        p = (Wireguard() / WireguardInitiation())
-
-        p[Wireguard].message_type = 1
-        p[Wireguard].reserved_zero = 0
-        p[WireguardInitiation].sender_index = self.receiver_index
-
-        # some random data for the message
-        #  lifted from the noise protocol's wireguard example
-        now = datetime.datetime.now()
-        tai = struct.pack('!qi', 4611686018427387914 + int(now.timestamp()),
-                          int(now.microsecond * 1e3))
-        b = self.noise.write_message(payload=tai)
-
-        # load noise into init message
-        p[WireguardInitiation].unencrypted_ephemeral = b[0:32]
-        p[WireguardInitiation].encrypted_static = b[32:80]
-        p[WireguardInitiation].encrypted_timestamp = b[80:108]
-
-        # generate the mac1 hash
-        mac_key = blake2s(b'mac1----' +
-                          self.itf.public_key_bytes()).digest()
-        p[WireguardInitiation].mac1 = blake2s(bytes(p)[0:116],
-                                              digest_size=16,
-                                              key=mac_key).digest()
-        p[WireguardInitiation].mac2 = bytearray(16)
-
-        p = (self.mk_tunnel_header(tx_itf) / p)
-
-        return p
-
+    
     def verify_header(self, p):
         self._test.assertEqual(p[IP].src, self.itf.src)
         self._test.assertEqual(p[IP].dst, self.endpoint)
@@ -324,9 +136,6 @@ class VppWgPeer(VppObject):
             p[WireguardTransport].encrypted_encapsulated_packet)
         return d
 
-    def encrypt_transport(self, p):
-        return self.noise.encrypt(bytes(p))
-
     def validate_encapped(self, rxs, tx):
         for rx in rxs:
             rx = IP(self.decrypt_transport(rx))
@@ -364,11 +173,11 @@ class TestWg(VppTestCase):
         port = 12312
 
         # Create interface
-        wg0 = VppWgInterface(self,
+        wg0 = VppWgInterface(self.vclient,
                              self.pg1.local_ip4,
                              port).add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh int"))
+        self.logger.info(self.vclient.cli("sh int"))
 
         # delete interface
         wg0.remove_vpp_config()
@@ -424,7 +233,7 @@ class TestWg(VppTestCase):
         port = 12323
 
         # Create interfaces
-        wg0 = VppWgInterface(self,
+        wg0 = VppWgInterface(self.vclient,
                              self.pg1.local_ip4,
                              port).add_vpp_config()
         wg0.admin_up()
@@ -433,13 +242,13 @@ class TestWg(VppTestCase):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        peer_1 = VppWgPeer(self,
+        peer_1 = MyVppWgPeer(self,
                            wg0,
                            self.pg1.remote_ip4,
                            port+1,
                            ["10.11.2.0/24",
                             "10.11.3.0/24"]).add_vpp_config()
-        self.assertEqual(len(self.vapi.wireguard_peers_dump()), 1)
+        self.assertEqual(len(self.vclient.wireguard_peers_dump()), 1)
 
         # wait for the peer to send a handshake
         rx = self.pg1.get_capture(1, timeout=2)
@@ -491,19 +300,19 @@ class TestWg(VppTestCase):
         port = 12333
 
         # Create interfaces
-        wg0 = VppWgInterface(self,
+        wg0 = VppWgInterface(self.vclient,
                              self.pg1.local_ip4,
                              port).add_vpp_config()
         wg0.admin_up()
         wg0.config_ip4()
 
-        peer_1 = VppWgPeer(self,
+        peer_1 = MyVppWgPeer(self,
                            wg0,
                            self.pg1.remote_ip4,
                            port+1,
                            ["10.11.2.0/24",
                             "10.11.3.0/24"]).add_vpp_config()
-        self.assertEqual(len(self.vapi.wireguard_peers_dump()), 1)
+        self.assertEqual(len(self.vclient.wireguard_peers_dump()), 1)
 
         # route a packet into the wg interface
         #  use the allowed-ip prefix
@@ -515,20 +324,20 @@ class TestWg(VppTestCase):
         self.send_and_assert_no_replies(self.pg0, [p])
 
         kp_error = wg_output_node_name + "Keypair error"
-        self.assertEqual(1, self.statistics.get_err_counter(kp_error))
+        self.assertEqual(1, self.vclient.statistics.get_err_counter(kp_error))
 
         # send a handsake from the peer with an invalid MAC
         p = peer_1.mk_handshake(self.pg1)
         p[WireguardInitiation].mac1 = b'foobar'
         self.send_and_assert_no_replies(self.pg1, [p])
-        self.assertEqual(1, self.statistics.get_err_counter(
+        self.assertEqual(1, self.vclient.statistics.get_err_counter(
             wg_input_node_name + "Invalid MAC handshake"))
 
         # send a handsake from the peer but signed by the wrong key.
         p = peer_1.mk_handshake(self.pg1,
                                 X25519PrivateKey.generate().public_key())
         self.send_and_assert_no_replies(self.pg1, [p])
-        self.assertEqual(1, self.statistics.get_err_counter(
+        self.assertEqual(1, self.vclient.statistics.get_err_counter(
             wg_input_node_name + "Peer error"))
 
         # send a valid handsake init for which we expect a response
@@ -545,7 +354,7 @@ class TestWg(VppTestCase):
              UDP(sport=555, dport=556) /
              Raw())
         self.send_and_assert_no_replies(self.pg0, [p])
-        self.assertEqual(2, self.statistics.get_err_counter(kp_error))
+        self.assertEqual(2, self.vclient.statistics.get_err_counter(kp_error))
 
         # send a data packet from the peer through the tunnel
         # this completes the handshake
@@ -605,17 +414,17 @@ class TestWg(VppTestCase):
         port = 12343
 
         # Create interfaces
-        wg0 = VppWgInterface(self,
+        wg0 = VppWgInterface(self.vclient,
                              self.pg1.local_ip4,
                              port).add_vpp_config()
-        wg1 = VppWgInterface(self,
+        wg1 = VppWgInterface(self.vclient,
                              self.pg2.local_ip4,
                              port+1).add_vpp_config()
         wg0.admin_up()
         wg1.admin_up()
 
         # Check peer counter
-        self.assertEqual(len(self.vapi.wireguard_peers_dump()), 0)
+        self.assertEqual(len(self.vclient.wireguard_peers_dump()), 0)
 
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -630,24 +439,24 @@ class TestWg(VppTestCase):
         peers_1 = []
         peers_2 = []
         for i in range(NUM_PEERS):
-            peers_1.append(VppWgPeer(self,
+            peers_1.append(VppWgPeer(self.vclient,
                                      wg0,
                                      self.pg1.remote_hosts[i].ip4,
                                      port+1+i,
                                      ["10.0.%d.4/32" % i]).add_vpp_config())
-            peers_2.append(VppWgPeer(self,
+            peers_2.append(VppWgPeer(self.vclient,
                                      wg1,
                                      self.pg2.remote_hosts[i].ip4,
                                      port+100+i,
                                      ["10.100.%d.4/32" % i]).add_vpp_config())
 
-        self.assertEqual(len(self.vapi.wireguard_peers_dump()), NUM_PEERS*2)
+        self.assertEqual(len(self.vclient.wireguard_peers_dump()), NUM_PEERS*2)
 
-        self.logger.info(self.vapi.cli("show wireguard peer"))
-        self.logger.info(self.vapi.cli("show wireguard interface"))
-        self.logger.info(self.vapi.cli("show adj 37"))
-        self.logger.info(self.vapi.cli("sh ip fib 172.16.3.17"))
-        self.logger.info(self.vapi.cli("sh ip fib 10.11.3.0"))
+        self.logger.info(self.vclient.cli("show wireguard peer"))
+        self.logger.info(self.vclient.cli("show wireguard interface"))
+        self.logger.info(self.vclient.cli("show adj 37"))
+        self.logger.info(self.vclient.cli("sh ip fib 172.16.3.17"))
+        self.logger.info(self.vclient.cli("sh ip fib 10.11.3.0"))
 
         # remove peers
         for p in peers_1:
@@ -673,19 +482,19 @@ class WireguardHandoffTests(TestWg):
         port = 12353
 
         # Create interfaces
-        wg0 = VppWgInterface(self,
+        wg0 = VppWgInterface(self.vclient,
                              self.pg1.local_ip4,
                              port).add_vpp_config()
         wg0.admin_up()
         wg0.config_ip4()
 
-        peer_1 = VppWgPeer(self,
+        peer_1 = MyVppWgPeer(self,
                            wg0,
                            self.pg1.remote_ip4,
                            port+1,
                            ["10.11.2.0/24",
                             "10.11.3.0/24"]).add_vpp_config()
-        self.assertEqual(len(self.vapi.wireguard_peers_dump()), 1)
+        self.assertEqual(len(self.vclient.wireguard_peers_dump()), 1)
 
         # send a valid handsake init for which we expect a response
         p = peer_1.mk_handshake(self.pg1)
diff --git a/src/vcl/test/test_vcl.py b/src/vcl/test/test_vcl.py
index 37ede7b69..0f0f89b0a 100644
--- a/src/vcl/test/test_vcl.py
+++ b/src/vcl/test/test_vcl.py
@@ -7,7 +7,7 @@ import subprocess
 import signal
 from framework import VppTestCase, VppTestRunner, running_extended_tests, \
     Worker
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath, FibPathProto
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath, FibPathProto
 
 iperf3 = '/usr/bin/iperf3'
 
@@ -80,10 +80,10 @@ class VCLTestCase(VppTestCase):
         super(VCLTestCase, self).setUp()
 
     def cut_thru_setup(self):
-        self.vapi.session_enable_disable(is_enabled=1)
+        self.vclient.session_enable_disable(is_enabled=1)
 
     def cut_thru_tear_down(self):
-        self.vapi.session_enable_disable(is_enabled=0)
+        self.vclient.session_enable_disable(is_enabled=0)
 
     def cut_thru_test(self, server_app, server_args, client_app, client_args):
         self.env = {'VCL_VPP_API_SOCKET': self.api_sock,
@@ -103,7 +103,7 @@ class VCLTestCase(VppTestCase):
         self.sleep(self.post_test_sleep)
 
     def thru_host_stack_setup(self):
-        self.vapi.session_enable_disable(is_enabled=1)
+        self.vclient.session_enable_disable(is_enabled=1)
         self.create_loopback_interfaces(2)
 
         table_id = 1
@@ -112,7 +112,7 @@ class VCLTestCase(VppTestCase):
             i.admin_up()
 
             if table_id != 0:
-                tbl = VppIpTable(self, table_id)
+                tbl = VppIpTable(self.vclient, table_id)
                 tbl.add_vpp_config()
 
             i.set_table_ip4(table_id)
@@ -120,23 +120,23 @@ class VCLTestCase(VppTestCase):
             table_id += 1
 
         # Configure namespaces
-        self.vapi.app_namespace_add_del(namespace_id="1", secret=1234,
+        self.vclient.app_namespace_add_del(namespace_id="1", secret=1234,
                                         sw_if_index=self.loop0.sw_if_index)
-        self.vapi.app_namespace_add_del(namespace_id="2", secret=5678,
+        self.vclient.app_namespace_add_del(namespace_id="2", secret=5678,
                                         sw_if_index=self.loop1.sw_if_index)
 
         # Add inter-table routes
-        ip_t01 = VppIpRoute(self, self.loop1.local_ip4, 32,
+        ip_t01 = VppIpRoute(self.vclient, self.loop1.local_ip4, 32,
                             [VppRoutePath("0.0.0.0",
                                           0xffffffff,
                                           nh_table_id=2)], table_id=1)
-        ip_t10 = VppIpRoute(self, self.loop0.local_ip4, 32,
+        ip_t10 = VppIpRoute(self.vclient, self.loop0.local_ip4, 32,
                             [VppRoutePath("0.0.0.0",
                                           0xffffffff,
                                           nh_table_id=1)], table_id=2)
         ip_t01.add_vpp_config()
         ip_t10.add_vpp_config()
-        self.logger.debug(self.vapi.cli("show ip fib"))
+        self.logger.debug(self.vclient.cli("show ip fib"))
 
     def thru_host_stack_tear_down(self):
         for i in self.lo_interfaces:
@@ -145,7 +145,7 @@ class VCLTestCase(VppTestCase):
             i.admin_down()
 
     def thru_host_stack_ipv6_setup(self):
-        self.vapi.session_enable_disable(is_enabled=1)
+        self.vclient.session_enable_disable(is_enabled=1)
         self.create_loopback_interfaces(2)
 
         table_id = 1
@@ -153,7 +153,7 @@ class VCLTestCase(VppTestCase):
         for i in self.lo_interfaces:
             i.admin_up()
 
-            tbl = VppIpTable(self, table_id, is_ip6=1)
+            tbl = VppIpTable(self.vclient, table_id, is_ip6=1)
             tbl.add_vpp_config()
 
             i.set_table_ip6(table_id)
@@ -161,24 +161,24 @@ class VCLTestCase(VppTestCase):
             table_id += 1
 
         # Configure namespaces
-        self.vapi.app_namespace_add_del(namespace_id="1", secret=1234,
+        self.vclient.app_namespace_add_del(namespace_id="1", secret=1234,
                                         sw_if_index=self.loop0.sw_if_index)
-        self.vapi.app_namespace_add_del(namespace_id="2", secret=5678,
+        self.vclient.app_namespace_add_del(namespace_id="2", secret=5678,
                                         sw_if_index=self.loop1.sw_if_index)
 
         # Add inter-table routes
-        ip_t01 = VppIpRoute(self, self.loop1.local_ip6, 128,
+        ip_t01 = VppIpRoute(self.vclient, self.loop1.local_ip6, 128,
                             [VppRoutePath("::0", 0xffffffff,
                                           nh_table_id=2)],
                             table_id=1)
-        ip_t10 = VppIpRoute(self, self.loop0.local_ip6, 128,
+        ip_t10 = VppIpRoute(self.vclient, self.loop0.local_ip6, 128,
                             [VppRoutePath("::0", 0xffffffff,
                                           nh_table_id=1)],
                             table_id=2)
         ip_t01.add_vpp_config()
         ip_t10.add_vpp_config()
-        self.logger.debug(self.vapi.cli("show interface addr"))
-        self.logger.debug(self.vapi.cli("show ip6 fib"))
+        self.logger.debug(self.vclient.cli("show interface addr"))
+        self.logger.debug(self.vclient.cli("show ip6 fib"))
 
     def thru_host_stack_ipv6_tear_down(self):
         for i in self.lo_interfaces:
@@ -186,7 +186,7 @@ class VCLTestCase(VppTestCase):
             i.set_table_ip6(0)
             i.admin_down()
 
-        self.vapi.session_enable_disable(is_enabled=0)
+        self.vclient.session_enable_disable(is_enabled=0)
 
     @unittest.skipUnless(_have_iperf3, "'%s' not found, Skipping.")
     def thru_host_stack_test(self, server_app, server_args,
@@ -279,7 +279,7 @@ class LDPCutThruTestCase(VCLTestCase):
         self.cut_thru_tear_down()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.cli("show session verbose 2"))
+        self.logger.debug(self.vclient.cli("show session verbose 2"))
 
     @unittest.skipUnless(running_extended_tests, "part of extended tests")
     def test_ldp_cut_thru_echo(self):
@@ -349,7 +349,7 @@ class VCLCutThruTestCase(VCLTestCase):
         super(VCLCutThruTestCase, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.cli("show session verbose 2"))
+        self.logger.debug(self.vclient.cli("show session verbose 2"))
 
     def test_vcl_cut_thru_echo(self):
         """ run VCL cut thru echo test """
@@ -403,8 +403,8 @@ class VCLThruHostStackEcho(VCLTestCase):
         super(VCLThruHostStackEcho, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.cli("show app server"))
-        self.logger.debug(self.vapi.cli("show session verbose"))
+        self.logger.debug(self.vclient.cli("show app server"))
+        self.logger.debug(self.vclient.cli("show session verbose"))
 
 
 class VCLThruHostStackTLS(VCLTestCase):
@@ -441,8 +441,8 @@ class VCLThruHostStackTLS(VCLTestCase):
         super(VCLThruHostStackTLS, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.cli("show app server"))
-        self.logger.debug(self.vapi.cli("show session verbose 2"))
+        self.logger.debug(self.vclient.cli("show app server"))
+        self.logger.debug(self.vclient.cli("show session verbose 2"))
 
 
 class VCLThruHostStackBidirNsock(VCLTestCase):
@@ -474,7 +474,7 @@ class VCLThruHostStackBidirNsock(VCLTestCase):
         super(VCLThruHostStackBidirNsock, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.cli("show session verbose 2"))
+        self.logger.debug(self.vclient.cli("show session verbose 2"))
 
     def test_vcl_thru_host_stack_bi_dir_nsock(self):
         """ run VCL thru host stack bi-directional (multiple sockets) test """
@@ -515,7 +515,7 @@ class LDPThruHostStackBidirNsock(VCLTestCase):
         super(LDPThruHostStackBidirNsock, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.cli("show session verbose 2"))
+        self.logger.debug(self.vclient.cli("show session verbose 2"))
 
     def test_ldp_thru_host_stack_bi_dir_nsock(self):
         """ run LDP thru host stack bi-directional (multiple sockets) test """
@@ -630,7 +630,7 @@ class LDPThruHostStackIperf(VCLTestCase):
         super(LDPThruHostStackIperf, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.cli("show session verbose 2"))
+        self.logger.debug(self.vclient.cli("show session verbose 2"))
 
     @unittest.skipUnless(_have_iperf3, "'%s' not found, Skipping.")
     def test_ldp_thru_host_stack_iperf3(self):
@@ -666,7 +666,7 @@ class LDPThruHostStackIperfUdp(VCLTestCase):
         super(LDPThruHostStackIperfUdp, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.cli("show session verbose 2"))
+        self.logger.debug(self.vclient.cli("show session verbose 2"))
 
     @unittest.skipUnless(_have_iperf3, "'%s' not found, Skipping.")
     def test_ldp_thru_host_stack_iperf3_udp(self):
diff --git a/src/vpp-api/CMakeLists.txt b/src/vpp-api/CMakeLists.txt
index 72cc1b29c..5378ec05e 100644
--- a/src/vpp-api/CMakeLists.txt
+++ b/src/vpp-api/CMakeLists.txt
@@ -36,3 +36,4 @@ add_vpp_executable(test_vppapiclient NO_INSTALL
 
 add_subdirectory(vapi)
 add_subdirectory(python)
+add_subdirectory(pom)
diff --git a/src/vpp-api/pom/CMakeLists.txt b/src/vpp-api/pom/CMakeLists.txt
new file mode 100644
index 000000000..719de9c0b
--- /dev/null
+++ b/src/vpp-api/pom/CMakeLists.txt
@@ -0,0 +1,36 @@
+# Copyright (c) 2018 Cisco and/or its affiliates.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at:
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+if (CMAKE_VERSION VERSION_LESS 3.12)
+  find_package(PythonInterp 2.7)
+else()
+  find_package(Python3 COMPONENTS Interpreter)
+endif()
+
+if(PYTHONINTERP_FOUND)
+  install(
+    CODE "
+    execute_process(
+      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+      COMMAND ${PYTHON_EXECUTABLE} ./setup.py
+	install
+	  --root /
+	  --prefix=${CMAKE_INSTALL_PREFIX}
+	  --single-version-externally-managed
+	  bdist_egg
+	  --dist-dir=${CMAKE_INSTALL_PREFIX}
+      OUTPUT_QUIET
+    )"
+    COMPONENT vpp-api-pom
+  )
+endif()
diff --git a/src/vpp-api/pom/LICENSE.txt b/src/vpp-api/pom/LICENSE.txt
new file mode 100644
index 000000000..8f71f43fe
--- /dev/null
+++ b/src/vpp-api/pom/LICENSE.txt
@@ -0,0 +1,202 @@
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "{}"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright {yyyy} {name of copyright owner}
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
diff --git a/src/vpp-api/pom/requirements.txt b/src/vpp-api/pom/requirements.txt
new file mode 100644
index 000000000..9c29cec38
--- /dev/null
+++ b/src/vpp-api/pom/requirements.txt
@@ -0,0 +1,2 @@
+vpp_papi>='1.6.2'
+# scapy=='2.4.3'
\ No newline at end of file
diff --git a/src/vpp-api/pom/setup.py b/src/vpp-api/pom/setup.py
new file mode 100644
index 000000000..e04ebbe27
--- /dev/null
+++ b/src/vpp-api/pom/setup.py
@@ -0,0 +1,48 @@
+# Copyright (c) 2020 Cisco and/or its affiliates.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at:
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from setuptools import setup, find_packages
+import os
+
+
+# parse requirements
+thelibFolder = os.path.dirname(os.path.realpath(__file__))
+requirementPath = thelibFolder + '/requirements.txt'
+requirements = []
+if os.path.isfile(requirementPath):
+    with open(requirementPath) as f:
+        requirements = f.read().splitlines()
+
+def find_plugins_packages():
+    pkgs = []
+    for root, dirs, _ in os.walk("../../plugins"):
+        for d in dirs:
+            for p in find_packages(os.path.join(root, d)):
+                pkgs.append(os.path.join(root, d, p))
+    print(pkgs)
+    return pkgs
+
+setup(
+    name="vpp_pom",
+    version='0.1.0',
+    description='VPP Python Object Model',
+    license='Apache-2.0',
+    install_requires=requirements,
+    packages=find_packages(),
+    long_description='''VPP Python Object Model.''',
+
+    # metadata
+    author='Jakub Grajciar',
+    author_email='jgrajcia@cisco.com',
+    url='https://wiki.fd.io/view/VPP/Python_API'
+)
\ No newline at end of file
diff --git a/src/vpp-api/pom/tests/__init__.py b/src/vpp-api/pom/tests/__init__.py
new file mode 100644
index 000000000..e69de29bb
diff --git a/src/vpp-api/pom/tests/test_vpp_client.py b/src/vpp-api/pom/tests/test_vpp_client.py
new file mode 100644
index 000000000..7e987f461
--- /dev/null
+++ b/src/vpp-api/pom/tests/test_vpp_client.py
@@ -0,0 +1,140 @@
+# Copyright (c) 2020 Cisco and/or its affiliates.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at:
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import unittest
+import logging
+import sys
+import os
+import time
+
+from vpp_pom import VppEnum, VppClient, VppLoInterface, VppMemif, VppStartupConf, VppDiedError
+
+
+class BaseVppClientTest(unittest.TestCase):
+    # initialize constants
+    logging.basicConfig(stream=sys.stderr, level=logging.INFO)
+    vpp_install_path = "/home/ja/vpp/build-root/install-vpp_debug-native"
+
+    # create startup conf
+    startup_conf = VppStartupConf(f"{vpp_install_path}/vpp/bin/vpp")
+    startup_conf.add_parameter("unix", "nodaemon")
+    startup_conf.add_parameter("api-segment", "prefix TestVppClient")
+
+    vclient = VppClient("TestVppClient", "TestVppClient", logger=logging, api_socket=None, vpp_install_path=vpp_install_path)
+
+
+class TestVppClient(BaseVppClientTest):
+    """ Test Vpp client """
+
+    def test_run(self):
+        """ Test run/quit vpp """
+        self.vclient.run_vpp(self.startup_conf)
+
+        try:
+            self.vclient.hook.poll_vpp()
+        except VppDiedError:
+            self.assertTrue(False)
+
+        self.vclient.quit_vpp()
+
+    def test_connect(self):
+        """ Test connecting to VPP """
+        self.vclient.run_vpp(self.startup_conf)
+        self.vclient.connect()
+
+        # connection is established in setUpClass()
+        self.assertTrue(True)
+
+        self.vclient.disconnect()
+        self.vclient.quit_vpp()
+
+    def test_request(self):
+        """ Test sending a request to vpp """
+        self.vclient.run_vpp(self.startup_conf)
+        self.vclient.connect()
+
+        # send show_version request and excpect valid reply
+        reply = self.vclient.show_version()
+        self.assertTrue(reply)
+        self.assertEqual(reply.retval, 0)
+
+        self.vclient.disconnect()
+        self.vclient.quit_vpp()
+
+
+class TestVppClientFetures(BaseVppClientTest):
+    """ Test Vpp client features """
+
+    @classmethod
+    def setUpClass(cls):
+        super(TestVppClientFetures, cls).setUpClass()
+        cls.vclient.run_vpp(cls.startup_conf)
+        cls.vclient.connect()
+    
+    @classmethod
+    def tearDownClass(cls):
+        super(TestVppClientFetures, cls).tearDownClass()
+        cls.vclient.quit_vpp()
+
+    def test_object_registry(self):
+        """ Test object registry """
+        # add a loopback interface
+        lo = VppLoInterface(self.vclient)
+        lo.add_vpp_config()
+
+        # verify that the interace was added
+        self.assertTrue(lo.query_vpp_config())
+
+        # remove all configurations in object registry
+        self.vclient.registry.remove_vpp_config()
+
+        # verify that the interface was removed
+        self.assertFalse(lo.query_vpp_config())
+    
+    def test_core(self):
+        """ Test core object """
+        # add a loopback interface
+        lo = VppLoInterface(self.vclient)
+        lo.add_vpp_config()
+
+        # verify that the interace was added
+        self.assertTrue(lo.query_vpp_config())
+
+        # remove configuration
+        lo.remove_vpp_config()
+
+        # verify that the interface was removed
+        self.assertFalse(lo.query_vpp_config())
+    
+    def test_plugin(self):
+        """ Test plugin object """
+        memif = VppMemif(self.vclient,
+                         VppEnum.vl_api_memif_role_t.MEMIF_ROLE_API_SLAVE,
+                         VppEnum.vl_api_memif_mode_t.MEMIF_MODE_API_ETHERNET)
+
+        # add memif interface
+        memif.add_vpp_config()
+
+        # verify that the interface was added
+        self.assertTrue(memif.query_vpp_config())
+
+        # remove the interface
+        memif.remove_vpp_config()
+
+        # verify that the interface was removed
+        self.assertFalse(memif.query_vpp_config())
+    
+    def test_cli(self):
+        """ Test CLI """
+        # test cli hook
+        self.assertTrue(self.vclient.cli("show version"))
\ No newline at end of file
diff --git a/src/vpp-api/pom/vpp_pom/__init__.py b/src/vpp-api/pom/vpp_pom/__init__.py
new file mode 100644
index 000000000..6059234b0
--- /dev/null
+++ b/src/vpp-api/pom/vpp_pom/__init__.py
@@ -0,0 +1,20 @@
+""" Dependencies """
+from vpp_papi import VppEnum
+
+""" VPP api client """
+from .vpp_client import VppClient, VppStartupConf, VppStartupConfFile
+from .hook import VppDiedError, PollHook, StepHook
+from .vpp_papi_provider import VppPapiProvider
+
+""" High level vpp object models """
+from .vpp_papi_provider import VppPapiProvider
+from .vpp_object import VppObjectRegistry
+
+from .vpp_lo_interface import VppLoInterface
+from .vpp_pg_interface import VppPGInterface
+from .vpp_sub_interface import VppSubInterface
+from .vpp_lo_interface import VppLoInterface
+from .vpp_bvi_interface import VppBviInterface
+
+""" High level vpp plugin object models """
+from .plugins.vpp_memif import VppMemif
\ No newline at end of file
diff --git a/test/hook.py b/src/vpp-api/pom/vpp_pom/hook.py
similarity index 84%
rename from test/hook.py
rename to src/vpp-api/pom/vpp_pom/hook.py
index 97b05d051..7b4beb52a 100644
--- a/test/hook.py
+++ b/src/vpp-api/pom/vpp_pom/hook.py
@@ -1,13 +1,28 @@
 import os
 import sys
+import signal
 import traceback
 import ipaddress
 from subprocess import check_output, CalledProcessError
 
 import scapy.compat
-import framework
-from log import RED, single_line_delim, double_line_delim
-from util import check_core_path, get_core_path
+
+from .log import RED, single_line_delim, double_line_delim
+from .util import check_core_path, get_core_path
+
+
+class VppDiedError(Exception):
+
+    signals_by_value = {v: k for k, v in signal.__dict__.items() if
+                        k.startswith('SIG') and not k.startswith('SIG_')}
+
+    def __init__(self, rv=None):
+        self.rv = rv
+
+        try:
+            self.signal_name = VppDiedError.signals_by_value[-rv]
+        except (KeyError, TypeError):
+            self.signal_name = None
 
 
 class Hook(object):
@@ -15,9 +30,9 @@ class Hook(object):
     Generic hooks before/after API/CLI calls
     """
 
-    def __init__(self, test):
-        self.test = test
-        self.logger = test.logger
+    def __init__(self, vapi):
+        self.vapi = vapi
+        self.logger = vapi.logger
 
     def before_api(self, api_name, api_args):
         """
@@ -74,12 +89,12 @@ class Hook(object):
 class PollHook(Hook):
     """ Hook which checks if the vpp subprocess is alive """
 
-    def __init__(self, test):
-        super(PollHook, self).__init__(test)
+    def __init__(self, vapi):
+        super(PollHook, self).__init__(vapi)
 
     def on_crash(self, core_path):
         self.logger.error("Core file present, debug with: gdb %s %s",
-                          self.test.vpp_bin, core_path)
+                          self.vapi.vpp_bin, core_path)
         check_core_path(self.logger, core_path)
         self.logger.error("Running `file %s':", core_path)
         try:
@@ -106,15 +121,16 @@ class PollHook(Hook):
         Poll the vpp status and throw an exception if it's not running
         :raises VppDiedError: exception if VPP is not running anymore
         """
-        if self.test.vpp_dead:
+        if self.vapi.vpp_dead:
             # already dead, nothing to do
             return
 
-        self.test.vpp.poll()
-        if self.test.vpp.returncode is not None:
-            self.test.vpp_dead = True
-            raise framework.VppDiedError(rv=self.test.vpp.returncode)
-            core_path = get_core_path(self.test.tempdir)
+        self.vapi.vpp_process.poll()
+        if self.vapi.vpp_process.returncode is not None:
+            self.vapi.vpp_dead = True
+            raise VppDiedError(rv=self.vapi.vpp_process.returncode)
+            # FIXME: waht about this code?
+            core_path = get_core_path(self.vapi.tempdir)
             if os.path.isfile(core_path):
                 self.on_crash(core_path)
 
@@ -145,11 +161,11 @@ class PollHook(Hook):
 class StepHook(PollHook):
     """ Hook which requires user to press ENTER before doing any API/CLI """
 
-    def __init__(self, test):
+    def __init__(self, vapi):
         self.skip_stack = None
         self.skip_num = None
         self.skip_count = 0
-        super(StepHook, self).__init__(test)
+        super(StepHook, self).__init__(vapi)
 
     def skip(self):
         if self.skip_stack is None:
@@ -213,7 +229,7 @@ class StepHook(PollHook):
             print("Skip pause before executing CLI: %s" % cli)
         else:
             print(double_line_delim)
-            print("Test paused before executing CLI: %s" % cli)
+            print("vapi paused before executing CLI: %s" % cli)
             print(single_line_delim)
             self.user_input()
         super(StepHook, self).before_cli(cli)
@@ -225,7 +241,7 @@ class StepHook(PollHook):
                   % (api_name, api_args))
         else:
             print(double_line_delim)
-            print("Test paused before executing API: %s (%s)"
+            print("vapi paused before executing API: %s (%s)"
                   % (api_name, api_args))
             print(single_line_delim)
             self.user_input()
diff --git a/test/log.py b/src/vpp-api/pom/vpp_pom/log.py
similarity index 100%
rename from test/log.py
rename to src/vpp-api/pom/vpp_pom/log.py
diff --git a/src/vpp-api/pom/vpp_pom/plugins/__init__.py b/src/vpp-api/pom/vpp_pom/plugins/__init__.py
new file mode 100644
index 000000000..3fc938b66
--- /dev/null
+++ b/src/vpp-api/pom/vpp_pom/plugins/__init__.py
@@ -0,0 +1 @@
+# dumy file - allows import of modules in this directory
\ No newline at end of file
diff --git a/src/plugins/acl/test/vpp_acl.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_acl.py
similarity index 81%
rename from src/plugins/acl/test/vpp_acl.py
rename to src/vpp-api/pom/vpp_pom/plugins/vpp_acl.py
index 2d2f7ca25..6eb51be60 100644
--- a/src/plugins/acl/test/vpp_acl.py
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_acl.py
@@ -1,16 +1,16 @@
 from ipaddress import IPv4Network
 
-from vpp_object import VppObject
+from vpp_pom.vpp_object import VppObject
 from vpp_papi import VppEnum
-from vpp_ip import INVALID_INDEX
-from vpp_papi_provider import UnexpectedApiReturnValueError
+from vpp_pom.vpp_ip import INVALID_INDEX
+from vpp_pom.vpp_papi_provider import UnexpectedApiReturnValueError
 
 
 class VppAclPlugin(VppObject):
 
-    def __init__(self, test, enable_intf_counters=False):
-        self._test = test
-        self.enable_intf_counters = enable_intf_counters
+    def __init__(self, vclient):
+        self._vclient = vclient
+        self._enable_intf_counters = False
 
     @property
     def enable_intf_counters(self):
@@ -18,7 +18,7 @@ class VppAclPlugin(VppObject):
 
     @enable_intf_counters.setter
     def enable_intf_counters(self, enable):
-        self.vapi.acl_stats_intf_counters_enable(enable=enable)
+        self._vclient.acl_stats_intf_counters_enable(enable=enable)
 
     def add_vpp_config(self):
         pass
@@ -30,7 +30,7 @@ class VppAclPlugin(VppObject):
         pass
 
     def object_id(self):
-        return ("acl-plugin-%d" % (self._sw_if_index))
+        return ("acl-plugin")
 
 
 class AclRule():
@@ -184,8 +184,8 @@ class AclRule():
 class VppAcl(VppObject):
     """ VPP ACL """
 
-    def __init__(self, test, rules, acl_index=INVALID_INDEX, tag=None):
-        self._test = test
+    def __init__(self, vclient, rules, acl_index=INVALID_INDEX, tag=None):
+        self._vclient = vclient
         self._acl_index = acl_index
         self.tag = tag
         self._rules = rules
@@ -210,17 +210,17 @@ class VppAcl(VppObject):
 
     def add_vpp_config(self, expect_error=False):
         try:
-            reply = self._test.vapi.acl_add_replace(
+            reply = self._vclient.acl_add_replace(
                 acl_index=self._acl_index, tag=self.tag, count=self.count,
                 r=self.encode_rules())
             self._acl_index = reply.acl_index
-            self._test.registry.register(self, self._test.logger)
+            self._vclient.registry.register(self, self._vclient.logger)
             if expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
             return self
         except UnexpectedApiReturnValueError:
             if not expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
         return None
 
     def modify_vpp_config(self, rules):
@@ -229,15 +229,15 @@ class VppAcl(VppObject):
 
     def remove_vpp_config(self, expect_error=False):
         try:
-            self._test.vapi.acl_del(acl_index=self._acl_index)
+            self._vclient.acl_del(acl_index=self._acl_index)
             if expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
         except UnexpectedApiReturnValueError:
             if not expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
 
     def dump(self):
-        return self._test.vapi.acl_dump(acl_index=self._acl_index)
+        return self._vclient.acl_dump(acl_index=self._acl_index)
 
     def query_vpp_config(self):
         dump = self.dump()
@@ -253,8 +253,8 @@ class VppAcl(VppObject):
 class VppEtypeWhitelist(VppObject):
     """ VPP Etype Whitelist """
 
-    def __init__(self, test, sw_if_index, whitelist, n_input=0):
-        self._test = test
+    def __init__(self, vclient, sw_if_index, whitelist, n_input=0):
+        self._vclient = vclient
         self.whitelist = whitelist
         self.n_input = n_input
         self._sw_if_index = sw_if_index
@@ -268,18 +268,18 @@ class VppEtypeWhitelist(VppObject):
         return len(self.whitelist)
 
     def add_vpp_config(self):
-        self._test.vapi.acl_interface_set_etype_whitelist(
+        self._vclient.acl_interface_set_etype_whitelist(
             sw_if_index=self._sw_if_index, count=self.count,
             n_input=self.n_input, whitelist=self.whitelist)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self._test.vapi.acl_interface_set_etype_whitelist(
+        self._vclient.acl_interface_set_etype_whitelist(
             sw_if_index=self._sw_if_index, count=0, n_input=0, whitelist=[])
 
     def query_vpp_config(self):
-        self._test.vapi.acl_interface_etype_whitelist_dump(
+        self._vclient.acl_interface_etype_whitelist_dump(
             sw_if_index=self._sw_if_index)
         return False
 
@@ -290,8 +290,8 @@ class VppEtypeWhitelist(VppObject):
 class VppAclInterface(VppObject):
     """ VPP ACL Interface """
 
-    def __init__(self, test, sw_if_index, acls, n_input=0):
-        self._test = test
+    def __init__(self, vclient, sw_if_index, acls, n_input=0):
+        self._vclient = vclient
         self._sw_if_index = sw_if_index
         self.n_input = n_input
         self.acls = acls
@@ -312,30 +312,30 @@ class VppAclInterface(VppObject):
 
     def add_vpp_config(self, expect_error=False):
         try:
-            reply = self._test.vapi.acl_interface_set_acl_list(
+            reply = self._vclient.acl_interface_set_acl_list(
                 sw_if_index=self._sw_if_index, n_input=self.n_input,
                 count=self.count, acls=self.encode_acls())
-            self._test.registry.register(self, self._test.logger)
+            self._vclient.registry.register(self, self._vclient.logger)
             if expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
             return self
         except UnexpectedApiReturnValueError:
             if not expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
         return None
 
     def remove_vpp_config(self, expect_error=False):
         try:
-            reply = self._test.vapi.acl_interface_set_acl_list(
+            reply = self._vclient.acl_interface_set_acl_list(
                 sw_if_index=self._sw_if_index, n_input=0, count=0, acls=[])
             if expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
         except UnexpectedApiReturnValueError:
             if not expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
 
     def query_vpp_config(self):
-        dump = self._test.vapi.acl_interface_list_dump(
+        dump = self._vclient.acl_interface_list_dump(
             sw_if_index=self._sw_if_index)
         for acl_list in dump:
             if acl_list.count > 0:
@@ -365,8 +365,8 @@ class MacipRule():
 class VppMacipAcl(VppObject):
     """ Vpp Mac Ip ACL """
 
-    def __init__(self, test, rules, acl_index=INVALID_INDEX, tag=None):
-        self._test = test
+    def __init__(self, vclient, rules, acl_index=INVALID_INDEX, tag=None):
+        self._vclient = vclient
         self._acl_index = acl_index
         self.tag = tag
         self._rules = rules
@@ -391,17 +391,17 @@ class VppMacipAcl(VppObject):
 
     def add_vpp_config(self, expect_error=False):
         try:
-            reply = self._test.vapi.macip_acl_add_replace(
+            reply = self._vclient.macip_acl_add_replace(
                 acl_index=self._acl_index, tag=self.tag, count=self.count,
                 r=self.encode_rules())
             self._acl_index = reply.acl_index
-            self._test.registry.register(self, self._test.logger)
+            self._vclient.registry.register(self, self._vclient.logger)
             if expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
             return self
         except UnexpectedApiReturnValueError:
             if not expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
         return None
 
     def modify_vpp_config(self, rules):
@@ -410,15 +410,15 @@ class VppMacipAcl(VppObject):
 
     def remove_vpp_config(self, expect_error=False):
         try:
-            self._test.vapi.macip_acl_del(acl_index=self._acl_index)
+            self._vclient.macip_acl_del(acl_index=self._acl_index)
             if expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
         except UnexpectedApiReturnValueError:
             if not expect_error:
-                self._test.fail("Unexpected api reply")
+                self._vclient.fail("Unexpected api reply")
 
     def dump(self):
-        return self._test.vapi.macip_acl_dump(acl_index=self._acl_index)
+        return self._vclient.macip_acl_dump(acl_index=self._acl_index)
 
     def query_vpp_config(self):
         dump = self.dump()
@@ -434,8 +434,8 @@ class VppMacipAcl(VppObject):
 class VppMacipAclInterface(VppObject):
     """ VPP Mac Ip ACL Interface """
 
-    def __init__(self, test, sw_if_index, acls):
-        self._test = test
+    def __init__(self, vclient, sw_if_index, acls):
+        self._vclient = vclient
         self._sw_if_index = sw_if_index
         self.acls = acls
 
@@ -449,19 +449,19 @@ class VppMacipAclInterface(VppObject):
 
     def add_vpp_config(self):
         for acl in self.acls:
-            self._test.vapi.macip_acl_interface_add_del(
+            self._vclient.macip_acl_interface_add_del(
                 is_add=True, sw_if_index=self._sw_if_index,
                 acl_index=acl.acl_index)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
         for acl in self.acls:
-            self._test.vapi.macip_acl_interface_add_del(
+            self._vclient.macip_acl_interface_add_del(
                 is_add=False, sw_if_index=self._sw_if_index,
                 acl_index=acl.acl_index)
 
     def dump(self):
-        return self._test.vapi.macip_acl_interface_list_dump(
+        return self._vclient.macip_acl_interface_list_dump(
             sw_if_index=self._sw_if_index)
 
     def query_vpp_config(self):
diff --git a/src/vpp-api/pom/vpp_pom/plugins/vpp_cnat.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_cnat.py
new file mode 100644
index 000000000..964683a0e
--- /dev/null
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_cnat.py
@@ -0,0 +1,65 @@
+from scapy.layers.inet import UDP, TCP
+
+from vpp_pom.vpp_object import VppObject
+from vpp_papi import VppEnum
+
+
+class VppCNatTranslation(VppObject):
+
+    def __init__(self, vclient, iproto, vip, paths):
+        self._vclient = vclient
+        self.vip = vip
+        self.iproto = iproto
+        self.paths = paths
+        self.encoded_paths = []
+        for path in self.paths:
+            self.encoded_paths.append(path.encode())
+
+    def __str__(self):
+        return ("%s %s %s" % (self.vip, self.iproto, self.paths))
+
+    @property
+    def vl4_proto(self):
+        ip_proto = VppEnum.vl_api_ip_proto_t
+        return {
+            UDP: ip_proto.IP_API_PROTO_UDP,
+            TCP: ip_proto.IP_API_PROTO_TCP,
+        }[self.iproto]
+
+    def add_vpp_config(self):
+        r = self._vclient.cnat_translation_update(
+            {'vip': self.vip.encode(),
+             'ip_proto': self.vl4_proto,
+             'n_paths': len(self.paths),
+             'paths': self.encoded_paths})
+        self._vclient.registry.register(self, self._vclient.logger)
+        self.id = r.id
+
+    def modify_vpp_config(self, paths):
+        self.paths = paths
+        self.encoded_paths = []
+        for path in self.paths:
+            self.encoded_paths.append(path.encode())
+
+        r = self._vclient.cnat_translation_update(
+            {'vip': self.vip.encode(),
+             'ip_proto': self.vl4_proto,
+             'n_paths': len(self.paths),
+             'paths': self.encoded_paths})
+        self._vclient.registry.register(self, self._vclient.logger)
+
+    def remove_vpp_config(self):
+        self._vclient.cnat_translation_del(id=self.id)
+
+    def query_vpp_config(self):
+        for t in self._vclient.cnat_translation_dump():
+            if self.id == t.translation.id:
+                return t.translation
+        return None
+
+    def object_id(self):
+        return ("cnat-translation-%s" % (self.vip))
+
+    def get_stats(self):
+        c = self._vclient.statistics.get_counter("/net/cnat-translation")
+        return c[0][self.id]
\ No newline at end of file
diff --git a/src/plugins/dhcp/test/vpp_dhcp.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_dhcp.py
similarity index 85%
rename from src/plugins/dhcp/test/vpp_dhcp.py
rename to src/vpp-api/pom/vpp_pom/plugins/vpp_dhcp.py
index f8265a262..6302ec3cf 100644
--- a/src/plugins/dhcp/test/vpp_dhcp.py
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_dhcp.py
@@ -1,17 +1,17 @@
-from vpp_object import VppObject
+from vpp_pom.vpp_object import VppObject
 
 
 class VppDHCPProxy(VppObject):
 
     def __init__(
         self,
-        test,
+        vclient,
         dhcp_server,
         dhcp_src_address,
         rx_vrf_id=0,
         server_vrf_id=0,
     ):
-        self._test = test
+        self._vclient = vclient
         self._rx_vrf_id = rx_vrf_id
         self._server_vrf_id = server_vrf_id
         self._dhcp_server = dhcp_server
@@ -31,16 +31,16 @@ class VppDHCPProxy(VppObject):
         self._dhcp_src_address = dhcp_src_address
 
     def add_vpp_config(self):
-        self._test.vapi.dhcp_proxy_config(
+        self._vclient.dhcp_proxy_config(
             is_add=1,
             rx_vrf_id=self._rx_vrf_id,
             server_vrf_id=self._server_vrf_id,
             dhcp_server=self._dhcp_server,
             dhcp_src_address=self._dhcp_src_address)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.dhcp_proxy_config(
+        self._vclient.dhcp_proxy_config(
             rx_vrf_id=self._rx_vrf_id,
             server_vrf_id=self._server_vrf_id,
             dhcp_server=self._dhcp_server,
@@ -48,7 +48,7 @@ class VppDHCPProxy(VppObject):
             is_add=0)
 
     def get_vpp_dump(self):
-        dump = self._test.vapi.dhcp_proxy_dump()
+        dump = self._vclient.dhcp_proxy_dump()
         for entry in dump:
             if entry.rx_vrf_id == self._rx_vrf_id:
                 return entry
@@ -65,7 +65,7 @@ class VppDHCPClient(VppObject):
 
     def __init__(
             self,
-            test,
+            vclient,
             sw_if_index,
             hostname,
             id=None,
@@ -73,7 +73,7 @@ class VppDHCPClient(VppObject):
             set_broadcast_flag=True,
             dscp=None,
             pid=None):
-        self._test = test
+        self._vclient = vclient
         self._sw_if_index = sw_if_index
         self._hostname = hostname
         self._id = id
@@ -108,17 +108,17 @@ class VppDHCPClient(VppObject):
                   'want_dhcp_event': self._want_dhcp_event,
                   'set_broadcast_flag': self._set_broadcast_flag,
                   'dscp': self._dscp, 'pid': self._pid}
-        self._test.vapi.dhcp_client_config(is_add=1, client=client)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.dhcp_client_config(is_add=1, client=client)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
         client = client = {
             'sw_if_index': self._sw_if_index,
             'hostname': self._hostname}
-        self._test.vapi.dhcp_client_config(client=client, is_add=0)
+        self._vclient.dhcp_client_config(client=client, is_add=0)
 
     def get_vpp_dump(self):
-        dump = self._test.vapi.dhcp_client_dump()
+        dump = self._vclient.dhcp_client_dump()
         for entry in dump:
             if entry.client.sw_if_index == self._sw_if_index:
                 return entry
diff --git a/src/vpp-api/pom/vpp_pom/plugins/vpp_gbp.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_gbp.py
new file mode 100644
index 000000000..35165c5fc
--- /dev/null
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_gbp.py
@@ -0,0 +1,542 @@
+from ipaddress import ip_address, IPv4Network, IPv6Network
+
+from vpp_papi import VppEnum, MACAddress
+from vpp_pom.vpp_object import VppObject
+from vpp_pom.vpp_interface import VppInterface
+from vpp_pom.vpp_vxlan_gbp_tunnel import INDEX_INVALID
+
+
+def find_gbp_endpoint(vclient, sw_if_index=None, ip=None, mac=None,
+                      tep=None, sclass=None, flags=None):
+    if ip:
+        vip = ip
+    if mac:
+        vmac = MACAddress(mac)
+
+    eps = vclient.gbp_endpoint_dump()
+
+    for ep in eps:
+        if tep:
+            src = tep[0]
+            dst = tep[1]
+            if src != str(ep.endpoint.tun.src) or \
+               dst != str(ep.endpoint.tun.dst):
+                continue
+        if sw_if_index:
+            if ep.endpoint.sw_if_index != sw_if_index:
+                continue
+        if sclass:
+            if ep.endpoint.sclass != sclass:
+                continue
+        if flags:
+            if flags != (flags & ep.endpoint.flags):
+                continue
+        if ip:
+            for eip in ep.endpoint.ips:
+                if vip == str(eip):
+                    return True
+        if mac:
+            if vmac == ep.endpoint.mac:
+                return True
+
+    return False
+
+
+def find_gbp_vxlan(vclient, vni):
+    ts = vclient.gbp_vxlan_tunnel_dump()
+    for t in ts:
+        if t.tunnel.vni == vni:
+            return True
+    return False
+
+
+class VppGbpEndpointRetention(object):
+    def __init__(self, remote_ep_timeout=0xffffffff):
+        self.remote_ep_timeout = remote_ep_timeout
+
+    def encode(self):
+        return {'remote_ep_timeout': self.remote_ep_timeout}
+
+
+class VppGbpContractNextHop():
+    def __init__(self, mac, bd, ip, rd):
+        self.mac = mac
+        self.ip = ip
+        self.bd = bd
+        self.rd = rd
+
+    def encode(self):
+        return {'ip': self.ip,
+                'mac': self.mac.packed,
+                'bd_id': self.bd.bd.bd_id,
+                'rd_id': self.rd.rd_id}
+
+
+class VppGbpContractRule():
+    def __init__(self, action, hash_mode, nhs=None):
+        self.action = action
+        self.hash_mode = hash_mode
+        self.nhs = [] if nhs is None else nhs
+
+    def encode(self):
+        nhs = []
+        for nh in self.nhs:
+            nhs.append(nh.encode())
+        while len(nhs) < 8:
+            nhs.append({})
+        return {'action': self.action,
+                'nh_set': {
+                    'hash_mode': self.hash_mode,
+                    'n_nhs': len(self.nhs),
+                    'nhs': nhs}}
+
+    def __repr__(self):
+        return '<VppGbpContractRule action=%s, hash_mode=%s>' % (
+            self.action, self.hash_mode)
+
+
+class VppGbpEndpoint(VppObject):
+    """
+    GBP Endpoint
+    """
+
+    @property
+    def mac(self):
+        return str(self.vmac)
+
+    @property
+    def ip4(self):
+        return self._ip4
+
+    @property
+    def fip4(self):
+        return self._fip4
+
+    @property
+    def ip6(self):
+        return self._ip6
+
+    @property
+    def fip6(self):
+        return self._fip6
+
+    @property
+    def ips(self):
+        return [self.ip4, self.ip6]
+
+    @property
+    def fips(self):
+        return [self.fip4, self.fip6]
+
+    def __init__(self, vclient, itf, epg, recirc, ip4, fip4, ip6, fip6,
+                 flags=0,
+                 tun_src="0.0.0.0",
+                 tun_dst="0.0.0.0",
+                 mac=True):
+        self._vclient = vclient
+        self.itf = itf
+        self.epg = epg
+        self.recirc = recirc
+
+        self._ip4 = ip4
+        self._fip4 = fip4
+        self._ip6 = ip6
+        self._fip6 = fip6
+
+        if mac:
+            self.vmac = MACAddress(self.itf.remote_mac)
+        else:
+            self.vmac = MACAddress("00:00:00:00:00:00")
+
+        self.flags = flags
+        self.tun_src = tun_src
+        self.tun_dst = tun_dst
+
+    def add_vpp_config(self):
+        res = self._vclient.gbp_endpoint_add(
+            self.itf.sw_if_index,
+            [self.ip4, self.ip6],
+            self.vmac.packed,
+            self.epg.sclass,
+            self.flags,
+            self.tun_src,
+            self.tun_dst)
+        self.handle = res.handle
+        self._vclient.registry.register(self, self._vclient.logger)
+
+    def remove_vpp_config(self):
+        self._vclient.gbp_endpoint_del(self.handle)
+
+    def object_id(self):
+        return "gbp-endpoint:[%d==%d:%s:%d]" % (self.handle,
+                                                self.itf.sw_if_index,
+                                                self.ip4,
+                                                self.epg.sclass)
+
+    def query_vpp_config(self):
+        return find_gbp_endpoint(self._vclient,
+                                 self.itf.sw_if_index,
+                                 self.ip4)
+
+
+class VppGbpRecirc(VppObject):
+    """
+    GBP Recirculation Interface
+    """
+
+    def __init__(self, vclient, epg, recirc, is_ext=False):
+        self._vclient = vclient
+        self.recirc = recirc
+        self.epg = epg
+        self.is_ext = is_ext
+
+    def add_vpp_config(self):
+        self._vclient.gbp_recirc_add_del(
+            1,
+            self.recirc.sw_if_index,
+            self.epg.sclass,
+            self.is_ext)
+        self._vclient.registry.register(self, self._vclient.logger)
+
+    def remove_vpp_config(self):
+        self._vclient.gbp_recirc_add_del(
+            0,
+            self.recirc.sw_if_index,
+            self.epg.sclass,
+            self.is_ext)
+
+    def object_id(self):
+        return "gbp-recirc:[%d]" % (self.recirc.sw_if_index)
+
+    def query_vpp_config(self):
+        rs = self._vclient.gbp_recirc_dump()
+        for r in rs:
+            if r.recirc.sw_if_index == self.recirc.sw_if_index:
+                return True
+        return False
+
+
+class VppGbpExtItf(VppObject):
+    """
+    GBP ExtItfulation Interface
+    """
+
+    def __init__(self, vclient, itf, bd, rd, anon=False):
+        self._vclient = vclient
+        self.itf = itf
+        self.bd = bd
+        self.rd = rd
+        self.flags = 1 if anon else 0
+
+    def add_vpp_config(self):
+        self._vclient.gbp_ext_itf_add_del(
+            1, self.itf.sw_if_index, self.bd.bd_id, self.rd.rd_id, self.flags)
+        self._vclient.registry.register(self, self._vclient.logger)
+
+    def remove_vpp_config(self):
+        self._vclient.gbp_ext_itf_add_del(
+            0, self.itf.sw_if_index, self.bd.bd_id, self.rd.rd_id, self.flags)
+
+    def object_id(self):
+        return "gbp-ext-itf:[%d]%s" % (self.itf.sw_if_index,
+                                       " [anon]" if self.flags else "")
+
+    def query_vpp_config(self):
+        rs = self._vclient.gbp_ext_itf_dump()
+        for r in rs:
+            if r.ext_itf.sw_if_index == self.itf.sw_if_index:
+                return True
+        return False
+
+
+class VppGbpSubnet(VppObject):
+    """
+    GBP Subnet
+    """
+
+    def __init__(self, vclient, rd, address, address_len,
+                 type, sw_if_index=None, sclass=None):
+        self._vclient = vclient
+        self.rd_id = rd.rd_id
+        a = ip_address(address)
+        if 4 == a.version:
+            self.prefix = IPv4Network("%s/%d" % (address, address_len),
+                                      strict=False)
+        else:
+            self.prefix = IPv6Network("%s/%d" % (address, address_len),
+                                      strict=False)
+        self.type = type
+        self.sw_if_index = sw_if_index
+        self.sclass = sclass
+
+    def add_vpp_config(self):
+        self._vclient.gbp_subnet_add_del(
+            1,
+            self.rd_id,
+            self.prefix,
+            self.type,
+            sw_if_index=self.sw_if_index if self.sw_if_index else 0xffffffff,
+            sclass=self.sclass if self.sclass else 0xffff)
+        self._vclient.registry.register(self, self._vclient.logger)
+
+    def remove_vpp_config(self):
+        self._vclient.gbp_subnet_add_del(
+            0,
+            self.rd_id,
+            self.prefix,
+            self.type)
+
+    def object_id(self):
+        return "gbp-subnet:[%d-%s]" % (self.rd_id, self.prefix)
+
+    def query_vpp_config(self):
+        ss = self._vclient.gbp_subnet_dump()
+        for s in ss:
+            if s.subnet.rd_id == self.rd_id and \
+                    s.subnet.type == self.type and \
+                    s.subnet.prefix == self.prefix:
+                return True
+        return False
+
+
+class VppGbpEndpointGroup(VppObject):
+    """
+    GBP Endpoint Group
+    """
+
+    def __init__(self, vclient, vnid, sclass, rd, bd, uplink,
+                 bvi, bvi_ip4, bvi_ip6=None,
+                 retention=VppGbpEndpointRetention()):
+        self._vclient = vclient
+        self.uplink = uplink
+        self.bvi = bvi
+        self.bvi_ip4 = bvi_ip4
+        self.bvi_ip6 = bvi_ip6
+        self.vnid = vnid
+        self.bd = bd
+        self.rd = rd
+        self.sclass = sclass
+        if 0 == self.sclass:
+            self.sclass = 0xffff
+        self.retention = retention
+
+    def add_vpp_config(self):
+        self._vclient.gbp_endpoint_group_add(
+            self.vnid,
+            self.sclass,
+            self.bd.bd.bd_id,
+            self.rd.rd_id,
+            self.uplink.sw_if_index if self.uplink else INDEX_INVALID,
+            self.retention.encode())
+        self._vclient.registry.register(self, self._vclient.logger)
+
+    def remove_vpp_config(self):
+        self._vclient.gbp_endpoint_group_del(self.sclass)
+
+    def object_id(self):
+        return "gbp-endpoint-group:[%d]" % (self.vnid)
+
+    def query_vpp_config(self):
+        epgs = self._vclient.gbp_endpoint_group_dump()
+        for epg in epgs:
+            if epg.epg.vnid == self.vnid:
+                return True
+        return False
+
+
+class VppGbpBridgeDomain(VppObject):
+    """
+    GBP Bridge Domain
+    """
+
+    def __init__(self, vclient, bd, rd, bvi, uu_fwd=None,
+                 bm_flood=None, learn=True,
+                 uu_drop=False, bm_drop=False,
+                 ucast_arp=False):
+        self._vclient = vclient
+        self.bvi = bvi
+        self.uu_fwd = uu_fwd
+        self.bm_flood = bm_flood
+        self.bd = bd
+        self.rd = rd
+
+        e = VppEnum.vl_api_gbp_bridge_domain_flags_t
+
+        self.flags = e.GBP_BD_API_FLAG_NONE
+        if not learn:
+            self.flags |= e.GBP_BD_API_FLAG_DO_NOT_LEARN
+        if uu_drop:
+            self.flags |= e.GBP_BD_API_FLAG_UU_FWD_DROP
+        if bm_drop:
+            self.flags |= e.GBP_BD_API_FLAG_MCAST_DROP
+        if ucast_arp:
+            self.flags |= e.GBP_BD_API_FLAG_UCAST_ARP
+
+    def add_vpp_config(self):
+        self._vclient.gbp_bridge_domain_add(
+            self.bd.bd_id,
+            self.rd.rd_id,
+            self.flags,
+            self.bvi.sw_if_index,
+            self.uu_fwd.sw_if_index if self.uu_fwd else INDEX_INVALID,
+            self.bm_flood.sw_if_index if self.bm_flood else INDEX_INVALID)
+        self._vclient.registry.register(self, self._vclient.logger)
+
+    def remove_vpp_config(self):
+        self._vclient.gbp_bridge_domain_del(self.bd.bd_id)
+
+    def object_id(self):
+        return "gbp-bridge-domain:[%d]" % (self.bd.bd_id)
+
+    def query_vpp_config(self):
+        bds = self._vclient.gbp_bridge_domain_dump()
+        for bd in bds:
+            if bd.bd.bd_id == self.bd.bd_id:
+                return True
+        return False
+
+
+class VppGbpRouteDomain(VppObject):
+    """
+    GBP Route Domain
+    """
+
+    def __init__(self, vclient, rd_id, scope, t4, t6, ip4_uu=None, ip6_uu=None):
+        self._vclient = vclient
+        self.rd_id = rd_id
+        self.scope = scope
+        self.t4 = t4
+        self.t6 = t6
+        self.ip4_uu = ip4_uu
+        self.ip6_uu = ip6_uu
+
+    def add_vpp_config(self):
+        self._vclient.gbp_route_domain_add(
+            self.rd_id,
+            self.scope,
+            self.t4.table_id,
+            self.t6.table_id,
+            self.ip4_uu.sw_if_index if self.ip4_uu else INDEX_INVALID,
+            self.ip6_uu.sw_if_index if self.ip6_uu else INDEX_INVALID)
+        self._vclient.registry.register(self, self._vclient.logger)
+
+    def remove_vpp_config(self):
+        self._vclient.gbp_route_domain_del(self.rd_id)
+
+    def object_id(self):
+        return "gbp-route-domain:[%d]" % (self.rd_id)
+
+    def query_vpp_config(self):
+        rds = self._vclient.gbp_route_domain_dump()
+        for rd in rds:
+            if rd.rd.rd_id == self.rd_id:
+                return True
+        return False
+
+
+class VppGbpContract(VppObject):
+    """
+    GBP Contract
+    """
+
+    def __init__(self, vclient, scope, sclass, dclass, acl_index,
+                 rules, allowed_ethertypes):
+        self._vclient = vclient
+        if not isinstance(rules, list):
+            raise ValueError("'rules' must be a list.")
+        if not isinstance(allowed_ethertypes, list):
+            raise ValueError("'allowed_ethertypes' must be a list.")
+        self.scope = scope
+        self.acl_index = acl_index
+        self.sclass = sclass
+        self.dclass = dclass
+        self.rules = rules
+        self.allowed_ethertypes = allowed_ethertypes
+        while (len(self.allowed_ethertypes) < 16):
+            self.allowed_ethertypes.append(0)
+
+    def add_vpp_config(self):
+        rules = []
+        for r in self.rules:
+            rules.append(r.encode())
+        r = self._vclient.gbp_contract_add_del(
+            is_add=1,
+            contract={
+                'acl_index': self.acl_index,
+                'scope': self.scope,
+                'sclass': self.sclass,
+                'dclass': self.dclass,
+                'n_rules': len(rules),
+                'rules': rules,
+                'n_ether_types': len(self.allowed_ethertypes),
+                'allowed_ethertypes': self.allowed_ethertypes})
+        self.stats_index = r.stats_index
+        self._vclient.registry.register(self, self._vclient.logger)
+
+    def remove_vpp_config(self):
+        self._vclient.gbp_contract_add_del(
+            is_add=0,
+            contract={
+                'acl_index': self.acl_index,
+                'scope': self.scope,
+                'sclass': self.sclass,
+                'dclass': self.dclass,
+                'n_rules': 0,
+                'rules': [],
+                'n_ether_types': len(self.allowed_ethertypes),
+                'allowed_ethertypes': self.allowed_ethertypes})
+
+    def object_id(self):
+        return "gbp-contract:[%d:%d:%d:%d]" % (self.scope,
+                                               self.sclass,
+                                               self.dclass,
+                                               self.acl_index)
+
+    def query_vpp_config(self):
+        cs = self._vclient.gbp_contract_dump()
+        for c in cs:
+            if c.contract.scope == self.scope \
+               and c.contract.sclass == self.sclass \
+               and c.contract.dclass == self.dclass:
+                return True
+        return False
+
+    def get_drop_stats(self):
+        c = self._vclient.statistics.get_counter("/net/gbp/contract/drop")
+        return c[0][self.stats_index]
+
+    def get_permit_stats(self):
+        c = self._vclient.statistics.get_counter("/net/gbp/contract/permit")
+        return c[0][self.stats_index]
+
+
+class VppGbpVxlanTunnel(VppInterface):
+    """
+    GBP VXLAN tunnel
+    """
+
+    def __init__(self, vclient, vni, bd_rd_id, mode, src):
+        super(VppGbpVxlanTunnel, self).__init__(vclient)
+        self._vclient = vclient
+        self.vni = vni
+        self.bd_rd_id = bd_rd_id
+        self.mode = mode
+        self.src = src
+
+    def add_vpp_config(self):
+        r = self._vclient.gbp_vxlan_tunnel_add(
+            self.vni,
+            self.bd_rd_id,
+            self.mode,
+            self.src)
+        self.set_sw_if_index(r.sw_if_index)
+        self._vclient.registry.register(self, self._vclient.logger)
+
+    def remove_vpp_config(self):
+        self._vclient.gbp_vxlan_tunnel_del(self.vni)
+
+    def object_id(self):
+        return "gbp-vxlan:%d" % (self.sw_if_index)
+
+    def query_vpp_config(self):
+        return find_gbp_vxlan(self._vclient, self.vni)
\ No newline at end of file
diff --git a/src/plugins/igmp/test/vpp_igmp.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_igmp.py
similarity index 77%
rename from src/plugins/igmp/test/vpp_igmp.py
rename to src/vpp-api/pom/vpp_pom/plugins/vpp_igmp.py
index 8f78a9b90..0b21bbd57 100644
--- a/src/plugins/igmp/test/vpp_igmp.py
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_igmp.py
@@ -1,5 +1,5 @@
 
-from vpp_object import VppObject
+from vpp_pom.vpp_object import VppObject
 import socket
 
 
@@ -21,9 +21,9 @@ def find_igmp_state(states, itf, gaddr, saddr):
     return False
 
 
-def wait_for_igmp_event(test, timeout, itf, gaddr, saddr, ff):
-    ev = test.vapi.wait_for_event(timeout, "igmp_event")
-    if ev.sw_if_index == itf.sw_if_index and \
+def wait_for_igmp_event(vclient, timeout, itf, gaddr, saddr, ff):
+    ev = vclient.wait_for_event(timeout, "igmp_event")
+    if ev is not None and ev.sw_if_index == itf.sw_if_index and \
        str(ev.gaddr) == gaddr and str(ev.saddr) == saddr and \
        ev.filter == ff:
         return True
@@ -50,19 +50,19 @@ class IgmpRecord():
 
 
 class VppHostState(VppObject):
-    def __init__(self, test, filter, sw_if_index, sg):
-        self._test = test
+    def __init__(self, vclient, filter, sw_if_index, sg):
+        self._vclient = vclient
         self.sw_if_index = sw_if_index
         self.filter = filter
         self.sg = sg
 
     def add_vpp_config(self):
-        self._test.vapi.igmp_listen(
+        self._vclient.igmp_listen(
             self.filter, self.sw_if_index,
             self.sg.saddrs_encoded, self.sg.gaddr_p)
 
     def remove_vpp_config(self):
-        self._test.vapi.igmp_listen(
+        self._vclient.igmp_listen(
             self.filter,
             self.sw_if_index,
             [],
@@ -72,4 +72,4 @@ class VppHostState(VppObject):
         return "%s:%d" % (self.sg, self.sw_if_index)
 
     def query_vpp_config(self):
-        return self._test.vapi.igmp_dump()
+        return self._vclient.igmp_dump()
diff --git a/src/plugins/ikev2/test/vpp_ikev2.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_ikev2.py
similarity index 79%
rename from src/plugins/ikev2/test/vpp_ikev2.py
rename to src/vpp-api/pom/vpp_pom/plugins/vpp_ikev2.py
index dd1c3fc98..d2fa92bbb 100644
--- a/src/plugins/ikev2/test/vpp_ikev2.py
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_ikev2.py
@@ -1,5 +1,5 @@
 from ipaddress import IPv4Address, AddressValueError
-from vpp_object import VppObject
+from vpp_pom.vpp_object import VppObject
 from vpp_papi import VppEnum
 
 
@@ -22,9 +22,8 @@ class IDType:
 
 class Profile(VppObject):
     """ IKEv2 profile """
-    def __init__(self, test, profile_name):
-        self.test = test
-        self.vapi = test.vapi
+    def __init__(self, vclient, profile_name):
+        self._vclient = vclient
         self.profile_name = profile_name
         self.udp_encap = False
         self.natt = True
@@ -108,63 +107,63 @@ class Profile(VppObject):
         return 'ikev2-profile-%s' % self.profile_name
 
     def remove_vpp_config(self):
-        self.vapi.ikev2_profile_add_del(name=self.profile_name, is_add=False)
+        self._vclient.ikev2_profile_add_del(name=self.profile_name, is_add=False)
 
     def add_vpp_config(self):
-        self.vapi.ikev2_profile_add_del(name=self.profile_name, is_add=True)
+        self._vclient.ikev2_profile_add_del(name=self.profile_name, is_add=True)
         if hasattr(self, 'auth'):
-            self.vapi.ikev2_profile_set_auth(name=self.profile_name,
+            self._vclient.ikev2_profile_set_auth(name=self.profile_name,
                                              data_len=len(self.auth['data']),
                                              **self.auth)
         if hasattr(self, 'local_id'):
-            self.vapi.ikev2_profile_set_id(name=self.profile_name,
+            self._vclient.ikev2_profile_set_id(name=self.profile_name,
                                            data_len=len(self.local_id
                                                         ['data']),
                                            **self.local_id)
         if hasattr(self, 'remote_id'):
-            self.vapi.ikev2_profile_set_id(name=self.profile_name,
+            self._vclient.ikev2_profile_set_id(name=self.profile_name,
                                            data_len=len(self.remote_id
                                                         ['data']),
                                            **self.remote_id)
         if hasattr(self, 'local_ts'):
-            self.vapi.ikev2_profile_set_ts(name=self.profile_name,
+            self._vclient.ikev2_profile_set_ts(name=self.profile_name,
                                            ts=self.local_ts)
 
         if hasattr(self, 'remote_ts'):
-            self.vapi.ikev2_profile_set_ts(name=self.profile_name,
+            self._vclient.ikev2_profile_set_ts(name=self.profile_name,
                                            ts=self.remote_ts)
 
         if hasattr(self, 'responder'):
-            self.vapi.ikev2_set_responder(name=self.profile_name,
+            self._vclient.ikev2_set_responder(name=self.profile_name,
                                           responder=self.responder)
 
         if hasattr(self, 'ike_transforms'):
-            self.vapi.ikev2_set_ike_transforms(name=self.profile_name,
+            self._vclient.ikev2_set_ike_transforms(name=self.profile_name,
                                                tr=self.ike_transforms)
 
         if hasattr(self, 'esp_transforms'):
-            self.vapi.ikev2_set_esp_transforms(name=self.profile_name,
+            self._vclient.ikev2_set_esp_transforms(name=self.profile_name,
                                                tr=self.esp_transforms)
 
         if self.udp_encap:
-            self.vapi.ikev2_profile_set_udp_encap(name=self.profile_name)
+            self._vclient.ikev2_profile_set_udp_encap(name=self.profile_name)
 
         if hasattr(self, 'lifetime_data'):
-            self.vapi.ikev2_set_sa_lifetime(name=self.profile_name,
+            self._vclient.ikev2_set_sa_lifetime(name=self.profile_name,
                                             **self.lifetime_data)
 
         if hasattr(self, 'ipsec_udp_port'):
-            self.vapi.ikev2_profile_set_ipsec_udp_port(name=self.profile_name,
+            self._vclient.ikev2_profile_set_ipsec_udp_port(name=self.profile_name,
                                                        **self.ipsec_udp_port)
         if hasattr(self, 'tun_itf'):
-            self.vapi.ikev2_set_tunnel_interface(name=self.profile_name,
+            self._vclient.ikev2_set_tunnel_interface(name=self.profile_name,
                                                  sw_if_index=self.tun_itf)
 
         if not self.natt:
-            self.vapi.ikev2_profile_disable_natt(name=self.profile_name)
+            self._vclient.ikev2_profile_disable_natt(name=self.profile_name)
 
     def query_vpp_config(self):
-        res = self.vapi.ikev2_profile_dump()
+        res = self._vclient.ikev2_profile_dump()
         for r in res:
             if r.profile.name == self.profile_name:
                 return r.profile
diff --git a/src/plugins/lb/test/vpp_lb.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_lb.py
similarity index 79%
rename from src/plugins/lb/test/vpp_lb.py
rename to src/vpp-api/pom/vpp_pom/plugins/vpp_lb.py
index d755cef70..edffd8f16 100644
--- a/src/plugins/lb/test/vpp_lb.py
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_lb.py
@@ -17,30 +17,30 @@ import vpp_object
 
 class VppLbVip(vpp_object.VppObject):
 
-    def __init__(self, test, pfx, sfx, port, protocol):
-        self._test = test
+    def __init__(self, vclient, pfx, sfx, port, protocol):
+        self._vclient = vclient
         self.pfx = pfx
         self.sfx = sfx
         self.port = port
         self.protocol = protocol
 
     def add_vpp_config(self):
-        self._test_vapi.lb_add_del_vip(pfx=self.pfx,
+        self._test_vclient.lb_add_del_vip(pfx=self.pfx,
                                        sfx=self.pfx,
                                        port=self.port,
                                        protocol=self.protocol)
 
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.lb_add_del_vip(pfx=self.pfx,
+        self._vclient.lb_add_del_vip(pfx=self.pfx,
                                        sfx=self.pfx,
                                        port=self.port,
                                        protocol=self.protocol,
                                        is_del=1)
 
     def query_vpp_config(self):
-        details = self._test.vapi.lb_add_del_vip(fx=self.pfx,
+        details = self._vclient.lb_add_del_vip(fx=self.pfx,
                                                  sfx=self.pfx,
                                                  port=self.port,
                                                  protocol=self.protocol)
@@ -48,8 +48,8 @@ class VppLbVip(vpp_object.VppObject):
 
 
 class VppLbAs(vpp_object.VppObject):
-    def __init__(self, test, pfx, port, protocol, app_srv, is_del, is_flush):
-        self._test = test
+    def __init__(self, vclient, pfx, port, protocol, app_srv, is_del, is_flush):
+        self._vclient = vclient
         # this is the vip
         self.pfx = pfx
         self.port = port
@@ -60,17 +60,17 @@ class VppLbAs(vpp_object.VppObject):
         self.is_flush = is_flush
 
     def add_vpp_config(self):
-        self._test_vapi.lb_add_del_as(pfx=self.pfx,
+        self._test_vclient.lb_add_del_as(pfx=self.pfx,
                                       port=self.port,
                                       protocol=self.protocol,
                                       app_srv=self.app_srv,
                                       is_flush=self.is_flush,
                                       )
 
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.lb_add_del_as(pfx=self.pfx,
+        self._vclient.lb_add_del_as(pfx=self.pfx,
                                       port=self.port,
                                       protocol=self.protocol,
                                       app_srv=self.app_srv,
@@ -78,7 +78,7 @@ class VppLbAs(vpp_object.VppObject):
                                       is_del=1)
 
     def query_vpp_config(self):
-        details = self._test.vapi.lb_as_dump(pfx=self.pfx,
+        details = self._vclient.lb_as_dump(pfx=self.pfx,
                                              port=self.port,
                                              protocol=self.protocol)
         return True if self == details else False
diff --git a/src/plugins/memif/test/vpp_memif.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_memif.py
similarity index 62%
rename from src/plugins/memif/test/vpp_memif.py
rename to src/vpp-api/pom/vpp_pom/plugins/vpp_memif.py
index 9afed6fb6..a6469e151 100644
--- a/src/plugins/memif/test/vpp_memif.py
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_memif.py
@@ -3,35 +3,31 @@ from ipaddress import IPv4Network
 
 import six
 
-from vpp_object import VppObject
+from vpp_pom.vpp_object import VppObject
 from vpp_papi import VppEnum
 
 
-def get_if_dump(dump, sw_if_index):
-    for d in dump:
-        if (d.sw_if_index == sw_if_index):
-            return d
+def query_all_memif_vpp_config(_vclient):
+    return _vclient.memif_dump()
 
 
-def query_all_memif_vpp_config(_test):
-    return _test.vapi.memif_dump()
-
-
-def remove_all_memif_vpp_config(_test):
-    dump = _test.vapi.memif_dump()
-    for d in dump:
-        _test.vapi.memif_delete(d.sw_if_index)
-    dump = _test.vapi.memif_socket_filename_dump()
-    for d in dump:
-        if d.socket_id != 0:
-            _test.vapi.memif_socket_filename_add_del(
-                0, d.socket_id, d.socket_filename)
+def remove_all_memif_vpp_config(_vclient):
+    dump = _vclient.memif_dump()
+    if dump:
+        for d in dump:
+            _vclient.memif_delete(d.sw_if_index)
+    dump = _vclient.memif_socket_filename_dump()
+    if dump:
+        for d in dump:
+            if d.socket_id != 0:
+                _vclient.memif_socket_filename_add_del(
+                    0, d.socket_id, d.socket_filename)
 
 
 class VppSocketFilename(VppObject):
-    def __init__(self, test, socket_id, socket_filename,
+    def __init__(self, vclient, socket_id, socket_filename,
                  add_default_folder=False):
-        self._test = test
+        self._vclient = vclient
         self.socket_id = socket_id
         self.socket_filename = socket_filename
 
@@ -40,29 +36,34 @@ class VppSocketFilename(VppObject):
         self.add_default_folder = add_default_folder
 
     def add_vpp_config(self):
-        rv = self._test.vapi.memif_socket_filename_add_del(
+        rv = self._vclient.memif_socket_filename_add_del(
             1, self.socket_id, self.socket_filename)
         if self.add_default_folder:
-            self.socket_filename = "%s/%s" % (self._test.tempdir,
+            self.socket_filename = "%s/%s" % (self._vclient.tempdir,
                                               self.socket_filename)
         return rv
 
     def remove_vpp_config(self):
-        return self._test.vapi.memif_socket_filename_add_del(
+        return self._vclient.memif_socket_filename_add_del(
             0, self.socket_id, self.socket_filename)
 
+    def get_vpp_config(self):
+        return self._vclient.memif_socket_filename_dump()
+
     def query_vpp_config(self):
-        return self._test.vapi.memif_socket_filename_dump()
+        if self.get_vpp_config():
+            return True
+        return False
 
     def object_id(self):
         return "socket-filename-%d-%s" % (self.socket_id, self.socket_filename)
 
 
 class VppMemif(VppObject):
-    def __init__(self, test, role, mode, rx_queues=0, tx_queues=0, if_id=0,
+    def __init__(self, vclient, role, mode, rx_queues=0, tx_queues=0, if_id=0,
                  socket_id=0, secret="", ring_size=0, buffer_size=0,
                  hw_addr=""):
-        self._test = test
+        self._vclient = vclient
         self.role = role
         self.mode = mode
         self.rx_queues = rx_queues
@@ -74,12 +75,12 @@ class VppMemif(VppObject):
         self.buffer_size = buffer_size
         self.hw_addr = hw_addr
         self.sw_if_index = None
-        self.ip_prefix = IPv4Network("192.168.%d.%d/24" %
+        self.ip_prefix = IPv4Network(u"192.168.%d.%d/24" %
                                      (self.if_id + 1, self.role + 1),
                                      strict=False)
 
     def add_vpp_config(self):
-        rv = self._test.vapi.memif_create(
+        rv = self._vclient.memif_create(
             role=self.role,
             mode=self.mode,
             rx_queues=self.rx_queues,
@@ -100,40 +101,48 @@ class VppMemif(VppObject):
 
     def admin_up(self):
         if self.sw_if_index:
-            return self._test.vapi.sw_interface_set_flags(
+            return self._vclient.sw_interface_set_flags(
                 sw_if_index=self.sw_if_index, flags=1)
 
     def admin_down(self):
         if self.sw_if_index:
-            return self._test.vapi.sw_interface_set_flags(
+            return self._vclient.sw_interface_set_flags(
                 sw_if_index=self.sw_if_index, flags=0)
 
     def wait_for_link_up(self, timeout, step=1):
         if not self.sw_if_index:
             return False
         while True:
-            dump = self.query_vpp_config()
+            dump = self.get_vpp_config()
             f = VppEnum.vl_api_if_status_flags_t.IF_STATUS_API_FLAG_LINK_UP
-            if dump.flags & f:
+            if dump and dump.flags & f:
                 return True
-            self._test.sleep(step)
+            self._vclient.sleep(step)
             timeout -= step
             if timeout <= 0:
                 return False
 
     def config_ip4(self):
-        return self._test.vapi.sw_interface_add_del_address(
+        return self._vclient.sw_interface_add_del_address(
             sw_if_index=self.sw_if_index, prefix=self.ip_prefix)
 
     def remove_vpp_config(self):
-        self._test.vapi.memif_delete(self.sw_if_index)
+        self._vclient.memif_delete(sw_if_index=self.sw_if_index)
         self.sw_if_index = None
 
-    def query_vpp_config(self):
-        if not self.sw_if_index:
+    def get_vpp_config(self):
+        if self.sw_if_index is None:
             return None
-        dump = self._test.vapi.memif_dump()
-        return get_if_dump(dump, self.sw_if_index)
+        dump = self._vclient.memif_dump()
+        if dump:
+            for d in dump:
+                if d.sw_if_index == self.sw_if_index:
+                    return d
+
+    def query_vpp_config(self):
+        if self.get_vpp_config():
+            return True
+        return False
 
     def object_id(self):
         if self.sw_if_index:
diff --git a/src/plugins/pppoe/test/vpp_pppoe_interface.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_pppoe_interface.py
similarity index 76%
rename from src/plugins/pppoe/test/vpp_pppoe_interface.py
rename to src/vpp-api/pom/vpp_pom/plugins/vpp_pppoe_interface.py
index 3767aa1d0..7fcada15f 100644
--- a/src/plugins/pppoe/test/vpp_pppoe_interface.py
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_pppoe_interface.py
@@ -1,5 +1,5 @@
 
-from vpp_interface import VppInterface
+from vpp_pom.vpp_interface import VppInterface
 import socket
 from vpp_papi import mac_pton
 
@@ -9,17 +9,17 @@ class VppPppoeInterface(VppInterface):
     VPP Pppoe interface
     """
 
-    def __init__(self, test, client_ip, client_mac,
+    def __init__(self, vclient, client_ip, client_mac,
                  session_id, decap_vrf_id=0):
         """ Create VPP PPPoE4 interface """
-        super(VppPppoeInterface, self).__init__(test)
+        super(VppPppoeInterface, self).__init__(vclient)
         self.client_ip = client_ip
         self.client_mac = client_mac
         self.session_id = session_id
         self.decap_vrf_id = decap_vrf_id
 
     def add_vpp_config(self):
-        r = self.test.vapi.pppoe_add_del_session(
+        r = self._vclient.pppoe_add_del_session(
                 self.client_ip, self.client_mac,
                 session_id=self.session_id,
                 decap_vrf_id=self.decap_vrf_id)
@@ -28,7 +28,7 @@ class VppPppoeInterface(VppInterface):
 
     def remove_vpp_config(self):
         self.unconfig()
-        self.test.vapi.pppoe_add_del_session(
+        self._vclient.pppoe_add_del_session(
                 self.client_ip, self.client_mac,
                 session_id=self.session_id,
                 decap_vrf_id=self.decap_vrf_id,
diff --git a/src/plugins/srv6-ad/test/vpp_srv6.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_srv6.py
similarity index 91%
rename from src/plugins/srv6-ad/test/vpp_srv6.py
rename to src/vpp-api/pom/vpp_pom/plugins/vpp_srv6.py
index d6efedc9f..1703ca580 100644
--- a/src/plugins/srv6-ad/test/vpp_srv6.py
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_srv6.py
@@ -4,7 +4,7 @@
   object abstractions for representing SRv6 localSIDs in VPP
 """
 
-from vpp_object import VppObject
+from vpp_pom.vpp_object import VppObject
 from socket import inet_pton, inet_ntop, AF_INET, AF_INET6
 
 
@@ -42,9 +42,9 @@ class VppSRv6LocalSID(VppObject):
     SRv6 LocalSID
     """
 
-    def __init__(self, test, localsid, behavior, nh_addr,
+    def __init__(self, vclient, localsid, behavior, nh_addr,
                  end_psp, sw_if_index, vlan_index, fib_table):
-        self._test = test
+        self._vclient = vclient
         self.localsid = localsid
         self.behavior = behavior
         self.nh_addr = nh_addr
@@ -55,7 +55,7 @@ class VppSRv6LocalSID(VppObject):
         self._configured = False
 
     def add_vpp_config(self):
-        self._test.vapi.sr_localsid_add_del(
+        self._vclient.sr_localsid_add_del(
             localsid=self.localsid,
             behavior=self.behavior,
             nh_addr=self.nh_addr,
@@ -67,7 +67,7 @@ class VppSRv6LocalSID(VppObject):
         self._configured = True
 
     def remove_vpp_config(self):
-        self._test.vapi.sr_localsid_add_del(
+        self._vclient.sr_localsid_add_del(
             localsid=self.localsid,
             behavior=self.behavior,
             nh_addr=self.nh_addr,
@@ -95,10 +95,10 @@ class VppSRv6Policy(VppObject):
     SRv6 Policy
     """
 
-    def __init__(self, test, bsid,
+    def __init__(self, vclient, bsid,
                  is_encap, sr_type, weight, fib_table,
                  segments, source):
-        self._test = test
+        self._vclient = vclient
         self.bsid = bsid
         self.is_encap = is_encap
         self.sr_type = sr_type
@@ -112,7 +112,7 @@ class VppSRv6Policy(VppObject):
         self._configured = False
 
     def add_vpp_config(self):
-        self._test.vapi.sr_policy_add(
+        self._vclient.sr_policy_add(
                      bsid=self.bsid,
                      weight=self.weight,
                      is_encap=self.is_encap,
@@ -122,7 +122,7 @@ class VppSRv6Policy(VppObject):
         self._configured = True
 
     def remove_vpp_config(self):
-        self._test.vapi.sr_policy_del(
+        self._vclient.sr_policy_del(
                      self.bsid)
         self._configured = False
 
@@ -144,7 +144,7 @@ class VppSRv6Steering(VppObject):
     SRv6 Steering
     """
 
-    def __init__(self, test,
+    def __init__(self, vclient,
                  bsid,
                  prefix,
                  mask_width,
@@ -152,7 +152,7 @@ class VppSRv6Steering(VppObject):
                  sr_policy_index,
                  table_id,
                  sw_if_index):
-        self._test = test
+        self._vclient = vclient
         self.bsid = bsid
         self.prefix = prefix
         self.mask_width = mask_width
@@ -163,7 +163,7 @@ class VppSRv6Steering(VppObject):
         self._configured = False
 
     def add_vpp_config(self):
-        self._test.vapi.sr_steering_add_del(
+        self._vclient.sr_steering_add_del(
                      is_del=0,
                      bsid=self.bsid,
                      sr_policy_index=self.sr_policy_index,
@@ -174,7 +174,7 @@ class VppSRv6Steering(VppObject):
         self._configured = True
 
     def remove_vpp_config(self):
-        self._test.vapi.sr_steering_add_del(
+        self._vclient.sr_steering_add_del(
                      is_del=1,
                      bsid=self.bsid,
                      sr_policy_index=self.sr_policy_index,
diff --git a/src/vpp-api/pom/vpp_pom/plugins/vpp_wireguard.py b/src/vpp-api/pom/vpp_pom/plugins/vpp_wireguard.py
new file mode 100644
index 000000000..279762efa
--- /dev/null
+++ b/src/vpp-api/pom/vpp_pom/plugins/vpp_wireguard.py
@@ -0,0 +1,222 @@
+import datetime
+import struct
+
+from hashlib import blake2s
+from scapy.packet import Raw
+from scapy.layers.l2 import Ether, ARP
+from scapy.layers.inet import IP, UDP
+from scapy.contrib.wireguard import Wireguard, WireguardResponse, \
+    WireguardInitiation, WireguardTransport
+from cryptography.hazmat.primitives.serialization import Encoding, \
+    PrivateFormat, PublicFormat, NoEncryption
+from cryptography.hazmat.primitives.asymmetric.x25519 import \
+    X25519PrivateKey, X25519PublicKey
+from noise.connection import NoiseConnection, Keypair
+
+from vpp_pom.vpp_interface import VppInterface
+from vpp_pom.vpp_object import VppObject
+
+
+def private_key_bytes(k):
+    return k.private_bytes(Encoding.Raw,
+                           PrivateFormat.Raw,
+                           NoEncryption())
+
+
+def public_key_bytes(k):
+    return k.public_bytes(Encoding.Raw,
+                          PublicFormat.Raw)
+
+
+def find_route(vclient, prefix, table_id=0):
+    routes = vclient.ip_route_dump(table_id, False)
+
+    for e in routes:
+        if table_id == e.route.table_id \
+           and str(e.route.prefix) == str(prefix):
+            return True
+    return False
+
+
+NOISE_HANDSHAKE_NAME = b"Noise_IKpsk2_25519_ChaChaPoly_BLAKE2s"
+NOISE_IDENTIFIER_NAME = b"WireGuard v1 zx2c4 Jason@zx2c4.com"
+
+
+class VppWgInterface(VppInterface):
+    """
+    VPP WireGuard interface
+    """
+
+    def __init__(self, vclient, src, port):
+        super(VppWgInterface, self).__init__(vclient)
+
+        self.port = port
+        self.src = src
+        self.private_key = X25519PrivateKey.generate()
+        self.public_key = self.private_key.public_key()
+
+    def public_key_bytes(self):
+        return public_key_bytes(self.public_key)
+
+    def private_key_bytes(self):
+        return private_key_bytes(self.private_key)
+
+    def add_vpp_config(self):
+        r = self._vclient.wireguard_interface_create(interface={
+            'user_instance': 0xffffffff,
+            'port': self.port,
+            'src_ip': self.src,
+            'private_key': private_key_bytes(self.private_key),
+            'generate_key': False
+        })
+        self.set_sw_if_index(r.sw_if_index)
+        self._vclient.registry.register(self, self._vclient.logger)
+        return self
+
+    def remove_vpp_config(self):
+        self._vclient.wireguard_interface_delete(
+            sw_if_index=self._sw_if_index)
+
+    def query_vpp_config(self):
+        ts = self._vclient.wireguard_interface_dump(sw_if_index=0xffffffff)
+        for t in ts:
+            if t.interface.sw_if_index == self._sw_if_index and \
+               str(t.interface.src_ip) == self.src and \
+               t.interface.port == self.port and \
+               t.interface.private_key == private_key_bytes(self.private_key):
+                return True
+        return False
+
+    def __str__(self):
+        return self.object_id()
+
+    def object_id(self):
+        return "wireguard-%d" % self._sw_if_index
+
+
+class VppWgPeer(VppObject):
+
+    def __init__(self,
+                 vclient,
+                 itf,
+                 endpoint,
+                 port,
+                 allowed_ips,
+                 persistent_keepalive=15):
+        self._vclient = vclient
+        self.itf = itf
+        self.endpoint = endpoint
+        self.port = port
+        self.allowed_ips = allowed_ips
+        self.persistent_keepalive = persistent_keepalive
+
+        # remote peer's public
+        self.private_key = X25519PrivateKey.generate()
+        self.public_key = self.private_key.public_key()
+
+        self.noise = NoiseConnection.from_name(NOISE_HANDSHAKE_NAME)
+
+    def add_vpp_config(self):
+        rv = self._vclient.wireguard_peer_add(
+            peer={
+                'public_key': self.public_key_bytes(),
+                'port': self.port,
+                'endpoint': self.endpoint,
+                'n_allowed_ips': len(self.allowed_ips),
+                'allowed_ips': self.allowed_ips,
+                'sw_if_index': self.itf.sw_if_index,
+                'persistent_keepalive': self.persistent_keepalive})
+        self.index = rv.peer_index
+        self.receiver_index = self.index + 1
+        self._vclient.registry.register(self, self._vclient.logger)
+        return self
+
+    def remove_vpp_config(self):
+        self._vclient.wireguard_peer_remove(peer_index=self.index)
+
+    def object_id(self):
+        return ("wireguard-peer-%s" % self.index)
+
+    def public_key_bytes(self):
+        return public_key_bytes(self.public_key)
+
+    def query_vpp_config(self):
+        peers = self._vclient.wireguard_peers_dump()
+
+        for p in peers:
+            if p.peer.public_key == self.public_key_bytes() and \
+               p.peer.port == self.port and \
+               str(p.peer.endpoint) == self.endpoint and \
+               p.peer.sw_if_index == self.itf.sw_if_index and \
+               len(self.allowed_ips) == p.peer.n_allowed_ips:
+                self.allowed_ips.sort()
+                p.peer.allowed_ips.sort()
+
+                for (a1, a2) in zip(self.allowed_ips, p.peer.allowed_ips):
+                    if str(a1) != str(a2):
+                        return False
+                return True
+        return False
+
+    def set_responder(self):
+        self.noise.set_as_responder()
+
+    def mk_tunnel_header(self, tx_itf):
+        return (Ether(dst=tx_itf.local_mac, src=tx_itf.remote_mac) /
+                IP(src=self.endpoint, dst=self.itf.src) /
+                UDP(sport=self.port, dport=self.itf.port))
+
+    def noise_init(self, public_key=None):
+        self.noise.set_prologue(NOISE_IDENTIFIER_NAME)
+        self.noise.set_psks(psk=bytes(bytearray(32)))
+
+        if not public_key:
+            public_key = self.itf.public_key
+
+        # local/this private
+        self.noise.set_keypair_from_private_bytes(
+            Keypair.STATIC,
+            private_key_bytes(self.private_key))
+        # remote's public
+        self.noise.set_keypair_from_public_bytes(
+            Keypair.REMOTE_STATIC,
+            public_key_bytes(public_key))
+
+        self.noise.start_handshake()
+
+    def mk_handshake(self, tx_itf, public_key=None):
+        self.noise.set_as_initiator()
+        self.noise_init(public_key)
+
+        p = (Wireguard() / WireguardInitiation())
+
+        p[Wireguard].message_type = 1
+        p[Wireguard].reserved_zero = 0
+        p[WireguardInitiation].sender_index = self.receiver_index
+
+        # some random data for the message
+        #  lifted from the noise protocol's wireguard example
+        now = datetime.datetime.now()
+        tai = struct.pack('!qi', 4611686018427387914 + int(now.timestamp()),
+                          int(now.microsecond * 1e3))
+        b = self.noise.write_message(payload=tai)
+
+        # load noise into init message
+        p[WireguardInitiation].unencrypted_ephemeral = b[0:32]
+        p[WireguardInitiation].encrypted_static = b[32:80]
+        p[WireguardInitiation].encrypted_timestamp = b[80:108]
+
+        # generate the mac1 hash
+        mac_key = blake2s(b'mac1----' +
+                          self.itf.public_key_bytes()).digest()
+        p[WireguardInitiation].mac1 = blake2s(bytes(p)[0:116],
+                                              digest_size=16,
+                                              key=mac_key).digest()
+        p[WireguardInitiation].mac2 = bytearray(16)
+
+        p = (self.mk_tunnel_header(tx_itf) / p)
+
+        return p
+    
+    def encrypt_transport(self, p):
+        return self.noise.encrypt(bytes(p))
\ No newline at end of file
diff --git a/test/util.py b/src/vpp-api/pom/vpp_pom/util.py
similarity index 99%
rename from test/util.py
rename to src/vpp-api/pom/vpp_pom/util.py
index c7e4693e9..b7fdbd7cf 100644
--- a/test/util.py
+++ b/src/vpp-api/pom/vpp_pom/util.py
@@ -1,4 +1,4 @@
-""" test framework utilities """
+""" vclient framework utilities """
 
 import abc
 import ipaddress
@@ -133,7 +133,7 @@ class NumericConstant(object):
 
 
 class Host(object):
-    """ Generic test host "connected" to VPPs interface. """
+    """ Generic vclient host "connected" to VPPs interface. """
 
     @property
     def mac(self):
diff --git a/test/bfd.py b/src/vpp-api/pom/vpp_pom/vpp_bfd.py
similarity index 90%
rename from test/bfd.py
rename to src/vpp-api/pom/vpp_pom/vpp_bfd.py
index 9d44425ec..232f11adc 100644
--- a/test/bfd.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_bfd.py
@@ -7,8 +7,8 @@ from scapy.layers.inet import UDP
 from scapy.packet import Packet
 from scapy.fields import BitField, BitEnumField, XByteField, FlagsField,\
     ConditionalField, StrField
-from vpp_object import VppObject
-from util import NumericConstant
+from vpp_pom.vpp_object import VppObject
+from vpp_pom.util import NumericConstant
 from vpp_papi import VppEnum
 
 
@@ -170,17 +170,18 @@ bind_layers(UDP, BFD_vpp_echo, dport=BFD_vpp_echo.udp_dport)
 class VppBFDAuthKey(VppObject):
     """ Represents BFD authentication key in VPP """
 
-    def __init__(self, test, conf_key_id, auth_type, key):
-        self._test = test
+    def __init__(self, vclient, conf_key_id, auth_type, key):
+        self._vclient = vclient
         self._key = key
         self._auth_type = auth_type
-        test.assertIn(auth_type, BFDAuthType.desc_dict)
+        if auth_type not in BFDAuthType.desc_dict:
+            raise AttributeError("Authentication type (%s) not supported." % auth_type)
         self._conf_key_id = conf_key_id
 
     @property
-    def test(self):
-        """ Test which created this key """
-        return self._test
+    def vclient(self):
+        """ vclient which created this key """
+        return self._vclient
 
     @property
     def auth_type(self):
@@ -202,14 +203,14 @@ class VppBFDAuthKey(VppObject):
         return self._conf_key_id
 
     def add_vpp_config(self):
-        self.test.vapi.bfd_auth_set_key(
+        self.vclient.bfd_auth_set_key(
             conf_key_id=self._conf_key_id, auth_type=self._auth_type,
             key=self._key, key_len=len(self._key))
-        self._test.registry.register(self, self.test.logger)
+        self._vclient.registry.register(self, self.vclient.logger)
 
     def get_bfd_auth_keys_dump_entry(self):
         """ get the entry in the auth keys dump corresponding to this key """
-        result = self.test.vapi.bfd_auth_keys_dump()
+        result = self.vclient.bfd_auth_keys_dump()
         for k in result:
             if k.conf_key_id == self._conf_key_id:
                 return k
@@ -219,7 +220,7 @@ class VppBFDAuthKey(VppObject):
         return self.get_bfd_auth_keys_dump_entry() is not None
 
     def remove_vpp_config(self):
-        self.test.vapi.bfd_auth_del_key(conf_key_id=self._conf_key_id)
+        self.vclient.bfd_auth_del_key(conf_key_id=self._conf_key_id)
 
     def object_id(self):
         return "bfd-auth-key-%s" % self._conf_key_id
@@ -228,10 +229,10 @@ class VppBFDAuthKey(VppObject):
 class VppBFDUDPSession(VppObject):
     """ Represents BFD UDP session in VPP """
 
-    def __init__(self, test, interface, peer_addr, local_addr=None, af=AF_INET,
+    def __init__(self, vclient, interface, peer_addr, local_addr=None, af=AF_INET,
                  desired_min_tx=300000, required_min_rx=300000, detect_mult=3,
                  sha1_key=None, bfd_key_id=None, is_tunnel=False):
-        self._test = test
+        self._vclient = vclient
         self._interface = interface
         self._af = af
         if local_addr:
@@ -250,9 +251,9 @@ class VppBFDUDPSession(VppObject):
         self._is_tunnel = is_tunnel
 
     @property
-    def test(self):
-        """ Test which created this session """
-        return self._test
+    def vclient(self):
+        """ vclient which created this session """
+        return self._vclient
 
     @property
     def interface(self):
@@ -283,9 +284,9 @@ class VppBFDUDPSession(VppObject):
 
     def get_bfd_udp_session_dump_entry(self):
         """ get the namedtuple entry from bfd udp session dump """
-        result = self.test.vapi.bfd_udp_session_dump()
+        result = self.vclient.bfd_udp_session_dump()
         for s in result:
-            self.test.logger.debug("session entry: %s" % str(s))
+            self.vclient.logger.debug("session entry: %s" % str(s))
             if s.sw_if_index == self.interface.sw_if_index:
                 if self.af == AF_INET \
                         and self.interface.local_ip4 == str(s.local_addr) \
@@ -340,7 +341,7 @@ class VppBFDUDPSession(VppObject):
         self._sha1_key = key
         conf_key_id = self._sha1_key.conf_key_id
         is_delayed = 1 if delayed else 0
-        self.test.vapi.bfd_udp_auth_activate(
+        self.vclient.bfd_udp_auth_activate(
             sw_if_index=self._interface.sw_if_index,
             local_addr=self.local_addr,
             peer_addr=self.peer_addr,
@@ -353,7 +354,7 @@ class VppBFDUDPSession(VppObject):
         self._bfd_key_id = None
         self._sha1_key = None
         is_delayed = 1 if delayed else 0
-        self.test.vapi.bfd_udp_auth_deactivate(
+        self.vclient.bfd_udp_auth_deactivate(
             sw_if_index=self._interface.sw_if_index,
             local_addr=self.local_addr,
             peer_addr=self.peer_addr,
@@ -370,7 +371,7 @@ class VppBFDUDPSession(VppObject):
             self._desired_min_tx = desired_min_tx
         if required_min_rx:
             self._required_min_rx = required_min_rx
-        self.test.vapi.bfd_udp_mod(sw_if_index=self._interface.sw_if_index,
+        self.vclient.bfd_udp_mod(sw_if_index=self._interface.sw_if_index,
                                    desired_min_tx=self.desired_min_tx,
                                    required_min_rx=self.required_min_rx,
                                    detect_mult=self.detect_mult,
@@ -381,7 +382,7 @@ class VppBFDUDPSession(VppObject):
         bfd_key_id = self._bfd_key_id if self._sha1_key else None
         conf_key_id = self._sha1_key.conf_key_id if self._sha1_key else None
         is_authenticated = True if self._sha1_key else False
-        self.test.vapi.bfd_udp_add(sw_if_index=self._interface.sw_if_index,
+        self.vclient.bfd_udp_add(sw_if_index=self._interface.sw_if_index,
                                    desired_min_tx=self.desired_min_tx,
                                    required_min_rx=self.required_min_rx,
                                    detect_mult=self.detect_mult,
@@ -390,14 +391,14 @@ class VppBFDUDPSession(VppObject):
                                    bfd_key_id=bfd_key_id,
                                    conf_key_id=conf_key_id,
                                    is_authenticated=is_authenticated)
-        self._test.registry.register(self, self.test.logger)
+        self._vclient.registry.register(self, self.vclient.logger)
 
     def query_vpp_config(self):
         session = self.get_bfd_udp_session_dump_entry()
         return session is not None
 
     def remove_vpp_config(self):
-        self.test.vapi.bfd_udp_del(self._interface.sw_if_index,
+        self.vclient.bfd_udp_del(self._interface.sw_if_index,
                                    local_addr=self.local_addr,
                                    peer_addr=self.peer_addr)
 
@@ -409,7 +410,7 @@ class VppBFDUDPSession(VppObject):
 
     def admin_up(self):
         """ set bfd session admin-up """
-        self.test.vapi.bfd_udp_session_set_flags(
+        self.vclient.bfd_udp_session_set_flags(
             flags=VppEnum.vl_api_if_status_flags_t.IF_STATUS_API_FLAG_ADMIN_UP,
             sw_if_index=self._interface.sw_if_index,
             local_addr=self.local_addr,
@@ -417,7 +418,7 @@ class VppBFDUDPSession(VppObject):
 
     def admin_down(self):
         """ set bfd session admin-down """
-        self.test.vapi.bfd_udp_session_set_flags(
+        self.vclient.bfd_udp_session_set_flags(
             flags=0, sw_if_index=self._interface.sw_if_index,
             local_addr=self.local_addr,
             peer_addr=self.peer_addr)
diff --git a/test/vpp_bier.py b/src/vpp-api/pom/vpp_pom/vpp_bier.py
similarity index 72%
rename from test/vpp_bier.py
rename to src/vpp-api/pom/vpp_pom/vpp_bier.py
index 6e087a8ee..66a2c9fb5 100644
--- a/test/vpp_bier.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_bier.py
@@ -3,8 +3,8 @@
 """
 
 import socket
-from vpp_object import VppObject
-from vpp_ip_route import MPLS_LABEL_INVALID, VppRoutePath, VppMplsLabel
+from .vpp_object import VppObject
+from .vpp_ip_route import MPLS_LABEL_INVALID, VppRoutePath, VppMplsLabel
 
 
 class BIER_HDR_PAYLOAD:
@@ -25,8 +25,8 @@ class VppBierTableID():
         self.hdr_len_id = hdr_len_id
 
 
-def find_bier_table(test, bti):
-    tables = test.vapi.bier_table_dump()
+def find_bier_table(vclient, bti):
+    tables = vclient.bier_table_dump()
     for t in tables:
         if bti.set_id == t.bt_tbl_id.bt_set \
            and bti.sub_domain_id == t.bt_tbl_id.bt_sub_domain \
@@ -35,8 +35,8 @@ def find_bier_table(test, bti):
     return False
 
 
-def find_bier_route(test, bti, bp):
-    routes = test.vapi.bier_route_dump(bti)
+def find_bier_route(vclient, bti, bp):
+    routes = vclient.bier_route_dump(bti)
     for r in routes:
         if bti.set_id == r.br_route.br_tbl_id.bt_set \
            and bti.sub_domain_id == r.br_route.br_tbl_id.bt_sub_domain \
@@ -46,16 +46,16 @@ def find_bier_route(test, bti, bp):
     return False
 
 
-def find_bier_disp_table(test, bdti):
-    tables = test.vapi.bier_disp_table_dump()
+def find_bier_disp_table(vclient, bdti):
+    tables = vclient.bier_disp_table_dump()
     for t in tables:
         if bdti == t.bdt_tbl_id:
             return True
     return False
 
 
-def find_bier_disp_entry(test, bdti, bp):
-    entries = test.vapi.bier_disp_entry_dump(bdti)
+def find_bier_disp_entry(vclient, bdti, bp):
+    entries = vclient.bier_disp_entry_dump(bdti)
     for e in entries:
         if bp == e.bde_bp \
            and bdti == e.bde_tbl_id:
@@ -63,8 +63,8 @@ def find_bier_disp_entry(test, bdti, bp):
     return False
 
 
-def find_bier_imp(test, bti, bp):
-    imps = test.vapi.bier_imp_dump()
+def find_bier_imp(vclient, bti, bp):
+    imps = vclient.bier_imp_dump()
     for i in imps:
         if bti.set_id == i.bi_tbl_id.bt_set \
            and bti.sub_domain_id == i.bi_tbl_id.bt_sub_domain \
@@ -79,20 +79,20 @@ class VppBierTable(VppObject):
     BIER Table
     """
 
-    def __init__(self, test, id, mpls_label):
-        self._test = test
+    def __init__(self, vclient, id, mpls_label):
+        self._vclient = vclient
         self.id = id
         self.mpls_label = mpls_label
 
     def add_vpp_config(self):
-        self._test.vapi.bier_table_add_del(
+        self._vclient.bier_table_add_del(
             self.id,
             self.mpls_label,
             is_add=1)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.bier_table_add_del(
+        self._vclient.bier_table_add_del(
             self.id,
             self.mpls_label,
             is_add=0)
@@ -103,7 +103,7 @@ class VppBierTable(VppObject):
                                           self.id.hdr_len_id)
 
     def query_vpp_config(self):
-        return find_bier_table(self._test, self.id)
+        return find_bier_table(self._vclient, self.id)
 
 
 class VppBierRoute(VppObject):
@@ -111,8 +111,8 @@ class VppBierRoute(VppObject):
     BIER route
     """
 
-    def __init__(self, test, tbl_id, bp, paths):
-        self._test = test
+    def __init__(self, vclient, tbl_id, bp, paths):
+        self._vclient = vclient
         self.tbl_id = tbl_id
         self.bp = bp
         self.paths = paths
@@ -121,15 +121,15 @@ class VppBierRoute(VppObject):
             self.encoded_paths.append(path.encode())
 
     def add_vpp_config(self):
-        self._test.vapi.bier_route_add_del(
+        self._vclient.bier_route_add_del(
             self.tbl_id,
             self.bp,
             self.encoded_paths,
             is_add=1)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.bier_route_add_del(
+        self._vclient.bier_route_add_del(
             self.tbl_id,
             self.bp,
             self.encoded_paths,
@@ -140,7 +140,7 @@ class VppBierRoute(VppObject):
         self.encoded_paths = []
         for path in self.paths:
             self.encoded_paths.append(path.encode())
-        self._test.vapi.bier_route_add_del(
+        self._vclient.bier_route_add_del(
             self.tbl_id,
             self.bp,
             self.encoded_paths,
@@ -148,18 +148,18 @@ class VppBierRoute(VppObject):
 
     def add_path(self, path):
         self.encoded_paths.append(path.encode())
-        self._test.vapi.bier_route_add_del(
+        self._vclient.bier_route_add_del(
             self.tbl_id,
             self.bp,
             [path.encode()],
             is_add=1,
             is_replace=0)
         self.paths.append(path)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_path(self, path):
         self.encoded_paths.remove(path.encode())
-        self._test.vapi.bier_route_add_del(
+        self._vclient.bier_route_add_del(
             self.tbl_id,
             self.bp,
             [path.encode()],
@@ -168,7 +168,7 @@ class VppBierRoute(VppObject):
         self.paths.remove(path)
 
     def remove_all_paths(self):
-        self._test.vapi.bier_route_add_del(
+        self._vclient.bier_route_add_del(
             self.tbl_id,
             self.bp,
             [],
@@ -183,7 +183,7 @@ class VppBierRoute(VppObject):
                                              self.bp)
 
     def query_vpp_config(self):
-        return find_bier_route(self._test, self.tbl_id, self.bp)
+        return find_bier_route(self._vclient, self.tbl_id, self.bp)
 
 
 class VppBierImp(VppObject):
@@ -191,22 +191,22 @@ class VppBierImp(VppObject):
     BIER route
     """
 
-    def __init__(self, test, tbl_id, src, ibytes):
-        self._test = test
+    def __init__(self, vclient, tbl_id, src, ibytes):
+        self._vclient = vclient
         self.tbl_id = tbl_id
         self.ibytes = ibytes
         self.src = src
 
     def add_vpp_config(self):
-        res = self._test.vapi.bier_imp_add(
+        res = self._vclient.bier_imp_add(
             self.tbl_id,
             self.src,
             self.ibytes)
         self.bi_index = res.bi_index
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.bier_imp_del(
+        self._vclient.bier_imp_del(
             self.bi_index)
 
     def object_id(self):
@@ -216,7 +216,7 @@ class VppBierImp(VppObject):
                                            self.src)
 
     def query_vpp_config(self):
-        return find_bier_imp(self._test, self.tbl_id, self.src)
+        return find_bier_imp(self._vclient, self.tbl_id, self.src)
 
 
 class VppBierDispTable(VppObject):
@@ -224,18 +224,18 @@ class VppBierDispTable(VppObject):
     BIER Disposition Table
     """
 
-    def __init__(self, test, id):
-        self._test = test
+    def __init__(self, vclient, id):
+        self._vclient = vclient
         self.id = id
 
     def add_vpp_config(self):
-        self._test.vapi.bier_disp_table_add_del(
+        self._vclient.bier_disp_table_add_del(
             self.id,
             is_add=1)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.bier_disp_table_add_del(
+        self._vclient.bier_disp_table_add_del(
             self.id,
             is_add=0)
 
@@ -243,7 +243,7 @@ class VppBierDispTable(VppObject):
         return "bier-disp-table;[%d]" % (self.id)
 
     def query_vpp_config(self):
-        return find_bier_disp_table(self._test, self.id)
+        return find_bier_disp_table(self._vclient, self.id)
 
 
 class VppBierDispEntry(VppObject):
@@ -251,9 +251,9 @@ class VppBierDispEntry(VppObject):
     BIER Disposition Entry
     """
 
-    def __init__(self, test, tbl_id, bp, payload_proto, nh_proto,
+    def __init__(self, vclient, tbl_id, bp, payload_proto, nh_proto,
                  nh, nh_tbl, rpf_id=~0):
-        self._test = test
+        self._vclient = vclient
         self.tbl_id = tbl_id
         self.nh_tbl = nh_tbl
         self.nh_proto = nh_proto
@@ -263,7 +263,7 @@ class VppBierDispEntry(VppObject):
         self.nh = socket.inet_pton(socket.AF_INET, nh)
 
     def add_vpp_config(self):
-        self._test.vapi.bier_disp_entry_add_del(
+        self._vclient.bier_disp_entry_add_del(
             self.tbl_id,
             self.bp,
             self.payload_proto,
@@ -272,10 +272,10 @@ class VppBierDispEntry(VppObject):
             self.nh_tbl,
             self.rpf_id,
             is_add=1)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.bier_disp_entry_add_del(
+        self._vclient.bier_disp_entry_add_del(
             self.tbl_id,
             self.bp,
             self.payload_proto,
@@ -290,4 +290,4 @@ class VppBierDispEntry(VppObject):
                                             self.bp)
 
     def query_vpp_config(self):
-        return find_bier_disp_entry(self._test, self.tbl_id, self.bp)
+        return find_bier_disp_entry(self._vclient, self.tbl_id, self.bp)
diff --git a/test/vpp_bond_interface.py b/src/vpp-api/pom/vpp_pom/vpp_bond_interface.py
similarity index 78%
rename from test/vpp_bond_interface.py
rename to src/vpp-api/pom/vpp_pom/vpp_bond_interface.py
index 60c1ac155..ffabcc9ee 100644
--- a/test/vpp_bond_interface.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_bond_interface.py
@@ -1,15 +1,15 @@
-from vpp_object import VppObject
-from vpp_interface import VppInterface
+from .vpp_object import VppObject
+from .vpp_interface import VppInterface
 
 
 class VppBondInterface(VppInterface):
     """VPP bond interface."""
 
-    def __init__(self, test, mode, lb=0, numa_only=0, enable_gso=0,
+    def __init__(self, vclient, mode, lb=0, numa_only=0, enable_gso=0,
                  use_custom_mac=0, mac_address='', id=0xFFFFFFFF):
 
         """ Create VPP Bond interface """
-        super(VppBondInterface, self).__init__(test)
+        super(VppBondInterface, self).__init__(vclient)
         self.mode = mode
         self.lb = lb
         self.numa_only = numa_only
@@ -19,7 +19,7 @@ class VppBondInterface(VppInterface):
         self.id = id
 
     def add_vpp_config(self):
-        r = self.test.vapi.bond_create2(self.mode,
+        r = self.vclient.bond_create2(self.mode,
                                         self.lb,
                                         self.numa_only,
                                         self.enable_gso,
@@ -29,20 +29,20 @@ class VppBondInterface(VppInterface):
         self.set_sw_if_index(r.sw_if_index)
 
     def remove_vpp_config(self):
-        self.test.vapi.bond_delete(self.sw_if_index)
+        self.vclient.bond_delete(self.sw_if_index)
 
     def add_member_vpp_bond_interface(self,
                                       sw_if_index,
                                       is_passive=0,
                                       is_long_timeout=0):
-        self.test.vapi.bond_add_member(sw_if_index,
+        self.vclient.bond_add_member(sw_if_index,
                                        self.sw_if_index,
                                        is_passive,
                                        is_long_timeout)
 
     def detach_vpp_bond_interface(self,
                                   sw_if_index):
-        self.test.vapi.bond_detach_member(sw_if_index)
+        self.vclient.bond_detach_member(sw_if_index)
 
     def is_interface_config_in_dump(self, dump):
         for i in dump:
diff --git a/src/vpp-api/pom/vpp_pom/vpp_bvi_interface.py b/src/vpp-api/pom/vpp_pom/vpp_bvi_interface.py
new file mode 100644
index 000000000..96fd7feb7
--- /dev/null
+++ b/src/vpp-api/pom/vpp_pom/vpp_bvi_interface.py
@@ -0,0 +1,23 @@
+from .vpp_object import VppObject
+from .vpp_interface import VppInterface
+
+
+class VppBviInterface(VppInterface, VppObject):
+    """VPP bvi interface."""
+
+    def __init__(self, vclient):
+        """ Create VPP BVI interface """
+        super(VppBviInterface, self).__init__(vclient)
+
+    def add_vpp_config(self, register=True):
+        r = self.vclient.bvi_create(user_instance=0xffffffff,
+                                      mac="00:00:00:00:00:00")
+        self.set_sw_if_index(r.sw_if_index)
+        if register:
+            self.vclient.registry.register(self, self.vclient.logger)
+
+    def remove_vpp_config(self):
+        self.vclient.bvi_delete(sw_if_index=self.sw_if_index)
+
+    def object_id(self):
+        return "bvi-%d" % self._sw_if_index
diff --git a/src/vpp-api/pom/vpp_pom/vpp_client.py b/src/vpp-api/pom/vpp_pom/vpp_client.py
new file mode 100644
index 000000000..61ddfe697
--- /dev/null
+++ b/src/vpp-api/pom/vpp_pom/vpp_client.py
@@ -0,0 +1,371 @@
+# Copyright (c) 2020 Cisco and/or its affiliates.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at:
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import logging
+import os
+import fnmatch
+import subprocess
+import time
+
+from vpp_papi.vpp_stats import VPPStats
+from .vpp_papi_provider import VppPapiProvider
+from .vpp_object import VppObjectRegistry
+from .log import RED, GREEN, YELLOW, double_line_delim, single_line_delim, \
+    get_logger, colorize
+from .hook import PollHook, StepHook, VppDiedError
+
+
+class BaseVppStartupConf:
+    """ Base class for VPP startup configuration """
+
+    def __init__(self, vpp_bin=None):
+        self.vpp_bin = vpp_bin
+    
+    def format_config(self, human_readable=False):
+        if human_readable:
+            return self._format_readable()
+        else:
+            return self._format_subprocess()
+    
+    def _format_subprocess(self):
+        """Return formatting for use in subprocess"""
+        pass
+
+    def _format_readable(self):
+        """Return formatted starup config"""
+        pass
+
+
+class VppStartupConfFile(BaseVppStartupConf):
+    """VPP startup config file"""
+
+    def __init__(self, path, vpp_bin=None):
+        """Init"""
+        super(VppStartupConfFile, self).__init__(vpp_bin)
+        # FIXME: check if file exists
+        self.path = path
+    
+    def _format_subprocess(self):
+        """Return formatting for use in subprocess"""
+        return self._format_readable()
+
+    def _format_readable(self):
+        """Return formatted starup config"""
+        with open(self.path, "r") as f:
+            return f.read()
+
+
+class VppStartupConf(BaseVppStartupConf):
+    """VPP startup config"""
+
+    def __init__(self, vpp_bin=None):
+        """Init"""
+        super(VppStartupConf, self).__init__(vpp_bin)
+        self._config_dict = {}
+
+    @property
+    def config_dict(self):
+        """Return configuration dictionary"""
+        return self._config_dict
+
+    def _format_subprocess(self):
+        """Return formatting for use in subprocess"""
+        out = []
+        if self.vpp_bin:
+            out.append(self.vpp_bin)
+        for key in self.config_dict:
+            out += [key, "{"]
+            for param in self.config_dict[key]:
+                out += param.split(" ")
+            out += ["}"]
+        return out
+
+    def _format_readable(self):
+        """Return formatted starup config"""
+        out = ""
+        for key in self.config_dict:
+            out += key + " {\n"
+            for param in self.config_dict[key]:
+                out += "\t" + param + "\n"
+            out += "}\n"
+        return out
+
+    def add_parameter(self, group, parameter):
+        """Add the parameter to the configuration"""
+        if type(parameter) is not str:
+            raise TypeError("\'parameter\' must be string type")
+        if group in self._config_dict:
+            self._config_dict[group].append(parameter)
+        else:
+            self._config_dict[group] = [parameter]
+    
+    def remove_parameter(self, group, parameter):
+        """Add the parameter from the configuration"""
+        if type(parameter) is not str:
+            raise TypeError("\'parameter\' must be string type")
+        if group in self._config_dict:
+            if parameter in self._config_dict[group]:
+                self._config_dict[group].remove(parameter)
+
+
+# FIXME: crashes if constructed in classmethod
+class VppClient(VppPapiProvider):
+
+    debug_gdbserver = False
+    debug_gdb = False
+    gdbserver_port = 7777
+    tempdir = "/tmp/vpp/"
+
+    def __init__(self, name, shm_prefix, logger=None, read_timeout=5, api_socket=None, vpp_install_path=os.getenv('VPP_INSTALL_PATH'), stats_socket=None):
+        if not logger:
+            logger = logging.getLogger('VppClient')
+        super(VppClient, self).__init__(name, shm_prefix, logger, read_timeout, vpp_install_path, api_socket=api_socket)
+        self._registry = VppObjectRegistry(self.logger)
+        self._captures = []
+        if stats_socket:
+            self.statistics = VPPStats(socketname=stats_socket)
+        else:
+            self.statistics = VPPStats()
+    
+    @property
+    def registry(self):
+        return self._registry
+
+    def register_capture(self, cap_name):
+        """ Register a capture in the testclass """
+        # add to the list of captures with current timestamp
+        self._captures.append((time.time(), cap_name))
+    
+    def pg_start(self):
+        """ Enable the PG, wait till it is done, then clean up """
+        self.cli("trace add pg-input 1000")
+        self.cli('packet-generator enable')
+        # PG, when starts, runs to completion -
+        # so let's avoid a race condition,
+        # and wait a little till it's done.
+        # Then clean it up  - and then be gone.
+        deadline = time.time() + 300
+        while self.cli('show packet-generator').find("Yes") != -1:
+            self.sleep(0.01)  # yield
+            if time.time() > deadline:
+                self.logger.error("Timeout waiting for pg to stop")
+                break
+        for stamp, cap_name in self._captures:
+            self.cli('packet-generator delete %s' % cap_name)
+        self._captures = []
+
+    def sleep(self, timeout, remark=None):
+
+        # /* Allow sleep(0) to maintain win32 semantics, and as decreed
+        #  * by Guido, only the main thread can be interrupted.
+        # */
+        # https://github.com/python/cpython/blob/6673decfa0fb078f60587f5cb5e98460eea137c2/Modules/timemodule.c#L1892  # noqa
+        if timeout == 0:
+            # yield quantum
+            if hasattr(os, 'sched_yield'):
+                os.sched_yield()
+            else:
+                time.sleep(0)
+            return
+
+        self.logger.debug("Starting sleep for %es (%s)", timeout, remark)
+        before = time.time()
+        time.sleep(timeout)
+        after = time.time()
+        if after - before > 2 * timeout:
+            self.logger.error("unexpected self.sleep() result - "
+                             "slept for %es instead of ~%es!",
+                             after - before, timeout)
+
+        self.logger.debug(
+                "Finished sleep (%s) - slept %es (wanted %es)",
+                remark, after - before, timeout)
+
+    def run_vpp(self, startup_cnf, step=False):
+        cmdline = startup_cnf.format_config()
+
+        if self.debug_gdbserver:
+            gdbserver = '/usr/bin/gdbserver'
+            if not os.path.isfile(gdbserver) or \
+                    not os.access(gdbserver, os.X_OK):
+                raise Exception("gdbserver binary '%s' does not exist or is "
+                                "not executable" % gdbserver)
+
+            cmdline = [gdbserver, 'localhost:{port}'
+                       .format(port=self.gdbserver_port)] + self.vpp_cmdline
+            self.logger.info("Gdbserver cmdline is %s", " ".join(cmdline))
+        try:
+            self.vpp_process = subprocess.Popen(cmdline,
+                                       stdout=subprocess.PIPE,
+                                       stderr=subprocess.PIPE)
+        except subprocess.CalledProcessError as e:
+            self.logger.critical("Subprocess returned with non-0 return code: ("
+                                "%s)", e.returncode)
+            raise
+        except OSError as e:
+            self.logger.critical("Subprocess returned with OS error: "
+                                "(%s) %s", e.errno, e.strerror)
+            raise
+        except Exception as e:
+            self.logger.exception("Subprocess returned unexpected from "
+                                 "%s:", cmdline)
+            raise
+        self.wait_for_enter()
+        # register step/poll hook
+        if step:
+            hook = StepHook(self)
+        else:
+            hook = PollHook(self)
+        self.register_hook(hook)
+        # poll VPP process
+        try:
+            hook.poll_vpp()
+        except VppDiedError:
+            self.logger.critical(
+                "VPP died shortly after startup, check the"
+                " output to standard error for possible cause")
+            raise
+
+    def wait_for_enter(self):
+        if self.debug_gdbserver:
+            print(double_line_delim)
+            print("Spawned GDB server with PID: %d" % self.vpp_process.pid)
+        elif self.debug_gdb:
+            print(double_line_delim)
+            print("Spawned VPP with PID: %d" % self.vpp_process.pid)
+        else:
+            self.logger.debug("Spawned VPP with PID: %d" % self.vpp_process.pid)
+            return
+        print(single_line_delim)
+        print("You can debug VPP using:")
+        if self.debug_gdbserver:
+            print("sudo gdb " + self.vpp_bin +
+                  " -ex 'target remote localhost:{port}'"
+                  .format(port=self.gdbserver_port))
+            print("Now is the time to attach gdb by running the above "
+                  "command, set up breakpoints etc., then resume VPP from "
+                  "within gdb by issuing the 'continue' command")
+            self.gdbserver_port += 1
+        elif self.debug_gdb:
+            print("sudo gdb " + self.vpp_bin + " -ex 'attach %s'" % self.vpp_process.pid)
+            print("Now is the time to attach gdb by running the above "
+                  "command and set up breakpoints etc., then resume VPP from"
+                  " within gdb by issuing the 'continue' command")
+        print(single_line_delim)
+        input("Press ENTER to continue...")
+    
+    def disconnect(self):
+        if not hasattr(self, "papi"):
+            return
+        self.logger.debug(self.vpp.get_stats())
+        self.logger.debug("Disconnecting class vapi client on %s",
+                          self.__name__)
+        super(VppClient, self).disconnect()
+        self.logger.debug("Deleting class vapi attribute on %s",
+                          self.__name__)
+        del self.papi
+
+    def quit_vpp(self):
+        self.disconnect()
+        if hasattr(self, 'vpp_process'):
+            self.vpp_process.poll()
+            if self.vpp_process.returncode is None:
+                self.wait_for_coredump()
+                self.logger.debug("Sending TERM to vpp")
+                self.vpp_process.terminate()
+                self.logger.debug("Waiting for vpp to die")
+                self.vpp_process.communicate()
+            self.logger.debug("Deleting class vpp attribute on %s",
+                             self.__name__)
+            del self.vpp_process
+
+    def wait_for_coredump(self):
+        corefile = self.tempdir + "/core"
+        if os.path.isfile(corefile):
+            self.logger.error("Waiting for coredump to complete: %s", corefile)
+            curr_size = os.path.getsize(corefile)
+            deadline = time.time() + 60
+            ok = False
+            while time.time() < deadline:
+                self.sleep(1)
+                size = curr_size
+                curr_size = os.path.getsize(corefile)
+                if size == curr_size:
+                    ok = True
+                    break
+            if not ok:
+                self.logger.error("Timed out waiting for coredump to complete:"
+                                 " %s", corefile)
+            else:
+                self.logger.error("Coredump complete: %s, size %d",
+                                 corefile, curr_size)
+
+    def _debug_quit(self):
+        if (self.debug_gdbserver or self.debug_gdb):
+            try:
+                self.vpp_process.poll()
+
+                if self.vpp_process.returncode is None:
+                    print()
+                    print(double_line_delim)
+                    print("VPP or GDB server is still running")
+                    print(single_line_delim)
+                    input("When done debugging, press ENTER to kill the "
+                          "process and finish running the testcase...")
+            except AttributeError:
+                pass
+
+    def quit_vpp_class(self):
+        """
+        Disconnect vpp-api, kill vpp and cleanup shared memory files
+        """
+        self._debug_quit()
+
+        # first signal that we want to stop the pump thread, then wake it up
+        if hasattr(self, 'pump_thread_stop_flag'):
+            self.pump_thread_stop_flag.set()
+        if hasattr(self, 'pump_thread_wakeup_pipe'):
+            os.write(self.pump_thread_wakeup_pipe[1], b'ding dong wake up')
+        if hasattr(self, 'pump_thread'):
+            self.logger.debug("Waiting for pump thread to stop")
+            self.pump_thread.join()
+        if hasattr(self, 'vpp_stderr_reader_thread'):
+            self.logger.debug("Waiting for stderr pump to stop")
+            self.vpp_stderr_reader_thread.join()
+
+        if self.vpp_startup_failed:
+            stdout_log = self.logger.info
+            stderr_log = self.logger.critical
+        else:
+            stdout_log = self.logger.info
+            stderr_log = self.logger.info
+
+        if hasattr(self, 'vpp_stdout_deque'):
+            stdout_log(single_line_delim)
+            stdout_log('VPP output to stdout while running %s:', self.__name__)
+            stdout_log(single_line_delim)
+            vpp_output = "".join(self.vpp_stdout_deque)
+            with open(self.tempdir + '/vpp_stdout.txt', 'w') as f:
+                f.write(vpp_output)
+            stdout_log('\n%s', vpp_output)
+            stdout_log(single_line_delim)
+
+        if hasattr(self, 'vpp_stderr_deque'):
+            stderr_log(single_line_delim)
+            stderr_log('VPP output to stderr while running %s:', self.__name__)
+            stderr_log(single_line_delim)
+            vpp_output = "".join(self.vpp_stderr_deque)
+            with open(self.tempdir + '/vpp_stderr.txt', 'w') as f:
+                f.write(vpp_output)
+            stderr_log('\n%s', vpp_output)
+            stderr_log(single_line_delim)
diff --git a/test/vpp_devices.py b/src/vpp-api/pom/vpp_pom/vpp_devices.py
similarity index 64%
rename from test/vpp_devices.py
rename to src/vpp-api/pom/vpp_pom/vpp_devices.py
index 9e272cafe..d6c5864c7 100644
--- a/test/vpp_devices.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_devices.py
@@ -1,4 +1,4 @@
-from vpp_interface import VppInterface
+from .vpp_interface import VppInterface
 
 
 class VppTAPInterface(VppInterface):
@@ -8,26 +8,26 @@ class VppTAPInterface(VppInterface):
         """TAP id"""
         return self._tap_id
 
-    def __init__(self, test, tap_id=0xffffffff, mac_addr=None):
-        self._test = test
+    def __init__(self, vclient, tap_id=0xffffffff, mac_addr=None):
+        self._vclient = vclient
         self._tap_id = tap_id
         self._mac_addr = mac_addr
 
     def get_vpp_dump(self):
-        dump = self._test.vapi.sw_interface_tap_v2_dump(
+        dump = self._vclient.sw_interface_tap_v2_dump(
             sw_if_index=self.sw_if_index)
         return dump
 
     def add_vpp_config(self):
-        reply = self._test.vapi.tap_create_v2(
+        reply = self._vclient.tap_create_v2(
             id=self._tap_id,
             use_random_mac=bool(self._mac_addr),
             mac_address=self._mac_addr)
         self.set_sw_if_index(reply.sw_if_index)
-        self._test.registry.register(self, self.test.logger)
+        self._vclient.registry.register(self, self.vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.tap_delete_v2(sw_if_index=self.sw_if_index)
+        self._vclient.tap_delete_v2(sw_if_index=self.sw_if_index)
 
     def query_vpp_config(self):
         dump = self.get_vpp_dump()
diff --git a/test/vpp_gre_interface.py b/src/vpp-api/pom/vpp_pom/vpp_gre_interface.py
similarity index 84%
rename from test/vpp_gre_interface.py
rename to src/vpp-api/pom/vpp_pom/vpp_gre_interface.py
index 770292e80..4507936ff 100644
--- a/test/vpp_gre_interface.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_gre_interface.py
@@ -1,5 +1,5 @@
 
-from vpp_interface import VppInterface
+from .vpp_interface import VppInterface
 import socket
 from vpp_papi import VppEnum
 
@@ -9,11 +9,11 @@ class VppGreInterface(VppInterface):
     VPP GRE interface
     """
 
-    def __init__(self, test, src_ip, dst_ip, outer_table_id=0,
+    def __init__(self, vclient, src_ip, dst_ip, outer_table_id=0,
                  type=None, mode=None, flags=0,
                  session=0):
         """ Create VPP GRE interface """
-        super(VppGreInterface, self).__init__(test)
+        super(VppGreInterface, self).__init__(vclient)
         self.t_src = src_ip
         self.t_dst = dst_ip
         self.t_outer_table = outer_table_id
@@ -29,7 +29,7 @@ class VppGreInterface(VppInterface):
                            TUNNEL_API_MODE_P2P)
 
     def add_vpp_config(self):
-        r = self.test.vapi.gre_tunnel_add_del(
+        r = self.vclient.gre_tunnel_add_del(
             is_add=1,
             tunnel={
                 'src': self.t_src,
@@ -42,12 +42,12 @@ class VppGreInterface(VppInterface):
                 'session_id': self.t_session})
         self.set_sw_if_index(r.sw_if_index)
         self.generate_remote_hosts()
-        self.test.registry.register(self, self.test.logger)
+        self.vclient.registry.register(self, self.vclient.logger)
         return self
 
     def remove_vpp_config(self):
         self.unconfig()
-        self.test.vapi.gre_tunnel_add_del(
+        self.vclient.gre_tunnel_add_del(
             is_add=0,
             tunnel={
                 'src': self.t_src,
@@ -63,7 +63,7 @@ class VppGreInterface(VppInterface):
         return "gre-%d" % self.sw_if_index
 
     def query_vpp_config(self):
-        return (self.test.vapi.gre_tunnel_dump(
+        return (self.vclient.gre_tunnel_dump(
             sw_if_index=self._sw_if_index))
 
     @property
diff --git a/test/vpp_interface.py b/src/vpp-api/pom/vpp_pom/vpp_interface.py
similarity index 82%
rename from test/vpp_interface.py
rename to src/vpp-api/pom/vpp_pom/vpp_interface.py
index 2d991ede0..3e698afec 100644
--- a/test/vpp_interface.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_interface.py
@@ -5,7 +5,7 @@ import abc
 import six
 from six import moves
 
-from util import Host, mk_ll_addr
+from .util import Host, mk_ll_addr
 from vpp_papi import mac_ntop, VppEnum
 from ipaddress import IPv4Network, IPv6Network
 
@@ -22,6 +22,8 @@ class VppInterface(object):
     @property
     def sw_if_index(self):
         """Interface index assigned by VPP."""
+        if not hasattr(self, "_sw_if_index"):
+            return None
         return self._sw_if_index
 
     @property
@@ -120,9 +122,9 @@ class VppInterface(object):
         return self._dump
 
     @property
-    def test(self):
-        """Test case creating this interface."""
-        return self._test
+    def vclient(self):
+        """vclient case creating this interface."""
+        return self._vclient
 
     @property
     def remote_hosts(self):
@@ -186,8 +188,8 @@ class VppInterface(object):
             self._hosts_by_ip6[ip6] = host
 
     @abc.abstractmethod
-    def __init__(self, test):
-        self._test = test
+    def __init__(self, vclient):
+        self._vclient = vclient
 
         self._remote_hosts = []
         self._hosts_by_mac = {}
@@ -197,7 +199,7 @@ class VppInterface(object):
     def set_mac(self, mac):
         self._local_mac = str(mac)
         self._local_ip6_ll = mk_ll_addr(self._local_mac)
-        self.test.vapi.sw_interface_set_mac_address(
+        self.vclient.sw_interface_set_mac_address(
             self.sw_if_index, mac.packed)
         return self
 
@@ -226,7 +228,7 @@ class VppInterface(object):
         self._remote_addr = {socket.AF_INET: self.remote_ip4,
                              socket.AF_INET6: self.remote_ip6}
 
-        r = self.test.vapi.sw_interface_dump(sw_if_index=self.sw_if_index)
+        r = self.vclient.sw_interface_dump(sw_if_index=self.sw_if_index)
         for intf in r:
             if intf.sw_if_index == self.sw_if_index:
                 self._name = intf.interface_name
@@ -243,7 +245,7 @@ class VppInterface(object):
 
     def config_ip4(self):
         """Configure IPv4 address on the VPP interface."""
-        self.test.vapi.sw_interface_add_del_address(
+        self.vclient.sw_interface_add_del_address(
             sw_if_index=self.sw_if_index, prefix=self.local_ip4_prefix)
         self.has_ip4_config = True
         return self
@@ -252,7 +254,7 @@ class VppInterface(object):
         """Remove IPv4 address on the VPP interface."""
         try:
             if self.has_ip4_config:
-                self.test.vapi.sw_interface_add_del_address(
+                self.vclient.sw_interface_add_del_address(
                     sw_if_index=self.sw_if_index,
                     prefix=self.local_ip4_prefix, is_add=0)
         except AttributeError:
@@ -266,14 +268,14 @@ class VppInterface(object):
         :param vrf_id: The FIB table / VRF ID. (Default value = 0)
         """
         for host in self._remote_hosts:
-            self.test.vapi.ip_neighbor_add_del(self.sw_if_index,
+            self.vclient.ip_neighbor_add_del(self.sw_if_index,
                                                host.mac,
                                                host.ip4)
         return self
 
     def config_ip6(self):
         """Configure IPv6 address on the VPP interface."""
-        self.test.vapi.sw_interface_add_del_address(
+        self.vclient.sw_interface_add_del_address(
             sw_if_index=self.sw_if_index, prefix=self.local_ip6_prefix)
         self.has_ip6_config = True
         return self
@@ -282,7 +284,7 @@ class VppInterface(object):
         """Remove IPv6 address on the VPP interface."""
         try:
             if self.has_ip6_config:
-                self.test.vapi.sw_interface_add_del_address(
+                self.vclient.sw_interface_add_del_address(
                     sw_if_index=self.sw_if_index,
                     prefix=self.local_ip6_prefix, is_add=0)
         except AttributeError:
@@ -296,7 +298,7 @@ class VppInterface(object):
         :param vrf_id: The FIB table / VRF ID. (Default value = 0)
         """
         for host in self._remote_hosts:
-            self.test.vapi.ip_neighbor_add_del(self.sw_if_index,
+            self.vclient.ip_neighbor_add_del(self.sw_if_index,
                                                host.mac,
                                                host.ip6)
 
@@ -312,7 +314,7 @@ class VppInterface(object):
         .. note:: Must be called before configuring IP4 addresses.
         """
         self.ip4_table_id = table_id
-        self.test.vapi.sw_interface_set_table(
+        self.vclient.sw_interface_set_table(
             self.sw_if_index, 0, self.ip4_table_id)
         return self
 
@@ -322,20 +324,20 @@ class VppInterface(object):
         .. note:: Must be called before configuring IP6 addresses.
         """
         self.ip6_table_id = table_id
-        self.test.vapi.sw_interface_set_table(
+        self.vclient.sw_interface_set_table(
             self.sw_if_index, 1, self.ip6_table_id)
         return self
 
     def disable_ipv6_ra(self):
         """Configure IPv6 RA suppress on the VPP interface."""
-        self.test.vapi.sw_interface_ip6nd_ra_config(
+        self.vclient.sw_interface_ip6nd_ra_config(
             sw_if_index=self.sw_if_index,
             suppress=1)
         return self
 
     def ip6_ra_config(self, no=0, suppress=0, send_unicast=0):
         """Configure IPv6 RA suppress on the VPP interface."""
-        self.test.vapi.sw_interface_ip6nd_ra_config(
+        self.vclient.sw_interface_ip6nd_ra_config(
             sw_if_index=self.sw_if_index,
             is_no=no,
             suppress=suppress,
@@ -349,7 +351,7 @@ class VppInterface(object):
         prefix can be a string in the format of '<address>/<length_in_bits>'
         or ipaddress.ipnetwork object (if strict.)"""
 
-        self.test.vapi.sw_interface_ip6nd_ra_prefix(
+        self.vclient.sw_interface_ip6nd_ra_prefix(
             sw_if_index=self.sw_if_index,
             prefix=prefix,
             use_default=use_default,
@@ -359,34 +361,34 @@ class VppInterface(object):
 
     def admin_up(self):
         """Put interface ADMIN-UP."""
-        self.test.vapi.sw_interface_set_flags(
+        self.vclient.sw_interface_set_flags(
             self.sw_if_index,
             flags=VppEnum.vl_api_if_status_flags_t.IF_STATUS_API_FLAG_ADMIN_UP)
         return self
 
     def admin_down(self):
         """Put interface ADMIN-down."""
-        self.test.vapi.sw_interface_set_flags(self.sw_if_index,
+        self.vclient.sw_interface_set_flags(self.sw_if_index,
                                               flags=0)
         return self
 
     def link_up(self):
         """Put interface link-state-UP."""
-        self.test.vapi.cli("test interface link-state %s up" % self.name)
+        self.vclient.cli("test interface link-state %s up" % self.name)
 
     def link_down(self):
         """Put interface link-state-down."""
-        self.test.vapi.cli("test interface link-state %s down" % self.name)
+        self.vclient.cli("test interface link-state %s down" % self.name)
 
     def ip6_enable(self):
         """IPv6 Enable interface"""
-        self.test.vapi.sw_interface_ip6_enable_disable(self.sw_if_index,
+        self.vclient.sw_interface_ip6_enable_disable(self.sw_if_index,
                                                        enable=1)
         return self
 
     def ip6_disable(self):
         """Put interface ADMIN-DOWN."""
-        self.test.vapi.sw_interface_ip6_enable_disable(self.sw_if_index,
+        self.vclient.sw_interface_ip6_enable_disable(self.sw_if_index,
                                                        enable=0)
         return self
 
@@ -406,12 +408,12 @@ class VppInterface(object):
 
     def enable_mpls(self):
         """Enable MPLS on the VPP interface."""
-        self.test.vapi.sw_interface_set_mpls_enable(self.sw_if_index)
+        self.vclient.sw_interface_set_mpls_enable(self.sw_if_index)
         return self
 
     def disable_mpls(self):
         """Enable MPLS on the VPP interface."""
-        self.test.vapi.sw_interface_set_mpls_enable(self.sw_if_index, 0)
+        self.vclient.sw_interface_set_mpls_enable(self.sw_if_index, 0)
         return self
 
     def is_ip4_entry_in_fib_dump(self, dump):
@@ -425,25 +427,25 @@ class VppInterface(object):
 
     def set_unnumbered(self, ip_sw_if_index):
         """ Set the interface to unnumbered via ip_sw_if_index """
-        self.test.vapi.sw_interface_set_unnumbered(ip_sw_if_index,
+        self.vclient.sw_interface_set_unnumbered(ip_sw_if_index,
                                                    self.sw_if_index)
         return self
 
     def unset_unnumbered(self, ip_sw_if_index):
         """ Unset the interface to unnumbered via ip_sw_if_index """
-        self.test.vapi.sw_interface_set_unnumbered(ip_sw_if_index,
+        self.vclient.sw_interface_set_unnumbered(ip_sw_if_index,
                                                    self.sw_if_index, is_add=0)
         return self
 
     def set_proxy_arp(self, enable=1):
         """ Set the interface to enable/disable Proxy ARP """
-        self.test.vapi.proxy_arp_intfc_enable_disable(
+        self.vclient.proxy_arp_intfc_enable_disable(
             self.sw_if_index,
             enable)
         return self
 
     def query_vpp_config(self):
-        dump = self.test.vapi.sw_interface_dump(sw_if_index=self.sw_if_index)
+        dump = self.vclient.sw_interface_dump(sw_if_index=self.sw_if_index)
         return self.is_interface_config_in_dump(dump)
 
     def get_interface_config_from_dump(self, dump):
@@ -460,44 +462,40 @@ class VppInterface(object):
     def assert_interface_state(self, admin_up_down, link_up_down,
                                expect_event=False):
         if expect_event:
-            event = self.test.vapi.wait_for_event(timeout=1,
+            event = self.vclient.wait_for_event(timeout=1,
                                                   name='sw_interface_event')
-            self.test.assert_equal(event.sw_if_index, self.sw_if_index,
-                                   "sw_if_index")
-            self.test.assert_equal((event.flags & 1), admin_up_down,
-                                   "admin state")
-            self.test.assert_equal((event.flags & 2), link_up_down,
-                                   "link state")
-        dump = self.test.vapi.sw_interface_dump()
+            if event.sw_if_index != self.sw_if_index:
+                raise AssertionError("invalid interface %s != %s" % (event.sw_if_index, self.sw_if_index))
+            if (event.flags & 1) != admin_up_down or (event.flags & 2) != link_up_down:
+                raise AssertionError("invalid interface state: admin (%s) link (%s)" % ((event.flags & 1), (event.flags & 2)))
+        dump = self.vclient.sw_interface_dump()
         if_state = self.get_interface_config_from_dump(dump)
-        self.test.assert_equal((if_state.flags & 1), admin_up_down,
-                               "admin state")
-        self.test.assert_equal((if_state.flags & 2), link_up_down,
-                               "link state")
+        if (if_state.flags & 1) != admin_up_down or (if_state.flags & 2) != link_up_down:
+                raise AssertionError("invalid interface state: admin (%s) link (%s)" % ((if_state.flags & 1), (if_state.flags & 2)))
 
     def __str__(self):
         return self.name
 
     def get_rx_stats(self):
-        c = self.test.statistics.get_counter("^/if/rx$")
+        c = self.vclient.statistics.get_counter("^/if/rx$")
         return c[0][self.sw_if_index]
 
     def get_tx_stats(self):
-        c = self.test.statistics.get_counter("^/if/tx$")
+        c = self.vclient.statistics.get_counter("^/if/tx$")
         return c[0][self.sw_if_index]
 
     def set_l3_mtu(self, mtu):
-        self.test.vapi.sw_interface_set_mtu(self.sw_if_index, [mtu, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.sw_if_index, [mtu, 0, 0, 0])
         return self
 
     def set_ip4_mtu(self, mtu):
-        self.test.vapi.sw_interface_set_mtu(self.sw_if_index, [0, mtu, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.sw_if_index, [0, mtu, 0, 0])
         return self
 
     def set_ip6_mtu(self, mtu):
-        self.test.vapi.sw_interface_set_mtu(self.sw_if_index, [0, 0, mtu, 0])
+        self.vclient.sw_interface_set_mtu(self.sw_if_index, [0, 0, mtu, 0])
         return self
 
     def set_mpls_mtu(self, mtu):
-        self.test.vapi.sw_interface_set_mtu(self.sw_if_index, [0, 0, 0, mtu])
+        self.vclient.sw_interface_set_mtu(self.sw_if_index, [0, 0, 0, mtu])
         return self
diff --git a/test/vpp_ip.py b/src/vpp-api/pom/vpp_pom/vpp_ip.py
similarity index 100%
rename from test/vpp_ip.py
rename to src/vpp-api/pom/vpp_pom/vpp_ip.py
diff --git a/test/vpp_ip_route.py b/src/vpp-api/pom/vpp_pom/vpp_ip_route.py
similarity index 82%
rename from test/vpp_ip_route.py
rename to src/vpp-api/pom/vpp_pom/vpp_ip_route.py
index c64ad5fb9..853dd964a 100644
--- a/test/vpp_ip_route.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_ip_route.py
@@ -4,9 +4,9 @@
   object abstractions for representing IP routes in VPP
 """
 
-from vpp_object import VppObject
+from .vpp_object import VppObject
 from socket import inet_pton, inet_ntop, AF_INET, AF_INET6
-from vpp_ip import DpoProto, INVALID_INDEX, VppIpAddressUnion, \
+from .vpp_ip import DpoProto, INVALID_INDEX, VppIpAddressUnion, \
     VppIpMPrefix
 from ipaddress import ip_network, ip_address, IPv4Network, IPv6Network
 
@@ -76,13 +76,13 @@ def address_proto(ip_addr):
         return FibPathProto.FIB_PATH_NH_PROTO_IP6
 
 
-def find_route(test, addr, len, table_id=0, sw_if_index=None):
+def find_route(vclient, addr, len, table_id=0, sw_if_index=None):
     prefix = mk_network(addr, len)
 
     if 4 == prefix.version:
-        routes = test.vapi.ip_route_dump(table_id, False)
+        routes = vclient.ip_route_dump(table_id, False)
     else:
-        routes = test.vapi.ip_route_dump(table_id, True)
+        routes = vclient.ip_route_dump(table_id, True)
 
     for e in routes:
         if table_id == e.route.table_id \
@@ -117,16 +117,16 @@ def find_mroute_in_dump(dump, route, table):
     return False
 
 
-def find_mroute(test, grp_addr, src_addr, grp_addr_len,
+def find_mroute(vclient, grp_addr, src_addr, grp_addr_len,
                 table_id=0):
     ip_mprefix = VppIpMPrefix(text_type(src_addr),
                               text_type(grp_addr),
                               grp_addr_len)
 
     if 4 == ip_mprefix.version:
-        routes = test.vapi.ip_mroute_dump(table_id, False)
+        routes = vclient.ip_mroute_dump(table_id, False)
     else:
-        routes = test.vapi.ip_mroute_dump(table_id, True)
+        routes = vclient.ip_mroute_dump(table_id, True)
 
     for e in routes:
         if table_id == e.route.table_id and ip_mprefix == e.route.prefix:
@@ -134,8 +134,8 @@ def find_mroute(test, grp_addr, src_addr, grp_addr_len,
     return False
 
 
-def find_mpls_route(test, table_id, label, eos_bit, paths=None):
-    dump = test.vapi.mpls_route_dump(table_id)
+def find_mpls_route(vclient, table_id, label, eos_bit, paths=None):
+    dump = vclient.mpls_route_dump(table_id)
     for e in dump:
         if label == e.mr_route.mr_label \
            and eos_bit == e.mr_route.mr_eos \
@@ -152,10 +152,10 @@ def find_mpls_route(test, table_id, label, eos_bit, paths=None):
     return False
 
 
-def fib_interface_ip_prefix(test, addr, len, sw_if_index):
+def fib_interface_ip_prefix(vclient, addr, len, sw_if_index):
     # can't use python net here since we need the host bits in the prefix
     prefix = "%s/%d" % (addr, len)
-    addrs = test.vapi.ip_address_dump(
+    addrs = vclient.ip_address_dump(
         sw_if_index,
         is_ipv6=(6 == ip_address(addr).version))
 
@@ -169,54 +169,54 @@ def fib_interface_ip_prefix(test, addr, len, sw_if_index):
 class VppIpTable(VppObject):
 
     def __init__(self,
-                 test,
+                 vclient,
                  table_id,
                  is_ip6=0,
                  register=True):
-        self._test = test
+        self._vclient = vclient
         self.table_id = table_id
         self.is_ip6 = is_ip6
         self.register = register
 
     def add_vpp_config(self):
-        self._test.vapi.ip_table_add_del(is_add=1,
+        self._vclient.ip_table_add_del(is_add=1,
                                          table={'is_ip6': self.is_ip6,
                                                 'table_id': self.table_id})
         if self.register:
-            self._test.registry.register(self, self._test.logger)
+            self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self._test.vapi.ip_table_add_del(is_add=0,
+        self._vclient.ip_table_add_del(is_add=0,
                                          table={'is_ip6': self.is_ip6,
                                                 'table_id': self.table_id})
 
     def replace_begin(self):
-        self._test.vapi.ip_table_replace_begin(
+        self._vclient.ip_table_replace_begin(
             table={'is_ip6': self.is_ip6,
                    'table_id': self.table_id})
 
     def replace_end(self):
-        self._test.vapi.ip_table_replace_end(
+        self._vclient.ip_table_replace_end(
             table={'is_ip6': self.is_ip6,
                    'table_id': self.table_id})
 
     def flush(self):
-        self._test.vapi.ip_table_flush(table={'is_ip6': self.is_ip6,
+        self._vclient.ip_table_flush(table={'is_ip6': self.is_ip6,
                                               'table_id': self.table_id})
 
     def dump(self):
-        return self._test.vapi.ip_route_dump(self.table_id, self.is_ip6)
+        return self._vclient.ip_route_dump(self.table_id, self.is_ip6)
 
     def mdump(self):
-        return self._test.vapi.ip_mroute_dump(self.table_id, self.is_ip6)
+        return self._vclient.ip_mroute_dump(self.table_id, self.is_ip6)
 
     def query_vpp_config(self):
         if self.table_id == 0:
             # the default table always exists
             return False
         # find the default route
-        return find_route(self._test,
+        return find_route(self._vclient,
                           "::" if self.is_ip6 else "0.0.0.0",
                           0,
                           self.table_id)
@@ -229,8 +229,8 @@ class VppIpTable(VppObject):
 
 class VppIpInterfaceAddress(VppObject):
 
-    def __init__(self, test, intf, addr, len, bind=None):
-        self._test = test
+    def __init__(self, vclient, intf, addr, len, bind=None):
+        self._vclient = vclient
         self.intf = intf
         self.addr = addr
         self.len = len
@@ -241,14 +241,14 @@ class VppIpInterfaceAddress(VppObject):
             self.table_id = bind.table.table_id
 
     def add_vpp_config(self):
-        self._test.vapi.sw_interface_add_del_address(
+        self._vclient.sw_interface_add_del_address(
             sw_if_index=self.intf.sw_if_index, prefix=self.prefix,
             is_add=1)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self._test.vapi.sw_interface_add_del_address(
+        self._vclient.sw_interface_add_del_address(
             sw_if_index=self.intf.sw_if_index, prefix=self.prefix,
             is_add=0)
 
@@ -258,26 +258,26 @@ class VppIpInterfaceAddress(VppObject):
         v = ip_address(self.addr).version
 
         if ((v == 4 and self.len < 31) or (v == 6 and self.len < 127)):
-            return (fib_interface_ip_prefix(self._test,
+            return (fib_interface_ip_prefix(self._vclient,
                                             self.addr,
                                             self.len,
                                             self.intf.sw_if_index) &
-                    find_route(self._test,
+                    find_route(self._vclient,
                                self.addr,
                                self.len,
                                table_id=self.table_id,
                                sw_if_index=self.intf.sw_if_index) &
-                    find_route(self._test,
+                    find_route(self._vclient,
                                self.addr,
                                self.host_len,
                                table_id=self.table_id,
                                sw_if_index=self.intf.sw_if_index))
         else:
-            return (fib_interface_ip_prefix(self._test,
+            return (fib_interface_ip_prefix(self._vclient,
                                             self.addr,
                                             self.len,
                                             self.intf.sw_if_index) &
-                    find_route(self._test,
+                    find_route(self._vclient,
                                self.addr,
                                self.host_len,
                                table_id=self.table_id,
@@ -291,15 +291,15 @@ class VppIpInterfaceAddress(VppObject):
 
 class VppIp6LinkLocalAddress(VppObject):
 
-    def __init__(self, test, intf, addr):
-        self._test = test
+    def __init__(self, vclient, intf, addr):
+        self._vclient = vclient
         self.intf = intf
         self.addr = addr
 
     def add_vpp_config(self):
-        self._test.vapi.sw_interface_ip6_set_link_local_address(
+        self._vclient.sw_interface_ip6_set_link_local_address(
             sw_if_index=self.intf.sw_if_index, ip=self.addr)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
@@ -316,8 +316,8 @@ class VppIp6LinkLocalAddress(VppObject):
 
 class VppIpInterfaceBind(VppObject):
 
-    def __init__(self, test, intf, table):
-        self._test = test
+    def __init__(self, vclient, intf, table):
+        self._vclient = vclient
         self.intf = intf
         self.table = table
 
@@ -326,7 +326,7 @@ class VppIpInterfaceBind(VppObject):
             self.intf.set_table_ip6(self.table.table_id)
         else:
             self.intf.set_table_ip4(self.table.table_id)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
@@ -340,7 +340,7 @@ class VppIpInterfaceBind(VppObject):
     def query_vpp_config(self):
         if 0 == self.table.table_id:
             return False
-        return self._test.vapi.sw_interface_get_table(
+        return self._vclient.sw_interface_get_table(
             self.intf.sw_if_index,
             self.table.is_ip6).vrf_id == self.table.table_id
 
@@ -513,9 +513,9 @@ class VppIpRoute(VppObject):
     IP Route
     """
 
-    def __init__(self, test, dest_addr,
+    def __init__(self, vclient, dest_addr,
                  dest_addr_len, paths, table_id=0, register=True):
-        self._test = test
+        self._vclient = vclient
         self.paths = paths
         self.table_id = table_id
         self.prefix = mk_network(dest_addr, dest_addr_len)
@@ -540,7 +540,7 @@ class VppIpRoute(VppObject):
             self.encoded_paths.append(path.encode())
         self.modified = True
 
-        self._test.vapi.ip_route_add_del(route={'table_id': self.table_id,
+        self._vclient.ip_route_add_del(route={'table_id': self.table_id,
                                                 'prefix': self.prefix,
                                                 'n_paths': len(
                                                     self.encoded_paths),
@@ -550,7 +550,7 @@ class VppIpRoute(VppObject):
                                          is_multipath=0)
 
     def add_vpp_config(self):
-        r = self._test.vapi.ip_route_add_del(
+        r = self._vclient.ip_route_add_del(
             route={'table_id': self.table_id,
                    'prefix': self.prefix,
                    'n_paths': len(self.encoded_paths),
@@ -560,16 +560,16 @@ class VppIpRoute(VppObject):
             is_multipath=0)
         self.stats_index = r.stats_index
         if self.register:
-            self._test.registry.register(self, self._test.logger)
+            self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
         # there's no need to issue different deletes for modified routes
-        # we do this only to test the two different ways to delete routes
+        # we do this only to vclient the two different ways to delete routes
         # eiter by passing all the paths to remove and mutlipath=1 or
         # passing no paths and multipath=0
         if self.modified:
-            self._test.vapi.ip_route_add_del(
+            self._vclient.ip_route_add_del(
                 route={'table_id': self.table_id,
                        'prefix': self.prefix,
                        'n_paths': len(
@@ -578,7 +578,7 @@ class VppIpRoute(VppObject):
                 is_add=0,
                 is_multipath=1)
         else:
-            self._test.vapi.ip_route_add_del(
+            self._vclient.ip_route_add_del(
                 route={'table_id': self.table_id,
                        'prefix': self.prefix,
                        'n_paths': 0},
@@ -586,7 +586,7 @@ class VppIpRoute(VppObject):
                 is_multipath=0)
 
     def query_vpp_config(self):
-        return find_route(self._test,
+        return find_route(self._vclient,
                           self.prefix.network_address,
                           self.prefix.prefixlen,
                           self.table_id)
@@ -598,11 +598,11 @@ class VppIpRoute(VppObject):
                 self.prefix))
 
     def get_stats_to(self):
-        c = self._test.statistics.get_counter("/net/route/to")
+        c = self._vclient.statistics.get_counter("/net/route/to")
         return c[0][self.stats_index]
 
     def get_stats_via(self):
-        c = self._test.statistics.get_counter("/net/route/via")
+        c = self._vclient.statistics.get_counter("/net/route/via")
         return c[0][self.stats_index]
 
 
@@ -611,10 +611,10 @@ class VppIpMRoute(VppObject):
     IP Multicast Route
     """
 
-    def __init__(self, test, src_addr, grp_addr,
+    def __init__(self, vclient, src_addr, grp_addr,
                  grp_addr_len, e_flags, paths, table_id=0,
                  rpf_id=0):
-        self._test = test
+        self._vclient = vclient
         self.paths = paths
         self.table_id = table_id
         self.e_flags = e_flags
@@ -636,27 +636,27 @@ class VppIpMRoute(VppObject):
                 }
 
     def add_vpp_config(self):
-        r = self._test.vapi.ip_mroute_add_del(route=self.encode(),
+        r = self._vclient.ip_mroute_add_del(route=self.encode(),
                                               is_multipath=1,
                                               is_add=1)
         self.stats_index = r.stats_index
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self._test.vapi.ip_mroute_add_del(route=self.encode(),
+        self._vclient.ip_mroute_add_del(route=self.encode(),
                                           is_multipath=1,
                                           is_add=0)
 
     def update_entry_flags(self, flags):
         self.e_flags = flags
-        self._test.vapi.ip_mroute_add_del(route=self.encode(paths=[]),
+        self._vclient.ip_mroute_add_del(route=self.encode(paths=[]),
                                           is_multipath=1,
                                           is_add=1)
 
     def update_rpf_id(self, rpf_id):
         self.rpf_id = rpf_id
-        self._test.vapi.ip_mroute_add_del(route=self.encode(paths=[]),
+        self._vclient.ip_mroute_add_del(route=self.encode(paths=[]),
                                           is_multipath=1,
                                           is_add=1)
 
@@ -667,14 +667,14 @@ class VppIpMRoute(VppObject):
                 self.encoded_paths[p] = self.paths[p].encode()
                 break
 
-        self._test.vapi.ip_mroute_add_del(
+        self._vclient.ip_mroute_add_del(
             route=self.encode(
                 paths=[self.encoded_paths[p]]),
             is_add=1,
             is_multipath=0)
 
     def query_vpp_config(self):
-        return find_mroute(self._test,
+        return find_mroute(self._vclient,
                            self.prefix.gaddr,
                            self.prefix.saddr,
                            self.prefix.length,
@@ -687,21 +687,24 @@ class VppIpMRoute(VppObject):
                                    self.prefix.length))
 
     def get_stats(self):
-        c = self._test.statistics.get_counter("/net/mroute")
+        c = self._vclient.statistics.get_counter("/net/mroute")
         return c[0][self.stats_index]
 
 
 class VppMFibSignal(object):
-    def __init__(self, test, route, interface, packet):
+    def __init__(self, vclient, route, interface, packet):
         self.route = route
         self.interface = interface
         self.packet = packet
-        self.test = test
+        self.vclient = vclient
 
     def compare(self, signal):
-        self.test.assertEqual(self.interface, signal.sw_if_index)
-        self.test.assertEqual(self.route.table_id, signal.table_id)
-        self.test.assertEqual(self.route.prefix, signal.prefix)
+        if self.interface != signal.sw_if_index:
+            raise AssertionError("interface (%s) != signal interface (%s)" % (self.interface, signal.sw_if_index))
+        if self.route.table_id != signal.table_id:
+            raise AssertionError("table id (%s) != signal table id (%s)" % (self.route.table_id, signal.table_id))
+        if self.route.prefix != signal.prefix:
+            raise AssertionError("prefix (%s) != signal prefix (%s)" % (self.route.prefix, signal.prefix))
 
 
 class VppMplsIpBind(VppObject):
@@ -709,9 +712,9 @@ class VppMplsIpBind(VppObject):
     MPLS to IP Binding
     """
 
-    def __init__(self, test, local_label, dest_addr, dest_addr_len,
+    def __init__(self, vclient, local_label, dest_addr, dest_addr_len,
                  table_id=0, ip_table_id=0, is_ip6=0):
-        self._test = test
+        self._vclient = vclient
         self.dest_addr_len = dest_addr_len
         self.dest_addr = dest_addr
         self.ip_addr = ip_address(text_type(dest_addr))
@@ -721,21 +724,21 @@ class VppMplsIpBind(VppObject):
         self.prefix = mk_network(dest_addr, dest_addr_len)
 
     def add_vpp_config(self):
-        self._test.vapi.mpls_ip_bind_unbind(self.local_label,
+        self._vclient.mpls_ip_bind_unbind(self.local_label,
                                             self.prefix,
                                             table_id=self.table_id,
                                             ip_table_id=self.ip_table_id)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.mpls_ip_bind_unbind(self.local_label,
+        self._vclient.mpls_ip_bind_unbind(self.local_label,
                                             self.prefix,
                                             table_id=self.table_id,
                                             ip_table_id=self.ip_table_id,
                                             is_bind=0)
 
     def query_vpp_config(self):
-        dump = self._test.vapi.mpls_route_dump(self.table_id)
+        dump = self._vclient.mpls_route_dump(self.table_id)
         for e in dump:
             if self.local_label == e.mr_route.mr_label \
                and self.table_id == e.mr_route.mr_table_id:
@@ -754,24 +757,24 @@ class VppMplsIpBind(VppObject):
 class VppMplsTable(VppObject):
 
     def __init__(self,
-                 test,
+                 vclient,
                  table_id):
-        self._test = test
+        self._vclient = vclient
         self.table_id = table_id
 
     def add_vpp_config(self):
-        self._test.vapi.mpls_table_add_del(
+        self._vclient.mpls_table_add_del(
             self.table_id,
             is_add=1)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.mpls_table_add_del(
+        self._vclient.mpls_table_add_del(
             self.table_id,
             is_add=0)
 
     def query_vpp_config(self):
-        dump = self._test.vapi.mpls_table_dump()
+        dump = self._vclient.mpls_table_dump()
         for d in dump:
             if d.mt_table.mt_table_id == self.table_id:
                 return True
@@ -786,10 +789,10 @@ class VppMplsRoute(VppObject):
     MPLS Route/LSP
     """
 
-    def __init__(self, test, local_label, eos_bit, paths, table_id=0,
+    def __init__(self, vclient, local_label, eos_bit, paths, table_id=0,
                  is_multicast=0,
                  eos_proto=FibPathProto.FIB_PATH_NH_PROTO_IP4):
-        self._test = test
+        self._vclient = vclient
         self.paths = paths
         self.local_label = local_label
         self.eos_bit = eos_bit
@@ -802,21 +805,21 @@ class VppMplsRoute(VppObject):
         for path in self.paths:
             paths.append(path.encode())
 
-        r = self._test.vapi.mpls_route_add_del(self.table_id,
+        r = self._vclient.mpls_route_add_del(self.table_id,
                                                self.local_label,
                                                self.eos_bit,
                                                self.eos_proto,
                                                self.is_multicast,
                                                paths, 1, 0)
         self.stats_index = r.stats_index
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
         paths = []
         for path in self.paths:
             paths.append(path.encode())
 
-        self._test.vapi.mpls_route_add_del(self.table_id,
+        self._vclient.mpls_route_add_del(self.table_id,
                                            self.local_label,
                                            self.eos_bit,
                                            self.eos_proto,
@@ -824,7 +827,7 @@ class VppMplsRoute(VppObject):
                                            paths, 0, 0)
 
     def query_vpp_config(self):
-        return find_mpls_route(self._test, self.table_id,
+        return find_mpls_route(self._vclient, self.table_id,
                                self.local_label, self.eos_bit)
 
     def object_id(self):
@@ -834,9 +837,9 @@ class VppMplsRoute(VppObject):
                    20 + self.eos_bit))
 
     def get_stats_to(self):
-        c = self._test.statistics.get_counter("/net/route/to")
+        c = self._vclient.statistics.get_counter("/net/route/to")
         return c[0][self.stats_index]
 
     def get_stats_via(self):
-        c = self._test.statistics.get_counter("/net/route/via")
+        c = self._vclient.statistics.get_counter("/net/route/via")
         return c[0][self.stats_index]
diff --git a/test/vpp_ipip_tun_interface.py b/src/vpp-api/pom/vpp_pom/vpp_ipip_tun_interface.py
similarity index 76%
rename from test/vpp_ipip_tun_interface.py
rename to src/vpp-api/pom/vpp_pom/vpp_ipip_tun_interface.py
index 67cc1b5f1..971e72a1b 100644
--- a/test/vpp_ipip_tun_interface.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_ipip_tun_interface.py
@@ -1,4 +1,4 @@
-from vpp_tunnel_interface import VppTunnelInterface
+from .vpp_tunnel_interface import VppTunnelInterface
 from ipaddress import ip_address
 from vpp_papi import VppEnum
 
@@ -8,10 +8,10 @@ class VppIpIpTunInterface(VppTunnelInterface):
     VPP IP-IP Tunnel interface
     """
 
-    def __init__(self, test, parent_if, src, dst,
+    def __init__(self, vclient, parent_if, src, dst,
                  table_id=0, dscp=0x0,
                  flags=0, mode=None):
-        super(VppIpIpTunInterface, self).__init__(test, parent_if)
+        super(VppIpIpTunInterface, self).__init__(vclient, parent_if)
         self.src = src
         self.dst = dst
         self.table_id = table_id
@@ -23,7 +23,7 @@ class VppIpIpTunInterface(VppTunnelInterface):
                          TUNNEL_API_MODE_P2P)
 
     def add_vpp_config(self):
-        r = self.test.vapi.ipip_add_tunnel(
+        r = self.vclient.ipip_add_tunnel(
             tunnel={
                 'src': self.src,
                 'dst': self.dst,
@@ -34,14 +34,14 @@ class VppIpIpTunInterface(VppTunnelInterface):
                 'mode': self.mode,
             })
         self.set_sw_if_index(r.sw_if_index)
-        self.test.registry.register(self, self.test.logger)
+        self.vclient.registry.register(self, self.vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self.test.vapi.ipip_del_tunnel(sw_if_index=self._sw_if_index)
+        self.vclient.ipip_del_tunnel(sw_if_index=self._sw_if_index)
 
     def query_vpp_config(self):
-        ts = self.test.vapi.ipip_tunnel_dump(sw_if_index=0xffffffff)
+        ts = self.vclient.ipip_tunnel_dump(sw_if_index=0xffffffff)
         for t in ts:
             if t.tunnel.sw_if_index == self._sw_if_index:
                 return True
diff --git a/test/vpp_ipsec.py b/src/vpp-api/pom/vpp_pom/vpp_ipsec.py
similarity index 84%
rename from test/vpp_ipsec.py
rename to src/vpp-api/pom/vpp_pom/vpp_ipsec.py
index d7ed8564f..7e7eb0923 100644
--- a/test/vpp_ipsec.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_ipsec.py
@@ -1,7 +1,7 @@
-from vpp_object import VppObject
+from .vpp_object import VppObject
 from ipaddress import ip_address
 from vpp_papi import VppEnum
-from vpp_interface import VppInterface
+from .vpp_interface import VppInterface
 
 try:
     text_type = unicode
@@ -18,22 +18,22 @@ class VppIpsecSpd(VppObject):
     VPP SPD DB
     """
 
-    def __init__(self, test, id):
-        self.test = test
+    def __init__(self, vclient, id):
+        self.vclient = vclient
         self.id = id
 
     def add_vpp_config(self):
-        self.test.vapi.ipsec_spd_add_del(self.id)
-        self.test.registry.register(self, self.test.logger)
+        self.vclient.ipsec_spd_add_del(self.id)
+        self.vclient.registry.register(self, self.vclient.logger)
 
     def remove_vpp_config(self):
-        self.test.vapi.ipsec_spd_add_del(self.id, is_add=0)
+        self.vclient.ipsec_spd_add_del(self.id, is_add=0)
 
     def object_id(self):
         return "ipsec-spd-%d" % self.id
 
     def query_vpp_config(self):
-        spds = self.test.vapi.ipsec_spds_dump()
+        spds = self.vclient.ipsec_spds_dump()
         for spd in spds:
             if spd.spd_id == self.id:
                 return True
@@ -46,18 +46,18 @@ class VppIpsecSpdItfBinding(VppObject):
     (i.e. this SPD is used on this interface)
     """
 
-    def __init__(self, test, spd, itf):
-        self.test = test
+    def __init__(self, vclient, spd, itf):
+        self.vclient = vclient
         self.spd = spd
         self.itf = itf
 
     def add_vpp_config(self):
-        self.test.vapi.ipsec_interface_add_del_spd(self.spd.id,
+        self.vclient.ipsec_interface_add_del_spd(self.spd.id,
                                                    self.itf.sw_if_index)
-        self.test.registry.register(self, self.test.logger)
+        self.vclient.registry.register(self, self.vclient.logger)
 
     def remove_vpp_config(self):
-        self.test.vapi.ipsec_interface_add_del_spd(self.spd.id,
+        self.vclient.ipsec_interface_add_del_spd(self.spd.id,
                                                    self.itf.sw_if_index,
                                                    is_add=0)
 
@@ -65,7 +65,7 @@ class VppIpsecSpdItfBinding(VppObject):
         return "bind-%s-to-%s" % (self.spd.id, self.itf)
 
     def query_vpp_config(self):
-        bs = self.test.vapi.ipsec_spd_interface_dump()
+        bs = self.vclient.ipsec_spd_interface_dump()
         for b in bs:
             if b.sw_if_index == self.itf.sw_if_index:
                 return True
@@ -77,7 +77,7 @@ class VppIpsecSpdEntry(VppObject):
     VPP SPD DB Entry
     """
 
-    def __init__(self, test, spd, sa_id,
+    def __init__(self, vclient, spd, sa_id,
                  local_start, local_stop,
                  remote_start, remote_stop,
                  proto,
@@ -88,7 +88,7 @@ class VppIpsecSpdEntry(VppObject):
                  remote_port_stop=65535,
                  local_port_start=0,
                  local_port_stop=65535):
-        self.test = test
+        self.vclient = vclient
         self.spd = spd
         self.sa_id = sa_id
         self.local_start = ip_address(text_type(local_start))
@@ -110,7 +110,7 @@ class VppIpsecSpdEntry(VppObject):
         self.remote_port_stop = remote_port_stop
 
     def add_vpp_config(self):
-        rv = self.test.vapi.ipsec_spd_entry_add_del(
+        rv = self.vclient.ipsec_spd_entry_add_del(
             self.spd.id,
             self.sa_id,
             self.local_start,
@@ -127,10 +127,10 @@ class VppIpsecSpdEntry(VppObject):
             remote_port_start=self.remote_port_start,
             remote_port_stop=self.remote_port_stop)
         self.stat_index = rv.stat_index
-        self.test.registry.register(self, self.test.logger)
+        self.vclient.registry.register(self, self.vclient.logger)
 
     def remove_vpp_config(self):
-        self.test.vapi.ipsec_spd_entry_add_del(
+        self.vclient.ipsec_spd_entry_add_del(
             self.spd.id,
             self.sa_id,
             self.local_start,
@@ -157,7 +157,7 @@ class VppIpsecSpdEntry(VppObject):
                                                 self.remote_port_start)
 
     def query_vpp_config(self):
-        ss = self.test.vapi.ipsec_spd_dump(self.spd.id)
+        ss = self.vclient.ipsec_spd_dump(self.spd.id)
         for s in ss:
             if s.entry.sa_id == self.sa_id and \
                s.entry.is_outbound == self.is_outbound and \
@@ -169,7 +169,7 @@ class VppIpsecSpdEntry(VppObject):
         return False
 
     def get_stats(self, worker=None):
-        c = self.test.statistics.get_counter("/net/ipsec/policy")
+        c = self.vclient.statistics.get_counter("/net/ipsec/policy")
         if worker is None:
             total = mk_counter()
             for t in c:
@@ -187,7 +187,7 @@ class VppIpsecSA(VppObject):
 
     DEFAULT_UDP_PORT = 4500
 
-    def __init__(self, test, id, spi,
+    def __init__(self, vclient, id, spi,
                  integ_alg, integ_key,
                  crypto_alg, crypto_key,
                  proto,
@@ -196,7 +196,7 @@ class VppIpsecSA(VppObject):
                  dscp=None,
                  udp_src=None, udp_dst=None):
         e = VppEnum.vl_api_ipsec_sad_flags_t
-        self.test = test
+        self.vclient = vclient
         self.id = id
         self.spi = spi
         self.integ_alg = integ_alg
@@ -256,12 +256,12 @@ class VppIpsecSA(VppObject):
             entry['udp_src_port'] = self.udp_src
         if self.udp_dst:
             entry['udp_dst_port'] = self.udp_dst
-        r = self.test.vapi.ipsec_sad_entry_add_del_v2(is_add=1, entry=entry)
+        r = self.vclient.ipsec_sad_entry_add_del_v2(is_add=1, entry=entry)
         self.stat_index = r.stat_index
-        self.test.registry.register(self, self.test.logger)
+        self.vclient.registry.register(self, self.vclient.logger)
 
     def remove_vpp_config(self):
-        r = self.test.vapi.ipsec_sad_entry_add_del_v2(
+        r = self.vclient.ipsec_sad_entry_add_del_v2(
             is_add=0,
             entry={
                 'sad_id': self.id,
@@ -289,7 +289,7 @@ class VppIpsecSA(VppObject):
     def query_vpp_config(self):
         e = VppEnum.vl_api_ipsec_sad_flags_t
 
-        bs = self.test.vapi.ipsec_sa_v2_dump()
+        bs = self.vclient.ipsec_sa_v2_dump()
         for b in bs:
             if b.entry.sad_id == self.id:
                 # if udp encap is configured then the ports should match
@@ -313,7 +313,7 @@ class VppIpsecSA(VppObject):
         return False
 
     def get_stats(self, worker=None):
-        c = self.test.statistics.get_counter("/net/ipsec/sa")
+        c = self.vclient.statistics.get_counter("/net/ipsec/sa")
         if worker is None:
             total = mk_counter()
             for t in c:
@@ -329,8 +329,8 @@ class VppIpsecTunProtect(VppObject):
     VPP IPSEC tunnel protection
     """
 
-    def __init__(self, test, itf, sa_out, sas_in, nh=None):
-        self.test = test
+    def __init__(self, vclient, itf, sa_out, sas_in, nh=None):
+        self.vclient = vclient
         self.itf = itf
         self.sas_in = []
         for sa in sas_in:
@@ -345,7 +345,7 @@ class VppIpsecTunProtect(VppObject):
         for sa in sas_in:
             self.sas_in.append(sa.id)
         self.sa_out = sa_out.id
-        self.test.vapi.ipsec_tunnel_protect_update(
+        self.vclient.ipsec_tunnel_protect_update(
             tunnel={
                 'sw_if_index': self.itf._sw_if_index,
                 'n_sa_in': len(self.sas_in),
@@ -357,22 +357,22 @@ class VppIpsecTunProtect(VppObject):
         return "ipsec-tun-protect-%s-%s" % (self.itf, self.nh)
 
     def add_vpp_config(self):
-        self.test.vapi.ipsec_tunnel_protect_update(
+        self.vclient.ipsec_tunnel_protect_update(
             tunnel={
                 'sw_if_index': self.itf._sw_if_index,
                 'n_sa_in': len(self.sas_in),
                 'sa_out': self.sa_out,
                 'sa_in': self.sas_in,
                 'nh': self.nh})
-        self.test.registry.register(self, self.test.logger)
+        self.vclient.registry.register(self, self.vclient.logger)
 
     def remove_vpp_config(self):
-        self.test.vapi.ipsec_tunnel_protect_del(
+        self.vclient.ipsec_tunnel_protect_del(
             sw_if_index=self.itf.sw_if_index,
             nh=self.nh)
 
     def query_vpp_config(self):
-        bs = self.test.vapi.ipsec_tunnel_protect_dump(
+        bs = self.vclient.ipsec_tunnel_protect_dump(
             sw_if_index=self.itf.sw_if_index)
         for b in bs:
             if b.tun.sw_if_index == self.itf.sw_if_index and \
@@ -386,8 +386,9 @@ class VppIpsecInterface(VppInterface):
     VPP IPSec interface
     """
 
-    def __init__(self, test, mode=None, instance=0xffffffff):
-        super(VppIpsecInterface, self).__init__(test)
+    def __init__(self, vclient, instance=0xffffffff, mode=None):
+        super(VppIpsecInterface, self).__init__(vclient)
+        self._instance = instance
 
         self.mode = mode
         if not self.mode:
@@ -396,19 +397,19 @@ class VppIpsecInterface(VppInterface):
         self.instance = instance
 
     def add_vpp_config(self):
-        r = self.test.vapi.ipsec_itf_create(itf={
+        r = self.vclient.ipsec_itf_create(itf={
             'user_instance': self.instance,
             'mode': self.mode,
         })
         self.set_sw_if_index(r.sw_if_index)
-        self.test.registry.register(self, self.test.logger)
+        self.vclient.registry.register(self, self.vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self.test.vapi.ipsec_itf_delete(sw_if_index=self._sw_if_index)
+        self.vclient.ipsec_itf_delete(sw_if_index=self._sw_if_index)
 
     def query_vpp_config(self):
-        ts = self.test.vapi.ipsec_itf_dump(sw_if_index=0xffffffff)
+        ts = self.vclient.ipsec_itf_dump(sw_if_index=0xffffffff)
         for t in ts:
             if t.tunnel.sw_if_index == self._sw_if_index:
                 return True
diff --git a/test/vpp_ipsec_tun_interface.py b/src/vpp-api/pom/vpp_pom/vpp_ipsec_tun_interface.py
similarity index 84%
rename from test/vpp_ipsec_tun_interface.py
rename to src/vpp-api/pom/vpp_pom/vpp_ipsec_tun_interface.py
index 7f11b7ebb..31007c136 100644
--- a/test/vpp_ipsec_tun_interface.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_ipsec_tun_interface.py
@@ -1,4 +1,4 @@
-from vpp_tunnel_interface import VppTunnelInterface
+from .vpp_tunnel_interface import VppTunnelInterface
 
 
 class VppIpsecTunInterface(VppTunnelInterface):
@@ -6,13 +6,13 @@ class VppIpsecTunInterface(VppTunnelInterface):
     VPP IPsec Tunnel interface
     """
 
-    def __init__(self, test, parent_if, local_spi,
+    def __init__(self, vclient, parent_if, local_spi,
                  remote_spi, crypto_alg, local_crypto_key, remote_crypto_key,
                  integ_alg, local_integ_key, remote_integ_key, salt=0,
                  udp_encap=False,
                  is_ip6=False,
                  dst=None):
-        super(VppIpsecTunInterface, self).__init__(test, parent_if)
+        super(VppIpsecTunInterface, self).__init__(vclient, parent_if)
         self.local_spi = local_spi
         self.remote_spi = remote_spi
         self.crypto_alg = crypto_alg
@@ -33,7 +33,7 @@ class VppIpsecTunInterface(VppTunnelInterface):
         self.udp_encap = udp_encap
 
     def add_vpp_config(self):
-        r = self.test.vapi.ipsec_tunnel_if_add_del(
+        r = self.vclient.ipsec_tunnel_if_add_del(
             self.local_ip, self.remote_ip,
             self.remote_spi, self.local_spi,
             self.crypto_alg, self.local_crypto_key, self.remote_crypto_key,
@@ -42,10 +42,10 @@ class VppIpsecTunInterface(VppTunnelInterface):
             udp_encap=self.udp_encap)
         self.set_sw_if_index(r.sw_if_index)
         self.generate_remote_hosts()
-        self.test.registry.register(self, self.test.logger)
+        self.vclient.registry.register(self, self.vclient.logger)
 
     def remove_vpp_config(self):
-        self.test.vapi.ipsec_tunnel_if_add_del(
+        self.vclient.ipsec_tunnel_if_add_del(
             self.local_ip, self.remote_ip,
             self.remote_spi, self.local_spi,
             self.crypto_alg, self.local_crypto_key, self.remote_crypto_key,
diff --git a/test/vpp_l2.py b/src/vpp-api/pom/vpp_pom/vpp_l2.py
similarity index 72%
rename from test/vpp_l2.py
rename to src/vpp-api/pom/vpp_pom/vpp_l2.py
index 114b1c734..376f31683 100644
--- a/test/vpp_l2.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_l2.py
@@ -3,10 +3,10 @@
 
 """
 
-from vpp_object import VppObject
-from vpp_lo_interface import VppLoInterface
+from .vpp_object import VppObject
+from .vpp_lo_interface import VppLoInterface
 from vpp_papi import MACAddress
-from vpp_sub_interface import L2_VTR_OP
+from .vpp_sub_interface import L2_VTR_OP
 try:
     text_type = unicode
 except NameError:
@@ -29,13 +29,13 @@ class BRIDGE_FLAGS:
     ARP_UFWD = 32
 
 
-def find_bridge_domain(test, bd_id):
-    bds = test.vapi.bridge_domain_dump(bd_id)
+def find_bridge_domain(vclient, bd_id):
+    bds = vclient.bridge_domain_dump(bd_id)
     return len(bds) == 1
 
 
-def find_bridge_domain_port(test, bd_id, sw_if_index):
-    bds = test.vapi.bridge_domain_dump(bd_id)
+def find_bridge_domain_port(vclient, bd_id, sw_if_index):
+    bds = vclient.bridge_domain_dump(bd_id)
     for bd in bds:
         for p in bd.sw_if_details:
             if p.sw_if_index == sw_if_index:
@@ -43,8 +43,8 @@ def find_bridge_domain_port(test, bd_id, sw_if_index):
     return False
 
 
-def find_bridge_domain_arp_entry(test, bd_id, mac, ip):
-    arps = test.vapi.bd_ip_mac_dump(bd_id)
+def find_bridge_domain_arp_entry(vclient, bd_id, mac, ip):
+    arps = vclient.bd_ip_mac_dump(bd_id)
     for arp in arps:
         # do IP addr comparison too once .api is fixed...
         if mac == str(arp.entry.mac) and \
@@ -53,9 +53,9 @@ def find_bridge_domain_arp_entry(test, bd_id, mac, ip):
     return False
 
 
-def find_l2_fib_entry(test, bd_id, mac, sw_if_index):
+def find_l2_fib_entry(vclient, bd_id, mac, sw_if_index):
     vmac = MACAddress(mac)
-    lfs = test.vapi.l2_fib_table_dump(bd_id)
+    lfs = vclient.l2_fib_table_dump(bd_id)
     for lf in lfs:
         if vmac.packed == lf.mac and sw_if_index == lf.sw_if_index:
             return True
@@ -64,10 +64,10 @@ def find_l2_fib_entry(test, bd_id, mac, sw_if_index):
 
 class VppBridgeDomain(VppObject):
 
-    def __init__(self, test, bd_id,
+    def __init__(self, vclient, bd_id,
                  flood=1, uu_flood=1, forward=1,
                  learn=1, arp_term=1, arp_ufwd=0):
-        self._test = test
+        self._vclient = vclient
         self.bd_id = bd_id
         self.flood = flood
         self.uu_flood = uu_flood
@@ -77,7 +77,7 @@ class VppBridgeDomain(VppObject):
         self.arp_ufwd = arp_ufwd
 
     def add_vpp_config(self):
-        self._test.vapi.bridge_domain_add_del(bd_id=self.bd_id,
+        self._vclient.bridge_domain_add_del(bd_id=self.bd_id,
                                               flood=self.flood,
                                               uu_flood=self.uu_flood,
                                               forward=self.forward,
@@ -85,13 +85,13 @@ class VppBridgeDomain(VppObject):
                                               arp_term=self.arp_term,
                                               arp_ufwd=self.arp_ufwd,
                                               is_add=1)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.bridge_domain_add_del(bd_id=self.bd_id, is_add=0)
+        self._vclient.bridge_domain_add_del(bd_id=self.bd_id, is_add=0)
 
     def query_vpp_config(self):
-        return find_bridge_domain(self._test, self.bd_id)
+        return find_bridge_domain(self._vclient, self.bd_id)
 
     def object_id(self):
         return "bridge-domain-%d" % (self.bd_id)
@@ -99,26 +99,26 @@ class VppBridgeDomain(VppObject):
 
 class VppBridgeDomainPort(VppObject):
 
-    def __init__(self, test, bd, itf,
+    def __init__(self, vclient, bd, itf,
                  port_type=L2_PORT_TYPE.NORMAL):
-        self._test = test
+        self._vclient = vclient
         self.bd = bd
         self.itf = itf
         self.port_type = port_type
 
     def add_vpp_config(self):
-        self._test.vapi.sw_interface_set_l2_bridge(
+        self._vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.itf.sw_if_index, bd_id=self.bd.bd_id,
             port_type=self.port_type, enable=1)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.sw_interface_set_l2_bridge(
+        self._vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.itf.sw_if_index, bd_id=self.bd.bd_id,
             port_type=self.port_type, enable=0)
 
     def query_vpp_config(self):
-        return find_bridge_domain_port(self._test,
+        return find_bridge_domain_port(self._vclient,
                                        self.bd.bd_id,
                                        self.itf.sw_if_index)
 
@@ -128,29 +128,29 @@ class VppBridgeDomainPort(VppObject):
 
 class VppBridgeDomainArpEntry(VppObject):
 
-    def __init__(self, test, bd, mac, ip):
-        self._test = test
+    def __init__(self, vclient, bd, mac, ip):
+        self._vclient = vclient
         self.bd = bd
         self.mac = mac
         self.ip = ip
 
     def add_vpp_config(self):
-        self._test.vapi.bd_ip_mac_add_del(is_add=1,
+        self._vclient.bd_ip_mac_add_del(is_add=1,
                                           entry={
                                               'bd_id': self.bd.bd_id,
                                               'ip': self.ip,
                                               'mac': self.mac})
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.bd_ip_mac_add_del(is_add=0,
+        self._vclient.bd_ip_mac_add_del(is_add=0,
                                           entry={
                                               'bd_id': self.bd.bd_id,
                                               'ip': self.ip,
                                               'mac': self.mac})
 
     def query_vpp_config(self):
-        return find_bridge_domain_arp_entry(self._test,
+        return find_bridge_domain_arp_entry(self._vclient,
                                             self.bd.bd_id,
                                             self.mac,
                                             self.ip)
@@ -161,9 +161,9 @@ class VppBridgeDomainArpEntry(VppObject):
 
 class VppL2FibEntry(VppObject):
 
-    def __init__(self, test, bd, mac, itf,
+    def __init__(self, vclient, bd, mac, itf,
                  static_mac=0, filter_mac=0, bvi_mac=-1):
-        self._test = test
+        self._vclient = vclient
         self.bd = bd
         self.mac = MACAddress(mac)
         self.itf = itf
@@ -175,7 +175,7 @@ class VppL2FibEntry(VppObject):
             self.bvi_mac = bvi_mac
 
     def add_vpp_config(self):
-        self._test.vapi.l2fib_add_del(
+        self._vclient.l2fib_add_del(
             self.mac.packed,
             self.bd.bd_id,
             self.itf.sw_if_index,
@@ -183,17 +183,17 @@ class VppL2FibEntry(VppObject):
             static_mac=self.static_mac,
             filter_mac=self.filter_mac,
             bvi_mac=self.bvi_mac)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.l2fib_add_del(
+        self._vclient.l2fib_add_del(
             self.mac.packed,
             self.bd.bd_id,
             self.itf.sw_if_index,
             is_add=0)
 
     def query_vpp_config(self):
-        return find_l2_fib_entry(self._test,
+        return find_l2_fib_entry(self._vclient,
                                  self.bd.bd_id,
                                  self.mac.packed,
                                  self.itf.sw_if_index)
@@ -204,20 +204,20 @@ class VppL2FibEntry(VppObject):
 
 class VppL2Vtr(VppObject):
 
-    def __init__(self, test, itf, op):
-        self._test = test
+    def __init__(self, vclient, itf, op):
+        self._vclient = vclient
         self.itf = itf
         self.op = op
 
     def add_vpp_config(self):
         self.itf.set_vtr(self.op)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
         self.itf.set_vtr(L2_VTR_OP.L2_DISABLED)
 
     def query_vpp_config(self):
-        ds = self._test.vapi.sw_interface_dump()
+        ds = self._vclient.sw_interface_dump()
         d = self.itf.get_interface_config_from_dump(ds)
 
         if d is not None:
diff --git a/src/vpp-api/pom/vpp_pom/vpp_lo_interface.py b/src/vpp-api/pom/vpp_pom/vpp_lo_interface.py
new file mode 100644
index 000000000..63fab337f
--- /dev/null
+++ b/src/vpp-api/pom/vpp_pom/vpp_lo_interface.py
@@ -0,0 +1,35 @@
+from .vpp_object import VppObject
+from .vpp_interface import VppInterface
+
+
+class VppLoInterface(VppInterface, VppObject):
+    """VPP loopback interface."""
+
+    def __init__(self, vclient):
+        """ Create VPP loopback interface """
+        super(VppLoInterface, self).__init__(vclient)
+
+    def add_vpp_config(self, register=True):
+        if self.query_vpp_config():
+            raise RuntimeError("Configuration already present")
+        r = self.vclient.create_loopback()
+        self.set_sw_if_index(r.sw_if_index)
+        if register:
+            self.vclient.registry.register(self, self.vclient.logger)
+
+    def remove_vpp_config(self):
+        self.vclient.delete_loopback(sw_if_index=self.sw_if_index)
+    
+    def get_vpp_dump(self):
+        if not self.sw_if_index:
+            return None
+        dump = self._vclient.sw_interface_dump(
+            sw_if_index=self.sw_if_index)
+        return dump
+
+    def query_vpp_config(self):
+        dump = self.get_vpp_dump()
+        return bool(dump)
+
+    def object_id(self):
+        return "loopback-%d" % self._sw_if_index
diff --git a/test/vpp_mpls_tunnel_interface.py b/src/vpp-api/pom/vpp_pom/vpp_mpls_tunnel_interface.py
similarity index 74%
rename from test/vpp_mpls_tunnel_interface.py
rename to src/vpp-api/pom/vpp_pom/vpp_mpls_tunnel_interface.py
index 598936136..333cb020b 100644
--- a/test/vpp_mpls_tunnel_interface.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_mpls_tunnel_interface.py
@@ -1,5 +1,5 @@
 
-from vpp_interface import VppInterface
+from .vpp_interface import VppInterface
 
 
 class VppMPLSTunnelInterface(VppInterface):
@@ -7,9 +7,9 @@ class VppMPLSTunnelInterface(VppInterface):
     VPP MPLS Tunnel interface
     """
 
-    def __init__(self, test, paths, is_multicast=0, is_l2=0):
+    def __init__(self, vclient, paths, is_multicast=0, is_l2=0):
         """ Create MPLS Tunnel interface """
-        super(VppMPLSTunnelInterface, self).__init__(test)
+        super(VppMPLSTunnelInterface, self).__init__(vclient)
         self.t_paths = paths
         self.is_multicast = is_multicast
         self.is_l2 = is_l2
@@ -18,23 +18,23 @@ class VppMPLSTunnelInterface(VppInterface):
             self.encoded_paths.append(path.encode())
 
     def add_vpp_config(self):
-        reply = self.test.vapi.mpls_tunnel_add_del(
+        reply = self.vclient.mpls_tunnel_add_del(
             0xffffffff,
             self.encoded_paths,
             is_multicast=self.is_multicast,
             l2_only=self.is_l2)
         self.set_sw_if_index(reply.sw_if_index)
         self.tunnel_index = reply.tunnel_index
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        reply = self.test.vapi.mpls_tunnel_add_del(
+        reply = self.vclient.mpls_tunnel_add_del(
             self.sw_if_index,
             self.encoded_paths,
             is_add=0)
 
     def query_vpp_config(self):
-        dump = self._test.vapi.mpls_tunnel_dump()
+        dump = self._vclient.mpls_tunnel_dump()
         for t in dump:
             if self.sw_if_index == t.mt_tunnel.mt_sw_if_index and \
                self.tunnel_index == t.mt_tunnel.mt_tunnel_index:
diff --git a/test/vpp_neighbor.py b/src/vpp-api/pom/vpp_pom/vpp_neighbor.py
similarity index 76%
rename from test/vpp_neighbor.py
rename to src/vpp-api/pom/vpp_pom/vpp_neighbor.py
index 6f5426180..84e18eb25 100644
--- a/test/vpp_neighbor.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_neighbor.py
@@ -5,7 +5,7 @@
 """
 
 from ipaddress import ip_address
-from vpp_object import VppObject
+from .vpp_object import VppObject
 from vpp_papi import mac_pton, VppEnum
 try:
     text_type = unicode
@@ -13,15 +13,14 @@ except NameError:
     text_type = str
 
 
-def find_nbr(test, sw_if_index, nbr_addr, is_static=0, mac=None):
+def find_nbr(vclient, sw_if_index, nbr_addr, is_static=0, mac=None):
     ip_addr = ip_address(text_type(nbr_addr))
     e = VppEnum.vl_api_ip_neighbor_flags_t
-    nbrs = test.vapi.ip_neighbor_dump(sw_if_index=sw_if_index,
+    nbrs = vclient.ip_neighbor_dump(sw_if_index=sw_if_index,
                                       af=ip_addr.vapi_af)
 
     for n in nbrs:
-        if sw_if_index == n.neighbor.sw_if_index and \
-           ip_addr == n.neighbor.ip_address and \
+        if ip_addr == n.neighbor.ip_address and \
            is_static == (n.neighbor.flags & e.IP_API_NEIGHBOR_FLAG_STATIC):
             if mac:
                 if mac == str(n.neighbor.mac_address):
@@ -36,9 +35,9 @@ class VppNeighbor(VppObject):
     ARP Entry
     """
 
-    def __init__(self, test, sw_if_index, mac_addr, nbr_addr,
+    def __init__(self, vclient, sw_if_index, mac_addr, nbr_addr,
                  is_static=False, is_no_fib_entry=False):
-        self._test = test
+        self._vclient = vclient
         self.sw_if_index = sw_if_index
         self.mac_addr = mac_addr
         self.nbr_addr = nbr_addr
@@ -51,18 +50,18 @@ class VppNeighbor(VppObject):
             self.flags |= e.IP_API_NEIGHBOR_FLAG_NO_FIB_ENTRY
 
     def add_vpp_config(self):
-        r = self._test.vapi.ip_neighbor_add_del(
+        r = self._vclient.ip_neighbor_add_del(
             self.sw_if_index,
             self.mac_addr,
             self.nbr_addr,
             is_add=1,
             flags=self.flags)
         self.stats_index = r.stats_index
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self._test.vapi.ip_neighbor_add_del(
+        self._vclient.ip_neighbor_add_del(
             self.sw_if_index,
             self.mac_addr,
             self.nbr_addr,
@@ -74,7 +73,7 @@ class VppNeighbor(VppObject):
         return (self.flags & e.IP_API_NEIGHBOR_FLAG_STATIC)
 
     def query_vpp_config(self):
-        return find_nbr(self._test,
+        return find_nbr(self._vclient,
                         self.sw_if_index,
                         self.nbr_addr,
                         self.is_static())
@@ -83,5 +82,5 @@ class VppNeighbor(VppObject):
         return ("%d:%s" % (self.sw_if_index, self.nbr_addr))
 
     def get_stats(self):
-        c = self._test.statistics.get_counter("/net/adjacency")
+        c = self._vclient.statistics.get_counter("/net/adjacency")
         return c[0][self.stats_index]
diff --git a/test/vpp_object.py b/src/vpp-api/pom/vpp_pom/vpp_object.py
similarity index 88%
rename from test/vpp_object.py
rename to src/vpp-api/pom/vpp_pom/vpp_object.py
index 2c07d472a..ef865428b 100644
--- a/test/vpp_object.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_object.py
@@ -56,15 +56,22 @@ class VppObjectRegistry(object):
     """ Class which handles automatic configuration cleanup. """
     _shared_state = {}
 
-    def __init__(self):
+    def __init__(self, logger):
         self.__dict__ = self._shared_state
         if not hasattr(self, "_object_registry"):
             self._object_registry = []
         if not hasattr(self, "_object_dict"):
             self._object_dict = dict()
+        self.logger = logger
 
-    def register(self, obj, logger):
+    @property
+    def object_registry(self):
+        return self._object_registry
+
+    def register(self, obj, logger=None):
         """ Register an object in the registry. """
+        if not logger:
+            logger = self.logger
         if obj.object_id() not in self._object_dict:
             self._object_registry.append(obj)
             self._object_dict[obj.object_id()] = obj
@@ -72,17 +79,21 @@ class VppObjectRegistry(object):
         else:
             logger.debug("REG: duplicate add, ignoring (%s)" % obj)
 
-    def unregister_all(self, logger):
+    def unregister_all(self, logger=None):
         """ Remove all object registrations from registry. """
+        if not logger:
+            logger = self.logger
         logger.debug("REG: removing all object registrations")
         self._object_registry = []
         self._object_dict = dict()
 
-    def remove_vpp_config(self, logger):
+    def remove_vpp_config(self, logger=None):
         """
         Remove configuration (if present) from vpp and then remove all objects
         from the registry.
         """
+        if not logger:
+            logger = self.logger
         if not self._object_registry:
             logger.info("REG: No objects registered for auto-cleanup.")
             return
diff --git a/test/vpp_papi_provider.py b/src/vpp-api/pom/vpp_pom/vpp_papi_provider.py
similarity index 97%
rename from test/vpp_papi_provider.py
rename to src/vpp-api/pom/vpp_pom/vpp_papi_provider.py
index 6e5ebc25f..5294fe6fa 100644
--- a/test/vpp_papi_provider.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_papi_provider.py
@@ -11,8 +11,9 @@ from collections import deque
 
 from six import moves, iteritems
 from vpp_papi import VPPApiClient, mac_pton
-from hook import Hook
-from vpp_ip_route import MPLS_IETF_MAX_LABEL, MPLS_LABEL_INVALID
+
+from .hook import Hook
+from .vpp_ip_route import MPLS_IETF_MAX_LABEL, MPLS_LABEL_INVALID
 
 
 #
@@ -139,31 +140,35 @@ class VppPapiProvider(object):
 
     _zero, _negative = range(2)
 
-    def __init__(self, name, shm_prefix, test_class, read_timeout):
-        self.hook = Hook(test_class)
+    def __init__(self, name, shm_prefix, logger, read_timeout, vpp_install_path, api_socket=None):
         self.name = name
+        self.logger = logger
         self.shm_prefix = shm_prefix
-        self.test_class = test_class
+        self.vpp_dead = False
         self._expect_api_retval = self._zero
         self._expect_stack = []
+        self.hook = Hook(self)
 
         # install_dir is a class attribute. We need to set it before
         # calling the constructor.
-        VPPApiClient.apidir = os.getenv('VPP_INSTALL_PATH')
+        VPPApiClient.apidir = vpp_install_path
 
-        use_socket = False
-        try:
-            if os.environ['SOCKET'] == '1':
-                use_socket = True
-        except KeyError:
-            pass
+        if api_socket:
+            use_socket = True
+        else:
+            use_socket = False
 
-        self.vpp = VPPApiClient(logger=test_class.logger,
+        self.vpp = VPPApiClient(logger=self.logger,
                                 read_timeout=read_timeout,
                                 use_socket=use_socket,
-                                server_address=test_class.api_sock)
+                                server_address=api_socket)
         self._events = deque()
 
+    @property
+    def vapi(self):
+        """ DEPRECATED """
+        return self
+
     def __enter__(self):
         return self
 
@@ -208,13 +213,13 @@ class VppPapiProvider(object):
     def wait_for_event(self, timeout, name=None):
         """ Wait for and return next event. """
         if name:
-            self.test_class.logger.debug("Expecting event '%s' within %ss",
+            self.logger.debug("Expecting event '%s' within %ss",
                                          name, timeout)
         else:
-            self.test_class.logger.debug("Expecting event within %ss",
+            self.logger.debug("Expecting event within %ss",
                                          timeout)
         if self._events:
-            self.test_class.logger.debug("Not waiting, event already queued")
+            self.logger.debug("Not waiting, event already queued")
         limit = time.time() + timeout
         while time.time() < limit:
             if self._events:
@@ -223,21 +228,27 @@ class VppPapiProvider(object):
                     raise Exception(
                         "Unexpected event received: %s, expected: %s" %
                         (type(e).__name__, name))
-                self.test_class.logger.debug("Returning event %s:%s" %
+                self.logger.debug("Returning event %s:%s" %
                                              (name, e))
                 return e
-            self.test_class.sleep(0)  # yield
+            # yield quantum
+            if hasattr(os, 'sched_yield'):
+                os.sched_yield()
+            else:
+                time.sleep(0)
+            # return
         raise Exception("Event did not occur within timeout")
 
     def __call__(self, name, event):
         """ Enqueue event in the internal event queue. """
         # FIXME use the name instead of relying on type(e).__name__ ?
         # FIXME #2 if this throws, it is eaten silently, Ole?
-        self.test_class.logger.debug("New event: %s: %s" % (name, event))
+        self.logger.debug("New event: %s: %s" % (name, event))
         self._events.append(event)
 
-    def factory(self, name, apifn):
+    def factory(self, name):
         def f(*a, **ka):
+            apifn = getattr(self.papi, name)
             fields = apifn._func.msg.fields
 
             # add positional and kw arguments
@@ -262,7 +273,7 @@ class VppPapiProvider(object):
         try:
             method = super(VppPapiProvider, self).__getattribute__(name)
         except AttributeError:
-            method = self.factory(name, getattr(self.papi, name))
+            method = self.factory(name)
             # lazily load the method so we don't need to call factory
             # again for this name.
             setattr(self, name, method)
@@ -297,7 +308,7 @@ class VppPapiProvider(object):
                       (api_fn.__name__, as_fn_signature(api_args),
                        reply.retval,
                        moves.reprlib.repr(reply))
-                self.test_class.logger.info(msg)
+                self.logger.info(msg)
                 raise UnexpectedApiReturnValueError(msg)
         elif self._expect_api_retval == self._zero:
             if hasattr(reply, 'retval') and reply.retval != expected_retval:
@@ -306,7 +317,7 @@ class VppPapiProvider(object):
                                        as_fn_signature(api_args),
                                        expected_retval, reply.retval,
                                        repr(reply))
-                self.test_class.logger.info(msg)
+                self.logger.info(msg)
                 raise UnexpectedApiReturnValueError(msg)
         else:
             raise Exception("Internal error, unexpected value for "
diff --git a/test/vpp_pg_interface.py b/src/vpp-api/pom/vpp_pom/vpp_pg_interface.py
similarity index 82%
rename from test/vpp_pg_interface.py
rename to src/vpp-api/pom/vpp_pom/vpp_pg_interface.py
index 4858aa7ae..f670bd92e 100755
--- a/test/vpp_pg_interface.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_pg_interface.py
@@ -8,13 +8,13 @@ from traceback import format_exc, format_stack
 import scapy.compat
 from scapy.utils import wrpcap, rdpcap, PcapReader
 from scapy.plist import PacketList
-from vpp_interface import VppInterface
+from .vpp_interface import VppInterface
 
 from scapy.layers.l2 import Ether, ARP
 from scapy.layers.inet6 import IPv6, ICMPv6ND_NS, ICMPv6ND_NA,\
     ICMPv6NDOptSrcLLAddr, ICMPv6NDOptDstLLAddr, ICMPv6ND_RA, RouterAlert, \
     IPv6ExtHdrHopByHop
-from util import ppp, ppc
+from .util import ppp, ppc
 from scapy.utils6 import in6_getnsma, in6_getnsmac, in6_ismaddr
 
 
@@ -107,12 +107,10 @@ class VppPGInterface(VppInterface):
         self._out_history_counter += 1
         return v
 
-    def __init__(self, test, pg_index, gso, gso_size):
+    def __init__(self, vclient, pg_index, gso, gso_size):
         """ Create VPP packet-generator interface """
-        super(VppPGInterface, self).__init__(test)
-
-        r = test.vapi.pg_create_interface(pg_index, gso, gso_size)
-        self.set_sw_if_index(r.sw_if_index)
+        super(VppPGInterface, self).__init__(vclient)
+        self.vclient = vclient
 
         self._in_history_counter = 0
         self._out_history_counter = 0
@@ -121,10 +119,16 @@ class VppPGInterface(VppInterface):
         self._gso_enabled = gso
         self._gso_size = gso_size
         self._coalesce_enabled = 0
+
         self._out_file = "pg%u_out.pcap" % self.pg_index
-        self._out_path = self.test.tempdir + "/" + self._out_file
+        self._out_path = self.vclient.tempdir + "/" + self._out_file
         self._in_file = "pg%u_in.pcap" % self.pg_index
-        self._in_path = self.test.tempdir + "/" + self._in_file
+        self._in_path = self.vclient.tempdir + "/" + self._in_file
+
+    def add_vpp_config(self):
+        r = self.vclient.pg_create_interface(self._pg_index, self._gso_enabled, self._gso_size)
+        self.set_sw_if_index(r.sw_if_index)
+
         self._capture_cli = "packet-generator capture pg%u pcap %s" % (
             self.pg_index, self.out_path)
         self._cap_name = "pcap%u-sw_if_index-%s" % (
@@ -139,16 +143,16 @@ class VppPGInterface(VppInterface):
         try:
             if os.path.isfile(path):
                 name = "%s/history.[timestamp:%f].[%s-counter:%04d].%s" % \
-                    (self.test.tempdir,
+                    (self.vclient.tempdir,
                      time.time(),
                      self.name,
                      counter,
                      file)
-                self.test.logger.debug("Renaming %s->%s" %
+                self.vclient.logger.debug("Renaming %s->%s" %
                                        (path, name))
                 os.rename(path, name)
         except OSError:
-            self.test.logger.debug("OSError: Could not rename %s %s" %
+            self.vclient.logger.debug("OSError: Could not rename %s %s" %
                                    (path, file))
 
     def enable_capture(self):
@@ -162,22 +166,22 @@ class VppPGInterface(VppInterface):
                                            self.out_history_counter,
                                            self._out_file)
         # FIXME this should be an API, but no such exists atm
-        self.test.vapi.cli(self.capture_cli)
+        self.vclient.cli(self.capture_cli)
         self._pcap_reader = None
 
     def disable_capture(self):
-        self.test.vapi.cli("%s disable" % self.capture_cli)
+        self.vclient.cli("%s disable" % self.capture_cli)
 
     def coalesce_enable(self):
         """ Enable packet coalesce on this packet-generator interface"""
         self._coalesce_enabled = 1
-        self.test.vapi.pg_interface_enable_disable_coalesce(self.sw_if_index,
+        self.vclient.pg_interface_enable_disable_coalesce(self.sw_if_index,
                                                             1)
 
     def coalesce_disable(self):
         """ Disable packet coalesce on this packet-generator interface"""
         self._coalesce_enabled = 0
-        self.test.vapi.pg_interface_enable_disable_coalesce(self.sw_if_index,
+        self.vclient.pg_interface_enable_disable_coalesce(self.sw_if_index,
                                                             0)
 
     def add_stream(self, pkts, nb_replays=None, worker=None):
@@ -193,18 +197,18 @@ class VppPGInterface(VppInterface):
                                            self.in_history_counter,
                                            self._in_file)
         wrpcap(self.in_path, pkts)
-        self.test.register_capture(self.cap_name)
+        self.vclient.register_capture(self.cap_name)
         # FIXME this should be an API, but no such exists atm
-        self.test.vapi.cli(self.input_cli)
+        self.vclient.cli(self.input_cli)
 
     def generate_debug_aid(self, kind):
         """ Create a hardlink to the out file with a counter and a file
         containing stack trace to ease debugging in case of multiple capture
         files present. """
-        self.test.logger.debug("Generating debug aid for %s on %s" %
+        self.vclient.logger.debug("Generating debug aid for %s on %s" %
                                (kind, self._name))
         link_path, stack_path = ["%s/debug_%s_%s_%s.%s" %
-                                 (self.test.tempdir, self._name,
+                                 (self.vclient.tempdir, self._name,
                                   self._out_assert_counter, kind, suffix)
                                  for suffix in ["pcap", "stack"]
                                  ]
@@ -219,9 +223,9 @@ class VppPGInterface(VppInterface):
             if not self.wait_for_capture_file(timeout):
                 return None
             output = rdpcap(self.out_path)
-            self.test.logger.debug("Capture has %s packets" % len(output.res))
+            self.vclient.logger.debug("Capture has %s packets" % len(output.res))
         except:
-            self.test.logger.debug("Exception in scapy.rdpcap (%s): %s" %
+            self.vclient.logger.debug("Exception in scapy.rdpcap (%s): %s" %
                                    (self.out_path, format_exc()))
             return None
         before = len(output.res)
@@ -229,7 +233,7 @@ class VppPGInterface(VppInterface):
             output.res = [p for p in output.res if not filter_out_fn(p)]
         removed = before - len(output.res)
         if removed:
-            self.test.logger.debug(
+            self.vclient.logger.debug(
                 "Filtered out %s packets from capture (returning %s)" %
                 (removed, len(output.res)))
         return output
@@ -238,9 +242,7 @@ class VppPGInterface(VppInterface):
                     filter_out_fn=is_ipv6_misc):
         """ Get captured packets
 
-        :param expected_count: expected number of packets to capture, if None,
-                               then self.test.packet_count_for_dst_pg_idx is
-                               used to lookup the expected count
+        :param expected_count: expected number of packets to capture
         :param remark: remark printed into debug logs
         :param timeout: how long to wait for packets
         :param filter_out_fn: filter applied to each packet, packets for which
@@ -250,17 +252,6 @@ class VppPGInterface(VppInterface):
         remaining_time = timeout
         capture = None
         name = self.name if remark is None else "%s (%s)" % (self.name, remark)
-        based_on = "based on provided argument"
-        if expected_count is None:
-            expected_count = \
-                self.test.get_packet_count_for_if_idx(self.sw_if_index)
-            based_on = "based on stored packet_infos"
-            if expected_count == 0:
-                raise Exception(
-                    "Internal error, expected packet count for %s is 0!" %
-                    name)
-        self.test.logger.debug("Expecting to capture %s (%s) packets on %s" % (
-            expected_count, based_on, name))
         while remaining_time > 0:
             before = time.time()
             capture = self._get_capture(remaining_time, filter_out_fn)
@@ -270,11 +261,11 @@ class VppPGInterface(VppInterface):
                     # bingo, got the packets we expected
                     return capture
                 elif len(capture.res) > expected_count:
-                    self.test.logger.error(
+                    self.vclient.logger.error(
                         ppc("Unexpected packets captured:", capture))
                     break
                 else:
-                    self.test.logger.debug("Partial capture containing %s "
+                    self.vclient.logger.debug("Partial capture containing %s "
                                            "packets doesn't match expected "
                                            "count %s (yet?)" %
                                            (len(capture.res), expected_count))
@@ -323,10 +314,10 @@ class VppPGInterface(VppInterface):
         #
         # also have a 5-minute timeout just in case things go terribly wrong...
         deadline = time.time() + 300
-        while self.test.vapi.cli('show packet-generator').find("Yes") != -1:
-            self._test.sleep(0.01)  # yield
+        while self.vclient.cli('show packet-generator').find("Yes") != -1:
+            self._vclient.sleep(0.01)  # yield
             if time.time() > deadline:
-                self.test.logger.debug("Timeout waiting for pg to stop")
+                self.vclient.logger.debug("Timeout waiting for pg to stop")
                 break
 
     def wait_for_capture_file(self, timeout=1):
@@ -340,21 +331,21 @@ class VppPGInterface(VppInterface):
         self.wait_for_pg_stop()
         deadline = time.time() + timeout
         if not os.path.isfile(self.out_path):
-            self.test.logger.debug("Waiting for capture file %s to appear, "
+            self.vclient.logger.debug("Waiting for capture file %s to appear, "
                                    "timeout is %ss" % (self.out_path, timeout))
         else:
-            self.test.logger.debug("Capture file %s already exists" %
+            self.vclient.logger.debug("Capture file %s already exists" %
                                    self.out_path)
             return True
         while time.time() < deadline:
             if os.path.isfile(self.out_path):
                 break
-            self._test.sleep(0)  # yield
+            self._vclient.sleep(0)  # yield
         if os.path.isfile(self.out_path):
-            self.test.logger.debug("Capture file appeared after %fs" %
+            self.vclient.logger.debug("Capture file appeared after %fs" %
                                    (time.time() - (deadline - timeout)))
         else:
-            self.test.logger.debug("Timeout - capture file still nowhere")
+            self.vclient.logger.debug("Timeout - capture file still nowhere")
             return False
         return True
 
@@ -402,7 +393,7 @@ class VppPGInterface(VppInterface):
                     self._pcap_reader = PcapReader(self.out_path)
                     break
                 except:
-                    self.test.logger.debug(
+                    self.vclient.logger.debug(
                         "Exception in scapy.PcapReader(%s): %s" %
                         (self.out_path, format_exc()))
         if not self._pcap_reader:
@@ -411,29 +402,29 @@ class VppPGInterface(VppInterface):
 
         poll = False
         if timeout > 0:
-            self.test.logger.debug("Waiting for packet")
+            self.vclient.logger.debug("Waiting for packet")
         else:
             poll = True
-            self.test.logger.debug("Polling for packet")
+            self.vclient.logger.debug("Polling for packet")
         while time.time() < deadline or poll:
             if not self.verify_enough_packet_data_in_pcap():
-                self._test.sleep(0)  # yield
+                self._vclient.sleep(0)  # yield
                 poll = False
                 continue
             p = self._pcap_reader.recv()
             if p is not None:
                 if filter_out_fn is not None and filter_out_fn(p):
-                    self.test.logger.debug(
+                    self.vclient.logger.debug(
                         "Packet received after %ss was filtered out" %
                         (time.time() - (deadline - timeout)))
                 else:
-                    self.test.logger.debug(
+                    self.vclient.logger.debug(
                         "Packet received after %fs" %
                         (time.time() - (deadline - timeout)))
                     return p
-            self._test.sleep(0)  # yield
+            self._vclient.sleep(0)  # yield
             poll = False
-        self.test.logger.debug("Timeout - no packets received")
+        self.vclient.logger.debug("Timeout - no packets received")
         raise CaptureTimeoutError("Packet didn't arrive within timeout")
 
     def create_arp_req(self):
@@ -461,30 +452,30 @@ class VppPGInterface(VppInterface):
         """
         if pg_interface is None:
             pg_interface = self
-        self.test.logger.info("Sending ARP request for %s on port %s" %
+        self.vclient.logger.info("Sending ARP request for %s on port %s" %
                               (self.local_ip4, pg_interface.name))
         arp_req = self.create_arp_req()
         pg_interface.add_stream(arp_req)
         pg_interface.enable_capture()
-        self.test.pg_start()
-        self.test.logger.info(self.test.vapi.cli("show trace"))
+        self.vclient.pg_start()
+        self.vclient.logger.info(self.vclient.cli("show trace"))
         try:
             captured_packet = pg_interface.wait_for_packet(1)
         except:
-            self.test.logger.info("No ARP received on port %s" %
+            self.vclient.logger.info("No ARP received on port %s" %
                                   pg_interface.name)
             return
         arp_reply = captured_packet.copy()  # keep original for exception
         try:
             if arp_reply[ARP].op == ARP.is_at:
-                self.test.logger.info("VPP %s MAC address is %s " %
+                self.vclient.logger.info("VPP %s MAC address is %s " %
                                       (self.name, arp_reply[ARP].hwsrc))
                 self._local_mac = arp_reply[ARP].hwsrc
             else:
-                self.test.logger.info("No ARP received on port %s" %
+                self.vclient.logger.info("No ARP received on port %s" %
                                       pg_interface.name)
         except:
-            self.test.logger.error(
+            self.vclient.logger.error(
                 ppp("Unexpected response to ARP request:", captured_packet))
             raise
 
@@ -498,12 +489,12 @@ class VppPGInterface(VppInterface):
         """
         if pg_interface is None:
             pg_interface = self
-        self.test.logger.info("Sending NDP request for %s on port %s" %
+        self.vclient.logger.info("Sending NDP request for %s on port %s" %
                               (self.local_ip6, pg_interface.name))
         ndp_req = self.create_ndp_req()
         pg_interface.add_stream(ndp_req)
         pg_interface.enable_capture()
-        self.test.pg_start()
+        self.vclient.pg_start()
         now = time.time()
         deadline = now + timeout
         # Enabling IPv6 on an interface can generate more than the
@@ -514,24 +505,24 @@ class VppPGInterface(VppInterface):
                 captured_packet = pg_interface.wait_for_packet(
                     deadline - now, filter_out_fn=None)
             except:
-                self.test.logger.error(
+                self.vclient.logger.error(
                     "Timeout while waiting for NDP response")
                 raise
             ndp_reply = captured_packet.copy()  # keep original for exception
             try:
                 ndp_na = ndp_reply[ICMPv6ND_NA]
                 opt = ndp_na[ICMPv6NDOptDstLLAddr]
-                self.test.logger.info("VPP %s MAC address is %s " %
+                self.vclient.logger.info("VPP %s MAC address is %s " %
                                       (self.name, opt.lladdr))
                 self._local_mac = opt.lladdr
-                self.test.logger.debug(self.test.vapi.cli("show trace"))
+                self.vclient.logger.debug(self.vclient.cli("show trace"))
                 # we now have the MAC we've been after
                 return
             except:
-                self.test.logger.info(
+                self.vclient.logger.info(
                     ppp("Unexpected response to NDP request:",
                         captured_packet))
             now = time.time()
 
-        self.test.logger.debug(self.test.vapi.cli("show trace"))
+        self.vclient.logger.debug(self.vclient.cli("show trace"))
         raise Exception("Timeout while waiting for NDP response")
diff --git a/src/vpp-api/pom/vpp_pom/vpp_pipe.py b/src/vpp-api/pom/vpp_pom/vpp_pipe.py
new file mode 100644
index 000000000..1d4812faf
--- /dev/null
+++ b/src/vpp-api/pom/vpp_pom/vpp_pipe.py
@@ -0,0 +1,46 @@
+from vpp_pom.vpp_interface import VppInterface
+
+
+class VppPipe(VppInterface):
+    """
+    VPP Pipe
+    """
+
+    @property
+    def east(self):
+        return self.result.pipe_sw_if_index[1]
+
+    @property
+    def west(self):
+        return self.result.pipe_sw_if_index[0]
+
+    def __init__(self, vclient, instance=0xffffffff):
+        super(VppPipe, self).__init__(vclient)
+        self._vclient = vclient
+        self.instance = instance
+
+    def add_vpp_config(self):
+        self.result = self._vclient.pipe_create(
+            0 if self.instance == 0xffffffff else 1,
+            self.instance)
+        self.set_sw_if_index(self.result.sw_if_index)
+
+    def remove_vpp_config(self):
+        self._vclient.pipe_delete(
+            self.result.sw_if_index)
+
+    def object_id(self):
+        return "pipe-%d" % (self._sw_if_index)
+
+    def query_vpp_config(self):
+        pipes = self._vclient.pipe_dump()
+        for p in pipes:
+            if p.sw_if_index == self.result.sw_if_index:
+                return True
+        return False
+
+    def set_unnumbered(self, ip_sw_if_index, is_add=True):
+        res = self._vclient.sw_interface_set_unnumbered(ip_sw_if_index,
+                                                          self.east, is_add)
+        res = self._vclient.sw_interface_set_unnumbered(ip_sw_if_index,
+                                                          self.west, is_add)
\ No newline at end of file
diff --git a/test/vpp_policer.py b/src/vpp-api/pom/vpp_pom/vpp_policer.py
similarity index 82%
rename from test/vpp_policer.py
rename to src/vpp-api/pom/vpp_pom/vpp_policer.py
index 49d118596..4b8578d6a 100644
--- a/test/vpp_policer.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_policer.py
@@ -1,5 +1,5 @@
-from vpp_object import VppObject
-from vpp_ip import INVALID_INDEX
+from .vpp_object import VppObject
+from .vpp_ip import INVALID_INDEX
 
 
 class PolicerAction():
@@ -16,12 +16,12 @@ class PolicerAction():
 class VppPolicer(VppObject):
     """ Policer """
 
-    def __init__(self, test, name, cir, eir, commited_burst, excess_burst,
+    def __init__(self, vclient, name, cir, eir, commited_burst, excess_burst,
                  rate_type=0, round_type=0, type=0, color_aware=False,
                  conform_action=PolicerAction(1, 0),
                  exceed_action=PolicerAction(0, 0),
                  violate_action=PolicerAction(0, 0)):
-        self._test = test
+        self._vclient = vclient
         self.name = name
         self.cir = cir
         self.eir = eir
@@ -41,7 +41,7 @@ class VppPolicer(VppObject):
         return self._policer_index
 
     def add_vpp_config(self):
-        r = self._test.vapi.policer_add_del(
+        r = self._vclient.policer_add_del(
             name=self.name, cir=self.cir,
             eir=self.eir, cb=self.commited_burst, eb=self.excess_burst,
             rate_type=self.rate_type, round_type=self.round_type,
@@ -49,16 +49,16 @@ class VppPolicer(VppObject):
             conform_action=self.conform_action.encode(),
             exceed_action=self.exceed_action.encode(),
             violate_action=self.violate_action.encode())
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         self._policer_index = r.policer_index
         return self
 
     def remove_vpp_config(self):
-        self._test.vapi.policer_add_del(is_add=False, name=self.name)
+        self._vclient.policer_add_del(is_add=False, name=self.name)
         self._policer_index = INVALID_INDEX
 
     def query_vpp_config(self):
-        dump = self._test.vapi.policer_dump(
+        dump = self._vclient.policer_dump(
             match_name_valid=True, match_name=self.name)
         for policer in dump:
             if policer.name == self.name:
diff --git a/test/vpp_qos.py b/src/vpp-api/pom/vpp_pom/vpp_qos.py
similarity index 72%
rename from test/vpp_qos.py
rename to src/vpp-api/pom/vpp_pom/vpp_qos.py
index a7fa9e748..b46a14d9f 100644
--- a/test/vpp_qos.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_qos.py
@@ -4,33 +4,33 @@
   object abstractions for representing QoS config VPP
 """
 
-from vpp_object import VppObject
+from .vpp_object import VppObject
 
 
 class VppQosRecord(VppObject):
     """ QoS Record(ing) configuration """
 
-    def __init__(self, test, intf, source):
-        self._test = test
+    def __init__(self, vclient, intf, source):
+        self._vclient = vclient
         self.intf = intf
         self.source = source
 
     def add_vpp_config(self):
-        self._test.vapi.qos_record_enable_disable(
+        self._vclient.qos_record_enable_disable(
             enable=1,
             record={'sw_if_index': self.intf.sw_if_index,
                     'input_source': self.source})
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self._test.vapi.qos_record_enable_disable(
+        self._vclient.qos_record_enable_disable(
             enable=0,
             record={'sw_if_index': self.intf.sw_if_index,
                     'input_source': self.source})
 
     def query_vpp_config(self):
-        rs = self._test.vapi.qos_record_dump()
+        rs = self._vclient.qos_record_dump()
 
         for r in rs:
             if self.intf.sw_if_index == r.record.sw_if_index and \
@@ -45,29 +45,29 @@ class VppQosRecord(VppObject):
 class VppQosStore(VppObject):
     """ QoS Store(ing) configuration """
 
-    def __init__(self, test, intf, source, value):
-        self._test = test
+    def __init__(self, vclient, intf, source, value):
+        self._vclient = vclient
         self.intf = intf
         self.source = source
         self.value = value
 
     def add_vpp_config(self):
-        self._test.vapi.qos_store_enable_disable(
+        self._vclient.qos_store_enable_disable(
             enable=1,
             store={'sw_if_index': self.intf.sw_if_index,
                    'input_source': self.source,
                    'value': self.value})
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self._test.vapi.qos_store_enable_disable(
+        self._vclient.qos_store_enable_disable(
             enable=0,
             store={'sw_if_index': self.intf.sw_if_index,
                    'input_source': self.source})
 
     def query_vpp_config(self):
-        rs = self._test.vapi.qos_store_dump()
+        rs = self._vclient.qos_store_dump()
 
         for r in rs:
             if self.intf.sw_if_index == r.store.sw_if_index and \
@@ -83,23 +83,23 @@ class VppQosStore(VppObject):
 class VppQosEgressMap(VppObject):
     """ QoS Egress Map(ping) configuration """
 
-    def __init__(self, test, id, rows):
-        self._test = test
+    def __init__(self, vclient, id, rows):
+        self._vclient = vclient
         self.id = id
         self.rows = rows
 
     def add_vpp_config(self):
-        self._test.vapi.qos_egress_map_update(
+        self._vclient.qos_egress_map_update(
             map={'id': self.id,
                  'rows': self.rows})
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self._test.vapi.qos_egress_map_delete(id=self.id)
+        self._vclient.qos_egress_map_delete(id=self.id)
 
     def query_vpp_config(self):
-        rs = self._test.vapi.qos_egress_map_dump()
+        rs = self._vclient.qos_egress_map_dump()
 
         for r in rs:
             if self.id == r.map.id:
@@ -113,29 +113,29 @@ class VppQosEgressMap(VppObject):
 class VppQosMark(VppObject):
     """ QoS Mark(ing) configuration """
 
-    def __init__(self, test, intf, map, source):
-        self._test = test
+    def __init__(self, vclient, intf, map, source):
+        self._vclient = vclient
         self.intf = intf
         self.source = source
         self.map = map
 
     def add_vpp_config(self):
-        self._test.vapi.qos_mark_enable_disable(
+        self._vclient.qos_mark_enable_disable(
             enable=1,
             mark={'sw_if_index': self.intf.sw_if_index,
                   'map_id': self.map.id,
                   'output_source': self.source})
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        self._test.vapi.qos_mark_enable_disable(
+        self._vclient.qos_mark_enable_disable(
             enable=0,
             mark={'sw_if_index': self.intf.sw_if_index,
                   'output_source': self.source})
 
     def query_vpp_config(self):
-        ms = self._test.vapi.qos_mark_dump()
+        ms = self._vclient.qos_mark_dump()
 
         for m in ms:
             if self.intf.sw_if_index == m.mark.sw_if_index and \
diff --git a/test/vpp_sub_interface.py b/src/vpp-api/pom/vpp_pom/vpp_sub_interface.py
similarity index 83%
rename from test/vpp_sub_interface.py
rename to src/vpp-api/pom/vpp_pom/vpp_sub_interface.py
index 8f422d8a0..11abfb05d 100644
--- a/test/vpp_sub_interface.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_sub_interface.py
@@ -1,8 +1,8 @@
 from scapy.layers.l2 import Dot1Q
 import abc
 import six
-from vpp_pg_interface import VppPGInterface
-from vpp_interface import VppInterface
+from .vpp_pg_interface import VppPGInterface
+from .vpp_interface import VppInterface
 from vpp_papi import VppEnum
 
 
@@ -43,8 +43,8 @@ class VppSubInterface(VppPGInterface):
     def vtr(self):
         return self._vtr
 
-    def __init__(self, test, parent, sub_id):
-        VppInterface.__init__(self, test)
+    def __init__(self, vclient, parent, sub_id):
+        VppInterface.__init__(self, vclient)
         self._parent = parent
         self._parent.add_sub_if(self)
         self._sub_id = sub_id
@@ -74,7 +74,7 @@ class VppSubInterface(VppPGInterface):
         pass
 
     def remove_vpp_config(self):
-        self.test.vapi.delete_subif(self.sw_if_index)
+        self.vclient.delete_subif(self.sw_if_index)
 
     def _add_tag(self, packet, vlan, tag_type):
         payload = packet.payload
@@ -87,12 +87,16 @@ class VppSubInterface(VppPGInterface):
         return packet
 
     def _remove_tag(self, packet, vlan=None, tag_type=None):
-        if tag_type:
-            self.test.instance().assertEqual(packet.type, tag_type)
+        if tag_type and tag_type != packet.type:
+            raise AssertionError(
+                "Tag type (%s) not equal to packet type (%s)" %
+                (tag_type, packet.type))
 
         payload = packet.payload
-        if vlan:
-            self.test.instance().assertEqual(payload.vlan, vlan)
+        if vlan and vlan != payload.vlan:
+            raise AssertionError(
+                "Vlan (%s) not equal to payload vlan (%s)" %
+                (vlan, payload.vlan))
         inner_type = payload.type
         payload = payload.payload
         packet.remove_payload()
@@ -131,7 +135,7 @@ class VppSubInterface(VppPGInterface):
             self._tag2 = inner
             self._push1q = push1q
 
-        self.test.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=self.sw_if_index, vtr_op=vtr, push_dot1q=self._push1q,
             tag1=self._tag1, tag2=self._tag2)
         self._vtr = vtr
@@ -144,12 +148,12 @@ class VppDot1QSubint(VppSubInterface):
         """VLAN tag"""
         return self._vlan
 
-    def __init__(self, test, parent, sub_id, vlan=None):
-        super(VppDot1QSubint, self).__init__(test, parent, sub_id)
+    def __init__(self, vclient, parent, sub_id, vlan=None):
+        super(VppDot1QSubint, self).__init__(vclient, parent, sub_id)
         if vlan is None:
             vlan = sub_id
         self._vlan = vlan
-        r = test.vapi.create_vlan_subif(parent.sw_if_index, vlan)
+        r = vclient.create_vlan_subif(parent.sw_if_index, vlan)
         self.set_sw_if_index(r.sw_if_index)
 
     def create_arp_req(self):
@@ -181,12 +185,12 @@ class VppDot1ADSubint(VppSubInterface):
         """Inner VLAN tag"""
         return self._inner_vlan
 
-    def __init__(self, test, parent, sub_id, outer_vlan, inner_vlan):
-        super(VppDot1ADSubint, self).__init__(test, parent, sub_id)
+    def __init__(self, vclient, parent, sub_id, outer_vlan, inner_vlan):
+        super(VppDot1ADSubint, self).__init__(vclient, parent, sub_id)
         flags = (VppEnum.vl_api_sub_if_flags_t.SUB_IF_API_FLAG_DOT1AD |
                  VppEnum.vl_api_sub_if_flags_t.SUB_IF_API_FLAG_TWO_TAGS |
                  VppEnum.vl_api_sub_if_flags_t.SUB_IF_API_FLAG_EXACT_MATCH)
-        r = test.vapi.create_subif(sw_if_index=parent.sw_if_index,
+        r = vclient.create_subif(sw_if_index=parent.sw_if_index,
                                    sub_id=sub_id, outer_vlan_id=outer_vlan,
                                    inner_vlan_id=inner_vlan,
                                    sub_if_flags=flags)
@@ -212,9 +216,9 @@ class VppDot1ADSubint(VppSubInterface):
 
 class VppP2PSubint(VppSubInterface):
 
-    def __init__(self, test, parent, sub_id, remote_mac):
-        super(VppP2PSubint, self).__init__(test, parent, sub_id)
-        r = test.vapi.p2p_ethernet_add(parent.sw_if_index,
+    def __init__(self, vclient, parent, sub_id, remote_mac):
+        super(VppP2PSubint, self).__init__(vclient, parent, sub_id)
+        r = vclient.p2p_ethernet_add(parent.sw_if_index,
                                        remote_mac, sub_id)
         self.set_sw_if_index(r.sw_if_index)
         self.parent_sw_if_index = parent.sw_if_index
diff --git a/test/vpp_teib.py b/src/vpp-api/pom/vpp_pom/vpp_teib.py
similarity index 70%
rename from test/vpp_teib.py
rename to src/vpp-api/pom/vpp_pom/vpp_teib.py
index 0fe733388..0b3887bc7 100644
--- a/test/vpp_teib.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_teib.py
@@ -3,11 +3,11 @@
   TEIB objects
 """
 
-from vpp_object import VppObject
+from .vpp_object import VppObject
 
 
-def find_teib(test, ne):
-    ns = test.vapi.teib_dump()
+def find_teib(vclient, ne):
+    ns = vclient.teib_dump()
     for n in ns:
         if ne.peer == str(n.entry.peer) \
            and ne.itf._sw_if_index == n.entry.sw_if_index:
@@ -17,15 +17,15 @@ def find_teib(test, ne):
 
 class VppTeib(VppObject):
 
-    def __init__(self, test, itf, peer, nh, table_id=0):
-        self._test = test
+    def __init__(self, vclient, itf, peer, nh, table_id=0):
+        self._vclient = vclient
         self.table_id = table_id
         self.peer = peer
         self.itf = itf
         self.nh = nh
 
     def add_vpp_config(self):
-        r = self._test.vapi.teib_entry_add_del(
+        r = self._vclient.teib_entry_add_del(
             is_add=1,
             entry={
                 'nh_table_id': self.table_id,
@@ -33,11 +33,11 @@ class VppTeib(VppObject):
                 'peer': self.peer,
                 'nh': self.nh,
             })
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
         return self
 
     def remove_vpp_config(self):
-        r = self._test.vapi.teib_entry_add_del(
+        r = self._vclient.teib_entry_add_del(
             is_add=0,
             entry={
                 'nh_table_id': self.table_id,
@@ -46,7 +46,7 @@ class VppTeib(VppObject):
             })
 
     def query_vpp_config(self):
-        return find_teib(self._test, self)
+        return find_teib(self._vclient, self)
 
     def object_id(self):
         return ("teib-%s-%s" % (self.itf, self.peer))
diff --git a/test/vpp_tunnel_interface.py b/src/vpp-api/pom/vpp_pom/vpp_tunnel_interface.py
similarity index 80%
rename from test/vpp_tunnel_interface.py
rename to src/vpp-api/pom/vpp_pom/vpp_tunnel_interface.py
index e55486e16..cabe66fd8 100644
--- a/test/vpp_tunnel_interface.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_tunnel_interface.py
@@ -1,15 +1,15 @@
 import abc
 import six
-from vpp_pg_interface import is_ipv6_misc
-from vpp_interface import VppInterface
+from .vpp_pg_interface import is_ipv6_misc
+from .vpp_interface import VppInterface
 
 
 @six.add_metaclass(abc.ABCMeta)
 class VppTunnelInterface(VppInterface):
     """ VPP tunnel interface abstraction """
 
-    def __init__(self, test, parent_if):
-        super(VppTunnelInterface, self).__init__(test)
+    def __init__(self, vclient, parent_if):
+        super(VppTunnelInterface, self).__init__(vclient)
         self.parent_if = parent_if
 
     @property
diff --git a/test/vpp_udp_encap.py b/src/vpp-api/pom/vpp_pom/vpp_udp_encap.py
similarity index 73%
rename from test/vpp_udp_encap.py
rename to src/vpp-api/pom/vpp_pom/vpp_udp_encap.py
index aad87bd59..97609fcb3 100644
--- a/test/vpp_udp_encap.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_udp_encap.py
@@ -3,12 +3,12 @@
   UDP encap objects
 """
 
-from vpp_object import VppObject
+from .vpp_object import VppObject
 from socket import inet_pton, inet_ntop, AF_INET, AF_INET6
 
 
-def find_udp_encap(test, ue):
-    encaps = test.vapi.udp_encap_dump()
+def find_udp_encap(vclient, ue):
+    encaps = vclient.udp_encap_dump()
     for e in encaps:
         if ue.id == e.udp_encap.id \
            and ue.src_ip == str(e.udp_encap.src_ip) \
@@ -23,13 +23,13 @@ def find_udp_encap(test, ue):
 class VppUdpEncap(VppObject):
 
     def __init__(self,
-                 test,
+                 vclient,
                  src_ip,
                  dst_ip,
                  src_port,
                  dst_port,
                  table_id=0):
-        self._test = test
+        self._vclient = vclient
         self.table_id = table_id
         self.src_ip_s = src_ip
         self.dst_ip_s = dst_ip
@@ -39,24 +39,24 @@ class VppUdpEncap(VppObject):
         self.dst_port = dst_port
 
     def add_vpp_config(self):
-        r = self._test.vapi.udp_encap_add(
+        r = self._vclient.udp_encap_add(
             self.src_ip,
             self.dst_ip,
             self.src_port,
             self.dst_port,
             self.table_id)
         self.id = r.id
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self._test.vapi.udp_encap_del(self.id)
+        self._vclient.udp_encap_del(self.id)
 
     def query_vpp_config(self):
-        return find_udp_encap(self._test, self)
+        return find_udp_encap(self._vclient, self)
 
     def object_id(self):
         return ("udp-encap-%d" % self.id)
 
     def get_stats(self):
-        c = self._test.statistics.get_counter("/net/udp-encap")
+        c = self._vclient.statistics.get_counter("/net/udp-encap")
         return c[0][self.id]
diff --git a/test/vpp_vhost_interface.py b/src/vpp-api/pom/vpp_pom/vpp_vhost_interface.py
similarity index 85%
rename from test/vpp_vhost_interface.py
rename to src/vpp-api/pom/vpp_pom/vpp_vhost_interface.py
index fd2928eac..2c776b01c 100644
--- a/test/vpp_vhost_interface.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_vhost_interface.py
@@ -1,16 +1,16 @@
-from vpp_interface import VppInterface
+from .vpp_interface import VppInterface
 
 
 class VppVhostInterface(VppInterface):
     """VPP vhost interface."""
 
-    def __init__(self, test, sock_filename, is_server=0, renumber=0,
+    def __init__(self, vclient, sock_filename, is_server=0, renumber=0,
                  disable_mrg_rxbuf=0, disable_indirect_desc=0, gso=0,
                  packed_ring=0, custom_dev_instance=0, use_custom_mac=0,
                  mac_address='', tag=''):
 
         """ Create VPP Vhost interface """
-        super(VppVhostInterface, self).__init__(test)
+        super(VppVhostInterface, self).__init__(vclient)
         self.is_server = is_server
         self.sock_filename = sock_filename
         self.renumber = renumber
@@ -24,7 +24,7 @@ class VppVhostInterface(VppInterface):
         self.tag = tag
 
     def add_vpp_config(self):
-        r = self.test.vapi.create_vhost_user_if(self.is_server,
+        r = self.vclient.create_vhost_user_if(self.is_server,
                                                 self.sock_filename,
                                                 self.renumber,
                                                 self.disable_mrg_rxbuf,
@@ -38,7 +38,7 @@ class VppVhostInterface(VppInterface):
         self.set_sw_if_index(r.sw_if_index)
 
     def remove_vpp_config(self):
-        self.test.vapi.delete_vhost_user_if(self.sw_if_index)
+        self.vclient.delete_vhost_user_if(self.sw_if_index)
 
     def is_interface_config_in_dump(self, dump):
         for i in dump:
diff --git a/test/vpp_vxlan_gbp_tunnel.py b/src/vpp-api/pom/vpp_pom/vpp_vxlan_gbp_tunnel.py
similarity index 81%
rename from test/vpp_vxlan_gbp_tunnel.py
rename to src/vpp-api/pom/vpp_pom/vpp_vxlan_gbp_tunnel.py
index 22555858d..1a002011c 100644
--- a/test/vpp_vxlan_gbp_tunnel.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_vxlan_gbp_tunnel.py
@@ -1,13 +1,13 @@
 
-from vpp_interface import VppInterface
+from .vpp_interface import VppInterface
 from vpp_papi import VppEnum
 
 
 INDEX_INVALID = 0xffffffff
 
 
-def find_vxlan_gbp_tunnel(test, src, dst, vni):
-    ts = test.vapi.vxlan_gbp_tunnel_dump(INDEX_INVALID)
+def find_vxlan_gbp_tunnel(vclient, src, dst, vni):
+    ts = vclient.vxlan_gbp_tunnel_dump(INDEX_INVALID)
     for t in ts:
         if src == str(t.tunnel.src) and \
            dst == str(t.tunnel.dst) and \
@@ -21,10 +21,10 @@ class VppVxlanGbpTunnel(VppInterface):
     VPP VXLAN GBP interface
     """
 
-    def __init__(self, test, src, dst, vni, mcast_itf=None, mode=None,
+    def __init__(self, vclient, src, dst, vni, mcast_itf=None, mode=None,
                  is_ipv6=None, encap_table_id=None, instance=0xffffffff):
         """ Create VXLAN-GBP Tunnel interface """
-        super(VppVxlanGbpTunnel, self).__init__(test)
+        super(VppVxlanGbpTunnel, self).__init__(vclient)
         self.src = src
         self.dst = dst
         self.vni = vni
@@ -42,7 +42,7 @@ class VppVxlanGbpTunnel(VppInterface):
         mcast_sw_if_index = INDEX_INVALID
         if (self.mcast_itf):
             mcast_sw_if_index = self.mcast_itf.sw_if_index
-        reply = self.test.vapi.vxlan_gbp_tunnel_add_del(
+        reply = self.vclient.vxlan_gbp_tunnel_add_del(
             is_add=1,
             tunnel={
                 'src': self.src,
@@ -54,13 +54,13 @@ class VppVxlanGbpTunnel(VppInterface):
                 'instance': self.instance
             })
         self.set_sw_if_index(reply.sw_if_index)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
         mcast_sw_if_index = INDEX_INVALID
         if (self.mcast_itf):
             mcast_sw_if_index = self.mcast_itf.sw_if_index
-        self.test.vapi.vxlan_gbp_tunnel_add_del(
+        self.vclient.vxlan_gbp_tunnel_add_del(
             is_add=0,
             tunnel={
                 'src': self.src,
@@ -73,7 +73,7 @@ class VppVxlanGbpTunnel(VppInterface):
             })
 
     def query_vpp_config(self):
-        return (INDEX_INVALID != find_vxlan_gbp_tunnel(self._test,
+        return (INDEX_INVALID != find_vxlan_gbp_tunnel(self._vclient,
                                                        self.src,
                                                        self.dst,
                                                        self.vni))
diff --git a/test/vpp_vxlan_tunnel.py b/src/vpp-api/pom/vpp_pom/vpp_vxlan_tunnel.py
similarity index 79%
rename from test/vpp_vxlan_tunnel.py
rename to src/vpp-api/pom/vpp_pom/vpp_vxlan_tunnel.py
index 0f6ecb771..452fb9682 100644
--- a/test/vpp_vxlan_tunnel.py
+++ b/src/vpp-api/pom/vpp_pom/vpp_vxlan_tunnel.py
@@ -1,12 +1,12 @@
-from vpp_interface import VppInterface
+from .vpp_interface import VppInterface
 from vpp_papi import VppEnum
 
 
 INDEX_INVALID = 0xffffffff
 
 
-def find_vxlan_tunnel(test, src, dst, vni):
-    ts = test.vapi.vxlan_tunnel_dump(INDEX_INVALID)
+def find_vxlan_tunnel(vclient, src, dst, vni):
+    ts = vclient.vxlan_tunnel_dump(INDEX_INVALID)
     for t in ts:
         if src == str(t.src_address) and \
            dst == str(t.dst_address) and \
@@ -20,12 +20,12 @@ class VppVxlanTunnel(VppInterface):
     VPP VXLAN interface
     """
 
-    def __init__(self, test, src, dst, vni, mcast_itf=None,
+    def __init__(self, vclient, src, dst, vni, mcast_itf=None,
                  mcast_sw_if_index=INDEX_INVALID,
                  decap_next_index=INDEX_INVALID,
                  encap_vrf_id=None, instance=0xffffffff):
         """ Create VXLAN Tunnel interface """
-        super(VppVxlanTunnel, self).__init__(test)
+        super(VppVxlanTunnel, self).__init__(vclient)
         self.src = src
         self.dst = dst
         self.vni = vni
@@ -39,23 +39,23 @@ class VppVxlanTunnel(VppInterface):
             self.mcast_sw_if_index = self.mcast_itf.sw_if_index
 
     def add_vpp_config(self):
-        reply = self.test.vapi.vxlan_add_del_tunnel(
+        reply = self.vclient.vxlan_add_del_tunnel(
             is_add=1, src_address=self.src, dst_address=self.dst, vni=self.vni,
             mcast_sw_if_index=self.mcast_sw_if_index,
             encap_vrf_id=self.encap_vrf_id,
             instance=self.instance, decap_next_index=self.decap_next_index)
         self.set_sw_if_index(reply.sw_if_index)
-        self._test.registry.register(self, self._test.logger)
+        self._vclient.registry.register(self, self._vclient.logger)
 
     def remove_vpp_config(self):
-        self.test.vapi.vxlan_add_del_tunnel(
+        self.vclient.vxlan_add_del_tunnel(
             is_add=0, src_address=self.src, dst_address=self.dst, vni=self.vni,
             mcast_sw_if_index=self.mcast_sw_if_index,
             encap_vrf_id=self.encap_vrf_id, instance=self.instance,
             decap_next_index=self.decap_next_index)
 
     def query_vpp_config(self):
-        return (INDEX_INVALID != find_vxlan_tunnel(self._test,
+        return (INDEX_INVALID != find_vxlan_tunnel(self._vclient,
                                                    self.src,
                                                    self.dst,
                                                    self.vni))
diff --git a/src/vpp-api/python/vpp_papi/vpp_papi.py b/src/vpp-api/python/vpp_papi/vpp_papi.py
index 192168772..ce60bff83 100644
--- a/src/vpp-api/python/vpp_papi/vpp_papi.py
+++ b/src/vpp-api/python/vpp_papi/vpp_papi.py
@@ -476,7 +476,7 @@ class VPPApiClient(object):
                     setattr(self._api, name, FuncWrapper(f))
             else:
                 self.logger.debug(
-                    'No such message type or failed CRC checksum: %s', n)
+                    'No such message type or failed CRC checksum: %s' % n)
 
     def connect_internal(self, name, msg_handler, chroot_prefix, rx_qlen,
                          do_async):
diff --git a/test/Makefile b/test/Makefile
index aa229e939..74b33dbd8 100644
--- a/test/Makefile
+++ b/test/Makefile
@@ -115,6 +115,12 @@ PAPI_WIPE_DIST=$(WS_ROOT)/src/vpp-api/vapi/__pycache__ \
 	$(PAPI_PYTHON_SRC_DIR)/build \
 	$(PAPI_PYTHON_SRC_DIR)/vpp_papi.egg-info \
 	$(PAPI_PYTHON_SRC_DIR)/vpp_papi/__pycache__
+POM_INSTALL_DONE=$(VENV_RUN_DIR)/pom-install-$(PYTHON_VERSION).done
+POM_PYTHON_SRC_DIR=$(WS_ROOT)/src/vpp-api/pom
+POM_WIPE_DIST=$(WS_ROOT)/src/vpp-api/vclient/__pycache__ \
+	$(POM_PYTHON_SRC_DIR)/build \
+	$(POM_PYTHON_SRC_DIR)/vpp_pom.egg-info \
+	$(POM_PYTHON_SRC_DIR)/vpp_pom/__pycache__
 
 $(PIP_TOOLS_INSTALL_DONE):
 	@rm -rf $(VENV_PATH)
@@ -152,6 +158,10 @@ $(PAPI_INSTALL_DONE): $(PIP_PATCH_DONE)
 	@bash -c "source $(VENV_PATH)/bin/activate && $(PYTHON_INTERP) -m pip install -e $(PAPI_PYTHON_SRC_DIR)"
 	@touch $@
 
+$(POM_INSTALL_DONE): $(PIP_PATCH_DONE)
+	@bash -c "source $(VENV_PATH)/bin/activate && $(PYTHON_INTERP) -m pip install -e $(POM_PYTHON_SRC_DIR)"
+	@touch $@
+
 .PHONY: refresh-deps
 refresh-deps: clean-deps $(PYTHON_DEPENDS)
 
@@ -174,9 +184,11 @@ endef
 
 ifeq ($(SANITY),no)
 SANITY_IMPORT_VPP_PAPI_CMD=true
+SANITY_IMPORT_VPP_POM_CMD=true
 SANITY_RUN_VPP_CMD=true
 else
 SANITY_IMPORT_VPP_PAPI_CMD=source $(VENV_PATH)/bin/activate && $(PYTHON_INTERP) $(BUILD_TEST_SRC)/sanity_import_vpp_papi.py
+SANITY_IMPORT_VPP_POM_CMD=source $(VENV_PATH)/bin/activate && $(PYTHON_INTERP) $(BUILD_TEST_SRC)/sanity_import_vpp_pom.py
 SANITY_RUN_VPP_CMD=source $(VENV_PATH)/bin/activate && PYTHONPATH=$(BUILD_TEST_SRC) $(PYTHON_INTERP) $(BUILD_TEST_SRC)/sanity_run_vpp.py
 endif
 
@@ -207,6 +219,14 @@ sanity: test-dep verify-no-running-vpp
 		 echo \"* 2. execute debugger:   gdb python -ex 'run sanity_import_vpp_papi.py'\" &&\
 	         echo \"*******************************************************************\" &&\
 		 false)"
+	@bash -c "$(SANITY_IMPORT_VPP_POM_CMD) ||\
+		(echo \"*******************************************************************\" &&\
+		 echo \"* Sanity check failed, cannot import vpp_pom\" &&\
+		 echo \"* to debug: \" &&\
+		 echo \"* 1. enter test shell:   make test-shell\" &&\
+		 echo \"* 2. execute debugger:   gdb python -ex 'run sanity_import_vpp_pom.py'\" &&\
+	         echo \"*******************************************************************\" &&\
+		 false)"
 	@bash -c "$(SANITY_RUN_VPP_CMD) ||\
 		(echo \"*******************************************************************\" &&\
 		 echo \"* Sanity check failed, cannot run vpp\" &&\
@@ -225,7 +245,7 @@ $(FAILED_DIR): reset
 	@mkdir -p $@
 
 .PHONY: test-dep
-test-dep: $(BUILD_TEST_SRC) $(PAPI_INSTALL_DONE) $(FAILED_DIR)
+test-dep: $(BUILD_TEST_SRC) $(PAPI_INSTALL_DONE) $(POM_INSTALL_DONE) $(FAILED_DIR)
 
 .PHONY: test
 test: test-dep ext-test-apps sanity
@@ -306,7 +326,7 @@ wipe-cov: wipe
 
 .PHONY: wipe-papi
 wipe-papi:
-	@rm -rf $(PAPI_INSTALL_DONE) $(PAPI_WIPE_DIST)
+	@rm -rf $(PAPI_INSTALL_DONE) $(PAPI_WIPE_DIST) $(POM_INSTALL_DONE)
 
 .PHONY: wipe-all
 wipe-all: wipe wipe-papi wipe-doc wipe-cov
diff --git a/test/debug_internal.py b/test/debug_internal.py
index 2cbee27ec..fe17ba3b6 100644
--- a/test/debug_internal.py
+++ b/test/debug_internal.py
@@ -1,7 +1,7 @@
 import gc
 import pprint
 import vpp_papi
-from vpp_papi_provider import VppPapiProvider
+from vpp_pom.vpp_papi_provider import VppPapiProvider
 import objgraph
 from pympler import tracker
 tr = tracker.SummaryTracker()
diff --git a/test/framework.py b/test/framework.py
index 82d1c35fd..41f0fa40a 100644
--- a/test/framework.py
+++ b/test/framework.py
@@ -23,23 +23,21 @@ from logging import FileHandler, DEBUG, Formatter
 
 import scapy.compat
 from scapy.packet import Raw
-import hook as hookmodule
-from vpp_pg_interface import VppPGInterface
-from vpp_sub_interface import VppSubInterface
-from vpp_lo_interface import VppLoInterface
-from vpp_bvi_interface import VppBviInterface
-from vpp_papi_provider import VppPapiProvider
-import vpp_papi
-from vpp_papi.vpp_stats import VPPStats
-from vpp_papi.vpp_transport_shmem import VppTransportShmemIOError
-from log import RED, GREEN, YELLOW, double_line_delim, single_line_delim, \
-    get_logger, colorize
-from vpp_object import VppObjectRegistry
-from util import ppp, is_core_present
 from scapy.layers.inet import IPerror, TCPerror, UDPerror, ICMPerror
 from scapy.layers.inet6 import ICMPv6DestUnreach, ICMPv6EchoRequest
 from scapy.layers.inet6 import ICMPv6EchoReply
 
+import vpp_papi
+from vpp_papi.vpp_transport_shmem import VppTransportShmemIOError
+
+from vpp_pom import StepHook, PollHook, VppPGInterface, VppSubInterface, \
+    VppLoInterface, VppBviInterface, VppPapiProvider, VppObjectRegistry, VppClient
+from vpp_pom.log import RED, GREEN, YELLOW, double_line_delim, single_line_delim, \
+    get_logger, colorize
+from vpp_pom.util import ppp, is_core_present
+from vpp_pom.vpp_pg_interface import is_ipv6_misc
+
+
 if os.name == 'posix' and sys.version_info[0] < 3:
     # using subprocess32 is recommended by python official documentation
     # @ https://docs.python.org/2/library/subprocess.html
@@ -97,6 +95,38 @@ if debug_framework:
 """
 
 
+class MyVppPGInterface(VppPGInterface):
+    """ 
+    Use packet infos to get expected packet count.
+    """
+    def __init__(self, test, pg_index, gso, gso_size):
+        """ Create VPP packet-generator interface """
+        self._test = test
+        super(MyVppPGInterface, self).__init__(self._test.vclient, pg_index, gso, gso_size)
+
+
+    def get_capture(self, expected_count=None, remark=None, timeout=1,
+                    filter_out_fn=is_ipv6_misc):
+        """
+        Use packet infos to get expected packet count.
+        """
+        name = self.name if remark is None else "%s (%s)" % (self.name, remark)
+        based_on = "based on provided argument"
+        if expected_count is None:
+            expected_count = \
+                self._test.get_packet_count_for_if_idx(self.sw_if_index)
+            based_on = "based on stored packet_infos"
+            if expected_count == 0:
+                raise Exception(
+                    "Internal error, expected packet count for %s is 0!" %
+                    name)
+        self.vclient.logger.debug("Expecting to capture %s (%s) packets on %s" % (
+            expected_count, based_on, name))
+        return super(MyVppPGInterface, self).get_capture(expected_count=expected_count,
+                                                  remark=remark, timeout=timeout,
+                                                  filter_out_fn=filter_out_fn)
+
+
 class VppDiedError(Exception):
     """ exception for reporting that the subprocess has died."""
 
@@ -160,12 +190,12 @@ def pump_output(testclass):
     stdout_fragment = ""
     stderr_fragment = ""
     while not testclass.pump_thread_stop_flag.is_set():
-        readable = select.select([testclass.vpp.stdout.fileno(),
-                                  testclass.vpp.stderr.fileno(),
+        readable = select.select([testclass.vpp_process.stdout.fileno(),
+                                  testclass.vpp_process.stderr.fileno(),
                                   testclass.pump_thread_wakeup_pipe[0]],
                                  [], [])[0]
-        if testclass.vpp.stdout.fileno() in readable:
-            read = os.read(testclass.vpp.stdout.fileno(), 102400)
+        if testclass.vpp_process.stdout.fileno() in readable:
+            read = os.read(testclass.vpp_process.stdout.fileno(), 102400)
             if len(read) > 0:
                 split = read.decode('ascii',
                                     errors='backslashreplace').splitlines(True)
@@ -181,8 +211,8 @@ def pump_output(testclass):
                     for line in split[:limit]:
                         testclass.logger.info(
                             "VPP STDOUT: %s" % line.rstrip("\n"))
-        if testclass.vpp.stderr.fileno() in readable:
-            read = os.read(testclass.vpp.stderr.fileno(), 102400)
+        if testclass.vpp_process.stderr.fileno() in readable:
+            read = os.read(testclass.vpp_process.stderr.fileno(), 102400)
             if len(read) > 0:
                 split = read.decode('ascii',
                                     errors='backslashreplace').splitlines(True)
@@ -272,7 +302,7 @@ class KeepAliveReporter(object):
         else:
             desc = test.id()
 
-        self.pipe.send((desc, test.vpp_bin, test.tempdir, test.vpp.pid))
+        self.pipe.send((desc, test.vpp_bin, test.tempdir, test.vpp_process.pid))
 
 
 class VppTestCase(unittest.TestCase):
@@ -283,7 +313,7 @@ class VppTestCase(unittest.TestCase):
     extra_vpp_punt_config = []
     extra_vpp_plugin_config = []
     logger = null_logger
-    vapi_response_timeout = 5
+    vclient_response_timeout = 5
 
     @property
     def packet_infos(self):
@@ -438,12 +468,12 @@ class VppTestCase(unittest.TestCase):
     def wait_for_enter(cls):
         if cls.debug_gdbserver:
             print(double_line_delim)
-            print("Spawned GDB server with PID: %d" % cls.vpp.pid)
+            print("Spawned GDB server with PID: %d" % cls.vpp_process.pid)
         elif cls.debug_gdb:
             print(double_line_delim)
-            print("Spawned VPP with PID: %d" % cls.vpp.pid)
+            print("Spawned VPP with PID: %d" % cls.vpp_process.pid)
         else:
-            cls.logger.debug("Spawned VPP with PID: %d" % cls.vpp.pid)
+            cls.logger.debug("Spawned VPP with PID: %d" % cls.vpp_process.pid)
             return
         print(single_line_delim)
         print("You can debug VPP using:")
@@ -456,7 +486,7 @@ class VppTestCase(unittest.TestCase):
                   "within gdb by issuing the 'continue' command")
             cls.gdbserver_port += 1
         elif cls.debug_gdb:
-            print("sudo gdb " + cls.vpp_bin + " -ex 'attach %s'" % cls.vpp.pid)
+            print("sudo gdb " + cls.vpp_bin + " -ex 'attach %s'" % cls.vpp_process.pid)
             print("Now is the time to attach gdb by running the above "
                   "command and set up breakpoints etc., then resume VPP from"
                   " within gdb by issuing the 'continue' command")
@@ -479,7 +509,7 @@ class VppTestCase(unittest.TestCase):
             cls.logger.info("Gdbserver cmdline is %s", " ".join(cmdline))
 
         try:
-            cls.vpp = subprocess.Popen(cmdline,
+            cls.vpp_process = subprocess.Popen(cmdline,
                                        stdout=subprocess.PIPE,
                                        stderr=subprocess.PIPE)
         except subprocess.CalledProcessError as e:
@@ -553,10 +583,9 @@ class VppTestCase(unittest.TestCase):
         cls.logger.debug("Random seed is %s" % seed)
         cls.setUpConstants()
         cls.reset_packet_infos()
-        cls._captures = []
         cls.verbose = 0
         cls.vpp_dead = False
-        cls.registry = VppObjectRegistry()
+        cls.registry = VppObjectRegistry(cls.logger)
         cls.vpp_startup_failed = False
         cls.reporter = KeepAliveReporter()
         # need to catch exceptions here because if we raise, then the cleanup
@@ -565,7 +594,7 @@ class VppTestCase(unittest.TestCase):
             cls.run_vpp()
             cls.reporter.send_keep_alive(cls, 'setUpClass')
             VppTestResult.current_test_case_info = TestCaseInfo(
-                cls.logger, cls.tempdir, cls.vpp.pid, cls.vpp_bin)
+                cls.logger, cls.tempdir, cls.vpp_process.pid, cls.vpp_bin)
             cls.vpp_stdout_deque = deque()
             cls.vpp_stderr_deque = deque()
             cls.pump_thread_stop_flag = Event()
@@ -574,15 +603,17 @@ class VppTestCase(unittest.TestCase):
             cls.pump_thread.daemon = True
             cls.pump_thread.start()
             if cls.debug_gdb or cls.debug_gdbserver:
-                cls.vapi_response_timeout = 0
-            cls.vapi = VppPapiProvider(cls.shm_prefix, cls.shm_prefix, cls,
-                                       cls.vapi_response_timeout)
+                cls.vclient_response_timeout = 0
+            VppClient.tempdir = cls.tempdir
+            cls.vclient = VppClient(cls.shm_prefix, cls.shm_prefix, logger=cls.logger,
+                                       read_timeout=cls.vclient_response_timeout,
+                                       vpp_install_path=os.getenv('VPP_INSTALL_PATH'),
+                                       stats_socket=cls.stats_sock)
             if cls.step:
-                hook = hookmodule.StepHook(cls)
+                hook = StepHook(cls)
             else:
-                hook = hookmodule.PollHook(cls)
-            cls.vapi.register_hook(hook)
-            cls.statistics = VPPStats(socketname=cls.stats_sock)
+                hook = PollHook(cls)
+            cls.vclient.register_hook(hook)
             try:
                 hook.poll_vpp()
             except VppDiedError:
@@ -592,10 +623,10 @@ class VppTestCase(unittest.TestCase):
                     " output to standard error for possible cause")
                 raise
             try:
-                cls.vapi.connect()
+                cls.vclient.connect()
             except vpp_papi.VPPIOError as e:
-                cls.logger.debug("Exception connecting to vapi: %s" % e)
-                cls.vapi.disconnect()
+                cls.logger.debug("Exception connecting to vclient: %s" % e)
+                cls.vclient.disconnect()
 
                 if cls.debug_gdbserver:
                     print(colorize("You're running VPP inside gdbserver but "
@@ -615,9 +646,9 @@ class VppTestCase(unittest.TestCase):
     def _debug_quit(cls):
         if (cls.debug_gdbserver or cls.debug_gdb):
             try:
-                cls.vpp.poll()
+                cls.vpp_process.poll()
 
-                if cls.vpp.returncode is None:
+                if cls.vpp_process.returncode is None:
                     print()
                     print(double_line_delim)
                     print("VPP or GDB server is still running")
@@ -646,25 +677,25 @@ class VppTestCase(unittest.TestCase):
             cls.logger.debug("Waiting for stderr pump to stop")
             cls.vpp_stderr_reader_thread.join()
 
-        if hasattr(cls, 'vpp'):
-            if hasattr(cls, 'vapi'):
-                cls.logger.debug(cls.vapi.vpp.get_stats())
-                cls.logger.debug("Disconnecting class vapi client on %s",
+        if hasattr(cls, 'vpp_process'):
+            if hasattr(cls, 'vclient'):
+                cls.logger.debug(cls.vclient.vpp.get_stats())
+                cls.logger.debug("Disconnecting class vclient client on %s",
                                  cls.__name__)
-                cls.vapi.disconnect()
-                cls.logger.debug("Deleting class vapi attribute on %s",
+                cls.vclient.disconnect()
+                cls.logger.debug("Deleting class vclient attribute on %s",
                                  cls.__name__)
-                del cls.vapi
-            cls.vpp.poll()
-            if cls.vpp.returncode is None:
+                del cls.vclient
+            cls.vpp_process.poll()
+            if cls.vpp_process.returncode is None:
                 cls.wait_for_coredump()
                 cls.logger.debug("Sending TERM to vpp")
-                cls.vpp.terminate()
+                cls.vpp_process.terminate()
                 cls.logger.debug("Waiting for vpp to die")
-                cls.vpp.communicate()
+                cls.vpp_process.communicate()
             cls.logger.debug("Deleting class vpp attribute on %s",
                              cls.__name__)
-            del cls.vpp
+            del cls.vpp_process
 
         if cls.vpp_startup_failed:
             stdout_log = cls.logger.info
@@ -717,26 +748,26 @@ class VppTestCase(unittest.TestCase):
 
         try:
             if not self.vpp_dead:
-                self.logger.debug(self.vapi.cli("show trace max 1000"))
-                self.logger.info(self.vapi.ppcli("show interface"))
-                self.logger.info(self.vapi.ppcli("show hardware"))
-                self.logger.info(self.statistics.set_errors_str())
-                self.logger.info(self.vapi.ppcli("show run"))
-                self.logger.info(self.vapi.ppcli("show log"))
-                self.logger.info(self.vapi.ppcli("show bihash"))
+                self.logger.debug(self.vclient.cli("show trace max 1000"))
+                self.logger.info(self.vclient.ppcli("show interface"))
+                self.logger.info(self.vclient.ppcli("show hardware"))
+                self.logger.info(self.vclient.statistics.set_errors_str())
+                self.logger.info(self.vclient.ppcli("show run"))
+                self.logger.info(self.vclient.ppcli("show log"))
+                self.logger.info(self.vclient.ppcli("show bihash"))
                 self.logger.info("Logging testcase specific show commands.")
                 self.show_commands_at_teardown()
                 self.registry.remove_vpp_config(self.logger)
             # Save/Dump VPP api trace log
             m = self._testMethodName
-            api_trace = "vpp_api_trace.%s.%d.log" % (m, self.vpp.pid)
+            api_trace = "vpp_api_trace.%s.%d.log" % (m, self.vpp_process.pid)
             tmp_api_trace = "/tmp/%s" % api_trace
             vpp_api_trace_log = "%s/%s" % (self.tempdir, api_trace)
-            self.logger.info(self.vapi.ppcli("api trace save %s" % api_trace))
+            self.logger.info(self.vclient.ppcli("api trace save %s" % api_trace))
             self.logger.info("Moving %s to %s\n" % (tmp_api_trace,
                                                     vpp_api_trace_log))
             os.rename(tmp_api_trace, vpp_api_trace_log)
-            self.logger.info(self.vapi.ppcli("api trace custom-dump %s" %
+            self.logger.info(self.vclient.ppcli("api trace custom-dump %s" %
                                              vpp_api_trace_log))
         except VppTransportShmemIOError:
             self.logger.debug("VppTransportShmemIOError: Vpp dead. "
@@ -762,7 +793,7 @@ class VppTestCase(unittest.TestCase):
             "--- test setUp() for %s.%s(%s) starts here ---\n" %
             (self.__class__.__name__, self._testMethodName,
              self._testMethodDoc))
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         # store the test instance inside the test class - so that objects
         # holding the class can access instance methods (like assertEqual)
         type(self).test_instance = self
@@ -785,13 +816,13 @@ class VppTestCase(unittest.TestCase):
     def register_capture(cls, cap_name):
         """ Register a capture in the testclass """
         # add to the list of captures with current timestamp
-        cls._captures.append((time.time(), cap_name))
+        cls.vclient.register_capture(cap_name)
 
     @classmethod
     def get_vpp_time(cls):
         # processes e.g. "Time now 2.190522, Wed, 11 Mar 2020 17:29:54 GMT"
         # returns float("2.190522")
-        timestr = cls.vapi.cli('show clock')
+        timestr = cls.vclient.cli('show clock')
         head, sep, tail = timestr.partition(',')
         head, sep, tail = head.partition('Time now')
         return float(tail)
@@ -809,21 +840,7 @@ class VppTestCase(unittest.TestCase):
     @classmethod
     def pg_start(cls):
         """ Enable the PG, wait till it is done, then clean up """
-        cls.vapi.cli("trace add pg-input 1000")
-        cls.vapi.cli('packet-generator enable')
-        # PG, when starts, runs to completion -
-        # so let's avoid a race condition,
-        # and wait a little till it's done.
-        # Then clean it up  - and then be gone.
-        deadline = time.time() + 300
-        while cls.vapi.cli('show packet-generator').find("Yes") != -1:
-            cls.sleep(0.01)  # yield
-            if time.time() > deadline:
-                cls.logger.error("Timeout waiting for pg to stop")
-                break
-        for stamp, cap_name in cls._captures:
-            cls.vapi.cli('packet-generator delete %s' % cap_name)
-        cls._captures = []
+        cls.vclient.pg_start()
 
     @classmethod
     def create_pg_interfaces(cls, interfaces, gso=0, gso_size=0):
@@ -836,7 +853,8 @@ class VppTestCase(unittest.TestCase):
         """
         result = []
         for i in interfaces:
-            intf = VppPGInterface(cls, i, gso, gso_size)
+            intf = MyVppPGInterface(cls, i, gso, gso_size)
+            intf.add_vpp_config()
             setattr(cls, intf.name, intf)
             result.append(intf)
         cls.pg_interfaces = result
@@ -850,8 +868,9 @@ class VppTestCase(unittest.TestCase):
         :param count: number of interfaces created.
         :returns: List of created interfaces.
         """
-        result = [VppLoInterface(cls) for i in range(count)]
+        result = [VppLoInterface(cls.vclient) for i in range(count)]
         for intf in result:
+            intf.add_vpp_config(register=False)
             setattr(cls, intf.name, intf)
         cls.lo_interfaces = result
         return result
@@ -864,8 +883,9 @@ class VppTestCase(unittest.TestCase):
         :param count: number of interfaces created.
         :returns: List of created interfaces.
         """
-        result = [VppBviInterface(cls) for i in range(count)]
+        result = [VppBviInterface(cls.vclient) for i in range(count)]
         for intf in result:
+            intf.add_vpp_config(register=False)
             setattr(cls, intf.name, intf)
         cls.bvi_interfaces = result
         return result
@@ -1126,9 +1146,9 @@ class VppTestCase(unittest.TestCase):
 
     def get_packet_counter(self, counter):
         if counter.startswith("/"):
-            counter_value = self.statistics.get_counter(counter)
+            counter_value = self.vclient.statistics.get_counter(counter)
         else:
-            counters = self.vapi.cli("sh errors").split('\n')
+            counters = self.vclient.cli("sh errors").split('\n')
             counter_value = 0
             for i in range(1, len(counters) - 1):
                 results = counters[i].split()
@@ -1143,7 +1163,7 @@ class VppTestCase(unittest.TestCase):
                           "packet counter `%s'" % counter)
 
     def assert_error_counter_equal(self, counter, expected_value):
-        counter_value = self.statistics.get_err_counter(counter)
+        counter_value = self.vclient.statistics.get_err_counter(counter)
         self.assert_equal(counter_value, expected_value,
                           "error counter `%s'" % counter)
 
@@ -1176,7 +1196,7 @@ class VppTestCase(unittest.TestCase):
                 remark, after - before, timeout)
 
     def pg_send(self, intf, pkts, worker=None):
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         intf.add_stream(pkts, worker=worker)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
diff --git a/test/lisp.py b/test/lisp.py
index a2e711f9d..56e07e727 100644
--- a/test/lisp.py
+++ b/test/lisp.py
@@ -1,7 +1,7 @@
 import socket
 from ipaddress import ip_network
 
-from vpp_object import VppObject
+from vpp_pom.vpp_object import VppObject
 
 
 class VppLispLocatorSet(VppObject):
@@ -20,11 +20,11 @@ class VppLispLocatorSet(VppObject):
         return self._ls_name
 
     def add_vpp_config(self):
-        self.test.vapi.lisp_add_del_locator_set(locator_set_name=self._ls_name)
+        self.test.vclient.lisp_add_del_locator_set(locator_set_name=self._ls_name)
         self._test.registry.register(self, self.test.logger)
 
     def get_lisp_locator_sets_dump_entry(self):
-        result = self.test.vapi.lisp_locator_set_dump()
+        result = self.test.vclient.lisp_locator_set_dump()
         for ls in result:
             if ls.ls_name.strip('\x00') == self._ls_name:
                 return ls
@@ -34,7 +34,7 @@ class VppLispLocatorSet(VppObject):
         return self.get_lisp_locator_sets_dump_entry() is not None
 
     def remove_vpp_config(self):
-        self.test.vapi.lisp_add_del_locator_set(locator_set_name=self._ls_name,
+        self.test.vclient.lisp_add_del_locator_set(locator_set_name=self._ls_name,
                                                 is_add=0)
 
     def object_id(self):
@@ -74,14 +74,14 @@ class VppLispLocator(VppObject):
         return self._weight
 
     def add_vpp_config(self):
-        self.test.vapi.lisp_add_del_locator(locator_set_name=self._ls_name,
+        self.test.vclient.lisp_add_del_locator(locator_set_name=self._ls_name,
                                             sw_if_index=self._sw_if_index,
                                             priority=self._priority,
                                             weight=self._weight)
         self._test.registry.register(self, self.test.logger)
 
     def get_lisp_locator_dump_entry(self):
-        locators = self.test.vapi.lisp_locator_dump(
+        locators = self.test.vclient.lisp_locator_dump(
                 is_index_set=0, ls_name=self._ls_name)
         for locator in locators:
             if locator.sw_if_index == self._sw_if_index:
@@ -93,7 +93,7 @@ class VppLispLocator(VppObject):
         return locator is not None
 
     def remove_vpp_config(self):
-        self.test.vapi.lisp_add_del_locator(
+        self.test.vclient.lisp_add_del_locator(
                 locator_set_name=self._ls_name, sw_if_index=self._sw_if_index,
                 priority=self._priority, weight=self._weight, is_add=0)
         self._test.registry.register(self, self.test.logger)
@@ -197,7 +197,7 @@ class VppLispMapping(VppObject):
         return self._weight
 
     def get_lisp_mapping_dump_entry(self):
-        return self.test.vapi.lisp_eid_table_dump(
+        return self.test.vclient.lisp_eid_table_dump(
             eid_set=1, vni=self._vni, eid=self._eid.packed)
 
     def query_vpp_config(self):
@@ -230,13 +230,13 @@ class VppLocalMapping(VppLispMapping):
         return self._key
 
     def add_vpp_config(self):
-        self.test.vapi.lisp_add_del_local_eid(
+        self.test.vclient.lisp_add_del_local_eid(
                 locator_set_name=self._ls_name, eid=self._eid.packed,
                 vni=self._vni, key=self._key.packed)
         self._test.registry.register(self, self.test.logger)
 
     def remove_vpp_config(self):
-        self.test.vapi.lisp_add_del_local_eid(
+        self.test.vclient.lisp_add_del_local_eid(
                 locator_set_name=self._ls_name, eid=self._eid.packed,
                 vni=self._vni, is_add=0)
 
@@ -271,13 +271,13 @@ class VppRemoteMapping(VppLispMapping):
         return rlocs
 
     def add_vpp_config(self):
-        self.test.vapi.lisp_add_del_remote_mapping(
+        self.test.vclient.lisp_add_del_remote_mapping(
                 rlocs=self.rlocs, deid=self._eid.packed,
                 vni=self._vni, rloc_num=len(self._rlocs))
         self._test.registry.register(self, self.test.logger)
 
     def remove_vpp_config(self):
-        self.test.vapi.lisp_add_del_remote_mapping(
+        self.test.vclient.lisp_add_del_remote_mapping(
                 deid=self._eid.packed, vni=self._vni, is_add=0, rloc_num=0)
 
     def object_id(self):
@@ -313,7 +313,7 @@ class VppLispAdjacency(VppObject):
         return self._vni
 
     def add_vpp_config(self):
-        self.test.vapi.lisp_add_del_adjacency(
+        self.test.vclient.lisp_add_del_adjacency(
                 leid=self._leid.packed, reid=self._reid.packed, vni=self._vni)
         self._test.registry.register(self, self.test.logger)
 
@@ -332,7 +332,7 @@ class VppLispAdjacency(VppObject):
         return True
 
     def query_vpp_config(self):
-        res = self.test.vapi.lisp_adjacencies_get(vni=self._vni)
+        res = self.test.vclient.lisp_adjacencies_get(vni=self._vni)
         for adj in res.adjacencies:
             if self.eid_equal(self._leid, adj.leid) and \
                     self.eid_equal(self._reid, adj.reid):
@@ -340,7 +340,7 @@ class VppLispAdjacency(VppObject):
         return False
 
     def remove_vpp_config(self):
-        self.test.vapi.lisp_add_del_adjacency(
+        self.test.vclient.lisp_add_del_adjacency(
                 leid=self._leid.packed, reid=self._reid.packed,
                 vni=self._vni, is_add=0)
 
diff --git a/test/remote_test.py b/test/remote_test.py
index 8b3def2b8..23c7725c8 100644
--- a/test/remote_test.py
+++ b/test/remote_test.py
@@ -16,6 +16,23 @@ else:
     from enum import IntEnum, IntFlag
 
 
+class RemoteVclient:
+    """
+    Wrapper for accessing vclient on remote test.
+    """
+    def __init__(self, remote_test):
+        self.remote_test = remote_test
+    
+    def __getattr__(self, name):
+        try:
+            """
+            In order to access vclient we need to call __getattr__ on remote_test
+            """
+            return self.remote_test.vclient.__getattr__(name)
+        except AttributeError as e:
+            raise e
+
+
 class SerializableClassCopy(object):
     """
     Empty class used as a basis for a serializable copy of another class.
@@ -122,7 +139,7 @@ class RemoteClass(Process):
         return self.RemoteClassAttr(self, None)()
 
     def __getattr__(self, attr):
-        if attr[0] == '_' or not self.is_alive():
+        if attr[0] == '_':
             if not (attr.startswith('__') and attr.endswith('__')):
                 if hasattr(super(RemoteClass, self), '__getattr__'):
                     return super(RemoteClass, self).__getattr__(attr)
@@ -158,7 +175,7 @@ class RemoteClass(Process):
         timeout = self._timeout
         # adjust timeout specifically for the .sleep method
         if path is not None and path.split('.')[-1] == 'sleep':
-            if args and isinstance(args[0], (long, int)):
+            if args and isinstance(args[0], (int, int)):
                 timeout += args[0]
             elif 'timeout' in kwargs:
                 timeout += kwargs['timeout']
@@ -392,11 +409,11 @@ class RemoteVppTestCase(VppTestCase):
     # Note: __del__ is a 'Finalizer" not a 'Destructor'.
     # https://docs.python.org/3/reference/datamodel.html#object.__del__
     def __del__(self):
-        if hasattr(self, "vpp"):
-            self.vpp.poll()
-            if self.vpp.returncode is None:
-                self.vpp.terminate()
-                self.vpp.communicate()
+        if hasattr(self, "vpp_process"):
+            self.vpp_process.poll()
+            if self.vpp_process.returncode is None:
+                self.vpp_process.terminate()
+                self.vpp_process.communicate()
 
     @classmethod
     def setUpClass(cls, tempdir):
diff --git a/test/run_tests.py b/test/run_tests.py
index 66118ca6f..02b1aea83 100644
--- a/test/run_tests.py
+++ b/test/run_tests.py
@@ -20,11 +20,11 @@ from framework import VppTestRunner, running_extended_tests, VppTestCase, \
     get_testcase_doc_name, get_test_description, PASS, FAIL, ERROR, SKIP, \
     TEST_RUN
 from debug import spawn_gdb
-from log import get_parallel_logger, double_line_delim, RED, YELLOW, GREEN, \
+from vpp_pom.log import get_parallel_logger, double_line_delim, RED, YELLOW, GREEN, \
     colorize, single_line_delim
 from discover_tests import discover_tests
 from subprocess import check_output, CalledProcessError
-from util import check_core_path, get_core_path, is_core_present
+from vpp_pom.util import check_core_path, get_core_path, is_core_present
 
 # timeout which controls how long the child has to finish after seeing
 # a core dump in test temporary directory. If this is exceeded, parent assumes
diff --git a/test/sanity_import_vpp_pom.py b/test/sanity_import_vpp_pom.py
new file mode 100644
index 000000000..4a29e44ad
--- /dev/null
+++ b/test/sanity_import_vpp_pom.py
@@ -0,0 +1,4 @@
+#!/usr/bin/env python3
+
+""" sanity check script """
+import vpp_pom
diff --git a/test/template_bd.py b/test/template_bd.py
index 198cc2258..b6138ab3e 100644
--- a/test/template_bd.py
+++ b/test/template_bd.py
@@ -7,7 +7,7 @@ from scapy.layers.l2 import Ether
 from scapy.packet import Raw
 from scapy.layers.inet import IP, UDP
 
-from util import ip4_range
+from vpp_pom.util import ip4_range
 
 
 @six.add_metaclass(abc.ABCMeta)
diff --git a/test/template_classifier.py b/test/template_classifier.py
index 3ba985bbe..d848e6a15 100644
--- a/test/template_classifier.py
+++ b/test/template_classifier.py
@@ -12,7 +12,7 @@ from scapy.packet import Raw
 from scapy.layers.l2 import Ether
 from scapy.layers.inet import IP, UDP, TCP
 from scapy.layers.inet6 import IPv6
-from util import ppp
+from vpp_pom.util import ppp
 
 
 class TestClassifier(VppTestCase):
@@ -89,14 +89,14 @@ class TestClassifier(VppTestCase):
         """Run standard test teardown and acl related log."""
         if self.af is not None and not self.vpp_dead:
             if self.af == AF_INET:
-                self.logger.info(self.vapi.ppcli("show inacl type ip4"))
-                self.logger.info(self.vapi.ppcli("show outacl type ip4"))
+                self.logger.info(self.vclient.ppcli("show inacl type ip4"))
+                self.logger.info(self.vclient.ppcli("show outacl type ip4"))
             elif self.af == AF_INET6:
-                self.logger.info(self.vapi.ppcli("show inacl type ip6"))
-                self.logger.info(self.vapi.ppcli("show outacl type ip6"))
+                self.logger.info(self.vclient.ppcli("show inacl type ip6"))
+                self.logger.info(self.vclient.ppcli("show outacl type ip6"))
 
-            self.logger.info(self.vapi.cli("show classify table verbose"))
-            self.logger.info(self.vapi.cli("show ip fib"))
+            self.logger.info(self.vclient.cli("show classify table verbose"))
+            self.logger.info(self.vclient.cli("show ip fib"))
 
             acl_active_table = 'ip_out'
             if self.af == AF_INET6:
@@ -314,7 +314,7 @@ class TestClassifier(VppTestCase):
         :param int data_offset:
         """
         mask_match, mask_match_len = self._resolve_mask_match(mask)
-        r = self.vapi.classify_add_del_table(
+        r = self.vclient.classify_add_del_table(
             is_add=1,
             mask=mask_match,
             mask_len=mask_match_len,
@@ -337,7 +337,7 @@ class TestClassifier(VppTestCase):
             - create(1) or delete(0)
         """
         mask_match, mask_match_len = self._resolve_mask_match(match)
-        r = self.vapi.classify_add_del_session(
+        r = self.vclient.classify_add_del_session(
             is_add=is_add,
             table_index=table_index,
             match=mask_match,
@@ -357,17 +357,17 @@ class TestClassifier(VppTestCase):
         """
         r = None
         if self.af == AF_INET:
-            r = self.vapi.input_acl_set_interface(
+            r = self.vclient.input_acl_set_interface(
                 is_add,
                 intf.sw_if_index,
                 ip4_table_index=table_index)
         elif self.af == AF_INET6:
-            r = self.vapi.input_acl_set_interface(
+            r = self.vclient.input_acl_set_interface(
                 is_add,
                 intf.sw_if_index,
                 ip6_table_index=table_index)
         else:
-            r = self.vapi.input_acl_set_interface(
+            r = self.vclient.input_acl_set_interface(
                 is_add,
                 intf.sw_if_index,
                 l2_table_index=table_index)
@@ -383,17 +383,17 @@ class TestClassifier(VppTestCase):
         """
         r = None
         if self.af == AF_INET:
-            r = self.vapi.output_acl_set_interface(
+            r = self.vclient.output_acl_set_interface(
                 is_add,
                 intf.sw_if_index,
                 ip4_table_index=table_index)
         elif self.af == AF_INET6:
-            r = self.vapi.output_acl_set_interface(
+            r = self.vclient.output_acl_set_interface(
                 is_add,
                 intf.sw_if_index,
                 ip6_table_index=table_index)
         else:
-            r = self.vapi.output_acl_set_interface(
+            r = self.vclient.output_acl_set_interface(
                 is_add,
                 intf.sw_if_index,
                 l2_table_index=table_index)
@@ -406,7 +406,7 @@ class TestClassifier(VppTestCase):
 
         """
         addr_len = 24
-        self.vapi.ip_add_del_route(dst_address=intf.local_ip4,
+        self.vclient.ip_add_del_route(dst_address=intf.local_ip4,
                                    dst_address_length=addr_len,
                                    next_hop_address=intf.remote_ip4,
                                    table_id=self.pbr_vrfid, is_add=is_add)
@@ -418,7 +418,7 @@ class TestClassifier(VppTestCase):
         :param int vrf_id: The FIB table / VRF ID to be verified.
         :return: 1 if the FIB table / VRF ID is configured, otherwise return 0.
         """
-        ip_fib_dump = self.vapi.ip_route_dump(vrf_id, False)
+        ip_fib_dump = self.vclient.ip_route_dump(vrf_id, False)
         vrf_count = len(ip_fib_dump)
         if vrf_count == 0:
             self.logger.info("IPv4 VRF ID %d is not configured" % vrf_id)
diff --git a/test/template_ipsec.py b/test/template_ipsec.py
index 7bd0b9ec8..e36030412 100644
--- a/test/template_ipsec.py
+++ b/test/template_ipsec.py
@@ -11,7 +11,7 @@ from scapy.layers.inet6 import IPv6, ICMPv6EchoRequest, IPv6ExtHdrHopByHop, \
 
 
 from framework import VppTestCase, VppTestRunner
-from util import ppp, reassemble4, fragment_rfc791, fragment_rfc8200
+from vpp_pom.util import ppp, reassemble4, fragment_rfc791, fragment_rfc8200
 from vpp_papi import VppEnum
 
 
@@ -230,7 +230,7 @@ class TemplateIpsec(VppTestCase):
         self.unconfig_interfaces()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show hardware"))
+        self.logger.info(self.vclient.cli("show hardware"))
 
     def gen_encrypt_pkts(self, p, sa, sw_intf, src, dst, count=1,
                          payload_size=54):
@@ -261,7 +261,7 @@ class TemplateIpsec(VppTestCase):
 
 class IpsecTcp(object):
     def verify_tcp_checksum(self):
-        self.vapi.cli("test http server")
+        self.vclient.cli("test http server")
         p = self.params[socket.AF_INET]
         send = (Ether(src=self.tun_if.remote_mac, dst=self.tun_if.local_mac) /
                 p.scapy_tun_sa.encrypt(IP(src=p.remote_tun_if_host,
@@ -296,15 +296,15 @@ class IpsecTra4(object):
         else:
             hash_failed_node_name = ('/err/%s/Integrity check failed' %
                                      self.tra4_decrypt_node_name)
-        replay_count = self.statistics.get_err_counter(replay_node_name)
-        hash_failed_count = self.statistics.get_err_counter(
+        replay_count = self.vclient.statistics.get_err_counter(replay_node_name)
+        hash_failed_count = self.vclient.statistics.get_err_counter(
             hash_failed_node_name)
-        seq_cycle_count = self.statistics.get_err_counter(seq_cycle_node_name)
+        seq_cycle_count = self.vclient.statistics.get_err_counter(seq_cycle_node_name)
 
         if ESP == self.encryption_type:
             undersize_node_name = ('/err/%s/undersized packet' %
                                    self.tra4_decrypt_node_name)
-            undersize_count = self.statistics.get_err_counter(
+            undersize_count = self.vclient.statistics.get_err_counter(
                 undersize_node_name)
 
         #
@@ -456,9 +456,9 @@ class IpsecTra4(object):
         # causes the TX seq number to wrap; unless we're using extened sequence
         # numbers.
         #
-        self.vapi.cli("test ipsec sa %d seq 0xffffffff" % p.scapy_tra_sa_id)
-        self.logger.info(self.vapi.ppcli("show ipsec sa 0"))
-        self.logger.info(self.vapi.ppcli("show ipsec sa 1"))
+        self.vclient.cli("test ipsec sa %d seq 0xffffffff" % p.scapy_tra_sa_id)
+        self.logger.info(self.vclient.ppcli("show ipsec sa 0"))
+        self.logger.info(self.vclient.ppcli("show ipsec sa 1"))
 
         pkts = [(Ether(src=self.tra_if.remote_mac,
                        dst=self.tra_if.local_mac) /
@@ -560,14 +560,14 @@ class IpsecTra4(object):
                                             seq_cycle_count)
 
         # move the security-associations seq number on to the last we used
-        self.vapi.cli("test ipsec sa %d seq 0x15f" % p.scapy_tra_sa_id)
+        self.vclient.cli("test ipsec sa %d seq 0x15f" % p.scapy_tra_sa_id)
         p.scapy_tra_sa.seq_num = 351
         p.vpp_tra_sa.seq_num = 351
 
     def verify_tra_basic4(self, count=1, payload_size=54):
         """ ipsec v4 transport basic test """
-        self.vapi.cli("clear errors")
-        self.vapi.cli("clear ipsec sa")
+        self.vclient.cli("clear errors")
+        self.vclient.cli("clear ipsec sa")
         try:
             p = self.params[socket.AF_INET]
             send_pkts = self.gen_encrypt_pkts(p, p.scapy_tra_sa, self.tra_if,
@@ -587,8 +587,8 @@ class IpsecTra4(object):
                     self.logger.debug(ppp("Unexpected packet:", rx))
                     raise
         finally:
-            self.logger.info(self.vapi.ppcli("show error"))
-            self.logger.info(self.vapi.ppcli("show ipsec all"))
+            self.logger.info(self.vclient.ppcli("show error"))
+            self.logger.info(self.vclient.ppcli("show ipsec all"))
 
         pkts = p.tra_sa_in.get_stats()['packets']
         self.assertEqual(pkts, count,
@@ -621,8 +621,8 @@ class IpsecTra4Tests(IpsecTra4):
 class IpsecTra6(object):
     """ verify methods for Transport v6 """
     def verify_tra_basic6(self, count=1, payload_size=54):
-        self.vapi.cli("clear errors")
-        self.vapi.cli("clear ipsec sa")
+        self.vclient.cli("clear errors")
+        self.vclient.cli("clear ipsec sa")
         try:
             p = self.params[socket.AF_INET6]
             send_pkts = self.gen_encrypt_pkts6(p, p.scapy_tra_sa, self.tra_if,
@@ -642,8 +642,8 @@ class IpsecTra6(object):
                     self.logger.debug(ppp("Unexpected packet:", rx))
                     raise
         finally:
-            self.logger.info(self.vapi.ppcli("show error"))
-            self.logger.info(self.vapi.ppcli("show ipsec all"))
+            self.logger.info(self.vclient.ppcli("show error"))
+            self.logger.info(self.vclient.ppcli("show ipsec all"))
 
         pkts = p.tra_sa_in.get_stats()['packets']
         self.assertEqual(pkts, count,
@@ -849,9 +849,9 @@ class IpsecTun4(object):
             self.assert_packet_checksums_valid(pkt)
 
     def verify_tun_44(self, p, count=1, payload_size=64, n_rx=None):
-        self.vapi.cli("clear errors")
-        self.vapi.cli("clear ipsec counters")
-        self.vapi.cli("clear ipsec sa")
+        self.vclient.cli("clear errors")
+        self.vclient.cli("clear ipsec counters")
+        self.vclient.cli("clear ipsec sa")
         if not n_rx:
             n_rx = count
         try:
@@ -875,15 +875,15 @@ class IpsecTun4(object):
                 self.assertEqual(rx[IP].dst, p.tun_dst)
 
         finally:
-            self.logger.info(self.vapi.ppcli("show error"))
-            self.logger.info(self.vapi.ppcli("show ipsec all"))
+            self.logger.info(self.vclient.ppcli("show error"))
+            self.logger.info(self.vclient.ppcli("show ipsec all"))
 
-        self.logger.info(self.vapi.ppcli("show ipsec sa 0"))
-        self.logger.info(self.vapi.ppcli("show ipsec sa 4"))
+        self.logger.info(self.vclient.ppcli("show ipsec sa 0"))
+        self.logger.info(self.vclient.ppcli("show ipsec sa 4"))
         self.verify_counters4(p, count, n_rx)
 
     def verify_tun_dropped_44(self, p, count=1, payload_size=64, n_rx=None):
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
         if not n_rx:
             n_rx = count
         try:
@@ -899,12 +899,12 @@ class IpsecTun4(object):
             self.send_and_assert_no_replies(self.pg1, send_pkts)
 
         finally:
-            self.logger.info(self.vapi.ppcli("show error"))
-            self.logger.info(self.vapi.ppcli("show ipsec all"))
+            self.logger.info(self.vclient.ppcli("show error"))
+            self.logger.info(self.vclient.ppcli("show ipsec all"))
 
     def verify_tun_reass_44(self, p):
-        self.vapi.cli("clear errors")
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.cli("clear errors")
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.tun_if.sw_if_index, enable_ip4=True)
 
         try:
@@ -925,16 +925,16 @@ class IpsecTun4(object):
             self.verify_encrypted(p, p.vpp_tun_sa, recv_pkts)
 
         finally:
-            self.logger.info(self.vapi.ppcli("show error"))
-            self.logger.info(self.vapi.ppcli("show ipsec all"))
+            self.logger.info(self.vclient.ppcli("show error"))
+            self.logger.info(self.vclient.ppcli("show ipsec all"))
 
         self.verify_counters4(p, 1, 1)
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.tun_if.sw_if_index, enable_ip4=False)
 
     def verify_tun_64(self, p, count=1):
-        self.vapi.cli("clear errors")
-        self.vapi.cli("clear ipsec sa")
+        self.vclient.cli("clear errors")
+        self.vclient.cli("clear ipsec sa")
         try:
             send_pkts = self.gen_encrypt_pkts6(p, p.scapy_tun_sa, self.tun_if,
                                                src=p.remote_tun_if_host6,
@@ -965,8 +965,8 @@ class IpsecTun4(object):
                         pass
                     raise
         finally:
-            self.logger.info(self.vapi.ppcli("show error"))
-            self.logger.info(self.vapi.ppcli("show ipsec all"))
+            self.logger.info(self.vclient.ppcli("show error"))
+            self.logger.info(self.vclient.ppcli("show ipsec all"))
 
         self.verify_counters4(p, count)
 
@@ -1050,8 +1050,8 @@ class IpsecTun6(object):
                 raise
 
     def verify_drop_tun_66(self, p_in, count=1, payload_size=64):
-        self.vapi.cli("clear errors")
-        self.vapi.cli("clear ipsec sa")
+        self.vclient.cli("clear errors")
+        self.vclient.cli("clear ipsec sa")
 
         send_pkts = self.gen_encrypt_pkts6(p_in, p_in.scapy_tun_sa,
                                            self.tun_if,
@@ -1059,11 +1059,11 @@ class IpsecTun6(object):
                                            dst=self.pg1.remote_ip6,
                                            count=count)
         self.send_and_assert_no_replies(self.tun_if, send_pkts)
-        self.logger.info(self.vapi.cli("sh punt stats"))
+        self.logger.info(self.vclient.cli("sh punt stats"))
 
     def verify_tun_66(self, p_in, p_out=None, count=1, payload_size=64):
-        self.vapi.cli("clear errors")
-        self.vapi.cli("clear ipsec sa")
+        self.vclient.cli("clear errors")
+        self.vclient.cli("clear ipsec sa")
         if not p_out:
             p_out = p_in
         try:
@@ -1088,13 +1088,13 @@ class IpsecTun6(object):
                 self.assertEqual(rx[IPv6].dst, p_out.tun_dst)
 
         finally:
-            self.logger.info(self.vapi.ppcli("show error"))
-            self.logger.info(self.vapi.ppcli("show ipsec all"))
+            self.logger.info(self.vclient.ppcli("show error"))
+            self.logger.info(self.vclient.ppcli("show ipsec all"))
         self.verify_counters6(p_in, p_out, count)
 
     def verify_tun_reass_66(self, p):
-        self.vapi.cli("clear errors")
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.cli("clear errors")
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.tun_if.sw_if_index, enable_ip6=True)
 
         try:
@@ -1116,16 +1116,16 @@ class IpsecTun6(object):
                                              self.tun_if)
             self.verify_encrypted6(p, p.vpp_tun_sa, recv_pkts)
         finally:
-            self.logger.info(self.vapi.ppcli("show error"))
-            self.logger.info(self.vapi.ppcli("show ipsec all"))
+            self.logger.info(self.vclient.ppcli("show error"))
+            self.logger.info(self.vclient.ppcli("show ipsec all"))
         self.verify_counters6(p, p, 1)
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.tun_if.sw_if_index, enable_ip6=False)
 
     def verify_tun_46(self, p, count=1):
         """ ipsec 4o6 tunnel basic test """
-        self.vapi.cli("clear errors")
-        self.vapi.cli("clear ipsec sa")
+        self.vclient.cli("clear errors")
+        self.vclient.cli("clear ipsec sa")
         try:
             send_pkts = self.gen_encrypt_pkts(p, p.scapy_tun_sa, self.tun_if,
                                               src=p.remote_tun_if_host4,
@@ -1157,8 +1157,8 @@ class IpsecTun6(object):
                         pass
                     raise
         finally:
-            self.logger.info(self.vapi.ppcli("show error"))
-            self.logger.info(self.vapi.ppcli("show ipsec all"))
+            self.logger.info(self.vclient.ppcli("show error"))
+            self.logger.info(self.vclient.ppcli("show ipsec all"))
         self.verify_counters6(p, p, count)
 
 
diff --git a/test/test_bfd.py b/test/test_bfd.py
index f66f75a34..fe82e3250 100644
--- a/test/test_bfd.py
+++ b/test/test_bfd.py
@@ -19,17 +19,17 @@ from scapy.layers.inet6 import IPv6
 from scapy.layers.l2 import Ether, GRE
 from scapy.packet import Raw
 
-from bfd import VppBFDAuthKey, BFD, BFDAuthType, VppBFDUDPSession, \
+from vpp_pom.vpp_bfd import VppBFDAuthKey, BFD, BFDAuthType, VppBFDUDPSession, \
     BFDDiagCode, BFDState, BFD_vpp_echo
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from util import ppp
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_lo_interface import VppLoInterface
-from vpp_papi_provider import UnexpectedApiReturnValueError, \
+from vpp_pom.util import ppp
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_lo_interface import VppLoInterface
+from vpp_pom.vpp_papi_provider import UnexpectedApiReturnValueError, \
     CliFailedCommandError
-from vpp_pg_interface import CaptureTimeoutError, is_ipv6_misc
-from vpp_gre_interface import VppGreInterface
+from vpp_pom.vpp_pg_interface import CaptureTimeoutError, is_ipv6_misc
+from vpp_pom.vpp_gre_interface import VppGreInterface
 from vpp_papi import VppEnum
 
 USEC_IN_SEC = 1000000
@@ -49,7 +49,7 @@ class AuthKeyFactory(object):
         self._conf_key_ids[conf_key_id] = 1
         key = scapy.compat.raw(
             bytearray([randint(0, 255) for _ in range(randint(1, 20))]))
-        return VppBFDAuthKey(test=test, auth_type=auth_type,
+        return VppBFDAuthKey(vclient=test.vclient, auth_type=auth_type,
                              conf_key_id=conf_key_id, key=key)
 
 
@@ -62,7 +62,7 @@ class BFDAPITestCase(VppTestCase):
     @classmethod
     def setUpClass(cls):
         super(BFDAPITestCase, cls).setUpClass()
-        cls.vapi.cli("set log class bfd level debug")
+        cls.vclient.cli("set log class bfd level debug")
         try:
             cls.create_pg_interfaces(range(2))
             for i in cls.pg_interfaces:
@@ -84,7 +84,7 @@ class BFDAPITestCase(VppTestCase):
 
     def test_add_bfd(self):
         """ create a BFD session """
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4)
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4)
         session.add_vpp_config()
         self.logger.debug("Session state is %s", session.state)
         session.remove_vpp_config()
@@ -94,10 +94,10 @@ class BFDAPITestCase(VppTestCase):
 
     def test_double_add(self):
         """ create the same BFD session twice (negative case) """
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4)
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4)
         session.add_vpp_config()
 
-        with self.vapi.assert_negative_api_retval():
+        with self.vclient.assert_negative_api_retval():
             session.add_vpp_config()
 
         session.remove_vpp_config()
@@ -105,7 +105,7 @@ class BFDAPITestCase(VppTestCase):
     def test_add_bfd6(self):
         """ create IPv6 BFD session """
         session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip6, af=AF_INET6)
+            self.vclient, self.pg0, self.pg0.remote_ip6, af=AF_INET6)
         session.add_vpp_config()
         self.logger.debug("Session state is %s", session.state)
         session.remove_vpp_config()
@@ -115,7 +115,7 @@ class BFDAPITestCase(VppTestCase):
 
     def test_mod_bfd(self):
         """ modify BFD session parameters """
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4,
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4,
                                    desired_min_tx=50000,
                                    required_min_rx=10000,
                                    detect_mult=1)
@@ -182,7 +182,7 @@ class BFDAPITestCase(VppTestCase):
         """ create a BFD session (SHA1) """
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4,
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4,
                                    sha1_key=key)
         session.add_vpp_config()
         self.logger.debug("Session state is %s", session.state)
@@ -195,7 +195,7 @@ class BFDAPITestCase(VppTestCase):
         """ create the same BFD session twice (negative case) (SHA1) """
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4,
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4,
                                    sha1_key=key)
         session.add_vpp_config()
         with self.assertRaises(Exception):
@@ -204,7 +204,7 @@ class BFDAPITestCase(VppTestCase):
     def test_add_auth_nonexistent_key(self):
         """ create BFD session using non-existent SHA1 (negative case) """
         session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip4,
+            self.vclient, self.pg0, self.pg0.remote_ip4,
             sha1_key=self.factory.create_random_key(self))
         with self.assertRaises(Exception):
             session.add_vpp_config()
@@ -214,13 +214,13 @@ class BFDAPITestCase(VppTestCase):
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
         sessions = [
-            VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4,
+            VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4,
                              sha1_key=key),
-            VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip6,
+            VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip6,
                              sha1_key=key, af=AF_INET6),
-            VppBFDUDPSession(self, self.pg1, self.pg1.remote_ip4,
+            VppBFDUDPSession(self.vclient, self.pg1, self.pg1.remote_ip4,
                              sha1_key=key),
-            VppBFDUDPSession(self, self.pg1, self.pg1.remote_ip6,
+            VppBFDUDPSession(self.vclient, self.pg1, self.pg1.remote_ip6,
                              sha1_key=key, af=AF_INET6)]
         for s in sessions:
             s.add_vpp_config()
@@ -239,7 +239,7 @@ class BFDAPITestCase(VppTestCase):
         """ activate SHA1 authentication """
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4)
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4)
         session.add_vpp_config()
         session.activate_auth(key)
 
@@ -247,7 +247,7 @@ class BFDAPITestCase(VppTestCase):
         """ deactivate SHA1 authentication """
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4)
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4)
         session.add_vpp_config()
         session.activate_auth(key)
         session.deactivate_auth()
@@ -260,7 +260,7 @@ class BFDAPITestCase(VppTestCase):
             key2 = self.factory.create_random_key(self)
         key1.add_vpp_config()
         key2.add_vpp_config()
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4,
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4,
                                    sha1_key=key1)
         session.add_vpp_config()
         session.activate_auth(key2)
@@ -270,14 +270,14 @@ class BFDAPITestCase(VppTestCase):
         self.create_loopback_interfaces(1)
         self.loopback0 = self.lo_interfaces[0]
         self.loopback0.admin_up()
-        echo_source = self.vapi.bfd_udp_get_echo_source()
+        echo_source = self.vclient.bfd_udp_get_echo_source()
         self.assertFalse(echo_source.is_set)
         self.assertFalse(echo_source.have_usable_ip4)
         self.assertFalse(echo_source.have_usable_ip6)
 
-        self.vapi.bfd_udp_set_echo_source(
+        self.vclient.bfd_udp_set_echo_source(
             sw_if_index=self.loopback0.sw_if_index)
-        echo_source = self.vapi.bfd_udp_get_echo_source()
+        echo_source = self.vclient.bfd_udp_get_echo_source()
         self.assertTrue(echo_source.is_set)
         self.assertEqual(echo_source.sw_if_index, self.loopback0.sw_if_index)
         self.assertFalse(echo_source.have_usable_ip4)
@@ -286,7 +286,7 @@ class BFDAPITestCase(VppTestCase):
         self.loopback0.config_ip4()
         echo_ip4 = ipaddress.IPv4Address(int(ipaddress.IPv4Address(
             self.loopback0.local_ip4)) ^ 1).packed
-        echo_source = self.vapi.bfd_udp_get_echo_source()
+        echo_source = self.vclient.bfd_udp_get_echo_source()
         self.assertTrue(echo_source.is_set)
         self.assertEqual(echo_source.sw_if_index, self.loopback0.sw_if_index)
         self.assertTrue(echo_source.have_usable_ip4)
@@ -297,7 +297,7 @@ class BFDAPITestCase(VppTestCase):
         echo_ip6 = ipaddress.IPv6Address(int(ipaddress.IPv6Address(
             self.loopback0.local_ip6)) ^ 1).packed
 
-        echo_source = self.vapi.bfd_udp_get_echo_source()
+        echo_source = self.vclient.bfd_udp_get_echo_source()
         self.assertTrue(echo_source.is_set)
         self.assertEqual(echo_source.sw_if_index, self.loopback0.sw_if_index)
         self.assertTrue(echo_source.have_usable_ip4)
@@ -305,8 +305,8 @@ class BFDAPITestCase(VppTestCase):
         self.assertTrue(echo_source.have_usable_ip6)
         self.assertEqual(echo_source.ip6_addr.packed, echo_ip6)
 
-        self.vapi.bfd_udp_del_echo_source()
-        echo_source = self.vapi.bfd_udp_get_echo_source()
+        self.vclient.bfd_udp_del_echo_source()
+        echo_source = self.vclient.bfd_udp_get_echo_source()
         self.assertFalse(echo_source.is_set)
         self.assertFalse(echo_source.have_usable_ip4)
         self.assertFalse(echo_source.have_usable_ip6)
@@ -547,7 +547,7 @@ def bfd_session_up(test):
         test.test_session.inc_seq_num()
     test.test_session.send_packet()
     test.logger.info("BFD: Waiting for event")
-    e = test.vapi.wait_for_event(1, "bfd_udp_session_details")
+    e = test.vclient.wait_for_event(1, "bfd_udp_session_details")
     verify_event(test, e, expected_state=BFDState.up)
     test.logger.info("BFD: Session is Up")
     test.test_session.update(state=BFDState.up)
@@ -567,7 +567,7 @@ def bfd_session_down(test):
         test.test_session.inc_seq_num()
     test.test_session.send_packet()
     test.logger.info("BFD: Waiting for event")
-    e = test.vapi.wait_for_event(1, "bfd_udp_session_details")
+    e = test.vclient.wait_for_event(1, "bfd_udp_session_details")
     verify_event(test, e, expected_state=BFDState.down)
     test.logger.info("BFD: Session is Down")
     test.assert_equal(test.vpp_session.state, BFDState.down, BFDState)
@@ -692,7 +692,7 @@ class BFD4TestCase(VppTestCase):
     @classmethod
     def setUpClass(cls):
         super(BFD4TestCase, cls).setUpClass()
-        cls.vapi.cli("set log class bfd level debug")
+        cls.vclient.cli("set log class bfd level debug")
         try:
             cls.create_pg_interfaces([0])
             cls.create_loopback_interfaces(1)
@@ -715,22 +715,22 @@ class BFD4TestCase(VppTestCase):
     def setUp(self):
         super(BFD4TestCase, self).setUp()
         self.factory = AuthKeyFactory()
-        self.vapi.want_bfd_events()
+        self.vclient.want_bfd_events()
         self.pg0.enable_capture()
         try:
-            self.vpp_session = VppBFDUDPSession(self, self.pg0,
+            self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                                 self.pg0.remote_ip4)
             self.vpp_session.add_vpp_config()
             self.vpp_session.admin_up()
             self.test_session = BFDTestSession(self, self.pg0, AF_INET)
         except BaseException:
-            self.vapi.want_bfd_events(enable_disable=0)
+            self.vclient.want_bfd_events(enable_disable=0)
             raise
 
     def tearDown(self):
         if not self.vpp_dead:
-            self.vapi.want_bfd_events(enable_disable=0)
-        self.vapi.collect_events()  # clear the event queue
+            self.vclient.want_bfd_events(enable_disable=0)
+        self.vclient.collect_events()  # clear the event queue
         super(BFD4TestCase, self).tearDown()
 
     def test_session_up(self):
@@ -751,12 +751,12 @@ class BFD4TestCase(VppTestCase):
         self.test_session.update(your_discriminator=p[BFD].my_discriminator,
                                  state=BFDState.up)
         self.logger.info("BFD: Waiting for event")
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         verify_event(self, e, expected_state=BFDState.init)
         self.logger.info("BFD: Sending Up")
         self.test_session.send_packet()
         self.logger.info("BFD: Waiting for event")
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         verify_event(self, e, expected_state=BFDState.up)
         self.logger.info("BFD: Session is Up")
         self.test_session.update(state=BFDState.up)
@@ -774,7 +774,7 @@ class BFD4TestCase(VppTestCase):
         for dummy in range(self.test_session.detect_mult * 2):
             wait_for_bfd_packet(self)
             self.test_session.send_packet()
-        self.assert_equal(len(self.vapi.collect_events()), 0,
+        self.assert_equal(len(self.vclient.collect_events()), 0,
                           "number of bfd events")
 
     def test_slow_timer(self):
@@ -806,14 +806,14 @@ class BFD4TestCase(VppTestCase):
             except CaptureTimeoutError:
                 pass
         self.assert_equal(
-            len(self.vapi.collect_events()), 0, "number of bfd events")
+            len(self.vclient.collect_events()), 0, "number of bfd events")
         self.test_session.update(required_min_rx=300000)
         for dummy in range(3):
             self.test_session.send_packet()
             wait_for_bfd_packet(
                 self, timeout=self.test_session.required_min_rx / USEC_IN_SEC)
         self.assert_equal(
-            len(self.vapi.collect_events()), 0, "number of bfd events")
+            len(self.vclient.collect_events()), 0, "number of bfd events")
 
     def test_conn_down(self):
         """ verify session goes down after inactivity """
@@ -821,7 +821,7 @@ class BFD4TestCase(VppTestCase):
         detection_time = self.test_session.detect_mult *\
             self.vpp_session.required_min_rx / USEC_IN_SEC
         self.sleep(detection_time, "waiting for BFD session time-out")
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         verify_event(self, e, expected_state=BFDState.down)
 
     def test_peer_discr_reset_sess_down(self):
@@ -857,7 +857,7 @@ class BFD4TestCase(VppTestCase):
                 count += 1
             except CaptureTimeoutError:
                 pass
-            events = self.vapi.collect_events()
+            events = self.vclient.collect_events()
             if len(events) > 0:
                 verify_event(self, events[0], BFDState.down)
                 break
@@ -867,7 +867,7 @@ class BFD4TestCase(VppTestCase):
         """ immediately honor remote required min rx reduction """
         self.vpp_session.remove_vpp_config()
         self.vpp_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip4, desired_min_tx=10000)
+            self.vclient, self.pg0, self.pg0.remote_ip4, desired_min_tx=10000)
         self.pg0.enable_capture()
         self.vpp_session.add_vpp_config()
         self.test_session.update(desired_min_tx=1000000,
@@ -918,7 +918,7 @@ class BFD4TestCase(VppTestCase):
                 self.vpp_session.required_min_rx) / USEC_IN_SEC
         self.test_session.send_packet(final)
         time_mark = time.time()
-        e = self.vapi.wait_for_event(2 * timeout, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(2 * timeout, "bfd_udp_session_details")
         verify_event(self, e, expected_state=BFDState.down)
         time_to_event = time.time() - time_mark
         self.assert_in_range(time_to_event, .9 * timeout,
@@ -943,7 +943,7 @@ class BFD4TestCase(VppTestCase):
         self.sleep(0.8 * self.vpp_session.detect_mult *
                    old_required_min_rx / USEC_IN_SEC,
                    "wait before finishing poll sequence")
-        self.assert_equal(len(self.vapi.collect_events()), 0,
+        self.assert_equal(len(self.vclient.collect_events()), 0,
                           "number of bfd events")
         p = wait_for_bfd_packet(self)
         # poll bit needs to be set
@@ -957,7 +957,7 @@ class BFD4TestCase(VppTestCase):
         detection_time = self.test_session.detect_mult *\
             self.vpp_session.required_min_rx / USEC_IN_SEC
         before = time.time()
-        e = self.vapi.wait_for_event(
+        e = self.vclient.wait_for_event(
             2 * detection_time, "bfd_udp_session_details")
         after = time.time()
         self.assert_in_range(after - before,
@@ -1014,7 +1014,7 @@ class BFD4TestCase(VppTestCase):
         while time.time() < send_final_after:
             self.test_session.send_packet()
             p = wait_for_bfd_packet(self)
-            self.assert_equal(len(self.vapi.collect_events()), 0,
+            self.assert_equal(len(self.vclient.collect_events()), 0,
                               "number of bfd events")
             self.assert_equal(p[BFD].required_min_rx_interval,
                               self.vpp_session.required_min_rx,
@@ -1032,7 +1032,7 @@ class BFD4TestCase(VppTestCase):
         poll_no_2_started = False
         for dummy in range(2 * packet_count):
             p = wait_for_bfd_packet(self)
-            self.assert_equal(len(self.vapi.collect_events()), 0,
+            self.assert_equal(len(self.vclient.collect_events()), 0,
                               "number of bfd events")
             if "P" in p.sprintf("%BFD.flags%"):
                 poll_no_2_started = True
@@ -1086,7 +1086,7 @@ class BFD4TestCase(VppTestCase):
                 count += 1
             except CaptureTimeoutError:
                 pass
-        events = self.vapi.collect_events()
+        events = self.vclient.collect_events()
         for e in events:
             self.logger.error("Received unexpected event: %s", e)
         self.assert_equal(count, 0, "number of packets received")
@@ -1155,7 +1155,7 @@ class BFD4TestCase(VppTestCase):
                           self.vpp_session.required_min_rx,
                           "BFD required min rx interval")
         self.test_session.send_packet()
-        self.vapi.bfd_udp_set_echo_source(
+        self.vclient.bfd_udp_set_echo_source(
             sw_if_index=self.loopback0.sw_if_index)
         echo_seen = False
         # should be turned on - loopback echo packets
@@ -1188,7 +1188,7 @@ class BFD4TestCase(VppTestCase):
                 else:
                     raise Exception(ppp("Received unknown packet:", p))
 
-                self.assert_equal(len(self.vapi.collect_events()), 0,
+                self.assert_equal(len(self.vclient.collect_events()), 0,
                                   "number of bfd events")
             self.test_session.send_packet()
         self.assertTrue(echo_seen, "No echo packets received")
@@ -1200,7 +1200,7 @@ class BFD4TestCase(VppTestCase):
         self.test_session.send_packet()
         detection_time = self.test_session.detect_mult *\
             self.vpp_session.required_min_rx / USEC_IN_SEC
-        self.vapi.bfd_udp_set_echo_source(
+        self.vclient.bfd_udp_set_echo_source(
             sw_if_index=self.loopback0.sw_if_index)
         # echo function should be used now, but we will drop the echo packets
         verified_diag = False
@@ -1228,7 +1228,7 @@ class BFD4TestCase(VppTestCase):
                 else:
                     raise Exception(ppp("Received unknown packet:", p))
             self.test_session.send_packet()
-        events = self.vapi.collect_events()
+        events = self.vclient.collect_events()
         self.assert_equal(len(events), 1, "number of bfd events")
         self.assert_equal(events[0].state, BFDState.down, BFDState)
         self.assertTrue(verified_diag, "Incorrect diagnostics code received")
@@ -1238,7 +1238,7 @@ class BFD4TestCase(VppTestCase):
         bfd_session_up(self)
         self.test_session.update(required_min_echo_rx=150000)
         self.test_session.send_packet()
-        self.vapi.bfd_udp_set_echo_source(
+        self.vclient.bfd_udp_set_echo_source(
             sw_if_index=self.loopback0.sw_if_index)
         # wait for first echo packet
         while True:
@@ -1262,7 +1262,7 @@ class BFD4TestCase(VppTestCase):
             wait_for_bfd_packet(
                 self, pcap_time_min=time.time() - self.vpp_clock_offset)
             self.test_session.send_packet()
-            events = self.vapi.collect_events()
+            events = self.vclient.collect_events()
             self.assert_equal(len(events), 0, "number of bfd events")
 
     def test_echo_source_removed(self):
@@ -1270,7 +1270,7 @@ class BFD4TestCase(VppTestCase):
         bfd_session_up(self)
         self.test_session.update(required_min_echo_rx=150000)
         self.test_session.send_packet()
-        self.vapi.bfd_udp_set_echo_source(
+        self.vclient.bfd_udp_set_echo_source(
             sw_if_index=self.loopback0.sw_if_index)
         # wait for first echo packet
         while True:
@@ -1287,21 +1287,21 @@ class BFD4TestCase(VppTestCase):
                 pass
             else:
                 raise Exception(ppp("Received unknown packet:", p))
-        self.vapi.bfd_udp_del_echo_source()
+        self.vclient.bfd_udp_del_echo_source()
         self.test_session.send_packet()
         # echo packets shouldn't arrive anymore
         for dummy in range(5):
             wait_for_bfd_packet(
                 self, pcap_time_min=time.time() - self.vpp_clock_offset)
             self.test_session.send_packet()
-            events = self.vapi.collect_events()
+            events = self.vclient.collect_events()
             self.assert_equal(len(events), 0, "number of bfd events")
 
     def test_stale_echo(self):
         """ stale echo packets don't keep a session up """
         bfd_session_up(self)
         self.test_session.update(required_min_echo_rx=150000)
-        self.vapi.bfd_udp_set_echo_source(
+        self.vclient.bfd_udp_set_echo_source(
             sw_if_index=self.loopback0.sw_if_index)
         self.test_session.send_packet()
         # should be turned on - loopback echo packets
@@ -1340,7 +1340,7 @@ class BFD4TestCase(VppTestCase):
                     self.assert_equal(p[BFD].diag,
                                       BFDDiagCode.echo_function_failed,
                                       BFDDiagCode)
-                    events = self.vapi.collect_events()
+                    events = self.vclient.collect_events()
                     self.assert_equal(len(events), 1, "number of bfd events")
                     self.assert_equal(events[0].state, BFDState.down, BFDState)
                     timeout_ok = True
@@ -1354,7 +1354,7 @@ class BFD4TestCase(VppTestCase):
         """ echo packets with invalid checksum don't keep a session up """
         bfd_session_up(self)
         self.test_session.update(required_min_echo_rx=150000)
-        self.vapi.bfd_udp_set_echo_source(
+        self.vclient.bfd_udp_set_echo_source(
             sw_if_index=self.loopback0.sw_if_index)
         self.test_session.send_packet()
         # should be turned on - loopback echo packets
@@ -1390,7 +1390,7 @@ class BFD4TestCase(VppTestCase):
                     self.assert_equal(p[BFD].diag,
                                       BFDDiagCode.echo_function_failed,
                                       BFDDiagCode)
-                    events = self.vapi.collect_events()
+                    events = self.vclient.collect_events()
                     self.assert_equal(len(events), 1, "number of bfd events")
                     self.assert_equal(events[0].state, BFDState.down, BFDState)
                     timeout_ok = True
@@ -1405,7 +1405,7 @@ class BFD4TestCase(VppTestCase):
         bfd_session_up(self)
         self.vpp_session.admin_down()
         self.pg0.enable_capture()
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         verify_event(self, e, expected_state=BFDState.admin_down)
         for dummy in range(2):
             p = wait_for_bfd_packet(self)
@@ -1418,7 +1418,7 @@ class BFD4TestCase(VppTestCase):
             self.assert_equal(p[BFD].state, BFDState.admin_down, BFDState)
         self.vpp_session.admin_up()
         self.test_session.update(state=BFDState.down)
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         verify_event(self, e, expected_state=BFDState.down)
         p = wait_for_bfd_packet(
             self, pcap_time_min=time.time() - self.vpp_clock_offset)
@@ -1427,14 +1427,14 @@ class BFD4TestCase(VppTestCase):
         p = wait_for_bfd_packet(
             self, pcap_time_min=time.time() - self.vpp_clock_offset)
         self.assert_equal(p[BFD].state, BFDState.init, BFDState)
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         verify_event(self, e, expected_state=BFDState.init)
         self.test_session.update(state=BFDState.up)
         self.test_session.send_packet()
         p = wait_for_bfd_packet(
             self, pcap_time_min=time.time() - self.vpp_clock_offset)
         self.assert_equal(p[BFD].state, BFDState.up, BFDState)
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         verify_event(self, e, expected_state=BFDState.up)
 
     def test_config_change_remote_demand(self):
@@ -1468,7 +1468,7 @@ class BFD4TestCase(VppTestCase):
                 count += 1
             except CaptureTimeoutError:
                 pass
-        events = self.vapi.collect_events()
+        events = self.vclient.collect_events()
         for e in events:
             self.logger.error("Received unexpected event: %s", e)
         self.assert_equal(count, 0, "number of packets received")
@@ -1476,15 +1476,16 @@ class BFD4TestCase(VppTestCase):
 
     def test_intf_deleted(self):
         """ interface with bfd session deleted """
-        intf = VppLoInterface(self)
+        intf = VppLoInterface(self.vclient)
+        intf.add_vpp_config()
         intf.config_ip4()
         intf.admin_up()
         sw_if_index = intf.sw_if_index
-        vpp_session = VppBFDUDPSession(self, intf, intf.remote_ip4)
+        vpp_session = VppBFDUDPSession(self.vclient, intf, intf.remote_ip4)
         vpp_session.add_vpp_config()
         vpp_session.admin_up()
         intf.remove_vpp_config()
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         self.assert_equal(e.sw_if_index, sw_if_index, "sw_if_index")
         self.assertFalse(vpp_session.query_vpp_config())
 
@@ -1504,7 +1505,7 @@ class BFD6TestCase(VppTestCase):
     @classmethod
     def setUpClass(cls):
         super(BFD6TestCase, cls).setUpClass()
-        cls.vapi.cli("set log class bfd level debug")
+        cls.vclient.cli("set log class bfd level debug")
         try:
             cls.create_pg_interfaces([0])
             cls.pg0.config_ip6()
@@ -1527,24 +1528,24 @@ class BFD6TestCase(VppTestCase):
     def setUp(self):
         super(BFD6TestCase, self).setUp()
         self.factory = AuthKeyFactory()
-        self.vapi.want_bfd_events()
+        self.vclient.want_bfd_events()
         self.pg0.enable_capture()
         try:
-            self.vpp_session = VppBFDUDPSession(self, self.pg0,
+            self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                                 self.pg0.remote_ip6,
                                                 af=AF_INET6)
             self.vpp_session.add_vpp_config()
             self.vpp_session.admin_up()
             self.test_session = BFDTestSession(self, self.pg0, AF_INET6)
-            self.logger.debug(self.vapi.cli("show adj nbr"))
+            self.logger.debug(self.vclient.cli("show adj nbr"))
         except BaseException:
-            self.vapi.want_bfd_events(enable_disable=0)
+            self.vclient.want_bfd_events(enable_disable=0)
             raise
 
     def tearDown(self):
         if not self.vpp_dead:
-            self.vapi.want_bfd_events(enable_disable=0)
-        self.vapi.collect_events()  # clear the event queue
+            self.vclient.want_bfd_events(enable_disable=0)
+        self.vclient.collect_events()  # clear the event queue
         super(BFD6TestCase, self).tearDown()
 
     def test_session_up(self):
@@ -1565,12 +1566,12 @@ class BFD6TestCase(VppTestCase):
         self.test_session.update(your_discriminator=p[BFD].my_discriminator,
                                  state=BFDState.up)
         self.logger.info("BFD: Waiting for event")
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         verify_event(self, e, expected_state=BFDState.init)
         self.logger.info("BFD: Sending Up")
         self.test_session.send_packet()
         self.logger.info("BFD: Waiting for event")
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         verify_event(self, e, expected_state=BFDState.up)
         self.logger.info("BFD: Session is Up")
         self.test_session.update(state=BFDState.up)
@@ -1583,7 +1584,7 @@ class BFD6TestCase(VppTestCase):
         for dummy in range(self.test_session.detect_mult * 2):
             wait_for_bfd_packet(self)
             self.test_session.send_packet()
-        self.assert_equal(len(self.vapi.collect_events()), 0,
+        self.assert_equal(len(self.vclient.collect_events()), 0,
                           "number of bfd events")
         self.assert_equal(self.vpp_session.state, BFDState.up, BFDState)
 
@@ -1652,7 +1653,7 @@ class BFD6TestCase(VppTestCase):
                           self.vpp_session.required_min_rx,
                           "BFD required min rx interval")
         self.test_session.send_packet()
-        self.vapi.bfd_udp_set_echo_source(
+        self.vclient.bfd_udp_set_echo_source(
             sw_if_index=self.loopback0.sw_if_index)
         echo_seen = False
         # should be turned on - loopback echo packets
@@ -1685,23 +1686,24 @@ class BFD6TestCase(VppTestCase):
                 else:
                     raise Exception(ppp("Received unknown packet:", p))
 
-                self.assert_equal(len(self.vapi.collect_events()), 0,
+                self.assert_equal(len(self.vclient.collect_events()), 0,
                                   "number of bfd events")
             self.test_session.send_packet()
         self.assertTrue(echo_seen, "No echo packets received")
 
     def test_intf_deleted(self):
         """ interface with bfd session deleted """
-        intf = VppLoInterface(self)
+        intf = VppLoInterface(self.vclient)
+        intf.add_vpp_config()
         intf.config_ip6()
         intf.admin_up()
         sw_if_index = intf.sw_if_index
         vpp_session = VppBFDUDPSession(
-            self, intf, intf.remote_ip6, af=AF_INET6)
+            self.vclient, intf, intf.remote_ip6, af=AF_INET6)
         vpp_session.add_vpp_config()
         vpp_session.admin_up()
         intf.remove_vpp_config()
-        e = self.vapi.wait_for_event(1, "bfd_udp_session_details")
+        e = self.vclient.wait_for_event(1, "bfd_udp_session_details")
         self.assert_equal(e.sw_if_index, sw_if_index, "sw_if_index")
         self.assertFalse(vpp_session.query_vpp_config())
 
@@ -1728,7 +1730,7 @@ class BFDFIBTestCase(VppTestCase):
         super(BFDFIBTestCase, self).setUp()
         self.create_pg_interfaces(range(1))
 
-        self.vapi.want_bfd_events()
+        self.vclient.want_bfd_events()
         self.pg0.enable_capture()
 
         for i in self.pg_interfaces:
@@ -1738,7 +1740,7 @@ class BFDFIBTestCase(VppTestCase):
 
     def tearDown(self):
         if not self.vpp_dead:
-            self.vapi.want_bfd_events(enable_disable=False)
+            self.vclient.want_bfd_events(enable_disable=False)
 
         super(BFDFIBTestCase, self).tearDown()
 
@@ -1764,17 +1766,17 @@ class BFDFIBTestCase(VppTestCase):
 
         # A recursive and a non-recursive route via a next-hop that
         # will have a BFD session
-        ip_2001_s_64 = VppIpRoute(self, "2001::", 64,
+        ip_2001_s_64 = VppIpRoute(self.vclient, "2001::", 64,
                                   [VppRoutePath(self.pg0.remote_ip6,
                                                 self.pg0.sw_if_index)])
-        ip_2002_s_64 = VppIpRoute(self, "2002::", 64,
+        ip_2002_s_64 = VppIpRoute(self.vclient, "2002::", 64,
                                   [VppRoutePath(self.pg0.remote_ip6,
                                                 0xffffffff)])
         ip_2001_s_64.add_vpp_config()
         ip_2002_s_64.add_vpp_config()
 
         # bring the session up now the routes are present
-        self.vpp_session = VppBFDUDPSession(self,
+        self.vpp_session = VppBFDUDPSession(self.vclient,
                                             self.pg0,
                                             self.pg0.remote_ip6,
                                             af=AF_INET6)
@@ -1834,7 +1836,7 @@ class BFDTunTestCase(VppTestCase):
         super(BFDTunTestCase, self).setUp()
         self.create_pg_interfaces(range(1))
 
-        self.vapi.want_bfd_events()
+        self.vclient.want_bfd_events()
         self.pg0.enable_capture()
 
         for i in self.pg_interfaces:
@@ -1844,7 +1846,7 @@ class BFDTunTestCase(VppTestCase):
 
     def tearDown(self):
         if not self.vpp_dead:
-            self.vapi.want_bfd_events(enable_disable=0)
+            self.vclient.want_bfd_events(enable_disable=0)
 
         super(BFDTunTestCase, self).tearDown()
 
@@ -1859,7 +1861,7 @@ class BFDTunTestCase(VppTestCase):
         """ BFD-o-GRE  """
 
         # A GRE interface over which to run a BFD session
-        gre_if = VppGreInterface(self,
+        gre_if = VppGreInterface(self.vclient,
                                  self.pg0.local_ip4,
                                  self.pg0.remote_ip4)
         gre_if.add_vpp_config()
@@ -1867,7 +1869,7 @@ class BFDTunTestCase(VppTestCase):
         gre_if.config_ip4()
 
         # bring the session up now the routes are present
-        self.vpp_session = VppBFDUDPSession(self,
+        self.vpp_session = VppBFDUDPSession(self.vclient,
                                             gre_if,
                                             gre_if.remote_ip4,
                                             is_tunnel=True)
@@ -1911,7 +1913,7 @@ class BFDSHA1TestCase(VppTestCase):
     @classmethod
     def setUpClass(cls):
         super(BFDSHA1TestCase, cls).setUpClass()
-        cls.vapi.cli("set log class bfd level debug")
+        cls.vclient.cli("set log class bfd level debug")
         try:
             cls.create_pg_interfaces([0])
             cls.pg0.config_ip4()
@@ -1929,20 +1931,20 @@ class BFDSHA1TestCase(VppTestCase):
     def setUp(self):
         super(BFDSHA1TestCase, self).setUp()
         self.factory = AuthKeyFactory()
-        self.vapi.want_bfd_events()
+        self.vclient.want_bfd_events()
         self.pg0.enable_capture()
 
     def tearDown(self):
         if not self.vpp_dead:
-            self.vapi.want_bfd_events(enable_disable=False)
-        self.vapi.collect_events()  # clear the event queue
+            self.vclient.want_bfd_events(enable_disable=False)
+        self.vclient.collect_events()  # clear the event queue
         super(BFDSHA1TestCase, self).tearDown()
 
     def test_session_up(self):
         """ bring BFD session up """
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4,
                                             sha1_key=key)
         self.vpp_session.add_vpp_config()
@@ -1956,7 +1958,7 @@ class BFDSHA1TestCase(VppTestCase):
         """ hold BFD session up """
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4,
                                             sha1_key=key)
         self.vpp_session.add_vpp_config()
@@ -1975,7 +1977,7 @@ class BFDSHA1TestCase(VppTestCase):
         key = self.factory.create_random_key(
             self, BFDAuthType.meticulous_keyed_sha1)
         key.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4, sha1_key=key)
         self.vpp_session.add_vpp_config()
         self.vpp_session.admin_up()
@@ -1996,7 +1998,7 @@ class BFDSHA1TestCase(VppTestCase):
         key = self.factory.create_random_key(
             self, BFDAuthType.meticulous_keyed_sha1)
         key.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4, sha1_key=key)
         self.vpp_session.add_vpp_config()
         self.test_session = BFDTestSession(
@@ -2010,7 +2012,7 @@ class BFDSHA1TestCase(VppTestCase):
             self.test_session.send_packet()
             self.sleep(0.7 * self.vpp_session.required_min_rx / USEC_IN_SEC,
                        "time between bfd packets")
-        e = self.vapi.collect_events()
+        e = self.vclient.collect_events()
         # session should be down now, because the sequence numbers weren't
         # updated
         self.assert_equal(len(e), 1, "number of bfd events")
@@ -2058,7 +2060,7 @@ class BFDSHA1TestCase(VppTestCase):
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
         vpp_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip4, sha1_key=key)
+            self.vclient, self.pg0, self.pg0.remote_ip4, sha1_key=key)
         legitimate_test_session = BFDTestSession(
             self, self.pg0, AF_INET, sha1_key=key,
             bfd_key_id=vpp_session.bfd_key_id)
@@ -2072,7 +2074,7 @@ class BFDSHA1TestCase(VppTestCase):
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
         vpp_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip4, sha1_key=key)
+            self.vclient, self.pg0, self.pg0.remote_ip4, sha1_key=key)
         # pick a different random bfd key id
         x = randint(0, 255)
         while x == vpp_session.bfd_key_id:
@@ -2091,7 +2093,7 @@ class BFDSHA1TestCase(VppTestCase):
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
         vpp_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip4, sha1_key=key)
+            self.vclient, self.pg0, self.pg0.remote_ip4, sha1_key=key)
         legitimate_test_session = BFDTestSession(
             self, self.pg0, AF_INET, sha1_key=key,
             bfd_key_id=vpp_session.bfd_key_id)
@@ -2107,7 +2109,7 @@ class BFDSHA1TestCase(VppTestCase):
         key = self.factory.create_random_key(
             self, BFDAuthType.meticulous_keyed_sha1)
         key.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4, sha1_key=key)
         self.vpp_session.add_vpp_config()
         self.test_session = BFDTestSession(
@@ -2118,7 +2120,7 @@ class BFDSHA1TestCase(VppTestCase):
         detection_time = self.test_session.detect_mult *\
             self.vpp_session.required_min_rx / USEC_IN_SEC
         self.sleep(2 * detection_time, "simulating peer restart")
-        events = self.vapi.collect_events()
+        events = self.vclient.collect_events()
         self.assert_equal(len(events), 1, "number of bfd events")
         verify_event(self, events[0], expected_state=BFDState.down)
         self.test_session.update(state=BFDState.down)
@@ -2145,7 +2147,7 @@ class BFDAuthOnOffTestCase(VppTestCase):
     @classmethod
     def setUpClass(cls):
         super(BFDAuthOnOffTestCase, cls).setUpClass()
-        cls.vapi.cli("set log class bfd level debug")
+        cls.vclient.cli("set log class bfd level debug")
         try:
             cls.create_pg_interfaces([0])
             cls.pg0.config_ip4()
@@ -2163,20 +2165,20 @@ class BFDAuthOnOffTestCase(VppTestCase):
     def setUp(self):
         super(BFDAuthOnOffTestCase, self).setUp()
         self.factory = AuthKeyFactory()
-        self.vapi.want_bfd_events()
+        self.vclient.want_bfd_events()
         self.pg0.enable_capture()
 
     def tearDown(self):
         if not self.vpp_dead:
-            self.vapi.want_bfd_events(enable_disable=False)
-        self.vapi.collect_events()  # clear the event queue
+            self.vclient.want_bfd_events(enable_disable=False)
+        self.vclient.collect_events()  # clear the event queue
         super(BFDAuthOnOffTestCase, self).tearDown()
 
     def test_auth_on_immediate(self):
         """ turn auth on without disturbing session state (immediate) """
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4)
         self.vpp_session.add_vpp_config()
         self.test_session = BFDTestSession(self, self.pg0, AF_INET)
@@ -2193,21 +2195,21 @@ class BFDAuthOnOffTestCase(VppTestCase):
             self.assert_equal(p[BFD].state, BFDState.up, BFDState)
             self.test_session.send_packet()
         self.assert_equal(self.vpp_session.state, BFDState.up, BFDState)
-        self.assert_equal(len(self.vapi.collect_events()), 0,
+        self.assert_equal(len(self.vclient.collect_events()), 0,
                           "number of bfd events")
 
     def test_auth_off_immediate(self):
         """ turn auth off without disturbing session state (immediate) """
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4, sha1_key=key)
         self.vpp_session.add_vpp_config()
         self.test_session = BFDTestSession(
             self, self.pg0, AF_INET, sha1_key=key,
             bfd_key_id=self.vpp_session.bfd_key_id)
         bfd_session_up(self)
-        # self.vapi.want_bfd_events(enable_disable=0)
+        # self.vclient.want_bfd_events(enable_disable=0)
         for dummy in range(self.test_session.detect_mult * 2):
             p = wait_for_bfd_packet(self)
             self.assert_equal(p[BFD].state, BFDState.up, BFDState)
@@ -2222,7 +2224,7 @@ class BFDAuthOnOffTestCase(VppTestCase):
             self.test_session.inc_seq_num()
             self.test_session.send_packet()
         self.assert_equal(self.vpp_session.state, BFDState.up, BFDState)
-        self.assert_equal(len(self.vapi.collect_events()), 0,
+        self.assert_equal(len(self.vclient.collect_events()), 0,
                           "number of bfd events")
 
     def test_auth_change_key_immediate(self):
@@ -2231,7 +2233,7 @@ class BFDAuthOnOffTestCase(VppTestCase):
         key1.add_vpp_config()
         key2 = self.factory.create_random_key(self)
         key2.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4, sha1_key=key1)
         self.vpp_session.add_vpp_config()
         self.test_session = BFDTestSession(
@@ -2250,14 +2252,14 @@ class BFDAuthOnOffTestCase(VppTestCase):
             self.assert_equal(p[BFD].state, BFDState.up, BFDState)
             self.test_session.send_packet()
         self.assert_equal(self.vpp_session.state, BFDState.up, BFDState)
-        self.assert_equal(len(self.vapi.collect_events()), 0,
+        self.assert_equal(len(self.vclient.collect_events()), 0,
                           "number of bfd events")
 
     def test_auth_on_delayed(self):
         """ turn auth on without disturbing session state (delayed) """
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4)
         self.vpp_session.add_vpp_config()
         self.test_session = BFDTestSession(self, self.pg0, AF_INET)
@@ -2278,14 +2280,14 @@ class BFDAuthOnOffTestCase(VppTestCase):
             self.assert_equal(p[BFD].state, BFDState.up, BFDState)
             self.test_session.send_packet()
         self.assert_equal(self.vpp_session.state, BFDState.up, BFDState)
-        self.assert_equal(len(self.vapi.collect_events()), 0,
+        self.assert_equal(len(self.vclient.collect_events()), 0,
                           "number of bfd events")
 
     def test_auth_off_delayed(self):
         """ turn auth off without disturbing session state (delayed) """
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4, sha1_key=key)
         self.vpp_session.add_vpp_config()
         self.test_session = BFDTestSession(
@@ -2309,7 +2311,7 @@ class BFDAuthOnOffTestCase(VppTestCase):
             self.assert_equal(p[BFD].state, BFDState.up, BFDState)
             self.test_session.send_packet()
         self.assert_equal(self.vpp_session.state, BFDState.up, BFDState)
-        self.assert_equal(len(self.vapi.collect_events()), 0,
+        self.assert_equal(len(self.vclient.collect_events()), 0,
                           "number of bfd events")
 
     def test_auth_change_key_delayed(self):
@@ -2318,7 +2320,7 @@ class BFDAuthOnOffTestCase(VppTestCase):
         key1.add_vpp_config()
         key2 = self.factory.create_random_key(self)
         key2.add_vpp_config()
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip4, sha1_key=key1)
         self.vpp_session.add_vpp_config()
         self.vpp_session.admin_up()
@@ -2343,7 +2345,7 @@ class BFDAuthOnOffTestCase(VppTestCase):
             self.assert_equal(p[BFD].state, BFDState.up, BFDState)
             self.test_session.send_packet()
         self.assert_equal(self.vpp_session.state, BFDState.up, BFDState)
-        self.assert_equal(len(self.vapi.collect_events()), 0,
+        self.assert_equal(len(self.vclient.collect_events()), 0,
                           "number of bfd events")
 
 
@@ -2358,7 +2360,7 @@ class BFDCLITestCase(VppTestCase):
     @classmethod
     def setUpClass(cls):
         super(BFDCLITestCase, cls).setUpClass()
-        cls.vapi.cli("set log class bfd level debug")
+        cls.vclient.cli("set log class bfd level debug")
         try:
             cls.create_pg_interfaces((0,))
             cls.pg0.config_ip4()
@@ -2381,23 +2383,23 @@ class BFDCLITestCase(VppTestCase):
 
     def tearDown(self):
         try:
-            self.vapi.want_bfd_events(enable_disable=False)
+            self.vclient.want_bfd_events(enable_disable=False)
         except UnexpectedApiReturnValueError:
             # some tests aren't subscribed, so this is not an issue
             pass
-        self.vapi.collect_events()  # clear the event queue
+        self.vclient.collect_events()  # clear the event queue
         super(BFDCLITestCase, self).tearDown()
 
     def cli_verify_no_response(self, cli):
         """ execute a CLI, asserting that the response is empty """
-        self.assert_equal(self.vapi.cli(cli),
+        self.assert_equal(self.vclient.cli(cli),
                           "",
                           "CLI command response")
 
     def cli_verify_response(self, cli, expected):
         """ execute a CLI, asserting that the response matches expectation """
         try:
-            reply = self.vapi.cli(cli)
+            reply = self.vclient.cli(cli)
         except CliFailedCommandError as cli_error:
             reply = str(cli_error)
         self.assert_equal(reply.strip(),
@@ -2411,14 +2413,14 @@ class BFDCLITestCase(VppTestCase):
         k2 = self.factory.create_random_key(
             self, auth_type=BFDAuthType.meticulous_keyed_sha1)
         k2.add_vpp_config()
-        s1 = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4)
+        s1 = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4)
         s1.add_vpp_config()
-        s2 = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip6, af=AF_INET6,
+        s2 = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip6, af=AF_INET6,
                               sha1_key=k2)
         s2.add_vpp_config()
-        self.logger.info(self.vapi.ppcli("show bfd keys"))
-        self.logger.info(self.vapi.ppcli("show bfd sessions"))
-        self.logger.info(self.vapi.ppcli("show bfd"))
+        self.logger.info(self.vclient.ppcli("show bfd keys"))
+        self.logger.info(self.vclient.ppcli("show bfd sessions"))
+        self.logger.info(self.vclient.ppcli("show bfd"))
 
     def test_set_del_sha1_key(self):
         """ set/delete SHA1 auth key """
@@ -2430,12 +2432,12 @@ class BFDCLITestCase(VppTestCase):
                 "".join("{:02x}".format(scapy.compat.orb(c)) for c in k.key)))
         self.assertTrue(k.query_vpp_config())
         self.vpp_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip4, sha1_key=k)
+            self.vclient, self.pg0, self.pg0.remote_ip4, sha1_key=k)
         self.vpp_session.add_vpp_config()
         self.test_session = \
             BFDTestSession(self, self.pg0, AF_INET, sha1_key=k,
                            bfd_key_id=self.vpp_session.bfd_key_id)
-        self.vapi.want_bfd_events()
+        self.vclient.want_bfd_events()
         bfd_session_up(self)
         bfd_session_down(self)
         # try to replace the secret for the key - should fail because the key
@@ -2465,7 +2467,7 @@ class BFDCLITestCase(VppTestCase):
             (k.conf_key_id,
                 "".join("{:02x}".format(scapy.compat.orb(c)) for c in k.key)))
         self.assertTrue(k.query_vpp_config())
-        self.vpp_session = VppBFDUDPSession(self, self.pg0,
+        self.vpp_session = VppBFDUDPSession(self.vclient, self.pg0,
                                             self.pg0.remote_ip6, af=AF_INET6,
                                             sha1_key=k)
         self.vpp_session.add_vpp_config()
@@ -2473,7 +2475,7 @@ class BFDCLITestCase(VppTestCase):
         self.test_session = \
             BFDTestSession(self, self.pg0, AF_INET6, sha1_key=k,
                            bfd_key_id=self.vpp_session.bfd_key_id)
-        self.vapi.want_bfd_events()
+        self.vclient.want_bfd_events()
         bfd_session_up(self)
         bfd_session_down(self)
         # try to replace the secret for the key - should fail because the key
@@ -2496,7 +2498,7 @@ class BFDCLITestCase(VppTestCase):
     def test_add_mod_del_bfd_udp(self):
         """ create/modify/delete IPv4 BFD UDP session """
         vpp_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip4)
+            self.vclient, self.pg0, self.pg0.remote_ip4)
         self.registry.register(vpp_session, self.logger)
         cli_add_cmd = "bfd udp session add interface %s local-addr %s " \
             "peer-addr %s desired-min-tx %s required-min-rx %s "\
@@ -2513,7 +2515,7 @@ class BFDCLITestCase(VppTestCase):
             " failed, rv=-101:Duplicate BFD object")
         verify_bfd_session_config(self, vpp_session)
         mod_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip4,
+            self.vclient, self.pg0, self.pg0.remote_ip4,
             required_min_rx=2 * vpp_session.required_min_rx,
             desired_min_tx=3 * vpp_session.desired_min_tx,
             detect_mult=4 * vpp_session.detect_mult)
@@ -2537,7 +2539,7 @@ class BFDCLITestCase(VppTestCase):
     def test_add_mod_del_bfd_udp6(self):
         """ create/modify/delete IPv6 BFD UDP session """
         vpp_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip6, af=AF_INET6)
+            self.vclient, self.pg0, self.pg0.remote_ip6, af=AF_INET6)
         self.registry.register(vpp_session, self.logger)
         cli_add_cmd = "bfd udp session add interface %s local-addr %s " \
             "peer-addr %s desired-min-tx %s required-min-rx %s "\
@@ -2554,7 +2556,7 @@ class BFDCLITestCase(VppTestCase):
             " failed, rv=-101:Duplicate BFD object")
         verify_bfd_session_config(self, vpp_session)
         mod_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip6, af=AF_INET6,
+            self.vclient, self.pg0, self.pg0.remote_ip6, af=AF_INET6,
             required_min_rx=2 * vpp_session.required_min_rx,
             desired_min_tx=3 * vpp_session.desired_min_tx,
             detect_mult=4 * vpp_session.detect_mult)
@@ -2581,7 +2583,7 @@ class BFDCLITestCase(VppTestCase):
         key = self.factory.create_random_key(self)
         key.add_vpp_config()
         vpp_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip4, sha1_key=key)
+            self.vclient, self.pg0, self.pg0.remote_ip4, sha1_key=key)
         self.registry.register(vpp_session, self.logger)
         cli_add_cmd = "bfd udp session add interface %s local-addr %s " \
             "peer-addr %s desired-min-tx %s required-min-rx %s "\
@@ -2598,7 +2600,7 @@ class BFDCLITestCase(VppTestCase):
             " failed, rv=-101:Duplicate BFD object")
         verify_bfd_session_config(self, vpp_session)
         mod_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip4, sha1_key=key,
+            self.vclient, self.pg0, self.pg0.remote_ip4, sha1_key=key,
             bfd_key_id=vpp_session.bfd_key_id,
             required_min_rx=2 * vpp_session.required_min_rx,
             desired_min_tx=3 * vpp_session.desired_min_tx,
@@ -2627,7 +2629,7 @@ class BFDCLITestCase(VppTestCase):
             self, auth_type=BFDAuthType.meticulous_keyed_sha1)
         key.add_vpp_config()
         vpp_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip6, af=AF_INET6, sha1_key=key)
+            self.vclient, self.pg0, self.pg0.remote_ip6, af=AF_INET6, sha1_key=key)
         self.registry.register(vpp_session, self.logger)
         cli_add_cmd = "bfd udp session add interface %s local-addr %s " \
             "peer-addr %s desired-min-tx %s required-min-rx %s "\
@@ -2644,7 +2646,7 @@ class BFDCLITestCase(VppTestCase):
             " failed, rv=-101:Duplicate BFD object")
         verify_bfd_session_config(self, vpp_session)
         mod_session = VppBFDUDPSession(
-            self, self.pg0, self.pg0.remote_ip6, af=AF_INET6, sha1_key=key,
+            self.vclient, self.pg0, self.pg0.remote_ip6, af=AF_INET6, sha1_key=key,
             bfd_key_id=vpp_session.bfd_key_id,
             required_min_rx=2 * vpp_session.required_min_rx,
             desired_min_tx=3 * vpp_session.desired_min_tx,
@@ -2672,8 +2674,8 @@ class BFDCLITestCase(VppTestCase):
         key = self.factory.create_random_key(
             self, auth_type=BFDAuthType.meticulous_keyed_sha1)
         key.add_vpp_config()
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4)
-        auth_session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4,
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4)
+        auth_session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4,
                                         sha1_key=key)
         session.add_vpp_config()
         cli_activate = \
@@ -2699,8 +2701,8 @@ class BFDCLITestCase(VppTestCase):
         key = self.factory.create_random_key(
             self, auth_type=BFDAuthType.meticulous_keyed_sha1)
         key.add_vpp_config()
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4)
-        auth_session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4,
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4)
+        auth_session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4,
                                         sha1_key=key)
         session.add_vpp_config()
         cli_activate = \
@@ -2723,7 +2725,7 @@ class BFDCLITestCase(VppTestCase):
 
     def test_admin_up_down(self):
         """ put session admin-up and admin-down """
-        session = VppBFDUDPSession(self, self.pg0, self.pg0.remote_ip4)
+        session = VppBFDUDPSession(self.vclient, self.pg0, self.pg0.remote_ip4)
         session.add_vpp_config()
         cli_down = \
             "bfd udp session set-flags admin down interface %s local-addr %s "\
diff --git a/test/test_bier.py b/test/test_bier.py
index 2f649bbde..a6406210a 100644
--- a/test/test_bier.py
+++ b/test/test_bier.py
@@ -3,14 +3,14 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, \
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, \
     VppMplsTable, VppIpMRoute, VppMRoutePath, VppIpTable, \
     MPLS_LABEL_INVALID, \
     VppMplsLabel, FibPathProto, FibPathType
-from vpp_bier import BIER_HDR_PAYLOAD, VppBierImp, VppBierDispEntry, \
+from vpp_pom.vpp_bier import BIER_HDR_PAYLOAD, VppBierImp, VppBierDispEntry, \
     VppBierDispTable, VppBierTable, VppBierTableID, VppBierRoute
-from vpp_udp_encap import VppUdpEncap
+from vpp_pom.vpp_udp_encap import VppUdpEncap
 from vpp_papi import VppEnum
 
 import scapy.compat
@@ -29,7 +29,7 @@ class TestBFIB(VppTestCase):
 
     def test_bfib(self):
         """ BFIB Unit Tests """
-        error = self.vapi.cli("test bier")
+        error = self.vclient.cli("test bier")
 
         if error:
             self.logger.critical(error)
@@ -47,11 +47,11 @@ class TestBier(VppTestCase):
 
         # create the default MPLS table
         self.tables = []
-        tbl = VppMplsTable(self, 0)
+        tbl = VppMplsTable(self.vclient, 0)
         tbl.add_vpp_config()
         self.tables.append(tbl)
 
-        tbl = VppIpTable(self, 10)
+        tbl = VppIpTable(self.vclient, 10)
         tbl.add_vpp_config()
         self.tables.append(tbl)
 
@@ -79,7 +79,7 @@ class TestBier(VppTestCase):
         # Add a BIER table for sub-domain 0, set 0, and BSL 256
         #
         bti = VppBierTableID(0, 0, hdr_len_id)
-        bt = VppBierTable(self, bti, 77)
+        bt = VppBierTable(self.vclient, bti, 77)
         bt.add_vpp_config()
 
         #
@@ -106,14 +106,14 @@ class TestBier(VppTestCase):
         for i in range(1, max_bp+1):
             nh = "10.0.%d.%d" % (i / 255, i % 255)
             nh_routes.append(
-                VppIpRoute(self, nh, 32,
+                VppIpRoute(self.vclient, nh, 32,
                            [VppRoutePath(self.pg1.remote_ip4,
                                          self.pg1.sw_if_index,
                                          labels=[VppMplsLabel(2000+i)])]))
             nh_routes[-1].add_vpp_config()
 
             bier_routes.append(
-                VppBierRoute(self, bti, i,
+                VppBierRoute(self.vclient, bti, i,
                              [VppRoutePath(nh, 0xffffffff,
                                            labels=[VppMplsLabel(100+i)])]))
             bier_routes[-1].add_vpp_config()
@@ -214,7 +214,7 @@ class TestBier(VppTestCase):
         # Add a BIER table for sub-domain 0, set 0, and BSL 256
         #
         bti = VppBierTableID(0, 0, BIERLength.BIER_LEN_64)
-        bt = VppBierTable(self, bti, 77)
+        bt = VppBierTable(self.vclient, bti, 77)
         bt.add_vpp_config()
 
         #
@@ -243,14 +243,14 @@ class TestBier(VppTestCase):
 
         for nh in nhs:
             ipr = VppIpRoute(
-                self, nh['ip'], 32,
+                self.vclient, nh['ip'], 32,
                 [VppRoutePath(self.pg1.remote_ip4,
                               self.pg1.sw_if_index,
                               labels=[VppMplsLabel(nh['label'])])])
             ipr.add_vpp_config()
 
         bier_route = VppBierRoute(
-            self, bti, 1,
+            self.vclient, bti, 1,
             [VppRoutePath(nhs[0]['ip'], 0xffffffff,
                           labels=[VppMplsLabel(101)]),
              VppRoutePath(nhs[1]['ip'], 0xffffffff,
@@ -312,7 +312,7 @@ class TestBier(VppTestCase):
         # Add a BIER table for sub-domain 0, set 0, and BSL 256
         #
         bti = VppBierTableID(0, 0, BIERLength.BIER_LEN_256)
-        bt = VppBierTable(self, bti, 77)
+        bt = VppBierTable(self.vclient, bti, 77)
         bt.add_vpp_config()
 
         #
@@ -320,21 +320,21 @@ class TestBier(VppTestCase):
         #
         nh1 = "10.0.0.1"
         nh2 = "10.0.0.2"
-        ip_route_1 = VppIpRoute(self, nh1, 32,
+        ip_route_1 = VppIpRoute(self.vclient, nh1, 32,
                                 [VppRoutePath(self.pg1.remote_ip4,
                                               self.pg1.sw_if_index,
                                               labels=[VppMplsLabel(2001)])])
-        ip_route_2 = VppIpRoute(self, nh2, 32,
+        ip_route_2 = VppIpRoute(self.vclient, nh2, 32,
                                 [VppRoutePath(self.pg1.remote_ip4,
                                               self.pg1.sw_if_index,
                                               labels=[VppMplsLabel(2002)])])
         ip_route_1.add_vpp_config()
         ip_route_2.add_vpp_config()
 
-        bier_route_1 = VppBierRoute(self, bti, 1,
+        bier_route_1 = VppBierRoute(self.vclient, bti, 1,
                                     [VppRoutePath(nh1, 0xffffffff,
                                                   labels=[VppMplsLabel(101)])])
-        bier_route_2 = VppBierRoute(self, bti, 2,
+        bier_route_2 = VppBierRoute(self.vclient, bti, 2,
                                     [VppRoutePath(nh2, 0xffffffff,
                                                   labels=[VppMplsLabel(102)])])
         bier_route_1.add_vpp_config()
@@ -343,14 +343,14 @@ class TestBier(VppTestCase):
         #
         # An imposition object with both bit-positions set
         #
-        bi = VppBierImp(self, bti, 333, scapy.compat.chb(0x3) * 32)
+        bi = VppBierImp(self.vclient, bti, 333, scapy.compat.chb(0x3) * 32)
         bi.add_vpp_config()
 
         #
         # Add a multicast route that will forward into the BIER doamin
         #
         route_ing_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -411,20 +411,20 @@ class TestBier(VppTestCase):
         # Add a BIER table for sub-domain 0, set 0, and BSL 256
         #
         bti = VppBierTableID(0, 0, BIERLength.BIER_LEN_256)
-        bt = VppBierTable(self, bti, 77)
+        bt = VppBierTable(self.vclient, bti, 77)
         bt.add_vpp_config()
 
         #
         # disposition table
         #
-        bdt = VppBierDispTable(self, 8)
+        bdt = VppBierDispTable(self.vclient, 8)
         bdt.add_vpp_config()
 
         #
         # BIER route in table that's for-us
         #
         bier_route_1 = VppBierRoute(
-            self, bti, 1,
+            self.vclient, bti, 1,
             [VppRoutePath("0.0.0.0",
                           0xffffffff,
                           proto=FibPathProto.FIB_PATH_NH_PROTO_BIER,
@@ -434,7 +434,7 @@ class TestBier(VppTestCase):
         #
         # An entry in the disposition table
         #
-        bier_de_1 = VppBierDispEntry(self, bdt.id, 99,
+        bier_de_1 = VppBierDispEntry(self.vclient, bdt.id, 99,
                                      BIER_HDR_PAYLOAD.BIER_HDR_PROTO_IPV4,
                                      FibPathProto.FIB_PATH_NH_PROTO_BIER,
                                      "0.0.0.0", 0, rpf_id=8192)
@@ -444,7 +444,7 @@ class TestBier(VppTestCase):
         # A multicast route to forward post BIER disposition
         #
         route_eg_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -484,7 +484,7 @@ class TestBier(VppTestCase):
         #
         # Add the default route to the disposition table
         #
-        bier_de_2 = VppBierDispEntry(self, bdt.id, 0,
+        bier_de_2 = VppBierDispEntry(self.vclient, bdt.id, 0,
                                      BIER_HDR_PAYLOAD.BIER_HDR_PROTO_IPV4,
                                      FibPathProto.FIB_PATH_NH_PROTO_BIER,
                                      "0.0.0.0", 0, rpf_id=8192)
@@ -499,11 +499,11 @@ class TestBier(VppTestCase):
         # A multicast route to forward post BIER disposition that needs
         # a check against sending back into the BIER core
         #
-        bi = VppBierImp(self, bti, 333, scapy.compat.chb(0x3) * 32)
+        bi = VppBierImp(self.vclient, bti, 333, scapy.compat.chb(0x3) * 32)
         bi.add_vpp_config()
 
         route_eg_232_1_1_2 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.2", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -537,7 +537,7 @@ class TestBier(VppTestCase):
         # Add a BIER table for sub-domain 0, set 0, and BSL 256
         #
         bti = VppBierTableID(0, 0, hdr_len_id)
-        bt = VppBierTable(self, bti, 77)
+        bt = VppBierTable(self.vclient, bti, 77)
         bt.add_vpp_config()
 
         lowest = [b'\0'] * (n_bytes)
@@ -548,16 +548,16 @@ class TestBier(VppTestCase):
         #
         # Impostion Sets bit strings
         #
-        bi_low = VppBierImp(self, bti, 333, lowest)
+        bi_low = VppBierImp(self.vclient, bti, 333, lowest)
         bi_low.add_vpp_config()
-        bi_high = VppBierImp(self, bti, 334, highest)
+        bi_high = VppBierImp(self.vclient, bti, 334, highest)
         bi_high.add_vpp_config()
 
         #
         # Add a multicast route that will forward into the BIER doamin
         #
         route_ing_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -570,7 +570,7 @@ class TestBier(VppTestCase):
                                  bier_imp=bi_low.bi_index)])
         route_ing_232_1_1_1.add_vpp_config()
         route_ing_232_1_1_2 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.2", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -586,7 +586,7 @@ class TestBier(VppTestCase):
         #
         # disposition table 8
         #
-        bdt = VppBierDispTable(self, 8)
+        bdt = VppBierDispTable(self.vclient, 8)
         bdt.add_vpp_config()
 
         #
@@ -594,14 +594,14 @@ class TestBier(VppTestCase):
         # disp table 8.
         #
         bier_route_1 = VppBierRoute(
-            self, bti, 1,
+            self.vclient, bti, 1,
             [VppRoutePath("0.0.0.0",
                           0xffffffff,
                           proto=FibPathProto.FIB_PATH_NH_PROTO_BIER,
                           nh_table_id=8)])
         bier_route_1.add_vpp_config()
         bier_route_max = VppBierRoute(
-            self, bti, max_bp,
+            self.vclient, bti, max_bp,
             [VppRoutePath("0.0.0.0",
                           0xffffffff,
                           proto=FibPathProto.FIB_PATH_NH_PROTO_BIER,
@@ -612,12 +612,12 @@ class TestBier(VppTestCase):
         # An entry in the disposition table for sender 333
         #  lookup in VRF 10
         #
-        bier_de_1 = VppBierDispEntry(self, bdt.id, 333,
+        bier_de_1 = VppBierDispEntry(self.vclient, bdt.id, 333,
                                      BIER_HDR_PAYLOAD.BIER_HDR_PROTO_IPV4,
                                      FibPathProto.FIB_PATH_NH_PROTO_BIER,
                                      "0.0.0.0", 10, rpf_id=8192)
         bier_de_1.add_vpp_config()
-        bier_de_1 = VppBierDispEntry(self, bdt.id, 334,
+        bier_de_1 = VppBierDispEntry(self.vclient, bdt.id, 334,
                                      BIER_HDR_PAYLOAD.BIER_HDR_PROTO_IPV4,
                                      FibPathProto.FIB_PATH_NH_PROTO_BIER,
                                      "0.0.0.0", 10, rpf_id=8193)
@@ -628,7 +628,7 @@ class TestBier(VppTestCase):
         # post-disposition
         #
         route_eg_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -638,7 +638,7 @@ class TestBier(VppTestCase):
         route_eg_232_1_1_1.add_vpp_config()
         route_eg_232_1_1_1.update_rpf_id(8192)
         route_eg_232_1_1_2 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.2", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -708,27 +708,27 @@ class TestBier(VppTestCase):
         # Add a BIER table for sub-domain 1, set 0, and BSL 256
         #
         bti = VppBierTableID(1, 0, BIERLength.BIER_LEN_256)
-        bt = VppBierTable(self, bti, 77)
+        bt = VppBierTable(self.vclient, bti, 77)
         bt.add_vpp_config()
 
         #
         # 1 bit positions via 1 next hops
         #
         nh1 = "10.0.0.1"
-        ip_route = VppIpRoute(self, nh1, 32,
+        ip_route = VppIpRoute(self.vclient, nh1, 32,
                               [VppRoutePath(self.pg1.remote_ip4,
                                             self.pg1.sw_if_index,
                                             labels=[VppMplsLabel(2001)])])
         ip_route.add_vpp_config()
 
-        udp_encap = VppUdpEncap(self,
+        udp_encap = VppUdpEncap(self.vclient,
                                 self.pg0.local_ip4,
                                 nh1,
                                 330, 8138)
         udp_encap.add_vpp_config()
 
         bier_route = VppBierRoute(
-            self, bti, 1,
+            self.vclient, bti, 1,
             [VppRoutePath("0.0.0.0",
                           0xFFFFFFFF,
                           type=FibPathType.FIB_PATH_TYPE_UDP_ENCAP,
@@ -740,16 +740,16 @@ class TestBier(VppTestCase):
         # only use the second, but creating 2 tests with a non-zero
         # value index in the route add
         #
-        bi = VppBierImp(self, bti, 333, scapy.compat.chb(0xff) * 32)
+        bi = VppBierImp(self.vclient, bti, 333, scapy.compat.chb(0xff) * 32)
         bi.add_vpp_config()
-        bi2 = VppBierImp(self, bti, 334, scapy.compat.chb(0xff) * 32)
+        bi2 = VppBierImp(self.vclient, bti, 334, scapy.compat.chb(0xff) * 32)
         bi2.add_vpp_config()
 
         #
         # Add a multicast route that will forward into the BIER doamin
         #
         route_ing_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -799,20 +799,20 @@ class TestBier(VppTestCase):
         # Add a BIER table for sub-domain 0, set 0, and BSL 256
         #
         bti = VppBierTableID(1, 0, BIERLength.BIER_LEN_256)
-        bt = VppBierTable(self, bti, MPLS_LABEL_INVALID)
+        bt = VppBierTable(self.vclient, bti, MPLS_LABEL_INVALID)
         bt.add_vpp_config()
 
         #
         # disposition table
         #
-        bdt = VppBierDispTable(self, 8)
+        bdt = VppBierDispTable(self.vclient, 8)
         bdt.add_vpp_config()
 
         #
         # BIER route in table that's for-us
         #
         bier_route_1 = VppBierRoute(
-            self, bti, 1,
+            self.vclient, bti, 1,
             [VppRoutePath("0.0.0.0",
                           0xffffffff,
                           proto=FibPathProto.FIB_PATH_NH_PROTO_BIER,
@@ -822,7 +822,7 @@ class TestBier(VppTestCase):
         #
         # An entry in the disposition table
         #
-        bier_de_1 = VppBierDispEntry(self, bdt.id, 99,
+        bier_de_1 = VppBierDispEntry(self.vclient, bdt.id, 99,
                                      BIER_HDR_PAYLOAD.BIER_HDR_PROTO_IPV4,
                                      FibPathProto.FIB_PATH_NH_PROTO_BIER,
                                      "0.0.0.0", 0, rpf_id=8192)
@@ -832,7 +832,7 @@ class TestBier(VppTestCase):
         # A multicast route to forward post BIER disposition
         #
         route_eg_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
diff --git a/test/test_bihash.py b/test/test_bihash.py
index 019929a0a..aef143c40 100644
--- a/test/test_bihash.py
+++ b/test/test_bihash.py
@@ -3,7 +3,6 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner, running_gcov_tests
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 class TestBihash(VppTestCase):
@@ -25,7 +24,7 @@ class TestBihash(VppTestCase):
 
     def test_bihash_unittest(self):
         """ Bihash Add/Del Test """
-        error = self.vapi.cli("test bihash careful 0 verbose 0")
+        error = self.vclient.cli("test bihash careful 0 verbose 0")
 
         if error:
             self.logger.critical(error)
@@ -34,7 +33,7 @@ class TestBihash(VppTestCase):
     def test_bihash_thread(self):
         """ Bihash Thread Test """
 
-        error = self.vapi.cli("test bihash threads 2 nbuckets" +
+        error = self.vclient.cli("test bihash threads 2 nbuckets" +
                               " 64000 careful 0 verbose 0")
 
         if error:
@@ -44,7 +43,7 @@ class TestBihash(VppTestCase):
     def test_bihash_vec64(self):
         """ Bihash vec64 Test """
 
-        error = self.vapi.cli("test bihash vec64")
+        error = self.vclient.cli("test bihash vec64")
 
         if error:
             self.logger.critical(error)
@@ -54,14 +53,14 @@ class TestBihash(VppTestCase):
     def test_bihash_coverage(self):
         """ Improve Code Coverage """
 
-        error = self.vapi.cli("test bihash nitems 10 ncycles 3" +
+        error = self.vclient.cli("test bihash nitems 10 ncycles 3" +
                               "search 2 careful 1 verbose 2 non-random-keys")
 
         if error:
             self.logger.critical(error)
             self.assertNotIn('failed', error)
 
-        error = self.vapi.cli("test bihash nitems 10 nbuckets 1 ncycles 3" +
+        error = self.vclient.cli("test bihash nitems 10 nbuckets 1 ncycles 3" +
                               "search 2 careful 1 verbose 2 non-random-keys")
         if error:
             self.logger.critical(error)
diff --git a/test/test_bond.py b/test/test_bond.py
index 5df86ae5b..cfcb21da7 100644
--- a/test/test_bond.py
+++ b/test/test_bond.py
@@ -8,7 +8,7 @@ from scapy.layers.l2 import Ether
 from scapy.layers.inet import IP, UDP
 
 from framework import VppTestCase, VppTestRunner
-from vpp_bond_interface import VppBondInterface
+from vpp_pom.vpp_bond_interface import VppBondInterface
 from vpp_papi import MACAddress, VppEnum
 
 
@@ -43,7 +43,7 @@ class TestBondInterface(VppTestCase):
         super(TestBondInterface, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show interface"))
+        self.logger.info(self.vclient.ppcli("show interface"))
 
     def test_bond_traffic(self):
         """ Bond traffic test """
@@ -64,7 +64,7 @@ class TestBondInterface(VppTestCase):
         bond0_mac = "02:fe:38:30:59:3c"
         mac = MACAddress(bond0_mac).packed
         bond0 = VppBondInterface(
-            self,
+            self.vclient,
             mode=VppEnum.vl_api_bond_mode_t.BOND_API_MODE_XOR,
             lb=VppEnum.vl_api_bond_lb_algo_t.BOND_API_LB_ALGO_L34,
             numa_only=0,
@@ -72,7 +72,7 @@ class TestBondInterface(VppTestCase):
             mac_address=mac)
         bond0.add_vpp_config()
         bond0.admin_up()
-        self.vapi.sw_interface_add_del_address(
+        self.vclient.sw_interface_add_del_address(
             sw_if_index=bond0.sw_if_index,
             prefix="10.10.10.1/24")
 
@@ -81,9 +81,9 @@ class TestBondInterface(VppTestCase):
         self.pg3.config_ip4()
         self.pg3.resolve_arp()
 
-        self.logger.info(self.vapi.cli("show interface"))
-        self.logger.info(self.vapi.cli("show interface address"))
-        self.logger.info(self.vapi.cli("show ip neighbors"))
+        self.logger.info(self.vclient.cli("show interface"))
+        self.logger.info(self.vclient.cli("show interface address"))
+        self.logger.info(self.vclient.cli("show ip neighbors"))
 
         # add member pg0 and pg1 to BondEthernet0
         self.logger.info("bond add member interface pg0 to BondEthernet0")
@@ -92,7 +92,7 @@ class TestBondInterface(VppTestCase):
         bond0.add_member_vpp_bond_interface(sw_if_index=self.pg1.sw_if_index)
 
         # verify both members in BondEthernet0
-        if_dump = self.vapi.sw_member_interface_dump(bond0.sw_if_index)
+        if_dump = self.vclient.sw_member_interface_dump(bond0.sw_if_index)
         self.assertTrue(self.pg0.is_interface_config_in_dump(if_dump))
         self.assertTrue(self.pg1.is_interface_config_in_dump(if_dump))
 
@@ -117,13 +117,13 @@ class TestBondInterface(VppTestCase):
 
         # set up the static arp entries pointing to the BondEthernet0 interface
         # so that it does not try to resolve the ip address
-        self.logger.info(self.vapi.cli(
+        self.logger.info(self.vclient.cli(
             "set ip neighbor static BondEthernet0 10.10.10.12 abcd.abcd.0002"))
-        self.logger.info(self.vapi.cli(
+        self.logger.info(self.vclient.cli(
             "set ip neighbor static BondEthernet0 10.10.10.11 abcd.abcd.0004"))
 
         # clear the interface counters
-        self.logger.info(self.vapi.cli("clear interfaces"))
+        self.logger.info(self.vclient.cli("clear interfaces"))
 
         self.pg_start()
 
@@ -132,7 +132,7 @@ class TestBondInterface(VppTestCase):
         # verify counters
 
         # BondEthernet0 tx bytes = 284
-        intfs = self.vapi.cli("show interface BondEthernet0").split("\n")
+        intfs = self.vclient.cli("show interface BondEthernet0").split("\n")
         found = 0
         for intf in intfs:
             if "tx bytes" in intf and "284" in intf:
@@ -140,7 +140,7 @@ class TestBondInterface(VppTestCase):
         self.assertEqual(found, 1)
 
         # BondEthernet0 tx bytes = 284
-        intfs = self.vapi.cli("show interface BondEthernet0").split("\n")
+        intfs = self.vclient.cli("show interface BondEthernet0").split("\n")
         found = 0
         for intf in intfs:
             if "tx bytes" in intf and "284" in intf:
@@ -148,7 +148,7 @@ class TestBondInterface(VppTestCase):
         self.assertEqual(found, 1)
 
         # pg2 rx bytes = 142
-        intfs = self.vapi.cli("show interface pg2").split("\n")
+        intfs = self.vclient.cli("show interface pg2").split("\n")
         found = 0
         for intf in intfs:
             if "rx bytes" in intf and "142" in intf:
@@ -156,7 +156,7 @@ class TestBondInterface(VppTestCase):
         self.assertEqual(found, 1)
 
         # pg3 rx bytes = 142
-        intfs = self.vapi.cli("show interface pg3").split("\n")
+        intfs = self.vclient.cli("show interface pg3").split("\n")
         found = 0
         for intf in intfs:
             if "rx bytes" in intf and "142" in intf:
@@ -171,7 +171,7 @@ class TestBondInterface(VppTestCase):
         # create interface (BondEthernet0) and set bond mode to LACP
         self.logger.info("create bond")
         bond0 = VppBondInterface(
-            self,
+            self.vclient,
             mode=VppEnum.vl_api_bond_mode_t.BOND_API_MODE_LACP,
             enable_gso=0)
         bond0.add_vpp_config()
@@ -180,7 +180,7 @@ class TestBondInterface(VppTestCase):
         # verify that interfaces can be added as_member and detached two times
         for i in range(2):
             # verify pg0 and pg1 not in BondEthernet0
-            if_dump = self.vapi.sw_member_interface_dump(bond0.sw_if_index)
+            if_dump = self.vclient.sw_member_interface_dump(bond0.sw_if_index)
             self.assertFalse(self.pg0.is_interface_config_in_dump(if_dump))
             self.assertFalse(self.pg1.is_interface_config_in_dump(if_dump))
 
@@ -197,7 +197,7 @@ class TestBondInterface(VppTestCase):
                 is_passive=0,
                 is_long_timeout=0)
             # verify both members in BondEthernet0
-            if_dump = self.vapi.sw_member_interface_dump(bond0.sw_if_index)
+            if_dump = self.vclient.sw_member_interface_dump(bond0.sw_if_index)
             self.assertTrue(self.pg0.is_interface_config_in_dump(if_dump))
             self.assertTrue(self.pg1.is_interface_config_in_dump(if_dump))
 
@@ -206,7 +206,7 @@ class TestBondInterface(VppTestCase):
             bond0.detach_vpp_bond_interface(sw_if_index=self.pg0.sw_if_index)
 
             # verify pg0 is not in BondEthernet0, but pg1 is
-            if_dump = self.vapi.sw_member_interface_dump(bond0.sw_if_index)
+            if_dump = self.vclient.sw_member_interface_dump(bond0.sw_if_index)
             self.assertFalse(self.pg0.is_interface_config_in_dump(if_dump))
             self.assertTrue(self.pg1.is_interface_config_in_dump(if_dump))
 
@@ -215,7 +215,7 @@ class TestBondInterface(VppTestCase):
             bond0.detach_vpp_bond_interface(sw_if_index=self.pg1.sw_if_index)
 
             # verify pg0 and pg1 not in BondEthernet0
-            if_dump = self.vapi.sw_member_interface_dump(bond0.sw_if_index)
+            if_dump = self.vclient.sw_member_interface_dump(bond0.sw_if_index)
             self.assertFalse(self.pg0.is_interface_config_in_dump(if_dump))
             self.assertFalse(self.pg1.is_interface_config_in_dump(if_dump))
 
@@ -227,23 +227,23 @@ class TestBondInterface(VppTestCase):
 
         # create interface 1 (BondEthernet0)
         bond0 = VppBondInterface(
-            self, mode=VppEnum.vl_api_bond_mode_t.BOND_API_MODE_LACP)
+            self.vclient, mode=VppEnum.vl_api_bond_mode_t.BOND_API_MODE_LACP)
         bond0.add_vpp_config()
         bond0.admin_up()
 
         # create interface 2 (BondEthernet1)
         bond1 = VppBondInterface(
-            self, mode=VppEnum.vl_api_bond_mode_t.BOND_API_MODE_XOR)
+            self.vclient, mode=VppEnum.vl_api_bond_mode_t.BOND_API_MODE_XOR)
         bond1.add_vpp_config()
         bond1.admin_up()
 
         # verify both interfaces in the show
-        ifs = self.vapi.cli("show interface")
+        ifs = self.vclient.cli("show interface")
         self.assertIn('BondEthernet0', ifs)
         self.assertIn('BondEthernet1', ifs)
 
         # verify they are in the dump also
-        if_dump = self.vapi.sw_bond_interface_dump(sw_if_index=0xFFFFFFFF)
+        if_dump = self.vclient.sw_bond_interface_dump(sw_if_index=0xFFFFFFFF)
         self.assertTrue(bond0.is_interface_config_in_dump(if_dump))
         self.assertTrue(bond1.is_interface_config_in_dump(if_dump))
 
@@ -253,7 +253,7 @@ class TestBondInterface(VppTestCase):
 
         self.logger.info("Verifying BondEthernet1 is deleted")
 
-        ifs = self.vapi.cli("show interface")
+        ifs = self.vclient.cli("show interface")
         # verify BondEthernet0 still in the show
         self.assertIn('BondEthernet0', ifs)
 
@@ -261,7 +261,7 @@ class TestBondInterface(VppTestCase):
         self.assertNotIn('BondEthernet1', ifs)
 
         # verify BondEthernet1 is not in the dump
-        if_dump = self.vapi.sw_bond_interface_dump(sw_if_index=0xFFFFFFFF)
+        if_dump = self.vclient.sw_bond_interface_dump(sw_if_index=0xFFFFFFFF)
         self.assertFalse(bond1.is_interface_config_in_dump(if_dump))
 
         # verify BondEthernet0 is still in the dump
@@ -274,11 +274,11 @@ class TestBondInterface(VppTestCase):
         self.logger.info("Verifying BondEthernet0 is deleted")
 
         # verify BondEthernet0 not in the show
-        ifs = self.vapi.cli("show interface")
+        ifs = self.vclient.cli("show interface")
         self.assertNotIn('BondEthernet0', ifs)
 
         # verify BondEthernet0 is not in the dump
-        if_dump = self.vapi.sw_bond_interface_dump(
+        if_dump = self.vclient.sw_bond_interface_dump(
             sw_if_index=bond0.sw_if_index)
         self.assertFalse(bond0.is_interface_config_in_dump(if_dump))
 
@@ -292,7 +292,7 @@ class TestBondInterface(VppTestCase):
         # create interface 1 (BondEthernet0)
         self.logger.info("Create bond interface")
         # use round-robin mode to avoid negotiation required by LACP
-        bond0 = VppBondInterface(self,
+        bond0 = VppBondInterface(self.vclient,
                                  mode=bond_modes.BOND_API_MODE_ROUND_ROBIN)
         bond0.add_vpp_config()
 
diff --git a/test/test_buffers.py b/test/test_buffers.py
index f50f05c60..3890932d3 100644
--- a/test/test_buffers.py
+++ b/test/test_buffers.py
@@ -22,7 +22,7 @@ class TestBuffers(VppTestCase):
 
     def test_linearize(self):
         """ Chained Buffer Linearization """
-        error = self.vapi.cli("test chained-buffer-linearization")
+        error = self.vclient.cli("test chained-buffer-linearization")
 
         if error:
             self.logger.critical(error)
diff --git a/test/test_classifier.py b/test/test_classifier.py
index 11c0985f4..a83b0f8c4 100644
--- a/test/test_classifier.py
+++ b/test/test_classifier.py
@@ -9,10 +9,10 @@ from framework import VppTestCase, VppTestRunner
 from scapy.packet import Raw
 from scapy.layers.l2 import Ether
 from scapy.layers.inet import IP, UDP, TCP
-from util import ppp
+from vpp_pom.util import ppp
 from template_classifier import TestClassifier
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_ip import INVALID_INDEX
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip import INVALID_INDEX
 
 
 # Tests split to different test case classes because of issue reported in
@@ -537,7 +537,7 @@ class TestClassifierPBR(TestClassifier):
             self.build_ip_match(src_ip=self.pg0.remote_ip4),
             pbr_option, self.pbr_vrfid)
         self.assertTrue(self.verify_vrf(self.pbr_vrfid))
-        r = VppIpRoute(self, self.pg3.local_ip4, 24,
+        r = VppIpRoute(self.vclient, self.pg3.local_ip4, 24,
                        [VppRoutePath(self.pg3.remote_ip4,
                                      INVALID_INDEX)],
                        table_id=self.pbr_vrfid)
diff --git a/test/test_classifier_ip6.py b/test/test_classifier_ip6.py
index 211374b5e..f94e331b5 100644
--- a/test/test_classifier_ip6.py
+++ b/test/test_classifier_ip6.py
@@ -9,7 +9,7 @@ from framework import VppTestCase, VppTestRunner
 from scapy.packet import Raw
 from scapy.layers.l2 import Ether
 from scapy.layers.inet6 import IPv6, UDP, TCP
-from util import ppp
+from vpp_pom.util import ppp
 from template_classifier import TestClassifier
 
 
diff --git a/test/test_cli.py b/test/test_cli.py
index a1ffbac81..f29b4fe82 100644
--- a/test/test_cli.py
+++ b/test/test_cli.py
@@ -17,7 +17,7 @@ class TestCLI(VppTestCase):
     @classmethod
     def setUpClass(cls):
         # using the framework default
-        cls.vapi_response_timeout = 5
+        cls.vclient_response_timeout = 5
         super(TestCLI, cls).setUpClass()
 
     @classmethod
@@ -32,21 +32,21 @@ class TestCLI(VppTestCase):
 
     def test_cli_retval(self):
         """ CLI inband retval """
-        rv = self.vapi.papi.cli_inband(cmd='this command does not exist')
+        rv = self.vclient.papi.cli_inband(cmd='this command does not exist')
         self.assertNotEqual(rv.retval, 0)
 
-        rv = self.vapi.papi.cli_inband(cmd='show version')
+        rv = self.vclient.papi.cli_inband(cmd='show version')
         self.assertEqual(rv.retval, 0)
 
     def test_long_cli_delay(self):
         """ Test that VppApiClient raises VppTransportShmemIOError if timeout."""  # noqa
         with self.assertRaises(
                 vpp_transport_shmem.VppTransportShmemIOError) as ctx:
-            rv = self.vapi.papi.cli_inband(cmd='wait 10')
+            rv = self.vclient.papi.cli_inband(cmd='wait 10')
 
     def test_long_cli_delay_override(self):
         """ Test per-command _timeout option."""  # noqa
-        rv = self.vapi.papi.cli_inband(cmd='wait 10', _timeout=15)
+        rv = self.vclient.papi.cli_inband(cmd='wait 10', _timeout=15)
         self.assertEqual(rv.retval, 0)
 
 
@@ -55,9 +55,9 @@ class TestCLIExtendedVapiTimeout(VppTestCase):
 
     @classmethod
     def setUpClass(cls):
-        cls.vapi_response_timeout = 15
+        cls.vclient_response_timeout = 15
         cls.__doc__ = " CLI Test Case w/ Extended (%ssec) Vapi Timeout " \
-                      % cls.vapi_response_timeout
+                      % cls.vclient_response_timeout
         super(TestCLIExtendedVapiTimeout, cls).setUpClass()
 
     @classmethod
@@ -72,13 +72,14 @@ class TestCLIExtendedVapiTimeout(VppTestCase):
 
     def test_long_cli_delay(self):
         """ Test that delayed result returns with extended timeout."""
-        wait_secs = self.vapi_response_timeout - 1
+        self.vclient_response_timeout = 10
+        wait_secs = self.vclient_response_timeout - 1
 
         # get vpp time as float
-        start = self.vapi.papi.show_vpe_system_time(
+        start = self.vclient.papi.show_vpe_system_time(
             _no_type_conversion=True).vpe_system_time
-        rv = self.vapi.papi.cli_inband(cmd='wait %s' % wait_secs)
-        now = self.vapi.papi.show_vpe_system_time(
+        rv = self.vclient.papi.cli_inband(cmd='wait %s' % wait_secs)
+        now = self.vclient.papi.show_vpe_system_time(
             _no_type_conversion=True).vpe_system_time
 
         # assume that the overhead of the measurement is not more that .5 sec.
diff --git a/test/test_container.py b/test/test_container.py
index 474805333..2f0061f49 100644
--- a/test/test_container.py
+++ b/test/test_container.py
@@ -13,7 +13,7 @@ from scapy.layers.inet6 import ICMPv6EchoReply, IPv6ExtHdrRouting
 from scapy.layers.inet6 import IPv6ExtHdrFragment
 from pprint import pprint
 from random import randint
-from util import L4_Conn
+from vpp_pom.util import L4_Conn
 
 
 class Conn(L4_Conn):
@@ -47,7 +47,7 @@ class ContainerIntegrationTestCase(VppTestCase):
         super(ContainerIntegrationTestCase, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show ip neighbors"))
+        self.logger.info(self.vclient.cli("show ip neighbors"))
 
     def run_basic_conn_test(self, af, acl_side):
         """ Basic connectivity test """
@@ -101,9 +101,9 @@ class ContainerIntegrationTestCase(VppTestCase):
         for i in range(2):
             for addr in [self.pg_interfaces[i].remote_ip4,
                          self.pg_interfaces[i].remote_ip6]:
-                self.vapi.ppcli("ip container " + addr + " " +
+                self.vclient.ppcli("ip container " + addr + " " +
                                 self.pg_interfaces[i].name)
-                self.vapi.ppcli("stn rule address " + addr +
+                self.vclient.ppcli("stn rule address " + addr +
                                 " interface " + self.pg_interfaces[i].name)
 
     def test_0210_basic_conn_test(self):
@@ -119,10 +119,10 @@ class ContainerIntegrationTestCase(VppTestCase):
         for i in range(2):
             for addr in [self.pg_interfaces[i].remote_ip4,
                          self.pg_interfaces[i].remote_ip6]:
-                self.vapi.ppcli("ip container " + addr + " " +
+                self.vclient.ppcli("ip container " + addr + " " +
                                 self.pg_interfaces[i].name +
                                 " del")
-                self.vapi.ppcli("stn rule address " + addr +
+                self.vclient.ppcli("stn rule address " + addr +
                                 " interface " + self.pg_interfaces[i].name +
                                 " del")
 
diff --git a/test/test_crypto.py b/test/test_crypto.py
index aa62dba1b..938eacce2 100644
--- a/test/test_crypto.py
+++ b/test/test_crypto.py
@@ -18,7 +18,7 @@ class TestCrypto(VppTestCase):
 
     def test_crypto(self):
         """ Crypto Unit Tests """
-        error = self.vapi.cli("test crypto")
+        error = self.vclient.cli("test crypto")
 
         if error:
             self.logger.critical(error)
diff --git a/test/test_dvr.py b/test/test_dvr.py
index 8531b8553..397cd10a5 100644
--- a/test/test_dvr.py
+++ b/test/test_dvr.py
@@ -2,10 +2,10 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpRoute, VppRoutePath, FibPathType
-from vpp_l2 import L2_PORT_TYPE
-from vpp_sub_interface import L2_VTR_OP, VppDot1QSubint
-from vpp_acl import AclRule, VppAcl, VppAclInterface
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, FibPathType
+from vpp_pom.vpp_l2 import L2_PORT_TYPE
+from vpp_pom.vpp_sub_interface import L2_VTR_OP, VppDot1QSubint
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl, VppAclInterface
 
 from scapy.packet import Raw
 from scapy.layers.l2 import Ether, Dot1Q
@@ -88,30 +88,30 @@ class TestDVR(VppTestCase):
         #
         # Two sub-interfaces so we can test VLAN tag push/pop
         #
-        sub_if_on_pg2 = VppDot1QSubint(self, self.pg2, 92)
-        sub_if_on_pg3 = VppDot1QSubint(self, self.pg3, 93)
+        sub_if_on_pg2 = VppDot1QSubint(self.vclient, self.pg2, 92)
+        sub_if_on_pg3 = VppDot1QSubint(self.vclient, self.pg3, 93)
         sub_if_on_pg2.admin_up()
         sub_if_on_pg3.admin_up()
 
         #
         # Put all the interfaces into a new bridge domain
         #
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg0.sw_if_index, bd_id=1)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg1.sw_if_index, bd_id=1)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=sub_if_on_pg2.sw_if_index, bd_id=1)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=sub_if_on_pg3.sw_if_index, bd_id=1)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.loop0.sw_if_index, bd_id=1,
             port_type=L2_PORT_TYPE.BVI)
 
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=sub_if_on_pg2.sw_if_index, vtr_op=L2_VTR_OP.L2_POP_1,
             push_dot1q=92)
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=sub_if_on_pg3.sw_if_index, vtr_op=L2_VTR_OP.L2_POP_1,
             push_dot1q=93)
 
@@ -119,7 +119,7 @@ class TestDVR(VppTestCase):
         # Add routes to bridge the traffic via a tagged an nontagged interface
         #
         route_no_tag = VppIpRoute(
-            self, ip_non_tag_bridged, 32,
+            self.vclient, ip_non_tag_bridged, 32,
             [VppRoutePath("0.0.0.0",
                           self.pg1.sw_if_index,
                           type=FibPathType.FIB_PATH_TYPE_DVR)])
@@ -137,7 +137,7 @@ class TestDVR(VppTestCase):
         # Add routes to bridge the traffic via a tagged interface
         #
         route_with_tag = VppIpRoute(
-            self, ip_tag_bridged, 32,
+            self.vclient, ip_tag_bridged, 32,
             [VppRoutePath("0.0.0.0",
                           sub_if_on_pg3.sw_if_index,
                           type=FibPathType.FIB_PATH_TYPE_DVR)])
@@ -191,13 +191,13 @@ class TestDVR(VppTestCase):
         rule_1 = AclRule(is_permit=0, proto=17, ports=1234,
                          src_prefix=IPv4Network((any_src_addr, 32)),
                          dst_prefix=IPv4Network((ip_non_tag_bridged, 32)))
-        acl = VppAcl(self, rules=[rule_1])
+        acl = VppAcl(self.vclient, rules=[rule_1])
         acl.add_vpp_config()
 
         #
         # Apply the ACL on the output interface
         #
-        acl_if1 = VppAclInterface(self, sw_if_index=self.pg1.sw_if_index,
+        acl_if1 = VppAclInterface(self.vclient, sw_if_index=self.pg1.sw_if_index,
                                   n_input=0, acls=[acl])
         acl_if1.add_vpp_config()
 
@@ -213,22 +213,22 @@ class TestDVR(VppTestCase):
         acl_if1.remove_vpp_config()
         acl.remove_vpp_config()
 
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg0.sw_if_index, bd_id=1, enable=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg1.sw_if_index, bd_id=1, enable=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=sub_if_on_pg2.sw_if_index, bd_id=1, enable=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=sub_if_on_pg3.sw_if_index, bd_id=1, enable=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.loop0.sw_if_index, bd_id=1,
             port_type=L2_PORT_TYPE.BVI, enable=0)
 
         #
         # Do a FIB dump to make sure the paths are correctly reported as DVR
         #
-        routes = self.vapi.ip_route_dump(0)
+        routes = self.vclient.ip_route_dump(0)
 
         for r in routes:
             if (ip_tag_bridged == str(r.route.prefix.network_address)):
@@ -294,26 +294,26 @@ class TestDVR(VppTestCase):
         #
         # A couple of sub-interfaces for tags
         #
-        sub_if_on_pg2 = VppDot1QSubint(self, self.pg2, 92)
-        sub_if_on_pg3 = VppDot1QSubint(self, self.pg3, 93)
+        sub_if_on_pg2 = VppDot1QSubint(self.vclient, self.pg2, 92)
+        sub_if_on_pg3 = VppDot1QSubint(self.vclient, self.pg3, 93)
         sub_if_on_pg2.admin_up()
         sub_if_on_pg3.admin_up()
 
         #
         # Put all the interfaces into a new bridge domain
         #
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg0.sw_if_index, bd_id=1)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg1.sw_if_index, bd_id=1)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=sub_if_on_pg2.sw_if_index, bd_id=1)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=sub_if_on_pg3.sw_if_index, bd_id=1)
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=sub_if_on_pg2.sw_if_index, vtr_op=L2_VTR_OP.L2_POP_1,
             push_dot1q=92)
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=sub_if_on_pg3.sw_if_index, vtr_op=L2_VTR_OP.L2_POP_1,
             push_dot1q=93)
 
@@ -321,19 +321,19 @@ class TestDVR(VppTestCase):
         # Disable UU flooding, learning and ARP termination. makes this test
         # easier as unicast packets are dropped if not extracted.
         #
-        self.vapi.bridge_flags(bd_id=1, is_set=0,
+        self.vclient.bridge_flags(bd_id=1, is_set=0,
                                flags=(1 << 0) | (1 << 3) | (1 << 4))
 
         #
         # Add a DVR route to steer traffic at L3
         #
         route_1 = VppIpRoute(
-            self, "1.1.1.1", 32,
+            self.vclient, "1.1.1.1", 32,
             [VppRoutePath("0.0.0.0",
                           self.pg1.sw_if_index,
                           type=FibPathType.FIB_PATH_TYPE_DVR)])
         route_2 = VppIpRoute(
-            self, "1.1.1.2", 32,
+            self.vclient, "1.1.1.2", 32,
             [VppRoutePath("0.0.0.0",
                           sub_if_on_pg2.sw_if_index,
                           type=FibPathType.FIB_PATH_TYPE_DVR)])
@@ -348,10 +348,10 @@ class TestDVR(VppTestCase):
         #
         # Enable L3 extraction on pgs
         #
-        self.vapi.l2_emulation(self.pg0.sw_if_index)
-        self.vapi.l2_emulation(self.pg1.sw_if_index)
-        self.vapi.l2_emulation(sub_if_on_pg2.sw_if_index)
-        self.vapi.l2_emulation(sub_if_on_pg3.sw_if_index)
+        self.vclient.l2_emulation(self.pg0.sw_if_index)
+        self.vclient.l2_emulation(self.pg1.sw_if_index)
+        self.vclient.l2_emulation(sub_if_on_pg2.sw_if_index)
+        self.vclient.l2_emulation(sub_if_on_pg3.sw_if_index)
 
         #
         # now we expect the packet forward according to the DVR route
@@ -382,22 +382,22 @@ class TestDVR(VppTestCase):
         #
         # cleanup
         #
-        self.vapi.l2_emulation(self.pg0.sw_if_index,
+        self.vclient.l2_emulation(self.pg0.sw_if_index,
                                enable=0)
-        self.vapi.l2_emulation(self.pg1.sw_if_index,
+        self.vclient.l2_emulation(self.pg1.sw_if_index,
                                enable=0)
-        self.vapi.l2_emulation(sub_if_on_pg2.sw_if_index,
+        self.vclient.l2_emulation(sub_if_on_pg2.sw_if_index,
                                enable=0)
-        self.vapi.l2_emulation(sub_if_on_pg3.sw_if_index,
+        self.vclient.l2_emulation(sub_if_on_pg3.sw_if_index,
                                enable=0)
 
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg0.sw_if_index, bd_id=1, enable=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg1.sw_if_index, bd_id=1, enable=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=sub_if_on_pg2.sw_if_index, bd_id=1, enable=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=sub_if_on_pg3.sw_if_index, bd_id=1, enable=0)
 
         route_1.remove_vpp_config()
diff --git a/test/test_endian.py b/test/test_endian.py
index 462ee2b6b..e9b153a43 100644
--- a/test/test_endian.py
+++ b/test/test_endian.py
@@ -13,7 +13,7 @@
 #  limitations under the License.
 
 import framework
-import vpp_papi_provider
+import vpp_pom.vpp_papi_provider as vpp_papi_provider
 
 F64_ONE = 1.0
 
@@ -23,7 +23,7 @@ class TestEndian(framework.VppTestCase):
 
     def test_f64_endian_value(self):
         try:
-            rv = self.vapi.get_f64_endian_value(f64_one=F64_ONE)
+            rv = self.vclient.get_f64_endian_value(f64_one=F64_ONE)
             self.assertEqual(rv.f64_one_result, F64_ONE,
                              "client incorrectly deserializes f64 values.  "
                              "Expected: %r. Received: %r." % (
@@ -33,6 +33,6 @@ class TestEndian(framework.VppTestCase):
 
     def test_get_f64_increment_by_one(self):
         expected = 43.0
-        rv = self.vapi.get_f64_increment_by_one(f64_value=42.0)
+        rv = self.vclient.get_f64_increment_by_one(f64_value=42.0)
         self.assertEqual(rv.f64_value, expected, 'Expected %r, received:%r.'
                          % (expected, rv.f64_value))
diff --git a/test/test_fib.py b/test/test_fib.py
index 0eefcdf8b..1b67c846d 100644
--- a/test/test_fib.py
+++ b/test/test_fib.py
@@ -18,25 +18,25 @@ class TestFIB(VppTestCase):
 
     def test_fib(self):
         """ FIB Unit Tests """
-        error = self.vapi.cli("test fib")
+        error = self.vclient.cli("test fib")
 
         # shameless test of CLIs to bump lcov results...
         # no i mean to ensure they don't crash
-        self.logger.info(self.vapi.cli("sh fib source"))
-        self.logger.info(self.vapi.cli("sh fib source prio"))
-        self.logger.info(self.vapi.cli("sh fib memory"))
-        self.logger.info(self.vapi.cli("sh fib entry"))
-        self.logger.info(self.vapi.cli("sh fib entry 0"))
-        self.logger.info(self.vapi.cli("sh fib entry 10000"))
-        self.logger.info(self.vapi.cli("sh fib entry-delegate"))
-        self.logger.info(self.vapi.cli("sh fib paths"))
-        self.logger.info(self.vapi.cli("sh fib paths 0"))
-        self.logger.info(self.vapi.cli("sh fib paths 10000"))
-        self.logger.info(self.vapi.cli("sh fib path-list"))
-        self.logger.info(self.vapi.cli("sh fib path-list 0"))
-        self.logger.info(self.vapi.cli("sh fib path-list 10000"))
-        self.logger.info(self.vapi.cli("sh fib walk"))
-        self.logger.info(self.vapi.cli("sh fib uRPF"))
+        self.logger.info(self.vclient.cli("sh fib source"))
+        self.logger.info(self.vclient.cli("sh fib source prio"))
+        self.logger.info(self.vclient.cli("sh fib memory"))
+        self.logger.info(self.vclient.cli("sh fib entry"))
+        self.logger.info(self.vclient.cli("sh fib entry 0"))
+        self.logger.info(self.vclient.cli("sh fib entry 10000"))
+        self.logger.info(self.vclient.cli("sh fib entry-delegate"))
+        self.logger.info(self.vclient.cli("sh fib paths"))
+        self.logger.info(self.vclient.cli("sh fib paths 0"))
+        self.logger.info(self.vclient.cli("sh fib paths 10000"))
+        self.logger.info(self.vclient.cli("sh fib path-list"))
+        self.logger.info(self.vclient.cli("sh fib path-list 0"))
+        self.logger.info(self.vclient.cli("sh fib path-list 10000"))
+        self.logger.info(self.vclient.cli("sh fib walk"))
+        self.logger.info(self.vclient.cli("sh fib uRPF"))
 
         if error:
             self.logger.critical(error)
diff --git a/test/test_gre.py b/test/test_gre.py
index 7a2499988..35eae5f75 100644
--- a/test/test_gre.py
+++ b/test/test_gre.py
@@ -10,14 +10,14 @@ from scapy.layers.inet6 import IPv6
 from scapy.volatile import RandMAC, RandIP
 
 from framework import VppTestCase, VppTestRunner
-from vpp_sub_interface import L2_VTR_OP, VppDot1QSubint
-from vpp_gre_interface import VppGreInterface
-from vpp_teib import VppTeib
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable, FibPathProto, \
+from vpp_pom.vpp_sub_interface import L2_VTR_OP, VppDot1QSubint
+from vpp_pom.vpp_gre_interface import VppGreInterface
+from vpp_pom.vpp_teib import VppTeib
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable, FibPathProto, \
     VppMplsLabel
-from vpp_mpls_tunnel_interface import VppMPLSTunnelInterface
-from util import ppp, ppc
+from vpp_pom.vpp_mpls_tunnel_interface import VppMPLSTunnelInterface
+from vpp_pom.util import ppp, ppc
 from vpp_papi import VppEnum
 
 
@@ -49,19 +49,19 @@ class TestGREInputNodes(VppTestCase):
         self.pg0.add_stream(pkt)
         self.pg_start()
         # no tunnel created, gre-input not registered
-        err = self.statistics.get_counter(
+        err = self.vclient.statistics.get_counter(
             '/err/ip4-local/unknown ip protocol')[0]
         self.assertEqual(err, 1)
         err_count = err
 
         # create gre tunnel
-        gre_if = VppGreInterface(self, self.pg0.local_ip4, "1.1.1.2")
+        gre_if = VppGreInterface(self.vclient, self.pg0.local_ip4, "1.1.1.2")
         gre_if.add_vpp_config()
 
         self.pg0.add_stream(pkt)
         self.pg_start()
         # tunnel created, gre-input registered
-        err = self.statistics.get_counter(
+        err = self.vclient.statistics.get_counter(
             '/err/ip4-local/unknown ip protocol')[0]
         # expect no new errors
         self.assertEqual(err, err_count)
@@ -84,7 +84,7 @@ class TestGRE(VppTestCase):
         # create 3 pg interfaces - set one in a non-default table.
         self.create_pg_interfaces(range(5))
 
-        self.tbl = VppIpTable(self, 1)
+        self.tbl = VppIpTable(self.vclient, 1)
         self.tbl.add_vpp_config()
         self.pg1.set_table_ip4(1)
 
@@ -501,7 +501,7 @@ class TestGRE(VppTestCase):
         #  - assign an IP Addres
         #  - Add a route via the tunnel
         #
-        gre_if = VppGreInterface(self,
+        gre_if = VppGreInterface(self.vclient,
                                  self.pg0.local_ip4,
                                  "1.1.1.2")
         gre_if.add_vpp_config()
@@ -520,7 +520,7 @@ class TestGRE(VppTestCase):
         gre_if.admin_up()
         gre_if.config_ip4()
 
-        route_via_tun = VppIpRoute(self, "4.4.4.4", 32,
+        route_via_tun = VppIpRoute(self.vclient, "4.4.4.4", 32,
                                    [VppRoutePath("0.0.0.0",
                                                  gre_if.sw_if_index)])
 
@@ -539,7 +539,7 @@ class TestGRE(VppTestCase):
         #
         # Add a route that resolves the tunnel's destination
         #
-        route_tun_dst = VppIpRoute(self, "1.1.1.2", 32,
+        route_tun_dst = VppIpRoute(self.vclient, "1.1.1.2", 32,
                                    [VppRoutePath(self.pg0.remote_ip4,
                                                  self.pg0.sw_if_index)])
         route_tun_dst.add_vpp_config()
@@ -568,7 +568,7 @@ class TestGRE(VppTestCase):
         #
         # Send tunneled packets that do not match the tunnel's src
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_tunnel_stream_4o4(self.pg0,
                                            "1.1.1.3",
                                            self.pg0.local_ip4,
@@ -619,7 +619,7 @@ class TestGRE(VppTestCase):
         # Send v6 packets for v4 encap
         #
         route6_via_tun = VppIpRoute(
-            self, "2001::1", 128,
+            self.vclient, "2001::1", 128,
             [VppRoutePath("::",
                           gre_if.sw_if_index,
                           proto=DpoProto.DPO_PROTO_IP6)])
@@ -634,7 +634,7 @@ class TestGRE(VppTestCase):
         #
         # add a labelled route through the tunnel
         #
-        label_via_tun = VppIpRoute(self, "5.4.3.2", 32,
+        label_via_tun = VppIpRoute(self.vclient, "5.4.3.2", 32,
                                    [VppRoutePath("0.0.0.0",
                                                  gre_if.sw_if_index,
                                                  labels=[VppMplsLabel(33)])])
@@ -650,7 +650,7 @@ class TestGRE(VppTestCase):
         # the mpls tunnel
         #
         mpls_tun = VppMPLSTunnelInterface(
-            self,
+            self.vclient,
             [VppRoutePath("0.0.0.0",
                           gre_if.sw_if_index,
                           labels=[VppMplsLabel(44),
@@ -658,7 +658,7 @@ class TestGRE(VppTestCase):
         mpls_tun.add_vpp_config()
         mpls_tun.admin_up()
 
-        label_via_mpls = VppIpRoute(self, "5.4.3.1", 32,
+        label_via_mpls = VppIpRoute(self.vclient, "5.4.3.1", 32,
                                     [VppRoutePath("0.0.0.0",
                                                   mpls_tun.sw_if_index,
                                                   labels=[VppMplsLabel(33)])])
@@ -670,7 +670,7 @@ class TestGRE(VppTestCase):
                                  self.pg0.local_ip4, "1.1.1.2")
 
         mpls_tun_l2 = VppMPLSTunnelInterface(
-            self,
+            self.vclient,
             [VppRoutePath("0.0.0.0",
                           gre_if.sw_if_index,
                           labels=[VppMplsLabel(44),
@@ -705,14 +705,14 @@ class TestGRE(VppTestCase):
         #  - assign an IP Address
         #  - Add a route via the tunnel
         #
-        gre_if = VppGreInterface(self,
+        gre_if = VppGreInterface(self.vclient,
                                  self.pg2.local_ip6,
                                  "1002::1")
         gre_if.add_vpp_config()
         gre_if.admin_up()
         gre_if.config_ip6()
 
-        route_via_tun = VppIpRoute(self, "4004::1", 128,
+        route_via_tun = VppIpRoute(self.vclient, "4004::1", 128,
                                    [VppRoutePath("0::0",
                                                  gre_if.sw_if_index)])
 
@@ -732,7 +732,7 @@ class TestGRE(VppTestCase):
         #
         # Add a route that resolves the tunnel's destination
         #
-        route_tun_dst = VppIpRoute(self, "1002::1", 128,
+        route_tun_dst = VppIpRoute(self.vclient, "1002::1", 128,
                                    [VppRoutePath(self.pg2.remote_ip6,
                                                  self.pg2.sw_if_index)])
         route_tun_dst.add_vpp_config()
@@ -765,7 +765,7 @@ class TestGRE(VppTestCase):
         #
         # Send v4 over v6
         #
-        route4_via_tun = VppIpRoute(self, "1.1.1.1", 32,
+        route4_via_tun = VppIpRoute(self.vclient, "1.1.1.1", 32,
                                     [VppRoutePath("0.0.0.0",
                                                   gre_if.sw_if_index)])
         route4_via_tun.add_vpp_config()
@@ -800,7 +800,7 @@ class TestGRE(VppTestCase):
         #  - assign an IP Addres
         #
         gre_if = VppGreInterface(
-            self, self.pg1.local_ip4,
+            self.vclient, self.pg1.local_ip4,
             "2.2.2.2",
             outer_table_id=1,
             flags=(e.TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DSCP |
@@ -813,7 +813,7 @@ class TestGRE(VppTestCase):
         #
         # Add a route via the tunnel - in the overlay
         #
-        route_via_tun = VppIpRoute(self, "9.9.9.9", 32,
+        route_via_tun = VppIpRoute(self.vclient, "9.9.9.9", 32,
                                    [VppRoutePath("0.0.0.0",
                                                  gre_if.sw_if_index)])
         route_via_tun.add_vpp_config()
@@ -822,7 +822,7 @@ class TestGRE(VppTestCase):
         # Add a route that resolves the tunnel's destination - in the
         # underlay table
         #
-        route_tun_dst = VppIpRoute(self, "2.2.2.2", 32, table_id=1,
+        route_tun_dst = VppIpRoute(self.vclient, "2.2.2.2", 32, table_id=1,
                                    paths=[VppRoutePath(self.pg1.remote_ip4,
                                                        self.pg1.sw_if_index)])
         route_tun_dst.add_vpp_config()
@@ -832,7 +832,7 @@ class TestGRE(VppTestCase):
         # packets are sent in on pg0 which is in the default table
         #  - packets are GRE encapped
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "5.5.5.5", "9.9.9.9",
                                     dscp=5, ecn=3)
         rx = self.send_and_expect(self.pg0, tx, self.pg1)
@@ -845,7 +845,7 @@ class TestGRE(VppTestCase):
         # are decapped and forwarded. This tests the decap lookup
         # does not happen in the encap table
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_tunnel_stream_4o4(self.pg1,
                                            "2.2.2.2",
                                            self.pg1.local_ip4,
@@ -862,7 +862,7 @@ class TestGRE(VppTestCase):
         # IP not being enabled.
         #
         self.pg2.config_ip4()
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_tunnel_stream_4o4(self.pg2,
                                            "2.2.2.2",
                                            self.pg1.local_ip4,
@@ -887,10 +887,10 @@ class TestGRE(VppTestCase):
         #
         # Add routes to resolve the tunnel destinations
         #
-        route_tun1_dst = VppIpRoute(self, "2.2.2.2", 32,
+        route_tun1_dst = VppIpRoute(self.vclient, "2.2.2.2", 32,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index)])
-        route_tun2_dst = VppIpRoute(self, "2.2.2.3", 32,
+        route_tun2_dst = VppIpRoute(self.vclient, "2.2.2.3", 32,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index)])
 
@@ -900,11 +900,11 @@ class TestGRE(VppTestCase):
         #
         # Create 2 L2 GRE tunnels and x-connect them
         #
-        gre_if1 = VppGreInterface(self, self.pg0.local_ip4,
+        gre_if1 = VppGreInterface(self.vclient, self.pg0.local_ip4,
                                   "2.2.2.2",
                                   type=(VppEnum.vl_api_gre_tunnel_type_t.
                                         GRE_API_TUNNEL_TYPE_TEB))
-        gre_if2 = VppGreInterface(self, self.pg0.local_ip4,
+        gre_if2 = VppGreInterface(self.vclient, self.pg0.local_ip4,
                                   "2.2.2.3",
                                   type=(VppEnum.vl_api_gre_tunnel_type_t.
                                         GRE_API_TUNNEL_TYPE_TEB))
@@ -914,10 +914,10 @@ class TestGRE(VppTestCase):
         gre_if1.admin_up()
         gre_if2.admin_up()
 
-        self.vapi.sw_interface_set_l2_xconnect(gre_if1.sw_if_index,
+        self.vclient.sw_interface_set_l2_xconnect(gre_if1.sw_if_index,
                                                gre_if2.sw_if_index,
                                                enable=1)
-        self.vapi.sw_interface_set_l2_xconnect(gre_if2.sw_if_index,
+        self.vclient.sw_interface_set_l2_xconnect(gre_if2.sw_if_index,
                                                gre_if1.sw_if_index,
                                                enable=1)
 
@@ -941,10 +941,10 @@ class TestGRE(VppTestCase):
                                   self.pg0.local_ip4,
                                   "2.2.2.2")
 
-        self.vapi.sw_interface_set_l2_xconnect(gre_if1.sw_if_index,
+        self.vclient.sw_interface_set_l2_xconnect(gre_if1.sw_if_index,
                                                gre_if2.sw_if_index,
                                                enable=0)
-        self.vapi.sw_interface_set_l2_xconnect(gre_if2.sw_if_index,
+        self.vclient.sw_interface_set_l2_xconnect(gre_if2.sw_if_index,
                                                gre_if1.sw_if_index,
                                                enable=0)
 
@@ -952,8 +952,8 @@ class TestGRE(VppTestCase):
         # Create a VLAN sub-interfaces on the GRE TEB interfaces
         # then x-connect them
         #
-        gre_if_11 = VppDot1QSubint(self, gre_if1, 11)
-        gre_if_12 = VppDot1QSubint(self, gre_if2, 12)
+        gre_if_11 = VppDot1QSubint(self.vclient, gre_if1, 11)
+        gre_if_12 = VppDot1QSubint(self.vclient, gre_if2, 12)
 
         # gre_if_11.add_vpp_config()
         # gre_if_12.add_vpp_config()
@@ -961,10 +961,10 @@ class TestGRE(VppTestCase):
         gre_if_11.admin_up()
         gre_if_12.admin_up()
 
-        self.vapi.sw_interface_set_l2_xconnect(gre_if_11.sw_if_index,
+        self.vclient.sw_interface_set_l2_xconnect(gre_if_11.sw_if_index,
                                                gre_if_12.sw_if_index,
                                                enable=1)
-        self.vapi.sw_interface_set_l2_xconnect(gre_if_12.sw_if_index,
+        self.vclient.sw_interface_set_l2_xconnect(gre_if_12.sw_if_index,
                                                gre_if_11.sw_if_index,
                                                enable=1)
 
@@ -972,10 +972,10 @@ class TestGRE(VppTestCase):
         # Configure both to pop thier respective VLAN tags,
         # so that during the x-coonect they will subsequently push
         #
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=gre_if_12.sw_if_index, vtr_op=L2_VTR_OP.L2_POP_1,
             push_dot1q=12)
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=gre_if_11.sw_if_index, vtr_op=L2_VTR_OP.L2_POP_1,
             push_dot1q=11)
 
@@ -1021,7 +1021,7 @@ class TestGRE(VppTestCase):
         #  - set it admin up
         #  - assign an IP Addres
         #
-        gre_if = VppGreInterface(self,
+        gre_if = VppGreInterface(self.vclient,
                                  self.pg0.local_ip4,
                                  "1.1.1.2")
         gre_if.add_vpp_config()
@@ -1033,7 +1033,7 @@ class TestGRE(VppTestCase):
         # through the tunnel, hence forming a loop in the forwarding
         # graph
         #
-        route_dst = VppIpRoute(self, "1.1.1.2", 32,
+        route_dst = VppIpRoute(self.vclient, "1.1.1.2", 32,
                                [VppRoutePath("0.0.0.0",
                                              gre_if.sw_if_index)])
         route_dst.add_vpp_config()
@@ -1044,7 +1044,7 @@ class TestGRE(VppTestCase):
         tx = self.create_stream_ip4(self.pg0, "1.1.1.1", "1.1.1.2")
         self.send_and_assert_no_replies(self.pg2, tx)
 
-        self.logger.info(self.vapi.ppcli("sh adj 7"))
+        self.logger.info(self.vclient.ppcli("sh adj 7"))
 
         #
         # break the loop
@@ -1058,7 +1058,8 @@ class TestGRE(VppTestCase):
         #
         # a good route throught the tunnel to check it restacked
         #
-        route_via_tun_2 = VppIpRoute(self, "2.2.2.2", 32,
+        route_via_tun_2 = VppIpRoute(
+            self.vclient, "2.2.2.2", 32,
                                      [VppRoutePath("0.0.0.0",
                                                    gre_if.sw_if_index)])
         route_via_tun_2.add_vpp_config()
@@ -1090,7 +1091,7 @@ class TestGRE(VppTestCase):
             #  - assign an IP Addres
             #  - Add a route via the tunnel
             #
-            gre_if = VppGreInterface(self,
+            gre_if = VppGreInterface(self.vclient,
                                      itf.local_ip4,
                                      "0.0.0.0",
                                      mode=(VppEnum.vl_api_tunnel_mode_t.
@@ -1100,8 +1101,8 @@ class TestGRE(VppTestCase):
             gre_if.config_ip4()
             gre_if.generate_remote_hosts(4)
 
-            self.logger.info(self.vapi.cli("sh adj"))
-            self.logger.info(self.vapi.cli("sh ip fib"))
+            self.logger.info(self.vclient.cli("sh adj"))
+            self.logger.info(self.vclient.cli("sh ip fib"))
 
             #
             # ensure we don't match to the tunnel if the source address
@@ -1124,7 +1125,7 @@ class TestGRE(VppTestCase):
                 # route traffic via the peer
                 #
                 route_via_tun = VppIpRoute(
-                    self, route_addr, 32,
+                    self.vclient, route_addr, 32,
                     [VppRoutePath(gre_if._remote_hosts[ii].ip4,
                                   gre_if.sw_if_index)])
                 route_via_tun.add_vpp_config()
@@ -1132,7 +1133,7 @@ class TestGRE(VppTestCase):
                 #
                 # Add a TEIB entry resolves the peer
                 #
-                teib = VppTeib(self, gre_if,
+                teib = VppTeib(self.vclient, gre_if,
                                gre_if._remote_hosts[ii].ip4,
                                itf._remote_hosts[ii].ip4)
                 teib.add_vpp_config()
@@ -1196,7 +1197,7 @@ class TestGRE(VppTestCase):
             #  - Add a route via the tunnel
             #
             gre_if = VppGreInterface(
-                self,
+                self.vclient,
                 itf.local_ip6,
                 "::",
                 mode=(VppEnum.vl_api_tunnel_mode_t.
@@ -1217,7 +1218,7 @@ class TestGRE(VppTestCase):
                 #
                 # Add a TEIB entry resolves the peer
                 #
-                teib = VppTeib(self, gre_if,
+                teib = VppTeib(self.vclient, gre_if,
                                gre_if._remote_hosts[ii].ip6,
                                itf._remote_hosts[ii].ip6)
                 teib.add_vpp_config()
@@ -1226,7 +1227,7 @@ class TestGRE(VppTestCase):
                 # route traffic via the peer
                 #
                 route_via_tun = VppIpRoute(
-                    self, route_addr, 128,
+                    self.vclient, route_addr, 128,
                     [VppRoutePath(gre_if._remote_hosts[ii].ip6,
                                   gre_if.sw_if_index)])
                 route_via_tun.add_vpp_config()
diff --git a/test/test_gro.py b/test/test_gro.py
index 33215d65f..e06d215b0 100644
--- a/test/test_gro.py
+++ b/test/test_gro.py
@@ -16,8 +16,8 @@ from scapy.layers.inet import TCP, ICMP
 from scapy.data import ETH_P_IP, ETH_P_IPV6, ETH_P_ARP
 
 from framework import VppTestCase, VppTestRunner
-from vpp_object import VppObject
-from vpp_interface import VppInterface
+from vpp_pom.vpp_object import VppObject
+from vpp_pom.vpp_interface import VppInterface
 
 
 """ Test_gro is a subclass of VPPTestCase classes.
diff --git a/test/test_gso.py b/test/test_gso.py
index ba830049e..8bd9e3662 100644
--- a/test/test_gso.py
+++ b/test/test_gso.py
@@ -18,14 +18,14 @@ from scapy.layers.vxlan import VXLAN
 from scapy.data import ETH_P_IP, ETH_P_IPV6, ETH_P_ARP
 
 from framework import VppTestCase, VppTestRunner
-from vpp_object import VppObject
-from vpp_interface import VppInterface
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, FibPathProto
-from vpp_ipip_tun_interface import VppIpIpTunInterface
-from vpp_vxlan_tunnel import VppVxlanTunnel
+from vpp_pom.vpp_object import VppObject
+from vpp_pom.vpp_interface import VppInterface
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, FibPathProto
+from vpp_pom.vpp_ipip_tun_interface import VppIpIpTunInterface
+from vpp_pom.vpp_vxlan_tunnel import VppVxlanTunnel
 from socket import AF_INET, AF_INET6, inet_pton
-from util import reassemble4
+from vpp_pom.util import reassemble4
 
 
 """ Test_gso is a subclass of VPPTestCase classes.
@@ -65,17 +65,17 @@ class TestGSO(VppTestCase):
             i.resolve_ndp()
 
         self.single_tunnel_bd = 10
-        self.vxlan = VppVxlanTunnel(self, src=self.pg0.local_ip4,
+        self.vxlan = VppVxlanTunnel(self.vclient, src=self.pg0.local_ip4,
                                     dst=self.pg0.remote_ip4,
                                     vni=self.single_tunnel_bd)
 
-        self.vxlan2 = VppVxlanTunnel(self, src=self.pg0.local_ip6,
+        self.vxlan2 = VppVxlanTunnel(self.vclient, src=self.pg0.local_ip6,
                                      dst=self.pg0.remote_ip6,
                                      vni=self.single_tunnel_bd)
 
-        self.ipip4 = VppIpIpTunInterface(self, self.pg0, self.pg0.local_ip4,
+        self.ipip4 = VppIpIpTunInterface(self.vclient, self.pg0, self.pg0.local_ip4,
                                          self.pg0.remote_ip4)
-        self.ipip6 = VppIpIpTunInterface(self, self.pg0, self.pg0.local_ip6,
+        self.ipip6 = VppIpIpTunInterface(self.vclient, self.pg0, self.pg0.local_ip6,
                                          self.pg0.remote_ip6)
 
     def tearDown(self):
@@ -148,7 +148,7 @@ class TestGSO(VppTestCase):
         # Send jumbo frame with gso enabled and DF bit is set
         # input and output interfaces support GSO
         #
-        self.vapi.feature_gso_enable_disable(self.pg3.sw_if_index)
+        self.vclient.feature_gso_enable_disable(self.pg3.sw_if_index)
         p41 = (Ether(src=self.pg2.remote_mac, dst=self.pg2.local_mac) /
                IP(src=self.pg2.remote_ip4, dst=self.pg3.remote_ip4,
                   flags='DF') /
@@ -190,7 +190,7 @@ class TestGSO(VppTestCase):
         # and DF bit is set. GSO packet will be chunked into gso_size
         # data payload
         #
-        self.vapi.feature_gso_enable_disable(self.pg0.sw_if_index)
+        self.vclient.feature_gso_enable_disable(self.pg0.sw_if_index)
         p42 = (Ether(src=self.pg2.remote_mac, dst=self.pg2.local_mac) /
                IP(src=self.pg2.remote_ip4, dst=self.pg0.remote_ip4,
                   flags='DF') /
@@ -240,8 +240,8 @@ class TestGSO(VppTestCase):
         # Send jumbo frame with gso enabled only on input interface
         # and DF bit is unset. GSO packet will be fragmented.
         #
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index, [576, 0, 0, 0])
-        self.vapi.feature_gso_enable_disable(self.pg1.sw_if_index)
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index, [576, 0, 0, 0])
+        self.vclient.feature_gso_enable_disable(self.pg1.sw_if_index)
 
         p43 = (Ether(src=self.pg2.remote_mac, dst=self.pg2.local_mac) /
                IP(src=self.pg2.remote_ip4, dst=self.pg1.remote_ip4) /
@@ -265,7 +265,7 @@ class TestGSO(VppTestCase):
         # Send jumbo frame with gso enabled only on input interface.
         # ICMPv6 Packet Too Big will be sent back to sender.
         #
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index, [1280, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index, [1280, 0, 0, 0])
         p63 = (Ether(src=self.pg2.remote_mac, dst=self.pg2.local_mac) /
                IPv6(src=self.pg2.remote_ip6, dst=self.pg1.remote_ip6) /
                TCP(sport=1234, dport=1234) /
@@ -289,8 +289,8 @@ class TestGSO(VppTestCase):
         # and DF bit is unset. GSO packet will be fragmented. MSS is 8960. GSO
         # size will be min(MSS, 2048 - 14 - 20) vlib_buffer_t size
         #
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index, [9000, 0, 0, 0])
-        self.vapi.sw_interface_set_mtu(self.pg4.sw_if_index, [9000, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index, [9000, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg4.sw_if_index, [9000, 0, 0, 0])
         p44 = (Ether(src=self.pg4.remote_mac, dst=self.pg4.local_mac) /
                IP(src=self.pg4.remote_ip4, dst=self.pg1.remote_ip4) /
                TCP(sport=1234, dport=1234) /
@@ -331,14 +331,14 @@ class TestGSO(VppTestCase):
             size += payload_len
         self.assertEqual(size, 65200*5)
 
-        self.vapi.feature_gso_enable_disable(self.pg0.sw_if_index,
+        self.vclient.feature_gso_enable_disable(self.pg0.sw_if_index,
                                              enable_disable=0)
-        self.vapi.feature_gso_enable_disable(self.pg1.sw_if_index,
+        self.vclient.feature_gso_enable_disable(self.pg1.sw_if_index,
                                              enable_disable=0)
 
     def test_gso_vxlan(self):
         """ GSO VXLAN test """
-        self.logger.info(self.vapi.cli("sh int addr"))
+        self.logger.info(self.vclient.cli("sh int addr"))
         #
         # Send jumbo frame with gso enabled only on input interface and
         # create VXLAN VTEP on VPP pg0, and put vxlan_tunnel0 and pg2
@@ -349,11 +349,11 @@ class TestGSO(VppTestCase):
         # enable ipv4/vxlan
         #
         self.vxlan.add_vpp_config()
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.vxlan.sw_if_index, bd_id=self.single_tunnel_bd)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg2.sw_if_index, bd_id=self.single_tunnel_bd)
-        self.vapi.feature_gso_enable_disable(self.pg0.sw_if_index)
+        self.vclient.feature_gso_enable_disable(self.pg0.sw_if_index)
 
         #
         # IPv4/IPv4 - VXLAN
@@ -425,7 +425,7 @@ class TestGSO(VppTestCase):
         # enable ipv6/vxlan
         #
         self.vxlan2.add_vpp_config()
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.vxlan2.sw_if_index,
             bd_id=self.single_tunnel_bd)
 
@@ -493,17 +493,17 @@ class TestGSO(VppTestCase):
         #
         self.vxlan2.remove_vpp_config()
 
-        self.vapi.feature_gso_enable_disable(self.pg0.sw_if_index,
+        self.vclient.feature_gso_enable_disable(self.pg0.sw_if_index,
                                              enable_disable=0)
 
     def test_gso_ipip(self):
         """ GSO IPIP test """
-        self.logger.info(self.vapi.cli("sh int addr"))
+        self.logger.info(self.vclient.cli("sh int addr"))
         #
         # Send jumbo frame with gso enabled only on input interface and
         # create IPIP tunnel on VPP pg0.
         #
-        self.vapi.feature_gso_enable_disable(self.pg0.sw_if_index)
+        self.vclient.feature_gso_enable_disable(self.pg0.sw_if_index)
 
         #
         # enable ipip4
@@ -516,7 +516,7 @@ class TestGSO(VppTestCase):
 
         # Add IPv4 routes via tunnel interface
         self.ip4_via_ip4_tunnel = VppIpRoute(
-                self, "172.16.10.0", 24,
+                self.vclient, "172.16.10.0", 24,
                 [VppRoutePath("0.0.0.0",
                               self.ipip4.sw_if_index,
                               proto=FibPathProto.FIB_PATH_NH_PROTO_IP4)])
@@ -551,7 +551,7 @@ class TestGSO(VppTestCase):
         self.assertEqual(size, 65200*5)
 
         self.ip6_via_ip4_tunnel = VppIpRoute(
-                self, "fd01:10::", 64,
+                self.vclient, "fd01:10::", 64,
                 [VppRoutePath("::",
                               self.ipip4.sw_if_index,
                               proto=FibPathProto.FIB_PATH_NH_PROTO_IP6)])
@@ -588,9 +588,9 @@ class TestGSO(VppTestCase):
         # create IPIP tunnel on VPP pg0. Enable gso feature node on ipip
         # tunnel - IPSec use case
         #
-        self.vapi.feature_gso_enable_disable(self.pg0.sw_if_index,
+        self.vclient.feature_gso_enable_disable(self.pg0.sw_if_index,
                                              enable_disable=0)
-        self.vapi.feature_gso_enable_disable(self.ipip4.sw_if_index)
+        self.vclient.feature_gso_enable_disable(self.ipip4.sw_if_index)
 
         rxs = self.send_and_expect(self.pg2, 5*[p47], self.pg0, 225)
         size = 0
@@ -615,7 +615,7 @@ class TestGSO(VppTestCase):
         #
         # disable ipip4
         #
-        self.vapi.feature_gso_enable_disable(self.ipip4.sw_if_index,
+        self.vclient.feature_gso_enable_disable(self.ipip4.sw_if_index,
                                              enable_disable=0)
         self.ip4_via_ip4_tunnel.remove_vpp_config()
         self.ip6_via_ip4_tunnel.remove_vpp_config()
@@ -624,7 +624,7 @@ class TestGSO(VppTestCase):
         #
         # enable ipip6
         #
-        self.vapi.feature_gso_enable_disable(self.pg0.sw_if_index)
+        self.vclient.feature_gso_enable_disable(self.pg0.sw_if_index)
         self.ipip6.add_vpp_config()
 
         # Set interface up and enable IP on it
@@ -633,7 +633,7 @@ class TestGSO(VppTestCase):
 
         # Add IPv4 routes via tunnel interface
         self.ip4_via_ip6_tunnel = VppIpRoute(
-                self, "172.16.10.0", 24,
+                self.vclient, "172.16.10.0", 24,
                 [VppRoutePath("0.0.0.0",
                               self.ipip6.sw_if_index,
                               proto=FibPathProto.FIB_PATH_NH_PROTO_IP4)])
@@ -667,7 +667,7 @@ class TestGSO(VppTestCase):
         self.assertEqual(size, 65200*5)
 
         self.ip6_via_ip6_tunnel = VppIpRoute(
-                self, "fd01:10::", 64,
+                self.vclient, "fd01:10::", 64,
                 [VppRoutePath("::",
                               self.ipip6.sw_if_index,
                               proto=FibPathProto.FIB_PATH_NH_PROTO_IP6)])
@@ -706,7 +706,7 @@ class TestGSO(VppTestCase):
         self.ip6_via_ip6_tunnel.remove_vpp_config()
         self.ipip6.remove_vpp_config()
 
-        self.vapi.feature_gso_enable_disable(self.pg0.sw_if_index,
+        self.vclient.feature_gso_enable_disable(self.pg0.sw_if_index,
                                              enable_disable=0)
 
 if __name__ == '__main__':
diff --git a/test/test_interface_crud.py b/test/test_interface_crud.py
index 2f08f33c7..268342662 100644
--- a/test/test_interface_crud.py
+++ b/test/test_interface_crud.py
@@ -88,14 +88,14 @@ class TestLoopbackInterfaceCRUD(VppTestCase):
             i.config_ip4().admin_up()
 
         # read (check sw if dump, ip4 fib, ip6 fib)
-        if_dump = self.vapi.sw_interface_dump(name_filter_valid=True,
+        if_dump = self.vclient.sw_interface_dump(name_filter_valid=True,
                                               name_filter='loop')
-        fib4_dump = self.vapi.ip_route_dump(0)
+        fib4_dump = self.vclient.ip_route_dump(0)
         for i in loopbacks:
             self.assertTrue(i.is_interface_config_in_dump(if_dump))
             self.assertTrue(i.is_ip4_entry_in_fib_dump(fib4_dump))
 
-        if_dump = self.vapi.sw_interface_dump(name_filter_valid=True,
+        if_dump = self.vclient.sw_interface_dump(name_filter_valid=True,
                                               name_filter='loopXYZ')
         self.assertEqual(len(if_dump), 0)
 
@@ -113,8 +113,8 @@ class TestLoopbackInterfaceCRUD(VppTestCase):
             i.remove_vpp_config()
 
         # read (check not in sw if dump, ip4 fib, ip6 fib)
-        if_dump = self.vapi.sw_interface_dump()
-        fib4_dump = self.vapi.ip_route_dump(0)
+        if_dump = self.vclient.sw_interface_dump()
+        fib4_dump = self.vclient.ip_route_dump(0)
         for i in loopbacks:
             self.assertFalse(i.is_interface_config_in_dump(if_dump))
             self.assertFalse(i.is_ip4_entry_in_fib_dump(fib4_dump))
@@ -138,8 +138,8 @@ class TestLoopbackInterfaceCRUD(VppTestCase):
             i.admin_down().unconfig_ip4()
 
         # read (check not in sw if dump, ip4 fib, ip6 fib)
-        if_dump = self.vapi.sw_interface_dump()
-        fib4_dump = self.vapi.ip_route_dump(0)
+        if_dump = self.vclient.sw_interface_dump()
+        fib4_dump = self.vclient.ip_route_dump(0)
         for i in loopbacks:
             self.assertTrue(i.is_interface_config_in_dump(if_dump))
             self.assertFalse(i.is_ip4_entry_in_fib_dump(fib4_dump))
@@ -156,15 +156,15 @@ class TestInterfaceDumpApiLocalOnly(VppTestCase):
     """test_interface_crud.TestInterfaceDumpApiLocalOnly"""
 
     def test_sw_if_index_0(self):
-        rv = self.vapi.sw_interface_dump(sw_if_index=0)
+        rv = self.vclient.sw_interface_dump(sw_if_index=0)
         self.assertEqual(rv[0].sw_if_index, 0)
 
     def test_sw_if_index_twiddle0(self):
-        rv = self.vapi.sw_interface_dump(sw_if_index=0xffffffff)
+        rv = self.vclient.sw_interface_dump(sw_if_index=0xffffffff)
         self.assertEqual(rv[0].sw_if_index, 0)
 
     def test_sw_if_index_1_not_existing(self):
-        rv = self.vapi.sw_interface_dump(sw_if_index=1)
+        rv = self.vclient.sw_interface_dump(sw_if_index=1)
         self.assertEqual(len(rv), 0, 'expected no records.')
 
 
@@ -172,17 +172,17 @@ class TestInterfaceDumpApi(VppTestCase):
     """test_interface_crud.TestInterfaceDumpApi"""
 
     def test_sw_if_index_1(self):
-        self.vapi.create_loopback_instance(is_specified=1,
+        self.vclient.create_loopback_instance(is_specified=1,
                                            user_instance=10)
-        self.vapi.create_loopback_instance(is_specified=1,
+        self.vclient.create_loopback_instance(is_specified=1,
                                            user_instance=5)
 
         # Can I get back the specified record?
-        rv = self.vapi.sw_interface_dump(sw_if_index=1)
+        rv = self.vclient.sw_interface_dump(sw_if_index=1)
         self.assertEqual(rv[0].sw_if_index, 1, rv)
 
         # verify 3 interfaces
-        rv = self.vapi.sw_interface_dump(sw_if_index=0xffffffff)
+        rv = self.vclient.sw_interface_dump(sw_if_index=0xffffffff)
         self.assertEqual(len(rv), 3, 'Expected 3 interfaces.')
 
 
diff --git a/test/test_ip4.py b/test/test_ip4.py
index 2592f5846..16f1a1ec0 100644
--- a/test/test_ip4.py
+++ b/test/test_ip4.py
@@ -12,16 +12,16 @@ from scapy.packet import Raw
 from six import moves
 
 from framework import VppTestCase, VppTestRunner
-from util import ppp
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppIpMRoute, \
+from vpp_pom.util import ppp
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppIpMRoute, \
     VppMRoutePath, VppMplsIpBind, \
     VppMplsTable, VppIpTable, FibPathType, find_route, \
     VppIpInterfaceAddress, find_route_in_dump, find_mroute_in_dump
-from vpp_sub_interface import VppSubInterface, VppDot1QSubint, VppDot1ADSubint
+from vpp_pom.vpp_sub_interface import VppSubInterface, VppDot1QSubint, VppDot1ADSubint
 from vpp_papi import VppEnum
-from vpp_neighbor import VppNeighbor
-from vpp_lo_interface import VppLoInterface
-from vpp_policer import VppPolicer
+from vpp_pom.vpp_neighbor import VppNeighbor
+from vpp_pom.vpp_lo_interface import VppLoInterface
+from vpp_pom.vpp_policer import VppPolicer
 
 NUM_PKTS = 67
 
@@ -62,8 +62,8 @@ class TestIPv4(VppTestCase):
 
         # create 2 subinterfaces for pg1 and pg2
         self.sub_interfaces = [
-            VppDot1QSubint(self, self.pg1, 100),
-            VppDot1ADSubint(self, self.pg2, 200, 300, 400)]
+            VppDot1QSubint(self.vclient, self.pg1, 100),
+            VppDot1ADSubint(self.vclient, self.pg2, 200, 300, 400)]
 
         # packet flows mapping pg0 -> pg1.sub, pg2.sub, etc.
         self.flows = dict()
@@ -90,8 +90,8 @@ class TestIPv4(VppTestCase):
         super(TestIPv4, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show ip4 neighbors"))
-        # info(self.vapi.cli("show ip fib"))  # many entries
+        self.logger.info(self.vclient.cli("show ip4 neighbors"))
+        # info(self.vclient.cli("show ip fib"))  # many entries
 
     def modify_packet(self, src_if, packet_size, pkt):
         """Add load, set destination IP and extend packet to required packet
@@ -219,7 +219,7 @@ class TestIPv4RouteLookup(VppTestCase):
     routes = []
 
     def route_lookup(self, prefix, exact):
-        return self.vapi.api(self.vapi.papi.ip_route_lookup,
+        return self.vclient.api(self.vclient.papi.ip_route_lookup,
                              {
                                  'table_id': 0,
                                  'exact': exact,
@@ -241,15 +241,15 @@ class TestIPv4RouteLookup(VppTestCase):
                                type=FibPathType.FIB_PATH_TYPE_DROP)
 
         # Add 3 routes
-        r = VppIpRoute(self, "1.1.0.0", 16, [drop_nh])
+        r = VppIpRoute(self.vclient, "1.1.0.0", 16, [drop_nh])
         r.add_vpp_config()
         self.routes.append(r)
 
-        r = VppIpRoute(self, "1.1.1.0", 24, [drop_nh])
+        r = VppIpRoute(self.vclient, "1.1.1.0", 24, [drop_nh])
         r.add_vpp_config()
         self.routes.append(r)
 
-        r = VppIpRoute(self, "1.1.1.1", 32, [drop_nh])
+        r = VppIpRoute(self.vclient, "1.1.1.1", 32, [drop_nh])
         r.add_vpp_config()
         self.routes.append(r)
 
@@ -272,7 +272,7 @@ class TestIPv4RouteLookup(VppTestCase):
         assert (prefix == str(result.route.prefix))
 
         # Verify we do not find an available LPM.
-        with self.vapi.assert_negative_api_retval():
+        with self.vclient.assert_negative_api_retval():
             self.route_lookup("1.1.1.2/32", True)
 
     def test_longest_prefix_match(self):
@@ -332,39 +332,39 @@ class TestIPv4IfAddrRoute(VppTestCase):
         """
 
         # create two addresses, verify route not present
-        if_addr1 = VppIpInterfaceAddress(self, self.pg0, "10.10.10.10", 24)
-        if_addr2 = VppIpInterfaceAddress(self, self.pg0, "10.10.10.20", 24)
+        if_addr1 = VppIpInterfaceAddress(self.vclient, self.pg0, "10.10.10.10", 24)
+        if_addr2 = VppIpInterfaceAddress(self.vclient, self.pg0, "10.10.10.20", 24)
         self.assertFalse(if_addr1.query_vpp_config())  # 10.10.10.10/24
-        self.assertFalse(find_route(self, "10.10.10.10", 32))
-        self.assertFalse(find_route(self, "10.10.10.20", 32))
-        self.assertFalse(find_route(self, "10.10.10.255", 32))
-        self.assertFalse(find_route(self, "10.10.10.0", 32))
+        self.assertFalse(find_route(self.vclient, "10.10.10.10", 32))
+        self.assertFalse(find_route(self.vclient, "10.10.10.20", 32))
+        self.assertFalse(find_route(self.vclient, "10.10.10.255", 32))
+        self.assertFalse(find_route(self.vclient, "10.10.10.0", 32))
 
         # configure first address, verify route present
         if_addr1.add_vpp_config()
         self.assertTrue(if_addr1.query_vpp_config())  # 10.10.10.10/24
-        self.assertTrue(find_route(self, "10.10.10.10", 32))
-        self.assertFalse(find_route(self, "10.10.10.20", 32))
-        self.assertTrue(find_route(self, "10.10.10.255", 32))
-        self.assertTrue(find_route(self, "10.10.10.0", 32))
+        self.assertTrue(find_route(self.vclient, "10.10.10.10", 32))
+        self.assertFalse(find_route(self.vclient, "10.10.10.20", 32))
+        self.assertTrue(find_route(self.vclient, "10.10.10.255", 32))
+        self.assertTrue(find_route(self.vclient, "10.10.10.0", 32))
 
         # configure second address, delete first, verify route not removed
         if_addr2.add_vpp_config()
         if_addr1.remove_vpp_config()
         self.assertFalse(if_addr1.query_vpp_config())  # 10.10.10.10/24
         self.assertTrue(if_addr2.query_vpp_config())  # 10.10.10.20/24
-        self.assertFalse(find_route(self, "10.10.10.10", 32))
-        self.assertTrue(find_route(self, "10.10.10.20", 32))
-        self.assertTrue(find_route(self, "10.10.10.255", 32))
-        self.assertTrue(find_route(self, "10.10.10.0", 32))
+        self.assertFalse(find_route(self.vclient, "10.10.10.10", 32))
+        self.assertTrue(find_route(self.vclient, "10.10.10.20", 32))
+        self.assertTrue(find_route(self.vclient, "10.10.10.255", 32))
+        self.assertTrue(find_route(self.vclient, "10.10.10.0", 32))
 
         # delete second address, verify route removed
         if_addr2.remove_vpp_config()
         self.assertFalse(if_addr2.query_vpp_config())  # 10.10.10.20/24
-        self.assertFalse(find_route(self, "10.10.10.10", 32))
-        self.assertFalse(find_route(self, "10.10.10.20", 32))
-        self.assertFalse(find_route(self, "10.10.10.255", 32))
-        self.assertFalse(find_route(self, "10.10.10.0", 32))
+        self.assertFalse(find_route(self.vclient, "10.10.10.10", 32))
+        self.assertFalse(find_route(self.vclient, "10.10.10.20", 32))
+        self.assertFalse(find_route(self.vclient, "10.10.10.255", 32))
+        self.assertFalse(find_route(self.vclient, "10.10.10.0", 32))
 
     def test_ipv4_ifaddr_route(self):
         """ IPv4 Interface Address Route test
@@ -391,24 +391,24 @@ class TestIPv4IfAddrRoute(VppTestCase):
         lo_if.config_ip4()
 
         # The intf was down when addr was added -> entry not in FIB
-        fib4_dump = self.vapi.ip_route_dump(0)
+        fib4_dump = self.vclient.ip_route_dump(0)
         self.assertFalse(lo_if.is_ip4_entry_in_fib_dump(fib4_dump))
 
         # When intf is brought up, entry is added
         lo_if.admin_up()
-        fib4_dump = self.vapi.ip_route_dump(0)
+        fib4_dump = self.vclient.ip_route_dump(0)
         self.assertTrue(lo_if.is_ip4_entry_in_fib_dump(fib4_dump))
 
         # When intf is brought down, entry is removed
         lo_if.admin_down()
-        fib4_dump = self.vapi.ip_route_dump(0)
+        fib4_dump = self.vclient.ip_route_dump(0)
         self.assertFalse(lo_if.is_ip4_entry_in_fib_dump(fib4_dump))
 
         # Remove addr, bring up interface, re-add -> entry in FIB
         lo_if.unconfig_ip4()
         lo_if.admin_up()
         lo_if.config_ip4()
-        fib4_dump = self.vapi.ip_route_dump(0)
+        fib4_dump = self.vclient.ip_route_dump(0)
         self.assertTrue(lo_if.is_ip4_entry_in_fib_dump(fib4_dump))
 
     def test_ipv4_ifaddr_del(self):
@@ -423,8 +423,8 @@ class TestIPv4IfAddrRoute(VppTestCase):
         #
         # try and remove pg0's subnet from lo
         #
-        with self.vapi.assert_negative_api_retval():
-            self.vapi.sw_interface_add_del_address(
+        with self.vclient.assert_negative_api_retval():
+            self.vclient.sw_interface_add_del_address(
                 sw_if_index=lo.sw_if_index,
                 prefix=self.pg0.local_ip4_prefix,
                 is_add=0)
@@ -521,7 +521,7 @@ class TestIPv4FibCrud(VppTestCase):
         """
         routes = []
         for i in range(count):
-            r = VppIpRoute(self, start_dest_addr % (i + start), 32,
+            r = VppIpRoute(self.vclient, start_dest_addr % (i + start), 32,
                            [VppRoutePath(next_hop_addr, 0xffffffff)])
             r.add_vpp_config()
             routes.append(r)
@@ -532,7 +532,7 @@ class TestIPv4FibCrud(VppTestCase):
 
         routes = []
         for i in range(count):
-            r = VppIpRoute(self, start_dest_addr % (i + start), 32,
+            r = VppIpRoute(self.vclient, start_dest_addr % (i + start), 32,
                            [VppRoutePath(next_hop_addr, 0xffffffff)])
             r.remove_vpp_config()
             routes.append(r)
@@ -582,13 +582,13 @@ class TestIPv4FibCrud(VppTestCase):
 
     def verify_route_dump(self, routes):
         for r in routes:
-            self.assertTrue(find_route(self,
+            self.assertTrue(find_route(self.vclient,
                                        r.prefix.network_address,
                                        r.prefix.prefixlen))
 
     def verify_not_in_route_dump(self, routes):
         for r in routes:
-            self.assertFalse(find_route(self,
+            self.assertFalse(find_route(self.vclient,
                                         r.prefix.network_address,
                                         r.prefix.prefixlen))
 
@@ -773,7 +773,7 @@ class TestIPNull(VppTestCase):
         # A route via IP NULL that will reply with ICMP unreachables
         #
         ip_unreach = VppIpRoute(
-            self, "10.0.0.1", 32,
+            self.vclient, "10.0.0.1", 32,
             [VppRoutePath("0.0.0.0",
                           0xffffffff,
                           type=FibPathType.FIB_PATH_TYPE_ICMP_UNREACH)])
@@ -806,7 +806,7 @@ class TestIPNull(VppTestCase):
         # A route via IP NULL that will reply with ICMP prohibited
         #
         ip_prohibit = VppIpRoute(
-            self, "10.0.0.2", 32,
+            self.vclient, "10.0.0.2", 32,
             [VppRoutePath("0.0.0.0",
                           0xffffffff,
                           type=FibPathType.FIB_PATH_TYPE_ICMP_PROHIBIT)])
@@ -841,7 +841,7 @@ class TestIPNull(VppTestCase):
              UDP(sport=1234, dport=1234) /
              Raw(b'\xa5' * 100))
 
-        r1 = VppIpRoute(self, "1.1.1.0", 24,
+        r1 = VppIpRoute(self.vclient, "1.1.1.0", 24,
                         [VppRoutePath(self.pg1.remote_ip4,
                                       self.pg1.sw_if_index)])
         r1.add_vpp_config()
@@ -851,7 +851,7 @@ class TestIPNull(VppTestCase):
         #
         # insert a more specific as a drop
         #
-        r2 = VppIpRoute(self, "1.1.1.1", 32,
+        r2 = VppIpRoute(self.vclient, "1.1.1.1", 32,
                         [VppRoutePath("0.0.0.0",
                                       0xffffffff,
                                       type=FibPathType.FIB_PATH_TYPE_DROP)])
@@ -904,7 +904,7 @@ class TestIPDisabled(VppTestCase):
         # one accepting interface, pg0, 2 forwarding interfaces
         #
         route_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -998,7 +998,7 @@ class TestIPSubNets(VppTestCase):
         # Configure a covering route to forward so we know
         # when we are dropping
         #
-        cover_route = VppIpRoute(self, "10.0.0.0", 8,
+        cover_route = VppIpRoute(self.vclient, "10.0.0.0", 8,
                                  [VppRoutePath(self.pg1.remote_ip4,
                                                self.pg1.sw_if_index)])
         cover_route.add_vpp_config()
@@ -1019,7 +1019,7 @@ class TestIPSubNets(VppTestCase):
         #
         ip_addr_n = socket.inet_pton(socket.AF_INET, "10.10.10.10")
 
-        self.vapi.sw_interface_add_del_address(
+        self.vclient.sw_interface_add_del_address(
             sw_if_index=self.pg0.sw_if_index,
             prefix="10.10.10.10/16")
 
@@ -1038,7 +1038,7 @@ class TestIPSubNets(VppTestCase):
         self.send_and_assert_no_replies(self.pg1, pb, "IP Broadcast address")
 
         # remove the sub-net and we are forwarding via the cover again
-        self.vapi.sw_interface_add_del_address(
+        self.vclient.sw_interface_add_del_address(
             sw_if_index=self.pg0.sw_if_index,
             prefix="10.10.10.10/16",
             is_add=0)
@@ -1058,7 +1058,7 @@ class TestIPSubNets(VppTestCase):
         #
         ip_addr_n = socket.inet_pton(socket.AF_INET, "10.10.10.10")
 
-        self.vapi.sw_interface_add_del_address(
+        self.vclient.sw_interface_add_del_address(
             sw_if_index=self.pg0.sw_if_index,
             prefix="10.10.10.10/31")
 
@@ -1075,7 +1075,7 @@ class TestIPSubNets(VppTestCase):
         rx[ARP]
 
         # remove the sub-net and we are forwarding via the cover again
-        self.vapi.sw_interface_add_del_address(
+        self.vclient.sw_interface_add_del_address(
             sw_if_index=self.pg0.sw_if_index,
             prefix="10.10.10.10/31", is_add=0)
 
@@ -1100,7 +1100,7 @@ class TestIPLoadBalance(VppTestCase):
         super(TestIPLoadBalance, self).setUp()
 
         self.create_pg_interfaces(range(5))
-        mpls_tbl = VppMplsTable(self, 0)
+        mpls_tbl = VppMplsTable(self.vclient, 0)
         mpls_tbl.add_vpp_config()
 
         for i in self.pg_interfaces:
@@ -1172,14 +1172,14 @@ class TestIPLoadBalance(VppTestCase):
                                   MPLS(label=66, ttl=2) /
                                   src_ip_hdr))
 
-        route_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        route_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                     [VppRoutePath(self.pg1.remote_ip4,
                                                   self.pg1.sw_if_index),
                                      VppRoutePath(self.pg2.remote_ip4,
                                                   self.pg2.sw_if_index)])
         route_10_0_0_1.add_vpp_config()
 
-        binding = VppMplsIpBind(self, 66, "10.0.0.1", 32)
+        binding = VppMplsIpBind(self.vclient, 66, "10.0.0.1", 32)
         binding.add_vpp_config()
 
         #
@@ -1205,7 +1205,7 @@ class TestIPLoadBalance(VppTestCase):
         #  - now only the stream with differing source address will
         #    load-balance
         #
-        self.vapi.set_ip_flow_hash(vrf_id=0, src=1, dst=1, sport=0, dport=0)
+        self.vclient.set_ip_flow_hash(vrf_id=0, src=1, dst=1, sport=0, dport=0)
 
         self.send_and_expect_load_balancing(self.pg0, src_ip_pkts,
                                             [self.pg1, self.pg2])
@@ -1217,7 +1217,7 @@ class TestIPLoadBalance(VppTestCase):
         #
         # change the flow hash config back to defaults
         #
-        self.vapi.set_ip_flow_hash(vrf_id=0, src=1, dst=1, sport=1, dport=1)
+        self.vclient.set_ip_flow_hash(vrf_id=0, src=1, dst=1, sport=1, dport=1)
 
         #
         # Recursive prefixes
@@ -1239,14 +1239,14 @@ class TestIPLoadBalance(VppTestCase):
                              UDP(sport=1234, dport=1234) /
                              Raw(b'\xa5' * 100)))
 
-        route_10_0_0_2 = VppIpRoute(self, "10.0.0.2", 32,
+        route_10_0_0_2 = VppIpRoute(self.vclient, "10.0.0.2", 32,
                                     [VppRoutePath(self.pg3.remote_ip4,
                                                   self.pg3.sw_if_index),
                                      VppRoutePath(self.pg4.remote_ip4,
                                                   self.pg4.sw_if_index)])
         route_10_0_0_2.add_vpp_config()
 
-        route_1_1_1_1 = VppIpRoute(self, "1.1.1.1", 32,
+        route_1_1_1_1 = VppIpRoute(self.vclient, "1.1.1.1", 32,
                                    [VppRoutePath("10.0.0.2", 0xffffffff),
                                     VppRoutePath("10.0.0.1", 0xffffffff)])
         route_1_1_1_1.add_vpp_config()
@@ -1254,7 +1254,7 @@ class TestIPLoadBalance(VppTestCase):
         #
         # inject the packet on pg0 - expect load-balancing across all 4 paths
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.send_and_expect_load_balancing(self.pg0, port_pkts,
                                             [self.pg1, self.pg2,
                                              self.pg3, self.pg4])
@@ -1322,19 +1322,19 @@ class TestIPLoadBalance(VppTestCase):
                               UDP(sport=1234, dport=1234 + ii) /
                               Raw(b'\xa5' * 100)))
 
-        route_10_0_0_3 = VppIpRoute(self, "10.0.0.3", 32,
+        route_10_0_0_3 = VppIpRoute(self.vclient, "10.0.0.3", 32,
                                     [VppRoutePath(self.pg3.remote_ip4,
                                                   self.pg3.sw_if_index)])
         route_10_0_0_3.add_vpp_config()
 
-        route_1_1_1_2 = VppIpRoute(self, "1.1.1.2", 32,
+        route_1_1_1_2 = VppIpRoute(self.vclient, "1.1.1.2", 32,
                                    [VppRoutePath("10.0.0.3", 0xffffffff)])
         route_1_1_1_2.add_vpp_config()
 
         #
         # inject the packet on pg0 - rx only on via routes output interface
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.send_and_expect_one_itf(self.pg0, port_pkts, self.pg3)
 
         #
@@ -1343,7 +1343,7 @@ class TestIPLoadBalance(VppTestCase):
         #
         self.pg3.link_down()
 
-        route_10_0_0_3 = VppIpRoute(self, "10.0.0.3", 32,
+        route_10_0_0_3 = VppIpRoute(self.vclient, "10.0.0.3", 32,
                                     [VppRoutePath(self.pg3.remote_ip4,
                                                   self.pg3.sw_if_index),
                                      VppRoutePath(self.pg4.remote_ip4,
@@ -1383,7 +1383,7 @@ class TestIPVlan0(VppTestCase):
         super(TestIPVlan0, self).setUp()
 
         self.create_pg_interfaces(range(2))
-        mpls_tbl = VppMplsTable(self, 0)
+        mpls_tbl = VppMplsTable(self.vclient, 0)
         mpls_tbl.add_vpp_config()
 
         for i in self.pg_interfaces:
@@ -1463,7 +1463,7 @@ class TestIPPunt(VppTestCase):
             }
         }
 
-        self.vapi.set_punt(is_add=1, punt=punt_udp)
+        self.vclient.set_punt(is_add=1, punt=punt_udp)
 
         p = (Ether(src=self.pg0.remote_mac,
                    dst=self.pg0.local_mac) /
@@ -1477,7 +1477,7 @@ class TestIPPunt(VppTestCase):
         # Configure a punt redirect via pg1.
         #
         nh_addr = self.pg1.remote_ip4
-        self.vapi.ip_punt_redirect(self.pg0.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg0.sw_if_index,
                                    self.pg1.sw_if_index,
                                    nh_addr)
 
@@ -1486,11 +1486,11 @@ class TestIPPunt(VppTestCase):
         #
         # add a policer
         #
-        policer = VppPolicer(self, "ip4-punt", 400, 0, 10, 0, rate_type=1)
+        policer = VppPolicer(self.vclient, "ip4-punt", 400, 0, 10, 0, rate_type=1)
         policer.add_vpp_config()
-        self.vapi.ip_punt_police(policer.policer_index)
+        self.vclient.ip_punt_police(policer.policer_index)
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -1506,14 +1506,14 @@ class TestIPPunt(VppTestCase):
         #
         # remove the policer. back to full rx
         #
-        self.vapi.ip_punt_police(policer.policer_index, is_add=0)
+        self.vclient.ip_punt_police(policer.policer_index, is_add=0)
         policer.remove_vpp_config()
         self.send_and_expect(self.pg0, pkts, self.pg1)
 
         #
         # remove the redirect. expect full drop.
         #
-        self.vapi.ip_punt_redirect(self.pg0.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg0.sw_if_index,
                                    self.pg1.sw_if_index,
                                    nh_addr,
                                    is_add=0)
@@ -1523,12 +1523,12 @@ class TestIPPunt(VppTestCase):
         #
         # Add a redirect that is not input port selective
         #
-        self.vapi.ip_punt_redirect(0xffffffff,
+        self.vclient.ip_punt_redirect(0xffffffff,
                                    self.pg1.sw_if_index,
                                    nh_addr)
         self.send_and_expect(self.pg0, pkts, self.pg1)
 
-        self.vapi.ip_punt_redirect(0xffffffff,
+        self.vclient.ip_punt_redirect(0xffffffff,
                                    self.pg1.sw_if_index,
                                    nh_addr,
                                    is_add=0)
@@ -1540,27 +1540,27 @@ class TestIPPunt(VppTestCase):
         # Configure a punt redirects
         #
         nh_address = self.pg3.remote_ip4
-        self.vapi.ip_punt_redirect(self.pg0.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg0.sw_if_index,
                                    self.pg3.sw_if_index,
                                    nh_address)
-        self.vapi.ip_punt_redirect(self.pg1.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg1.sw_if_index,
                                    self.pg3.sw_if_index,
                                    nh_address)
-        self.vapi.ip_punt_redirect(self.pg2.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg2.sw_if_index,
                                    self.pg3.sw_if_index,
                                    '0.0.0.0')
 
         #
         # Dump pg0 punt redirects
         #
-        punts = self.vapi.ip_punt_redirect_dump(self.pg0.sw_if_index)
+        punts = self.vclient.ip_punt_redirect_dump(self.pg0.sw_if_index)
         for p in punts:
             self.assertEqual(p.punt.rx_sw_if_index, self.pg0.sw_if_index)
 
         #
         # Dump punt redirects for all interfaces
         #
-        punts = self.vapi.ip_punt_redirect_dump(0xffffffff)
+        punts = self.vclient.ip_punt_redirect_dump(0xffffffff)
         self.assertEqual(len(punts), 3)
         for p in punts:
             self.assertEqual(p.punt.tx_sw_if_index, self.pg3.sw_if_index)
@@ -1603,8 +1603,8 @@ class TestIPDeag(VppTestCase):
         #  1 - another destination address lookup
         #  2 - a source address lookup
         #
-        table_dst = VppIpTable(self, 1)
-        table_src = VppIpTable(self, 2)
+        table_dst = VppIpTable(self.vclient, 1)
+        table_src = VppIpTable(self.vclient, 2)
         table_dst.add_vpp_config()
         table_src.add_vpp_config()
 
@@ -1612,12 +1612,12 @@ class TestIPDeag(VppTestCase):
         # Add a route in the default table to point to a deag/
         # second lookup in each of these tables
         #
-        route_to_dst = VppIpRoute(self, "1.1.1.1", 32,
+        route_to_dst = VppIpRoute(self.vclient, "1.1.1.1", 32,
                                   [VppRoutePath("0.0.0.0",
                                                 0xffffffff,
                                                 nh_table_id=1)])
         route_to_src = VppIpRoute(
-            self, "1.1.1.2", 32,
+            self.vclient, "1.1.1.2", 32,
             [VppRoutePath("0.0.0.0",
                           0xffffffff,
                           nh_table_id=2,
@@ -1650,7 +1650,7 @@ class TestIPDeag(VppTestCase):
         #
         # add a route in the dst table to forward via pg1
         #
-        route_in_dst = VppIpRoute(self, "1.1.1.1", 32,
+        route_in_dst = VppIpRoute(self.vclient, "1.1.1.1", 32,
                                   [VppRoutePath(self.pg1.remote_ip4,
                                                 self.pg1.sw_if_index)],
                                   table_id=1)
@@ -1661,7 +1661,7 @@ class TestIPDeag(VppTestCase):
         #
         # add a route in the src table to forward via pg2
         #
-        route_in_src = VppIpRoute(self, "2.2.2.2", 32,
+        route_in_src = VppIpRoute(self.vclient, "2.2.2.2", 32,
                                   [VppRoutePath(self.pg2.remote_ip4,
                                                 self.pg2.sw_if_index)],
                                   table_id=2)
@@ -1671,7 +1671,7 @@ class TestIPDeag(VppTestCase):
         #
         # loop in the lookup DP
         #
-        route_loop = VppIpRoute(self, "2.2.2.3", 32,
+        route_loop = VppIpRoute(self.vclient, "2.2.2.3", 32,
                                 [VppRoutePath("0.0.0.0",
                                               0xffffffff,
                                               nh_table_id=0)])
@@ -1822,7 +1822,7 @@ class TestIPInput(VppTestCase):
                  UDP(sport=1234, dport=1234) /
                  Raw(b'\xa5' * 2000))
 
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index, [1500, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index, [1500, 0, 0, 0])
 
         rx = self.send_and_expect(self.pg0, p_mtu * NUM_PKTS, self.pg0)
         rx = rx[0]
@@ -1834,11 +1834,11 @@ class TestIPInput(VppTestCase):
         self.assertEqual(icmp.src, self.pg0.remote_ip4)
         self.assertEqual(icmp.dst, self.pg1.remote_ip4)
 
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index, [2500, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index, [2500, 0, 0, 0])
         rx = self.send_and_expect(self.pg0, p_mtu * NUM_PKTS, self.pg1)
 
         # Reset MTU for subsequent tests
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index, [9000, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index, [9000, 0, 0, 0])
 
         #
         # source address 0.0.0.0 and 25.255.255.255 and for-us
@@ -1890,7 +1890,7 @@ class TestIPDirectedBroadcast(VppTestCase):
         #
         # set the directed broadcast on pg0 first, then config IP4 addresses
         # for pg1 directed broadcast is always disabled
-        self.vapi.sw_interface_set_ip_directed_broadcast(
+        self.vclient.sw_interface_set_ip_directed_broadcast(
             self.pg0.sw_if_index, 1)
 
         p0 = (Ether(src=self.pg1.remote_mac,
@@ -1923,12 +1923,12 @@ class TestIPDirectedBroadcast(VppTestCase):
         #
         # toggle directed broadcast on pg0
         #
-        self.vapi.sw_interface_set_ip_directed_broadcast(
+        self.vclient.sw_interface_set_ip_directed_broadcast(
             self.pg0.sw_if_index, 0)
         self.send_and_assert_no_replies(self.pg1, p0 * NUM_PKTS,
                                         "directed broadcast disabled")
 
-        self.vapi.sw_interface_set_ip_directed_broadcast(
+        self.vclient.sw_interface_set_ip_directed_broadcast(
             self.pg0.sw_if_index, 1)
         rx = self.send_and_expect(self.pg1, p0 * NUM_PKTS, self.pg0)
 
@@ -1966,11 +1966,11 @@ class TestIPLPM(VppTestCase):
     def test_ip_lpm(self):
         """ IP longest Prefix Match """
 
-        s_24 = VppIpRoute(self, "10.1.2.0", 24,
+        s_24 = VppIpRoute(self.vclient, "10.1.2.0", 24,
                           [VppRoutePath(self.pg1.remote_ip4,
                                         self.pg1.sw_if_index)])
         s_24.add_vpp_config()
-        s_8 = VppIpRoute(self, "10.0.0.0", 8,
+        s_8 = VppIpRoute(self.vclient, "10.0.0.0", 8,
                          [VppRoutePath(self.pg2.remote_ip4,
                                        self.pg2.sw_if_index)])
         s_8.add_vpp_config()
@@ -1988,7 +1988,7 @@ class TestIPLPM(VppTestCase):
                 UDP(sport=1234, dport=1234) /
                 Raw(b'\xa5' * 2000))
 
-        self.logger.info(self.vapi.cli("sh ip fib mtrie"))
+        self.logger.info(self.vclient.cli("sh ip fib mtrie"))
         rx = self.send_and_expect(self.pg0, p_8 * NUM_PKTS, self.pg2)
         rx = self.send_and_expect(self.pg0, p_24 * NUM_PKTS, self.pg1)
 
@@ -2017,7 +2017,7 @@ class TestIPv4Frag(VppTestCase):
     def test_frag_large_packets(self):
         """ Fragmentation of large packets """
 
-        self.vapi.cli("adjacency counters enable")
+        self.vclient.cli("adjacency counters enable")
 
         p = (Ether(dst=self.src_if.local_mac, src=self.src_if.remote_mac) /
              IP(src=self.src_if.remote_ip4, dst=self.dst_if.remote_ip4) /
@@ -2025,14 +2025,14 @@ class TestIPv4Frag(VppTestCase):
         self.extend_packet(p, 6000, "abcde")
         saved_payload = p[Raw].load
 
-        nbr = VppNeighbor(self,
+        nbr = VppNeighbor(self.vclient,
                           self.dst_if.sw_if_index,
                           self.dst_if.remote_mac,
                           self.dst_if.remote_ip4).add_vpp_config()
 
         # Force fragmentation by setting MTU of output interface
         # lower than packet size
-        self.vapi.sw_interface_set_mtu(self.dst_if.sw_if_index,
+        self.vclient.sw_interface_set_mtu(self.dst_if.sw_if_index,
                                        [5000, 0, 0, 0])
 
         self.pg_enable_capture()
@@ -2081,7 +2081,7 @@ class TestIPReplace(VppTestCase):
             i.config_ip4()
             i.resolve_arp()
             i.generate_remote_hosts(2)
-            self.tables.append(VppIpTable(self, table_id).add_vpp_config())
+            self.tables.append(VppIpTable(self.vclient, table_id).add_vpp_config())
             table_id += 1
 
     def tearDown(self):
@@ -2103,14 +2103,14 @@ class TestIPReplace(VppTestCase):
         for ii, t in enumerate(self.tables):
             for jj in range(N_ROUTES):
                 uni = VppIpRoute(
-                    self, "10.0.0.%d" % jj, 32,
+                    self.vclient, "10.0.0.%d" % jj, 32,
                     [VppRoutePath(links[ii].remote_hosts[0].ip4,
                                   links[ii].sw_if_index),
                      VppRoutePath(links[ii].remote_hosts[1].ip4,
                                   links[ii].sw_if_index)],
                     table_id=t.table_id).add_vpp_config()
                 multi = VppIpMRoute(
-                    self, "0.0.0.0",
+                    self.vclient, "0.0.0.0",
                     "239.0.0.%d" % jj, 32,
                     MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
                     [VppMRoutePath(self.pg0.sw_if_index,
@@ -2213,7 +2213,7 @@ class TestIPCover(VppTestCase):
             i.config_ip4()
             i.resolve_arp()
             i.generate_remote_hosts(2)
-            self.tables.append(VppIpTable(self, table_id).add_vpp_config())
+            self.tables.append(VppIpTable(self.vclient, table_id).add_vpp_config())
             table_id += 1
 
     def tearDown(self):
@@ -2226,24 +2226,25 @@ class TestIPCover(VppTestCase):
         """ IP Table Cover """
 
         # add a loop back with a /32 prefix
-        lo = VppLoInterface(self)
+        lo = VppLoInterface(self.vclient)
+        lo.add_vpp_config()
         lo.admin_up()
-        a = VppIpInterfaceAddress(self, lo, "127.0.0.1", 32).add_vpp_config()
+        a = VppIpInterfaceAddress(self.vclient, lo, "127.0.0.1", 32).add_vpp_config()
 
         # add a neighbour that matches the loopback's /32
-        nbr = VppNeighbor(self,
+        nbr = VppNeighbor(self.vclient,
                           lo.sw_if_index,
                           lo.remote_mac,
                           "127.0.0.1").add_vpp_config()
 
         # add the default route which will be the cover for /32
-        r = VppIpRoute(self, "0.0.0.0", 0,
+        r = VppIpRoute(self.vclient, "0.0.0.0", 0,
                        [VppRoutePath("127.0.0.1",
                                      lo.sw_if_index)],
                        register=False).add_vpp_config()
 
         # add/remove/add a longer mask cover
-        r = VppIpRoute(self, "127.0.0.0", 8,
+        r = VppIpRoute(self.vclient, "127.0.0.0", 8,
                        [VppRoutePath("127.0.0.1",
                                      lo.sw_if_index)]).add_vpp_config()
         r.remove_vpp_config()
@@ -2278,7 +2279,7 @@ class TestIP4Replace(VppTestCase):
             i.admin_down()
 
     def get_n_pfxs(self, intf):
-        return len(self.vapi.ip_address_dump(intf.sw_if_index))
+        return len(self.vclient.ip_address_dump(intf.sw_if_index))
 
     def test_replace(self):
         """ IP interface address replace """
@@ -2291,17 +2292,17 @@ class TestIP4Replace(VppTestCase):
 
             # 172.16.x.1/24
             addr = "172.16.%d.1" % intf.sw_if_index
-            a = VppIpInterfaceAddress(self, intf, addr, 24).add_vpp_config()
+            a = VppIpInterfaceAddress(self.vclient, intf, addr, 24).add_vpp_config()
             intf_pfxs[i].append(a)
 
             # 172.16.x.2/24 - a different address in the same subnet as above
             addr = "172.16.%d.2" % intf.sw_if_index
-            a = VppIpInterfaceAddress(self, intf, addr, 24).add_vpp_config()
+            a = VppIpInterfaceAddress(self.vclient, intf, addr, 24).add_vpp_config()
             intf_pfxs[i].append(a)
 
             # 172.15.x.2/24 - a different address and subnet
             addr = "172.15.%d.2" % intf.sw_if_index
-            a = VppIpInterfaceAddress(self, intf, addr, 24).add_vpp_config()
+            a = VppIpInterfaceAddress(self.vclient, intf, addr, 24).add_vpp_config()
             intf_pfxs[i].append(a)
 
         # a dump should n_address in it
@@ -2311,8 +2312,8 @@ class TestIP4Replace(VppTestCase):
         #
         # remove all the address thru a replace
         #
-        self.vapi.sw_interface_address_replace_begin()
-        self.vapi.sw_interface_address_replace_end()
+        self.vclient.sw_interface_address_replace_begin()
+        self.vclient.sw_interface_address_replace_end()
         for intf in self.pg_interfaces:
             self.assertEqual(self.get_n_pfxs(intf), 0)
 
@@ -2329,13 +2330,13 @@ class TestIP4Replace(VppTestCase):
         # replace again, but this time update/re-add the address on the first
         # two interfaces
         #
-        self.vapi.sw_interface_address_replace_begin()
+        self.vclient.sw_interface_address_replace_begin()
 
         for p in intf_pfxs[:2]:
             for v in p:
                 v.add_vpp_config()
 
-        self.vapi.sw_interface_address_replace_end()
+        self.vclient.sw_interface_address_replace_end()
 
         # on the first two the address still exist,
         # on the other two they do not
@@ -2359,16 +2360,16 @@ class TestIP4Replace(VppTestCase):
         #
         # replace again, this time add different prefixes on all the interfaces
         #
-        self.vapi.sw_interface_address_replace_begin()
+        self.vclient.sw_interface_address_replace_begin()
 
         pfxs = []
         for intf in self.pg_interfaces:
             # 172.18.x.1/24
             addr = "172.18.%d.1" % intf.sw_if_index
-            pfxs.append(VppIpInterfaceAddress(self, intf, addr,
+            pfxs.append(VppIpInterfaceAddress(self.vclient, intf, addr,
                                               24).add_vpp_config())
 
-        self.vapi.sw_interface_address_replace_end()
+        self.vclient.sw_interface_address_replace_end()
 
         # only .18 should exist on each interface
         for intf in self.pg_interfaces:
@@ -2379,8 +2380,8 @@ class TestIP4Replace(VppTestCase):
         #
         # remove everything
         #
-        self.vapi.sw_interface_address_replace_begin()
-        self.vapi.sw_interface_address_replace_end()
+        self.vclient.sw_interface_address_replace_begin()
+        self.vclient.sw_interface_address_replace_end()
         for intf in self.pg_interfaces:
             self.assertEqual(self.get_n_pfxs(intf), 0)
 
@@ -2393,20 +2394,20 @@ class TestIP4Replace(VppTestCase):
         for intf in self.pg_interfaces:
             # 172.18.x.1/24
             addr = "172.18.%d.1" % intf.sw_if_index
-            VppIpInterfaceAddress(self, intf, addr, 24).add_vpp_config()
+            VppIpInterfaceAddress(self.vclient, intf, addr, 24).add_vpp_config()
 
-        self.vapi.sw_interface_address_replace_begin()
+        self.vclient.sw_interface_address_replace_begin()
 
         pfxs = []
         for intf in self.pg_interfaces:
             # 172.18.x.1/24
             addr = "172.18.%d.1" % (intf.sw_if_index + 1)
-            pfxs.append(VppIpInterfaceAddress(self, intf,
+            pfxs.append(VppIpInterfaceAddress(self.vclient, intf,
                                               addr, 24).add_vpp_config())
 
-        self.vapi.sw_interface_address_replace_end()
+        self.vclient.sw_interface_address_replace_end()
 
-        self.logger.info(self.vapi.cli("sh int addr"))
+        self.logger.info(self.vclient.cli("sh int addr"))
 
         for intf in self.pg_interfaces:
             self.assertEqual(self.get_n_pfxs(intf), 1)
diff --git a/test/test_ip4_irb.py b/test/test_ip4_irb.py
index de5231c7d..42b562a62 100644
--- a/test/test_ip4_irb.py
+++ b/test/test_ip4_irb.py
@@ -32,7 +32,7 @@ from scapy.layers.inet import IP, UDP
 
 from framework import VppTestCase, VppTestRunner
 from vpp_papi import MACAddress
-from vpp_l2 import L2_PORT_TYPE
+from vpp_pom.vpp_l2 import L2_PORT_TYPE
 
 
 class TestIpIrb(VppTestCase):
@@ -65,12 +65,12 @@ class TestIpIrb(VppTestCase):
             i.admin_up()
 
         # Create BD with MAC learning enabled and put interfaces to this BD
-        cls.vapi.sw_interface_set_l2_bridge(
+        cls.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=cls.bvi0.sw_if_index, bd_id=cls.bd_id,
             port_type=L2_PORT_TYPE.BVI)
-        cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=cls.pg0.sw_if_index,
+        cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=cls.pg0.sw_if_index,
                                             bd_id=cls.bd_id)
-        cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=cls.pg1.sw_if_index,
+        cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=cls.pg1.sw_if_index,
                                             bd_id=cls.bd_id)
 
         # Configure IPv4 addresses on BVI interface and routed interface
@@ -101,11 +101,11 @@ class TestIpIrb(VppTestCase):
         super(TestIpIrb, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show l2patch"))
-        self.logger.info(self.vapi.cli("show l2fib verbose"))
-        self.logger.info(self.vapi.cli("show bridge-domain %s detail" %
+        self.logger.info(self.vclient.cli("show l2patch"))
+        self.logger.info(self.vclient.cli("show l2fib verbose"))
+        self.logger.info(self.vclient.cli("show bridge-domain %s detail" %
                                        self.bd_id))
-        self.logger.info(self.vapi.cli("show ip neighbors"))
+        self.logger.info(self.vclient.cli("show ip neighbors"))
 
     def create_stream(self, src_ip_if, dst_ip_if, packet_sizes):
         pkts = []
@@ -251,7 +251,7 @@ class TestIpIrb(VppTestCase):
             self.pg0, self.bvi0, self.pg2, self.pg_if_packet_sizes)
         stream2 = self.create_stream_l2_to_ip(
             self.pg1, self.bvi0, self.pg2, self.pg_if_packet_sizes)
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.pg0.add_stream(stream1)
         self.pg1.add_stream(stream2)
 
diff --git a/test/test_ip4_vrf_multi_instance.py b/test/test_ip4_vrf_multi_instance.py
index 6444b97a3..974c33131 100644
--- a/test/test_ip4_vrf_multi_instance.py
+++ b/test/test_ip4_vrf_multi_instance.py
@@ -72,7 +72,7 @@ from scapy.layers.l2 import Ether, ARP
 from scapy.layers.inet import IP, UDP
 
 from framework import VppTestCase, VppTestRunner
-from util import ppp
+from vpp_pom.util import ppp
 from vrf import VRFState
 
 
@@ -166,8 +166,8 @@ class TestIp4VrfMultiInst(VppTestCase):
         super(TestIp4VrfMultiInst, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show ip fib"))
-        self.logger.info(self.vapi.ppcli("show ip4 neighbors"))
+        self.logger.info(self.vclient.ppcli("show ip fib"))
+        self.logger.info(self.vclient.ppcli("show ip4 neighbors"))
 
     def create_vrf_and_assign_interfaces(self, count, start=1):
         """
@@ -182,7 +182,7 @@ class TestIp4VrfMultiInst(VppTestCase):
         for i in range(count):
             vrf_id = i + start
             pg_if = self.pg_if_by_vrf_id[vrf_id][0]
-            self.vapi.ip_table_add_del(is_add=1, table={'table_id': vrf_id})
+            self.vclient.ip_table_add_del(is_add=1, table={'table_id': vrf_id})
             self.logger.info("IPv4 VRF ID %d created" % vrf_id)
             if vrf_id not in self.vrf_list:
                 self.vrf_list.append(vrf_id)
@@ -199,8 +199,8 @@ class TestIp4VrfMultiInst(VppTestCase):
                     self.pg_not_in_vrf.remove(pg_if)
                 pg_if.config_ip4()
                 pg_if.configure_ipv4_neighbors()
-        self.logger.debug(self.vapi.ppcli("show ip fib"))
-        self.logger.debug(self.vapi.ppcli("show ip4 neighbors"))
+        self.logger.debug(self.vclient.ppcli("show ip fib"))
+        self.logger.debug(self.vclient.ppcli("show ip4 neighbors"))
 
     def reset_vrf_and_remove_from_vrf_list(self, vrf_id):
         """
@@ -208,7 +208,7 @@ class TestIp4VrfMultiInst(VppTestCase):
 
         :param int vrf_id: The FIB table / VRF ID to be reset.
         """
-        self.vapi.ip_table_flush(table={'table_id': vrf_id})
+        self.vclient.ip_table_flush(table={'table_id': vrf_id})
         if vrf_id in self.vrf_list:
             self.vrf_list.remove(vrf_id)
         if vrf_id not in self.vrf_reset_list:
@@ -221,9 +221,9 @@ class TestIp4VrfMultiInst(VppTestCase):
             if pg_if not in self.pg_not_in_vrf:
                 self.pg_not_in_vrf.append(pg_if)
         self.logger.info("IPv4 VRF ID %d reset finished" % vrf_id)
-        self.logger.debug(self.vapi.ppcli("show ip fib"))
-        self.logger.debug(self.vapi.ppcli("show ip neighbors"))
-        self.vapi.ip_table_add_del(is_add=0, table={'table_id': vrf_id})
+        self.logger.debug(self.vclient.ppcli("show ip fib"))
+        self.logger.debug(self.vclient.ppcli("show ip neighbors"))
+        self.vclient.ip_table_add_del(is_add=0, table={'table_id': vrf_id})
 
     def create_stream(self, src_if, packet_sizes):
         """
@@ -334,7 +334,7 @@ class TestIp4VrfMultiInst(VppTestCase):
         :param int vrf_id: The FIB table / VRF ID to be verified.
         :return: 1 if the FIB table / VRF ID is configured, otherwise return 0.
         """
-        ip_fib_dump = self.vapi.ip_route_dump(vrf_id)
+        ip_fib_dump = self.vclient.ip_route_dump(vrf_id)
         vrf_exist = len(ip_fib_dump)
         vrf_count = 0
         for ip_fib_details in ip_fib_dump:
diff --git a/test/test_ip6.py b/test/test_ip6.py
index 740e2e285..0f1d64126 100644
--- a/test/test_ip6.py
+++ b/test/test_ip6.py
@@ -20,18 +20,18 @@ from scapy.utils6 import in6_getnsma, in6_getnsmac, in6_ptop, in6_islladdr, \
 from six import moves
 
 from framework import VppTestCase, VppTestRunner
-from util import ppp, ip6_normalize, mk_ll_addr
+from vpp_pom.util import ppp, ip6_normalize, mk_ll_addr
 from vpp_papi import VppEnum
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, find_route, VppIpMRoute, \
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, find_route, VppIpMRoute, \
     VppMRoutePath, VppMplsIpBind, \
     VppMplsRoute, VppMplsTable, VppIpTable, FibPathType, FibPathProto, \
     VppIpInterfaceAddress, find_route_in_dump, find_mroute_in_dump, \
     VppIp6LinkLocalAddress
-from vpp_neighbor import find_nbr, VppNeighbor
-from vpp_pg_interface import is_ipv6_misc
-from vpp_sub_interface import VppSubInterface, VppDot1QSubint
-from vpp_policer import VppPolicer
+from vpp_pom.vpp_neighbor import find_nbr, VppNeighbor
+from vpp_pom.vpp_pg_interface import is_ipv6_misc
+from vpp_pom.vpp_sub_interface import VppSubInterface, VppDot1QSubint
+from vpp_pom.vpp_policer import VppPolicer
 from ipaddress import IPv6Network, IPv6Address
 
 AF_INET6 = socket.AF_INET6
@@ -142,7 +142,7 @@ class TestIPv6ND(VppTestCase):
 
     def send_and_expect_ns(self, tx_intf, rx_intf, pkts, tgt_ip,
                            filter_out_fn=is_ipv6_misc):
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx_intf.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -204,9 +204,9 @@ class TestIPv6(TestIPv6ND):
 
         # create 2 subinterfaces for p1 and pg2
         self.sub_interfaces = [
-            VppDot1QSubint(self, self.pg1, 100),
-            VppDot1QSubint(self, self.pg2, 200)
-            # TODO: VppDot1ADSubint(self, self.pg2, 200, 300, 400)
+            VppDot1QSubint(self.vclient, self.pg1, 100),
+            VppDot1QSubint(self.vclient, self.pg2, 200)
+            # TODO: VppDot1ADSubint(self.vclient, self.pg2, 200, 300, 400)
         ]
 
         # packet flows mapping pg0 -> pg1.sub, pg2.sub, etc.
@@ -237,8 +237,8 @@ class TestIPv6(TestIPv6ND):
 
         super(TestIPv6, self).tearDown()
         if not self.vpp_dead:
-            self.logger.info(self.vapi.cli("show ip6 neighbors"))
-            # info(self.vapi.cli("show ip6 fib"))  # many entries
+            self.logger.info(self.vclient.cli("show ip6 neighbors"))
+            # info(self.vclient.cli("show ip6 fib"))  # many entries
 
     def modify_packet(self, src_if, packet_size, pkt):
         """Add load, set destination IP and extend packet to required packet
@@ -446,7 +446,7 @@ class TestIPv6(TestIPv6ND):
         # A neighbor entry that has no associated FIB-entry
         #
         self.pg0.generate_remote_hosts(4)
-        nd_entry = VppNeighbor(self,
+        nd_entry = VppNeighbor(self.vclient,
                                self.pg0.sw_if_index,
                                self.pg0.remote_hosts[2].mac,
                                self.pg0.remote_hosts[2].ip6,
@@ -456,10 +456,10 @@ class TestIPv6(TestIPv6ND):
         #
         # check we have the neighbor, but no route
         #
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg0.sw_if_index,
                                  self.pg0._remote_hosts[2].ip6))
-        self.assertFalse(find_route(self,
+        self.assertFalse(find_route(self.vclient,
                                     self.pg0._remote_hosts[2].ip6,
                                     128))
 
@@ -483,10 +483,10 @@ class TestIPv6(TestIPv6ND):
         # we should have learned an ND entry for the peer's link-local
         # but not inserted a route to it in the FIB
         #
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg0.sw_if_index,
                                  self.pg0._remote_hosts[2].ip6_ll))
-        self.assertFalse(find_route(self,
+        self.assertFalse(find_route(self.vclient,
                                     self.pg0._remote_hosts[2].ip6_ll,
                                     128))
 
@@ -509,10 +509,10 @@ class TestIPv6(TestIPv6ND):
         # we should have learned an ND entry for the peer's link-local
         # but not inserted a route to it in the FIB
         #
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg0.sw_if_index,
                                  self.pg0._remote_hosts[3].ip6_ll))
-        self.assertFalse(find_route(self,
+        self.assertFalse(find_route(self.vclient,
                                     self.pg0._remote_hosts[3].ip6_ll,
                                     128))
 
@@ -527,12 +527,12 @@ class TestIPv6(TestIPv6ND):
         #
         # Add host 1 on pg1 and pg2
         #
-        ns_pg1 = VppNeighbor(self,
+        ns_pg1 = VppNeighbor(self.vclient,
                              self.pg1.sw_if_index,
                              self.pg1.remote_hosts[1].mac,
                              self.pg1.remote_hosts[1].ip6)
         ns_pg1.add_vpp_config()
-        ns_pg2 = VppNeighbor(self,
+        ns_pg2 = VppNeighbor(self.vclient,
                              self.pg2.sw_if_index,
                              self.pg2.remote_mac,
                              self.pg1.remote_hosts[1].ip6)
@@ -647,7 +647,7 @@ class TestIPv6(TestIPv6ND):
                            filter_out_fn=is_ipv6_misc,
                            opt=None,
                            src_ip=None):
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         intf.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -939,7 +939,7 @@ class TestIPv6(TestIPv6ND):
         #
         # change the link's link local, so we know that works too.
         #
-        self.vapi.sw_interface_ip6_set_link_local_address(
+        self.vclient.sw_interface_ip6_set_link_local_address(
             sw_if_index=self.pg0.sw_if_index,
             ip="fe80::88")
 
@@ -962,7 +962,7 @@ class TestIPv6(TestIPv6ND):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        subitf = VppDot1QSubint(self, self.pg1, 99)
+        subitf = VppDot1QSubint(self.vclient, self.pg1, 99)
 
         subitf.admin_up()
         subitf.config_ip6()
@@ -989,7 +989,7 @@ class TestIPv6RouteLookup(VppTestCase):
     routes = []
 
     def route_lookup(self, prefix, exact):
-        return self.vapi.api(self.vapi.papi.ip_route_lookup,
+        return self.vclient.api(self.vclient.papi.ip_route_lookup,
                              {
                                  'table_id': 0,
                                  'exact': exact,
@@ -1011,15 +1011,15 @@ class TestIPv6RouteLookup(VppTestCase):
                                type=FibPathType.FIB_PATH_TYPE_DROP)
 
         # Add 3 routes
-        r = VppIpRoute(self, "2001:1111::", 32, [drop_nh])
+        r = VppIpRoute(self.vclient, "2001:1111::", 32, [drop_nh])
         r.add_vpp_config()
         self.routes.append(r)
 
-        r = VppIpRoute(self, "2001:1111:2222::", 48, [drop_nh])
+        r = VppIpRoute(self.vclient, "2001:1111:2222::", 48, [drop_nh])
         r.add_vpp_config()
         self.routes.append(r)
 
-        r = VppIpRoute(self, "2001:1111:2222::1", 128, [drop_nh])
+        r = VppIpRoute(self.vclient, "2001:1111:2222::1", 128, [drop_nh])
         r.add_vpp_config()
         self.routes.append(r)
 
@@ -1042,7 +1042,7 @@ class TestIPv6RouteLookup(VppTestCase):
         assert (prefix == str(result.route.prefix))
 
         # Verify we do not find an available LPM.
-        with self.vapi.assert_negative_api_retval():
+        with self.vclient.assert_negative_api_retval():
             self.route_lookup("2001::2/128", True)
 
     def test_longest_prefix_match(self):
@@ -1104,31 +1104,31 @@ class TestIPv6IfAddrRoute(VppTestCase):
         addr1 = "2001:10::10"
         addr2 = "2001:10::20"
 
-        if_addr1 = VppIpInterfaceAddress(self, self.pg0, addr1, 64)
-        if_addr2 = VppIpInterfaceAddress(self, self.pg0, addr2, 64)
+        if_addr1 = VppIpInterfaceAddress(self.vclient, self.pg0, addr1, 64)
+        if_addr2 = VppIpInterfaceAddress(self.vclient, self.pg0, addr2, 64)
         self.assertFalse(if_addr1.query_vpp_config())
-        self.assertFalse(find_route(self, addr1, 128))
-        self.assertFalse(find_route(self, addr2, 128))
+        self.assertFalse(find_route(self.vclient, addr1, 128))
+        self.assertFalse(find_route(self.vclient, addr2, 128))
 
         # configure first address, verify route present
         if_addr1.add_vpp_config()
         self.assertTrue(if_addr1.query_vpp_config())
-        self.assertTrue(find_route(self, addr1, 128))
-        self.assertFalse(find_route(self, addr2, 128))
+        self.assertTrue(find_route(self.vclient, addr1, 128))
+        self.assertFalse(find_route(self.vclient, addr2, 128))
 
         # configure second address, delete first, verify route not removed
         if_addr2.add_vpp_config()
         if_addr1.remove_vpp_config()
         self.assertFalse(if_addr1.query_vpp_config())
         self.assertTrue(if_addr2.query_vpp_config())
-        self.assertFalse(find_route(self, addr1, 128))
-        self.assertTrue(find_route(self, addr2, 128))
+        self.assertFalse(find_route(self.vclient, addr1, 128))
+        self.assertTrue(find_route(self.vclient, addr2, 128))
 
         # delete second address, verify route removed
         if_addr2.remove_vpp_config()
         self.assertFalse(if_addr1.query_vpp_config())
-        self.assertFalse(find_route(self, addr1, 128))
-        self.assertFalse(find_route(self, addr2, 128))
+        self.assertFalse(find_route(self.vclient, addr1, 128))
+        self.assertFalse(find_route(self.vclient, addr2, 128))
 
     def test_ipv6_ifaddr_del(self):
         """ Delete an interface address that does not exist """
@@ -1142,8 +1142,8 @@ class TestIPv6IfAddrRoute(VppTestCase):
         #
         # try and remove pg0's subnet from lo
         #
-        with self.vapi.assert_negative_api_retval():
-            self.vapi.sw_interface_add_del_address(
+        with self.vclient.assert_negative_api_retval():
+            self.vclient.sw_interface_add_del_address(
                 sw_if_index=lo.sw_if_index,
                 prefix=self.pg0.local_ip6_prefix,
                 is_add=0)
@@ -1257,7 +1257,7 @@ class TestIPv6RD(TestIPv6ND):
         count = 2
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
-        self.vapi.ip6nd_send_router_solicitation(self.pg1.sw_if_index,
+        self.vclient.ip6nd_send_router_solicitation(self.pg1.sw_if_index,
                                                  mrc=count)
         rx_list = self.pg1.get_capture(count, timeout=3)
         self.assertEqual(len(rx_list), count)
@@ -1298,7 +1298,7 @@ class TestIPv6RD(TestIPv6ND):
     def test_rd_receive_router_advertisement(self):
         """ Verify events triggered by received RA packets """
 
-        self.vapi.want_ip6_ra_events(enable=1)
+        self.vclient.want_ip6_ra_events(enable=1)
 
         prefix_info_1 = ICMPv6NDOptPrefixInfo(
             prefix="1::2",
@@ -1327,7 +1327,7 @@ class TestIPv6RD(TestIPv6ND):
         self.pg1.add_stream([p])
         self.pg_start()
 
-        ev = self.vapi.wait_for_event(10, "ip6_ra_event")
+        ev = self.vclient.wait_for_event(10, "ip6_ra_event")
 
         self.assert_equal(ev.current_hop_limit, 0)
         self.assert_equal(ev.flags, 8)
@@ -1406,7 +1406,7 @@ class TestIPv6RDControlPlane(TestIPv6ND):
 
     def wait_for_no_default_route(self, n_tries=50, s_time=1):
         while (n_tries):
-            fib = self.vapi.ip_route_dump(0, True)
+            fib = self.vclient.ip_route_dump(0, True)
             default_routes = self.get_default_routes(fib)
             if 0 == len(default_routes):
                 return True
@@ -1418,13 +1418,13 @@ class TestIPv6RDControlPlane(TestIPv6ND):
     def test_all(self):
         """ Test handling of SLAAC addresses and default routes """
 
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         default_routes = self.get_default_routes(fib)
         initial_addresses = set(self.get_interface_addresses(fib, self.pg0))
         self.assertEqual(default_routes, [])
         router_address = IPv6Address(text_type(self.pg0.remote_ip6_ll))
 
-        self.vapi.ip6_nd_address_autoconfig(self.pg0.sw_if_index, 1, 1)
+        self.vclient.ip6_nd_address_autoconfig(self.pg0.sw_if_index, 1, 1)
 
         self.sleep(0.1)
 
@@ -1450,7 +1450,7 @@ class TestIPv6RDControlPlane(TestIPv6ND):
 
         self.sleep_on_vpp_time(0.1)
 
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
 
         # check FIB for new address
         addresses = set(self.get_interface_addresses(fib, self.pg0))
@@ -1475,7 +1475,7 @@ class TestIPv6RDControlPlane(TestIPv6ND):
         self.sleep_on_vpp_time(0.1)
 
         # check that default route is deleted
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         default_routes = self.get_default_routes(fib)
         self.assertEqual(len(default_routes), 0)
 
@@ -1489,7 +1489,7 @@ class TestIPv6RDControlPlane(TestIPv6ND):
         self.sleep_on_vpp_time(0.1)
 
         # check FIB for new default route
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         default_routes = self.get_default_routes(fib)
         self.assertEqual(len(default_routes), 1)
         dr = default_routes[0]
@@ -1504,7 +1504,7 @@ class TestIPv6RDControlPlane(TestIPv6ND):
         self.sleep_on_vpp_time(0.1)
 
         # check that default route still exists
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         default_routes = self.get_default_routes(fib)
         self.assertEqual(len(default_routes), 1)
         dr = default_routes[0]
@@ -1528,7 +1528,7 @@ class TestIPv6RDControlPlane(TestIPv6ND):
         self.sleep_on_vpp_time(1)
 
         # check that SLAAC address is deleted
-        fib = self.vapi.ip_route_dump(0, True)
+        fib = self.vclient.ip_route_dump(0, True)
         addresses = set(self.get_interface_addresses(fib, self.pg0))
         new_addresses = addresses.difference(initial_addresses)
         self.assertEqual(len(new_addresses), 0)
@@ -1590,7 +1590,7 @@ class IPv6NDProxyTest(TestIPv6ND):
         #
         # Add proxy support for the host
         #
-        self.vapi.ip6nd_proxy_add_del(
+        self.vclient.ip6nd_proxy_add_del(
             is_add=1, ip=inet_pton(AF_INET6, self.pg0._remote_hosts[2].ip6),
             sw_if_index=self.pg1.sw_if_index)
 
@@ -1605,7 +1605,7 @@ class IPv6NDProxyTest(TestIPv6ND):
         #
         # ... and that we have an entry in the ND cache
         #
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg1.sw_if_index,
                                  self.pg0._remote_hosts[2].ip6))
 
@@ -1657,7 +1657,7 @@ class IPv6NDProxyTest(TestIPv6ND):
                   ICMPv6NDOptSrcLLAddr(
                       lladdr=self.pg0._remote_hosts[2].mac))
 
-        self.vapi.ip6nd_proxy_add_del(
+        self.vclient.ip6nd_proxy_add_del(
             is_add=1, ip=inet_pton(AF_INET6, self.pg0._remote_hosts[3].ip6),
             sw_if_index=self.pg2.sw_if_index)
 
@@ -1666,7 +1666,7 @@ class IPv6NDProxyTest(TestIPv6ND):
                                 dst_ip=self.pg0._remote_hosts[3].ip6,
                                 tgt_ip=self.pg0.local_ip6)
 
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg2.sw_if_index,
                                  self.pg0._remote_hosts[3].ip6))
 
@@ -1697,17 +1697,17 @@ class IPv6NDProxyTest(TestIPv6ND):
         #
         # remove the proxy configs
         #
-        self.vapi.ip6nd_proxy_add_del(
+        self.vclient.ip6nd_proxy_add_del(
             ip=inet_pton(AF_INET6, self.pg0._remote_hosts[2].ip6),
             sw_if_index=self.pg1.sw_if_index, is_add=0)
-        self.vapi.ip6nd_proxy_add_del(
+        self.vclient.ip6nd_proxy_add_del(
             ip=inet_pton(AF_INET6, self.pg0._remote_hosts[3].ip6),
             sw_if_index=self.pg2.sw_if_index, is_add=0)
 
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg2.sw_if_index,
                                   self.pg0._remote_hosts[3].ip6))
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg1.sw_if_index,
                                   self.pg0._remote_hosts[2].ip6))
 
@@ -1772,7 +1772,7 @@ class TestIPNull(VppTestCase):
         # A route via IP NULL that will reply with ICMP unreachables
         #
         ip_unreach = VppIpRoute(
-            self, "2001::", 64,
+            self.vclient, "2001::", 64,
             [VppRoutePath("::", 0xffffffff,
                           type=FibPathType.FIB_PATH_TYPE_ICMP_UNREACH)])
         ip_unreach.add_vpp_config()
@@ -1795,7 +1795,7 @@ class TestIPNull(VppTestCase):
         # A route via IP NULL that will reply with ICMP prohibited
         #
         ip_prohibit = VppIpRoute(
-            self, "2001::1", 128,
+            self.vclient, "2001::1", 128,
             [VppRoutePath("::", 0xffffffff,
                           type=FibPathType.FIB_PATH_TYPE_ICMP_PROHIBIT)])
         ip_prohibit.add_vpp_config()
@@ -1853,7 +1853,7 @@ class TestIPDisabled(VppTestCase):
         # one accepting interface, pg0, 2 forwarding interfaces
         #
         route_ff_01 = VppIpMRoute(
-            self,
+            self.vclient,
             "::",
             "ffef::1", 128,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -1926,7 +1926,7 @@ class TestIP6LoadBalance(VppTestCase):
 
         self.create_pg_interfaces(range(5))
 
-        mpls_tbl = VppMplsTable(self, 0)
+        mpls_tbl = VppMplsTable(self.vclient, 0)
         mpls_tbl.add_vpp_config()
 
         for i in self.pg_interfaces:
@@ -1943,7 +1943,7 @@ class TestIP6LoadBalance(VppTestCase):
         super(TestIP6LoadBalance, self).tearDown()
 
     def pg_send(self, input, pkts):
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         input.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -2017,7 +2017,7 @@ class TestIP6LoadBalance(VppTestCase):
         #
         # A route for the IP packets
         #
-        route_3000_1 = VppIpRoute(self, "3000::1", 128,
+        route_3000_1 = VppIpRoute(self.vclient, "3000::1", 128,
                                   [VppRoutePath(self.pg1.remote_ip6,
                                                 self.pg1.sw_if_index),
                                    VppRoutePath(self.pg2.remote_ip6,
@@ -2027,13 +2027,13 @@ class TestIP6LoadBalance(VppTestCase):
         #
         # a local-label for the EOS packets
         #
-        binding = VppMplsIpBind(self, 66, "3000::1", 128, is_ip6=1)
+        binding = VppMplsIpBind(self.vclient, 66, "3000::1", 128, is_ip6=1)
         binding.add_vpp_config()
 
         #
         # An MPLS route for the non-EOS packets
         #
-        route_67 = VppMplsRoute(self, 67, 0,
+        route_67 = VppMplsRoute(self.vclient, 67, 0,
                                 [VppRoutePath(self.pg1.remote_ip6,
                                               self.pg1.sw_if_index,
                                               labels=[67]),
@@ -2073,7 +2073,7 @@ class TestIP6LoadBalance(VppTestCase):
         #  - now only the stream with differing source address will
         #    load-balance
         #
-        self.vapi.set_ip_flow_hash(vrf_id=0, src=1, dst=1, sport=0, dport=0,
+        self.vclient.set_ip_flow_hash(vrf_id=0, src=1, dst=1, sport=0, dport=0,
                                    is_ipv6=1)
 
         self.send_and_expect_load_balancing(self.pg0, src_ip_pkts,
@@ -2085,7 +2085,7 @@ class TestIP6LoadBalance(VppTestCase):
         #
         # change the flow hash config back to defaults
         #
-        self.vapi.set_ip_flow_hash(vrf_id=0, src=1, dst=1, sport=1, dport=1,
+        self.vclient.set_ip_flow_hash(vrf_id=0, src=1, dst=1, sport=1, dport=1,
                                    is_ipv6=1)
 
         #
@@ -2111,14 +2111,14 @@ class TestIP6LoadBalance(VppTestCase):
                              inet6.UDP(sport=1234, dport=1234) /
                              Raw(b'\xa5' * 100)))
 
-        route_3000_2 = VppIpRoute(self, "3000::2", 128,
+        route_3000_2 = VppIpRoute(self.vclient, "3000::2", 128,
                                   [VppRoutePath(self.pg3.remote_ip6,
                                                 self.pg3.sw_if_index),
                                    VppRoutePath(self.pg4.remote_ip6,
                                                 self.pg4.sw_if_index)])
         route_3000_2.add_vpp_config()
 
-        route_4000_1 = VppIpRoute(self, "4000::1", 128,
+        route_4000_1 = VppIpRoute(self.vclient, "4000::1", 128,
                                   [VppRoutePath("3000::1",
                                                 0xffffffff),
                                    VppRoutePath("3000::2",
@@ -2128,7 +2128,7 @@ class TestIP6LoadBalance(VppTestCase):
         #
         # inject the packet on pg0 - expect load-balancing across all 4 paths
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.send_and_expect_load_balancing(self.pg0, port_pkts,
                                             [self.pg1, self.pg2,
                                              self.pg3, self.pg4])
@@ -2151,12 +2151,12 @@ class TestIP6LoadBalance(VppTestCase):
                                         dport=1234 + ii) /
                               Raw(b'\xa5' * 100)))
 
-        route_5000_2 = VppIpRoute(self, "5000::2", 128,
+        route_5000_2 = VppIpRoute(self.vclient, "5000::2", 128,
                                   [VppRoutePath(self.pg3.remote_ip6,
                                                 self.pg3.sw_if_index)])
         route_5000_2.add_vpp_config()
 
-        route_6000_1 = VppIpRoute(self, "6000::1", 128,
+        route_6000_1 = VppIpRoute(self.vclient, "6000::1", 128,
                                   [VppRoutePath("5000::2",
                                                 0xffffffff)])
         route_6000_1.add_vpp_config()
@@ -2164,7 +2164,7 @@ class TestIP6LoadBalance(VppTestCase):
         #
         # inject the packet on pg0 - expect load-balancing across all 4 paths
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.send_and_expect_one_itf(self.pg0, port_pkts, self.pg3)
 
 
@@ -2211,7 +2211,7 @@ class TestIP6Punt(VppTestCase):
         # Configure a punt redirect via pg1.
         #
         nh_addr = self.pg1.remote_ip6
-        self.vapi.ip_punt_redirect(self.pg0.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg0.sw_if_index,
                                    self.pg1.sw_if_index,
                                    nh_addr)
 
@@ -2220,11 +2220,11 @@ class TestIP6Punt(VppTestCase):
         #
         # add a policer
         #
-        policer = VppPolicer(self, "ip6-punt", 400, 0, 10, 0, rate_type=1)
+        policer = VppPolicer(self.vclient, "ip6-punt", 400, 0, 10, 0, rate_type=1)
         policer.add_vpp_config()
-        self.vapi.ip_punt_police(policer.policer_index, is_ip6=1)
+        self.vclient.ip_punt_police(policer.policer_index, is_ip6=1)
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -2240,14 +2240,14 @@ class TestIP6Punt(VppTestCase):
         #
         # remove the policer. back to full rx
         #
-        self.vapi.ip_punt_police(policer.policer_index, is_add=0, is_ip6=1)
+        self.vclient.ip_punt_police(policer.policer_index, is_add=0, is_ip6=1)
         policer.remove_vpp_config()
         self.send_and_expect(self.pg0, pkts, self.pg1)
 
         #
         # remove the redirect. expect full drop.
         #
-        self.vapi.ip_punt_redirect(self.pg0.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg0.sw_if_index,
                                    self.pg1.sw_if_index,
                                    nh_addr,
                                    is_add=0)
@@ -2257,12 +2257,12 @@ class TestIP6Punt(VppTestCase):
         #
         # Add a redirect that is not input port selective
         #
-        self.vapi.ip_punt_redirect(0xffffffff,
+        self.vclient.ip_punt_redirect(0xffffffff,
                                    self.pg1.sw_if_index,
                                    nh_addr)
         self.send_and_expect(self.pg0, pkts, self.pg1)
 
-        self.vapi.ip_punt_redirect(0xffffffff,
+        self.vclient.ip_punt_redirect(0xffffffff,
                                    self.pg1.sw_if_index,
                                    nh_addr,
                                    is_add=0)
@@ -2274,20 +2274,20 @@ class TestIP6Punt(VppTestCase):
         # Configure a punt redirects
         #
         nh_addr = self.pg3.remote_ip6
-        self.vapi.ip_punt_redirect(self.pg0.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg0.sw_if_index,
                                    self.pg3.sw_if_index,
                                    nh_addr)
-        self.vapi.ip_punt_redirect(self.pg1.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg1.sw_if_index,
                                    self.pg3.sw_if_index,
                                    nh_addr)
-        self.vapi.ip_punt_redirect(self.pg2.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg2.sw_if_index,
                                    self.pg3.sw_if_index,
                                    '0::0')
 
         #
         # Dump pg0 punt redirects
         #
-        punts = self.vapi.ip_punt_redirect_dump(self.pg0.sw_if_index,
+        punts = self.vclient.ip_punt_redirect_dump(self.pg0.sw_if_index,
                                                 is_ipv6=1)
         for p in punts:
             self.assertEqual(p.punt.rx_sw_if_index, self.pg0.sw_if_index)
@@ -2295,7 +2295,7 @@ class TestIP6Punt(VppTestCase):
         #
         # Dump punt redirects for all interfaces
         #
-        punts = self.vapi.ip_punt_redirect_dump(0xffffffff, is_ipv6=1)
+        punts = self.vclient.ip_punt_redirect_dump(0xffffffff, is_ipv6=1)
         self.assertEqual(len(punts), 3)
         for p in punts:
             self.assertEqual(p.punt.tx_sw_if_index, self.pg3.sw_if_index)
@@ -2338,8 +2338,8 @@ class TestIPDeag(VppTestCase):
         #  1 - another destination address lookup
         #  2 - a source address lookup
         #
-        table_dst = VppIpTable(self, 1, is_ip6=1)
-        table_src = VppIpTable(self, 2, is_ip6=1)
+        table_dst = VppIpTable(self.vclient, 1, is_ip6=1)
+        table_src = VppIpTable(self.vclient, 2, is_ip6=1)
         table_dst.add_vpp_config()
         table_src.add_vpp_config()
 
@@ -2347,12 +2347,12 @@ class TestIPDeag(VppTestCase):
         # Add a route in the default table to point to a deag/
         # second lookup in each of these tables
         #
-        route_to_dst = VppIpRoute(self, "1::1", 128,
+        route_to_dst = VppIpRoute(self.vclient, "1::1", 128,
                                   [VppRoutePath("::",
                                                 0xffffffff,
                                                 nh_table_id=1)])
         route_to_src = VppIpRoute(
-            self, "1::2", 128,
+            self.vclient, "1::2", 128,
             [VppRoutePath("::",
                           0xffffffff,
                           nh_table_id=2,
@@ -2386,7 +2386,7 @@ class TestIPDeag(VppTestCase):
         #
         # add a route in the dst table to forward via pg1
         #
-        route_in_dst = VppIpRoute(self, "1::1", 128,
+        route_in_dst = VppIpRoute(self.vclient, "1::1", 128,
                                   [VppRoutePath(self.pg1.remote_ip6,
                                                 self.pg1.sw_if_index)],
                                   table_id=1)
@@ -2397,7 +2397,7 @@ class TestIPDeag(VppTestCase):
         #
         # add a route in the src table to forward via pg2
         #
-        route_in_src = VppIpRoute(self, "2::2", 128,
+        route_in_src = VppIpRoute(self.vclient, "2::2", 128,
                                   [VppRoutePath(self.pg2.remote_ip6,
                                                 self.pg2.sw_if_index)],
                                   table_id=2)
@@ -2407,7 +2407,7 @@ class TestIPDeag(VppTestCase):
         #
         # loop in the lookup DP
         #
-        route_loop = VppIpRoute(self, "3::3", 128,
+        route_loop = VppIpRoute(self.vclient, "3::3", 128,
                                 [VppRoutePath("::",
                                               0xffffffff)])
         route_loop.add_vpp_config()
@@ -2543,7 +2543,7 @@ class TestIPReplace(VppTestCase):
             i.admin_up()
             i.config_ip6()
             i.generate_remote_hosts(2)
-            self.tables.append(VppIpTable(self, table_id,
+            self.tables.append(VppIpTable(self.vclient, table_id,
                                           True).add_vpp_config())
             table_id += 1
 
@@ -2571,14 +2571,14 @@ class TestIPReplace(VppTestCase):
         for ii, t in enumerate(self.tables):
             for jj in range(1, N_ROUTES):
                 uni = VppIpRoute(
-                    self, "2001::%d" % jj if jj != 0 else "2001::", 128,
+                    self.vclient, "2001::%d" % jj if jj != 0 else "2001::", 128,
                     [VppRoutePath(links[ii].remote_hosts[0].ip6,
                                   links[ii].sw_if_index),
                      VppRoutePath(links[ii].remote_hosts[1].ip6,
                                   links[ii].sw_if_index)],
                     table_id=t.table_id).add_vpp_config()
                 multi = VppIpMRoute(
-                    self, "::",
+                    self.vclient, "::",
                     "ff:2001::%d" % jj, 128,
                     MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
                     [VppMRoutePath(self.pg0.sw_if_index,
@@ -2686,7 +2686,7 @@ class TestIP6Replace(VppTestCase):
             i.admin_down()
 
     def get_n_pfxs(self, intf):
-        return len(self.vapi.ip_address_dump(intf.sw_if_index, True))
+        return len(self.vclient.ip_address_dump(intf.sw_if_index, True))
 
     def test_replace(self):
         """ IP interface address replace """
@@ -2699,17 +2699,17 @@ class TestIP6Replace(VppTestCase):
 
             # 2001:16:x::1/64
             addr = "2001:16:%d::1" % intf.sw_if_index
-            a = VppIpInterfaceAddress(self, intf, addr, 64).add_vpp_config()
+            a = VppIpInterfaceAddress(self.vclient, intf, addr, 64).add_vpp_config()
             intf_pfxs[i].append(a)
 
             # 2001:16:x::2/64 - a different address in the same subnet as above
             addr = "2001:16:%d::2" % intf.sw_if_index
-            a = VppIpInterfaceAddress(self, intf, addr, 64).add_vpp_config()
+            a = VppIpInterfaceAddress(self.vclient, intf, addr, 64).add_vpp_config()
             intf_pfxs[i].append(a)
 
             # 2001:15:x::2/64 - a different address and subnet
             addr = "2001:15:%d::2" % intf.sw_if_index
-            a = VppIpInterfaceAddress(self, intf, addr, 64).add_vpp_config()
+            a = VppIpInterfaceAddress(self.vclient, intf, addr, 64).add_vpp_config()
             intf_pfxs[i].append(a)
 
         # a dump should n_address in it
@@ -2719,8 +2719,8 @@ class TestIP6Replace(VppTestCase):
         #
         # remove all the address thru a replace
         #
-        self.vapi.sw_interface_address_replace_begin()
-        self.vapi.sw_interface_address_replace_end()
+        self.vclient.sw_interface_address_replace_begin()
+        self.vclient.sw_interface_address_replace_end()
         for intf in self.pg_interfaces:
             self.assertEqual(self.get_n_pfxs(intf), 0)
 
@@ -2737,13 +2737,13 @@ class TestIP6Replace(VppTestCase):
         # replace again, but this time update/re-add the address on the first
         # two interfaces
         #
-        self.vapi.sw_interface_address_replace_begin()
+        self.vclient.sw_interface_address_replace_begin()
 
         for p in intf_pfxs[:2]:
             for v in p:
                 v.add_vpp_config()
 
-        self.vapi.sw_interface_address_replace_end()
+        self.vclient.sw_interface_address_replace_end()
 
         # on the first two the address still exist,
         # on the other two they do not
@@ -2767,16 +2767,16 @@ class TestIP6Replace(VppTestCase):
         #
         # replace again, this time add different prefixes on all the interfaces
         #
-        self.vapi.sw_interface_address_replace_begin()
+        self.vclient.sw_interface_address_replace_begin()
 
         pfxs = []
         for intf in self.pg_interfaces:
             # 2001:18:x::1/64
             addr = "2001:18:%d::1" % intf.sw_if_index
-            pfxs.append(VppIpInterfaceAddress(self, intf, addr,
+            pfxs.append(VppIpInterfaceAddress(self.vclient, intf, addr,
                                               64).add_vpp_config())
 
-        self.vapi.sw_interface_address_replace_end()
+        self.vclient.sw_interface_address_replace_end()
 
         # only .18 should exist on each interface
         for intf in self.pg_interfaces:
@@ -2787,8 +2787,8 @@ class TestIP6Replace(VppTestCase):
         #
         # remove everything
         #
-        self.vapi.sw_interface_address_replace_begin()
-        self.vapi.sw_interface_address_replace_end()
+        self.vclient.sw_interface_address_replace_begin()
+        self.vclient.sw_interface_address_replace_end()
         for intf in self.pg_interfaces:
             self.assertEqual(self.get_n_pfxs(intf), 0)
 
@@ -2801,20 +2801,20 @@ class TestIP6Replace(VppTestCase):
         for intf in self.pg_interfaces:
             # 2001:18:x::1/64
             addr = "2001:18:%d::1" % intf.sw_if_index
-            VppIpInterfaceAddress(self, intf, addr, 64).add_vpp_config()
+            VppIpInterfaceAddress(self.vclient, intf, addr, 64).add_vpp_config()
 
-        self.vapi.sw_interface_address_replace_begin()
+        self.vclient.sw_interface_address_replace_begin()
 
         pfxs = []
         for intf in self.pg_interfaces:
             # 2001:18:x::1/64
             addr = "2001:18:%d::1" % (intf.sw_if_index + 1)
-            pfxs.append(VppIpInterfaceAddress(self, intf,
+            pfxs.append(VppIpInterfaceAddress(self.vclient, intf,
                                               addr, 64).add_vpp_config())
 
-        self.vapi.sw_interface_address_replace_end()
+        self.vclient.sw_interface_address_replace_end()
 
-        self.logger.info(self.vapi.cli("sh int addr"))
+        self.logger.info(self.vclient.cli("sh int addr"))
 
         for intf in self.pg_interfaces:
             self.assertEqual(self.get_n_pfxs(intf), 1)
@@ -2862,7 +2862,7 @@ class TestIP6LinkLocal(VppTestCase):
         ll2 = "fe80:2::2"
         ll3 = "fe80:3::3"
 
-        VppIpInterfaceAddress(self, self.pg0, ll1, 128).add_vpp_config()
+        VppIpInterfaceAddress(self.vclient, self.pg0, ll1, 128).add_vpp_config()
 
         #
         # should be able to ping the ll
@@ -2878,7 +2878,7 @@ class TestIP6LinkLocal(VppTestCase):
         #
         # change the link-local on pg0
         #
-        v_ll3 = VppIpInterfaceAddress(self, self.pg0,
+        v_ll3 = VppIpInterfaceAddress(self.vclient, self.pg0,
                                       ll3, 128).add_vpp_config()
 
         p_echo_request_3 = (Ether(src=self.pg0.remote_mac,
@@ -2897,16 +2897,16 @@ class TestIP6LinkLocal(VppTestCase):
         self.send_and_expect(self.pg0, [p_echo_request_3], self.pg0)
 
         # the link-local cannot be removed
-        with self.vapi.assert_negative_api_retval():
+        with self.vclient.assert_negative_api_retval():
             v_ll3.remove_vpp_config()
 
         #
         # Use the specific link-local API on pg1
         #
-        VppIp6LinkLocalAddress(self, self.pg1, ll1).add_vpp_config()
+        VppIp6LinkLocalAddress(self.vclient, self.pg1, ll1).add_vpp_config()
         self.send_and_expect(self.pg1, [p_echo_request_1], self.pg1)
 
-        VppIp6LinkLocalAddress(self, self.pg1, ll3).add_vpp_config()
+        VppIp6LinkLocalAddress(self.vclient, self.pg1, ll3).add_vpp_config()
         self.send_and_expect(self.pg1, [p_echo_request_3], self.pg1)
 
 
diff --git a/test/test_ip6_vrf_multi_instance.py b/test/test_ip6_vrf_multi_instance.py
index 16069b260..5be10b801 100644
--- a/test/test_ip6_vrf_multi_instance.py
+++ b/test/test_ip6_vrf_multi_instance.py
@@ -75,7 +75,7 @@ from scapy.utils6 import in6_ismaddr, in6_isllsnmaddr, in6_getAddrType
 from scapy.pton_ntop import inet_ntop
 
 from framework import VppTestCase, VppTestRunner
-from util import ppp
+from vpp_pom.util import ppp
 from vrf import VRFState
 
 
@@ -178,8 +178,8 @@ class TestIP6VrfMultiInst(VppTestCase):
         super(TestIP6VrfMultiInst, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show ip6 fib"))
-        self.logger.info(self.vapi.ppcli("show ip6 neighbors"))
+        self.logger.info(self.vclient.ppcli("show ip6 fib"))
+        self.logger.info(self.vclient.ppcli("show ip6 neighbors"))
 
     def create_vrf_and_assign_interfaces(self, count, start=1):
         """
@@ -193,7 +193,7 @@ class TestIP6VrfMultiInst(VppTestCase):
         for i in range(count):
             vrf_id = i + start
             pg_if = self.pg_if_by_vrf_id[vrf_id][0]
-            self.vapi.ip_table_add_del(is_add=1,
+            self.vclient.ip_table_add_del(is_add=1,
                                        table={'table_id': vrf_id, 'is_ip6': 1})
             self.logger.info("IPv6 VRF ID %d created" % vrf_id)
             if vrf_id not in self.vrf_list:
@@ -212,8 +212,8 @@ class TestIP6VrfMultiInst(VppTestCase):
                 pg_if.config_ip6()
                 pg_if.disable_ipv6_ra()
                 pg_if.configure_ipv6_neighbors()
-        self.logger.debug(self.vapi.ppcli("show ip6 fib"))
-        self.logger.debug(self.vapi.ppcli("show ip6 neighbors"))
+        self.logger.debug(self.vclient.ppcli("show ip6 fib"))
+        self.logger.debug(self.vclient.ppcli("show ip6 neighbors"))
 
     def reset_vrf_and_remove_from_vrf_list(self, vrf_id):
         """
@@ -221,7 +221,7 @@ class TestIP6VrfMultiInst(VppTestCase):
 
         :param int vrf_id: The FIB table / VRF ID to be reset.
         """
-        self.vapi.ip_table_flush(table={'table_id': vrf_id, 'is_ip6': 1})
+        self.vclient.ip_table_flush(table={'table_id': vrf_id, 'is_ip6': 1})
         if vrf_id in self.vrf_list:
             self.vrf_list.remove(vrf_id)
         if vrf_id not in self.vrf_reset_list:
@@ -234,9 +234,9 @@ class TestIP6VrfMultiInst(VppTestCase):
             if pg_if not in self.pg_not_in_vrf:
                 self.pg_not_in_vrf.append(pg_if)
         self.logger.info("IPv6 VRF ID %d reset finished" % vrf_id)
-        self.logger.debug(self.vapi.ppcli("show ip6 fib"))
-        self.logger.debug(self.vapi.ppcli("show ip6 neighbors"))
-        self.vapi.ip_table_add_del(is_add=0,
+        self.logger.debug(self.vclient.ppcli("show ip6 fib"))
+        self.logger.debug(self.vclient.ppcli("show ip6 neighbors"))
+        self.vclient.ip_table_add_del(is_add=0,
                                    table={'table_id': vrf_id, 'is_ip6': 1})
 
     def create_stream(self, src_if, packet_sizes):
@@ -348,7 +348,7 @@ class TestIP6VrfMultiInst(VppTestCase):
         :param int vrf_id: The FIB table / VRF ID to be verified.
         :return: 1 if the FIB table / VRF ID is configured, otherwise return 0.
         """
-        ip6_fib_dump = self.vapi.ip_route_dump(vrf_id, True)
+        ip6_fib_dump = self.vclient.ip_route_dump(vrf_id, True)
         vrf_exist = len(ip6_fib_dump)
         vrf_count = 0
         for ip6_fib_details in ip6_fib_dump:
diff --git a/test/test_ip_ecmp.py b/test/test_ip_ecmp.py
index 1d3e872e4..208b601bf 100644
--- a/test/test_ip_ecmp.py
+++ b/test/test_ip_ecmp.py
@@ -6,13 +6,13 @@ import socket
 from ipaddress import IPv4Address, IPv6Address, AddressValueError
 
 from framework import VppTestCase, VppTestRunner
-from util import ppp
+from vpp_pom.util import ppp
 
 from scapy.packet import Raw
 from scapy.layers.l2 import Ether
 from scapy.layers.inet import IP, UDP
 from scapy.layers.inet6 import IPv6
-from vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
 
 try:
     text_type = unicode
@@ -75,8 +75,8 @@ class TestECMP(VppTestCase):
         super(TestECMP, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show ip4 neighbors"))
-        self.logger.info(self.vapi.ppcli("show ip6 neighbors"))
+        self.logger.info(self.vclient.ppcli("show ip4 neighbors"))
+        self.logger.info(self.vclient.ppcli("show ip6 neighbors"))
 
     def get_ip_address(self, ip_addr_start, ip_prefix_len):
         """
@@ -187,13 +187,13 @@ class TestECMP(VppTestCase):
                 paths.append(VppRoutePath(nh_host_ip,
                                           pg_if.sw_if_index))
 
-        rip = VppIpRoute(self, dst_ip_net, dst_prefix_len, paths)
+        rip = VppIpRoute(self.vclient, dst_ip_net, dst_prefix_len, paths)
         rip.add_vpp_config()
         self.logger.info("Route via %s on %s created" %
                          (nh_host_ip, pg_if.name))
 
-        self.logger.debug(self.vapi.ppcli("show ip fib"))
-        self.logger.debug(self.vapi.ppcli("show ip6 fib"))
+        self.logger.debug(self.vclient.ppcli("show ip fib"))
+        self.logger.debug(self.vclient.ppcli("show ip6 fib"))
 
     def test_ip_ecmp(self):
         """ IP equal-cost multi-path routing test """
diff --git a/test/test_ip_mcast.py b/test/test_ip_mcast.py
index de5251a3e..79c169d1e 100644
--- a/test/test_ip_mcast.py
+++ b/test/test_ip_mcast.py
@@ -3,10 +3,10 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpMRoute, VppMRoutePath, VppMFibSignal, \
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpMRoute, VppMRoutePath, VppMFibSignal, \
     VppIpTable, FibPathProto
-from vpp_gre_interface import VppGreInterface
+from vpp_pom.vpp_gre_interface import VppGreInterface
 from vpp_papi import VppEnum
 
 from scapy.packet import Raw
@@ -40,7 +40,7 @@ class TestMFIB(VppTestCase):
 
     def test_mfib(self):
         """ MFIB Unit Tests """
-        error = self.vapi.cli("test mfib")
+        error = self.vclient.cli("test mfib")
 
         if error:
             self.logger.critical(error)
@@ -73,12 +73,12 @@ class TestIPMcast(VppTestCase):
             i.resolve_ndp()
 
         # one more in a vrf
-        tbl4 = VppIpTable(self, 10)
+        tbl4 = VppIpTable(self.vclient, 10)
         tbl4.add_vpp_config()
         self.pg8.set_table_ip4(10)
         self.pg8.config_ip4()
 
-        tbl6 = VppIpTable(self, 10, is_ip6=1)
+        tbl6 = VppIpTable(self.vclient, 10, is_ip6=1)
         tbl6.add_vpp_config()
         self.pg8.set_table_ip6(10)
         self.pg8.config_ip6()
@@ -192,14 +192,14 @@ class TestIPMcast(VppTestCase):
         #
         # a stream that matches the default route. gets dropped.
         #
-        self.vapi.cli("clear trace")
-        self.vapi.cli("packet mac-filter pg0 on")
-        self.vapi.cli("packet mac-filter pg1 on")
-        self.vapi.cli("packet mac-filter pg2 on")
-        self.vapi.cli("packet mac-filter pg4 on")
-        self.vapi.cli("packet mac-filter pg5 on")
-        self.vapi.cli("packet mac-filter pg6 on")
-        self.vapi.cli("packet mac-filter pg7 on")
+        self.vclient.cli("clear trace")
+        self.vclient.cli("packet mac-filter pg0 on")
+        self.vclient.cli("packet mac-filter pg1 on")
+        self.vclient.cli("packet mac-filter pg2 on")
+        self.vclient.cli("packet mac-filter pg4 on")
+        self.vclient.cli("packet mac-filter pg5 on")
+        self.vclient.cli("packet mac-filter pg6 on")
+        self.vclient.cli("packet mac-filter pg7 on")
 
         tx = self.create_stream_ip4(self.pg0, "1.1.1.1", "232.1.1.1")
         self.pg0.add_stream(tx)
@@ -217,7 +217,7 @@ class TestIPMcast(VppTestCase):
         #  needs to use extra cache lines for the buckets.
         #
         route_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -244,7 +244,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 2 forwarding interfaces
         #
         route_1_1_1_1_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "1.1.1.1",
             "232.1.1.1", 27,  # any grp-len is ok when src is set
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -262,7 +262,7 @@ class TestIPMcast(VppTestCase):
         # that use unicast next-hops
         #
         route_1_1_1_1_232_1_1_2 = VppIpMRoute(
-            self,
+            self.vclient,
             "1.1.1.1",
             "232.1.1.2", 64,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -281,7 +281,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 1 forwarding interfaces
         #
         route_232 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.0.0.0", 8,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -295,7 +295,7 @@ class TestIPMcast(VppTestCase):
         # a stream that matches the route for (1.1.1.1,232.1.1.1)
         #  small packets
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "1.1.1.1", "232.1.1.1")
         self.pg0.add_stream(tx)
 
@@ -319,7 +319,7 @@ class TestIPMcast(VppTestCase):
         # a stream that matches the route for (1.1.1.1,232.1.1.1)
         #  large packets
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "1.1.1.1", "232.1.1.1",
                                     payload_size=1024)
         self.pg0.add_stream(tx)
@@ -343,7 +343,7 @@ class TestIPMcast(VppTestCase):
         #
         # a stream to the unicast next-hops
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "1.1.1.1", "232.1.1.2")
         self.pg0.add_stream(tx)
 
@@ -365,7 +365,7 @@ class TestIPMcast(VppTestCase):
         # Send packets with the 9th bit set so we test the correct clearing
         # of that bit in the mac rewrite
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "1.1.1.1", "232.255.255.255")
         self.pg0.add_stream(tx)
 
@@ -387,7 +387,7 @@ class TestIPMcast(VppTestCase):
         #
         # a stream that matches the route for (*,232.1.1.1)
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "1.1.1.2", "232.1.1.1")
         self.pg0.add_stream(tx)
 
@@ -407,31 +407,31 @@ class TestIPMcast(VppTestCase):
         self.pg0.assert_nothing_captured(
             remark="IP multicast packets forwarded on PG0")
 
-        self.vapi.cli("packet mac-filter pg0 off")
-        self.vapi.cli("packet mac-filter pg1 off")
-        self.vapi.cli("packet mac-filter pg2 off")
-        self.vapi.cli("packet mac-filter pg4 off")
-        self.vapi.cli("packet mac-filter pg5 off")
-        self.vapi.cli("packet mac-filter pg6 off")
-        self.vapi.cli("packet mac-filter pg7 off")
+        self.vclient.cli("packet mac-filter pg0 off")
+        self.vclient.cli("packet mac-filter pg1 off")
+        self.vclient.cli("packet mac-filter pg2 off")
+        self.vclient.cli("packet mac-filter pg4 off")
+        self.vclient.cli("packet mac-filter pg5 off")
+        self.vclient.cli("packet mac-filter pg6 off")
+        self.vclient.cli("packet mac-filter pg7 off")
 
     def test_ip6_mcast(self):
         """ IPv6 Multicast Replication """
-
+        
         MRouteItfFlags = VppEnum.vl_api_mfib_itf_flags_t
         MRouteEntryFlags = VppEnum.vl_api_mfib_entry_flags_t
-
-        self.vapi.cli("packet mac-filter pg0 on")
-        self.vapi.cli("packet mac-filter pg1 on")
-        self.vapi.cli("packet mac-filter pg2 on")
-        self.vapi.cli("packet mac-filter pg4 on")
-        self.vapi.cli("packet mac-filter pg5 on")
-        self.vapi.cli("packet mac-filter pg6 on")
-        self.vapi.cli("packet mac-filter pg7 on")
+        
+        self.vclient.cli("packet mac-filter pg0 on")
+        self.vclient.cli("packet mac-filter pg1 on")
+        self.vclient.cli("packet mac-filter pg2 on")
+        self.vclient.cli("packet mac-filter pg4 on")
+        self.vclient.cli("packet mac-filter pg5 on")
+        self.vclient.cli("packet mac-filter pg6 on")
+        self.vclient.cli("packet mac-filter pg7 on")
         #
         # a stream that matches the default route. gets dropped.
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip6(self.pg0, "2001::1", "ff01::1")
         self.pg0.add_stream(tx)
 
@@ -446,7 +446,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 3 forwarding interfaces
         #
         route_ff01_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "::",
             "ff01::1", 128,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -469,7 +469,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 2 forwarding interfaces
         #
         route_2001_ff01_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "2001::1",
             "ff01::1", 0,  # any grp-len is ok when src is set
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -489,7 +489,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 1 forwarding interface
         #
         route_ff01 = VppIpMRoute(
-            self,
+            self.vclient,
             "::",
             "ff01::", 16,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -505,7 +505,7 @@ class TestIPMcast(VppTestCase):
         # a stream that matches the route for (*, ff01::/16)
         # sent on the non-accepting interface
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip6(self.pg1, "2002::1", "ff01:2::255")
         self.send_and_assert_no_replies(self.pg1, tx, "RPF miss")
 
@@ -513,7 +513,7 @@ class TestIPMcast(VppTestCase):
         # a stream that matches the route for (*, ff01::/16)
         # sent on the accepting interface
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip6(self.pg0, "2002::1", "ff01:2::255")
         self.pg0.add_stream(tx)
 
@@ -550,7 +550,7 @@ class TestIPMcast(VppTestCase):
         #
         # a stream that matches the route for (*,ff01::1)
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip6(self.pg0, "2002::2", "ff01::1")
         self.pg0.add_stream(tx)
 
@@ -569,7 +569,7 @@ class TestIPMcast(VppTestCase):
         #
         # a stream that matches the route for (2001::1, ff00::1)
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip6(self.pg0, "2001::1", "ff01::1")
         self.pg0.add_stream(tx)
 
@@ -586,16 +586,16 @@ class TestIPMcast(VppTestCase):
         self.pg3.assert_nothing_captured(
             remark="IP multicast packets forwarded on PG3")
 
-        self.vapi.cli("packet mac-filter pg0 off")
-        self.vapi.cli("packet mac-filter pg1 off")
-        self.vapi.cli("packet mac-filter pg2 off")
-        self.vapi.cli("packet mac-filter pg4 off")
-        self.vapi.cli("packet mac-filter pg5 off")
-        self.vapi.cli("packet mac-filter pg6 off")
-        self.vapi.cli("packet mac-filter pg7 off")
+        self.vclient.cli("packet mac-filter pg0 off")
+        self.vclient.cli("packet mac-filter pg1 off")
+        self.vclient.cli("packet mac-filter pg2 off")
+        self.vclient.cli("packet mac-filter pg4 off")
+        self.vclient.cli("packet mac-filter pg5 off")
+        self.vclient.cli("packet mac-filter pg6 off")
+        self.vclient.cli("packet mac-filter pg7 off")
 
     def _mcast_connected_send_stream(self, dst_ip):
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0,
                                     self.pg0.remote_ip4,
                                     dst_ip)
@@ -620,7 +620,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 1 forwarding interfaces
         #
         route_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -641,7 +641,7 @@ class TestIPMcast(VppTestCase):
         #
         # Constrct a representation of the signal we expect on pg0
         #
-        signal_232_1_1_1_itf_0 = VppMFibSignal(self,
+        signal_232_1_1_1_itf_0 = VppMFibSignal(self.vclient,
                                                route_232_1_1_1,
                                                self.pg0.sw_if_index,
                                                tx[0])
@@ -649,7 +649,7 @@ class TestIPMcast(VppTestCase):
         #
         # read the only expected signal
         #
-        signals = self.vapi.mfib_signal_dump()
+        signals = self.vclient.mfib_signal_dump()
 
         self.assertEqual(1, len(signals))
 
@@ -661,7 +661,7 @@ class TestIPMcast(VppTestCase):
         #
         tx = self._mcast_connected_send_stream("232.1.1.1")
 
-        signals = self.vapi.mfib_signal_dump()
+        signals = self.vclient.mfib_signal_dump()
         self.assertEqual(1, len(signals))
         signal_232_1_1_1_itf_0.compare(signals[0])
 
@@ -670,7 +670,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 1 forwarding interfaces
         #
         route_232_1_1_2 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.2", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -686,7 +686,7 @@ class TestIPMcast(VppTestCase):
         #
         # Send traffic to both entries. One read should net us two signals
         #
-        signal_232_1_1_2_itf_0 = VppMFibSignal(self,
+        signal_232_1_1_2_itf_0 = VppMFibSignal(self.vclient,
                                                route_232_1_1_2,
                                                self.pg0.sw_if_index,
                                                tx[0])
@@ -696,7 +696,7 @@ class TestIPMcast(VppTestCase):
         #
         # read the only expected signal
         #
-        signals = self.vapi.mfib_signal_dump()
+        signals = self.vclient.mfib_signal_dump()
 
         self.assertEqual(2, len(signals))
 
@@ -719,7 +719,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 1 forwarding interfaces
         #
         route_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -741,7 +741,7 @@ class TestIPMcast(VppTestCase):
         #
         # Constrct a representation of the signal we expect on pg0
         #
-        signal_232_1_1_1_itf_0 = VppMFibSignal(self,
+        signal_232_1_1_1_itf_0 = VppMFibSignal(self.vclient,
                                                route_232_1_1_1,
                                                self.pg0.sw_if_index,
                                                tx[0])
@@ -749,7 +749,7 @@ class TestIPMcast(VppTestCase):
         #
         # read the only expected signal
         #
-        signals = self.vapi.mfib_signal_dump()
+        signals = self.vclient.mfib_signal_dump()
 
         self.assertEqual(1, len(signals))
 
@@ -761,7 +761,7 @@ class TestIPMcast(VppTestCase):
         #
         tx = self._mcast_connected_send_stream("232.1.1.1")
 
-        signals = self.vapi.mfib_signal_dump()
+        signals = self.vclient.mfib_signal_dump()
         self.assertEqual(1, len(signals))
         signal_232_1_1_1_itf_0.compare(signals[0])
 
@@ -774,10 +774,10 @@ class TestIPMcast(VppTestCase):
             (MRouteItfFlags.MFIB_API_ITF_FLAG_ACCEPT |
              MRouteItfFlags.MFIB_API_ITF_FLAG_NEGATE_SIGNAL))
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self._mcast_connected_send_stream("232.1.1.1")
 
-        signals = self.vapi.mfib_signal_dump()
+        signals = self.vclient.mfib_signal_dump()
         self.assertEqual(0, len(signals))
 
         #
@@ -789,7 +789,7 @@ class TestIPMcast(VppTestCase):
 
         tx = self._mcast_connected_send_stream("232.1.1.1")
 
-        signals = self.vapi.mfib_signal_dump()
+        signals = self.vclient.mfib_signal_dump()
         self.assertEqual(1, len(signals))
         signal_232_1_1_1_itf_0.compare(signals[0])
 
@@ -802,7 +802,7 @@ class TestIPMcast(VppTestCase):
             MRouteItfFlags.MFIB_API_ITF_FLAG_ACCEPT)
 
         tx = self._mcast_connected_send_stream("232.1.1.1")
-        signals = self.vapi.mfib_signal_dump()
+        signals = self.vclient.mfib_signal_dump()
         self.assertEqual(0, len(signals))
 
     def test_ip_mcast_vrf(self):
@@ -816,7 +816,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 2 forwarding interfaces
         #
         route_1_1_1_1_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "1.1.1.1",
             "232.1.1.1", 64,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -833,7 +833,7 @@ class TestIPMcast(VppTestCase):
         # a stream that matches the route for (1.1.1.1,232.1.1.1)
         #  small packets
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg8, "1.1.1.1", "232.1.1.1")
         self.pg8.add_stream(tx)
 
@@ -851,15 +851,15 @@ class TestIPMcast(VppTestCase):
         MRouteEntryFlags = VppEnum.vl_api_mfib_entry_flags_t
 
         gre_if_1 = VppGreInterface(
-            self,
+            self.vclient,
             self.pg1.local_ip4,
             self.pg1.remote_ip4).add_vpp_config()
         gre_if_2 = VppGreInterface(
-            self,
+            self.vclient,
             self.pg2.local_ip4,
             self.pg2.remote_ip4).add_vpp_config()
         gre_if_3 = VppGreInterface(
-            self,
+            self.vclient,
             self.pg3.local_ip4,
             self.pg3.remote_ip4).add_vpp_config()
 
@@ -875,7 +875,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 2 forwarding interfaces
         #
         route_1_1_1_1_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "1.1.1.1",
             "232.2.2.2", 64,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -900,7 +900,7 @@ class TestIPMcast(VppTestCase):
               UDP(sport=1234, dport=1234) /
               Raw(b'\a5' * 64)) * 63
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.pg1.add_stream(tx)
 
         self.pg_enable_capture(self.pg_interfaces)
@@ -931,7 +931,7 @@ class TestIPMcast(VppTestCase):
         # one accepting interface, pg0, 2 forwarding interfaces
         #
         route_2001_ff01_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "2001::1",
             "ff01::1", 256,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -950,7 +950,7 @@ class TestIPMcast(VppTestCase):
         #
         # a stream that matches the route for (2001::1, ff00::1)
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip6(self.pg8, "2001::1", "ff01::1")
         self.pg8.add_stream(tx)
 
@@ -971,7 +971,7 @@ class TestIPMcast(VppTestCase):
         # A (*,G). The set of accepting interfaces matching the forwarding
         #
         route_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
diff --git a/test/test_ipip.py b/test/test_ipip.py
index 8f18c0734..6229d3a8e 100644
--- a/test/test_ipip.py
+++ b/test/test_ipip.py
@@ -5,13 +5,13 @@ import unittest
 from scapy.layers.inet6 import IPv6, Ether, IP, UDP, IPv6ExtHdrFragment, Raw
 from scapy.all import fragment, fragment6, RandShort, defragment6
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable, FibPathProto
-from vpp_ipip_tun_interface import VppIpIpTunInterface
-from vpp_teib import VppTeib
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable, FibPathProto
+from vpp_pom.vpp_ipip_tun_interface import VppIpIpTunInterface
+from vpp_pom.vpp_teib import VppTeib
 from vpp_papi import VppEnum
 from socket import AF_INET, AF_INET6, inet_pton
-from util import reassemble4
+from vpp_pom.util import reassemble4
 
 """ Testipip is a subclass of  VPPTestCase classes.
 
@@ -23,7 +23,7 @@ IPIP tests.
 def ipip_add_tunnel(test, src, dst, table_id=0, dscp=0x0,
                     flags=0):
     """ Add a IPIP tunnel """
-    return test.vapi.ipip_add_tunnel(
+    return test.vclient.ipip_add_tunnel(
         tunnel={
             'src': src,
             'dst': dst,
@@ -54,7 +54,7 @@ class TestIPIP(VppTestCase):
 
     def setUp(self):
         super(TestIPIP, self).setUp()
-        self.table = VppIpTable(self, 1, register=False)
+        self.table = VppIpTable(self.vclient, 1, register=False)
         self.table.add_vpp_config()
 
         for i in self.interfaces:
@@ -139,7 +139,7 @@ class TestIPIP(VppTestCase):
 
         # IPv4 transport that copies the DCSP from the payload
         tun_dscp = VppIpIpTunInterface(
-            self,
+            self.vclient,
             self.pg0,
             self.pg0.local_ip4,
             self.pg1.remote_hosts[0].ip4,
@@ -147,7 +147,7 @@ class TestIPIP(VppTestCase):
         tun_dscp.add_vpp_config()
         # IPv4 transport that copies the DCSP and ECN from the payload
         tun_dscp_ecn = VppIpIpTunInterface(
-            self,
+            self.vclient,
             self.pg0,
             self.pg0.local_ip4,
             self.pg1.remote_hosts[1].ip4,
@@ -157,7 +157,7 @@ class TestIPIP(VppTestCase):
         # IPv4 transport that copies the ECN from the payload and sets the
         # DF bit on encap. copies the ECN on decap
         tun_ecn = VppIpIpTunInterface(
-            self,
+            self.vclient,
             self.pg0,
             self.pg0.local_ip4,
             self.pg1.remote_hosts[2].ip4,
@@ -168,7 +168,7 @@ class TestIPIP(VppTestCase):
         # IPv4 transport that sets a fixed DSCP in the encap and copies
         # the DF bit
         tun = VppIpIpTunInterface(
-            self,
+            self.vclient,
             self.pg0,
             self.pg0.local_ip4,
             self.pg1.remote_hosts[3].ip4,
@@ -196,8 +196,8 @@ class TestIPIP(VppTestCase):
         # Configure each tunnel
         for i, t in enumerate(tuns):
             # Set interface up and enable IP on it
-            self.vapi.sw_interface_set_flags(t.sw_if_index, 1)
-            self.vapi.sw_interface_set_unnumbered(
+            self.vclient.sw_interface_set_flags(t.sw_if_index, 1)
+            self.vclient.sw_interface_set_unnumbered(
                 sw_if_index=self.pg0.sw_if_index,
                 unnumbered_sw_if_index=t.sw_if_index)
 
@@ -207,14 +207,14 @@ class TestIPIP(VppTestCase):
 
             # Add IPv4 and IPv6 routes via tunnel interface
             ip4_via_tunnel = VppIpRoute(
-                self, a4s[i], 24,
+                self.vclient, a4s[i], 24,
                 [VppRoutePath("0.0.0.0",
                               t.sw_if_index,
                               proto=FibPathProto.FIB_PATH_NH_PROTO_IP4)])
             ip4_via_tunnel.add_vpp_config()
 
             ip6_via_tunnel = VppIpRoute(
-                self, a6s[i], 64,
+                self.vclient, a6s[i], 64,
                 [VppRoutePath("::",
                               t.sw_if_index,
                               proto=FibPathProto.FIB_PATH_NH_PROTO_IP6)])
@@ -307,7 +307,7 @@ class TestIPIP(VppTestCase):
                 self.validate(p[1], p4_reply)
                 self.assert_packet_checksums_valid(p)
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/ipip4-input/packets decapsulated')
         self.assertEqual(err, n_packets_decapped)
 
@@ -328,7 +328,7 @@ class TestIPIP(VppTestCase):
                 self.validate(p[1], p4_reply)
                 self.assert_packet_checksums_valid(p)
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/ipip4-input/packets decapsulated')
         self.assertEqual(err, n_packets_decapped)
 
@@ -351,7 +351,7 @@ class TestIPIP(VppTestCase):
                 self.validate(p[1], p6_reply)
                 self.assert_packet_checksums_valid(p)
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/ipip4-input/packets decapsulated')
         self.assertEqual(err, n_packets_decapped)
 
@@ -374,18 +374,18 @@ class TestIPIP(VppTestCase):
                 self.validate(p[1], p6_reply)
                 self.assert_packet_checksums_valid(p)
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/ipip4-input/packets decapsulated')
         self.assertEqual(err, n_packets_decapped)
 
         #
         # Fragmentation / Reassembly and Re-fragmentation
         #
-        rv = self.vapi.ip_reassembly_enable_disable(
+        rv = self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.pg1.sw_if_index,
             enable_ip4=1)
 
-        self.vapi.ip_reassembly_set(timeout_ms=1000, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=1000, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10000,
                                     is_ip6=0)
@@ -404,7 +404,7 @@ class TestIPIP(VppTestCase):
         for p in rx:
             self.validate(p[1], p4_reply)
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/ipip4-input/packets decapsulated')
         self.assertEqual(err, n_packets_decapped)
 
@@ -428,7 +428,7 @@ class TestIPIP(VppTestCase):
         # Send fragments to tunnel head-end, for the tunnel head end
         # to reassemble and then refragment
         #
-        self.vapi.sw_interface_set_mtu(self.pg0.sw_if_index, [576, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg0.sw_if_index, [576, 0, 0, 0])
         frags, p4_reply = self.generate_ip4_frags(3123, 1200)
         self.pg_enable_capture()
         self.pg1.add_stream(frags)
@@ -438,7 +438,7 @@ class TestIPIP(VppTestCase):
         p4_reply.id = 256
         self.validate(reass_pkt, p4_reply)
 
-        self.vapi.sw_interface_set_mtu(self.pg0.sw_if_index, [1600, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg0.sw_if_index, [1600, 0, 0, 0])
         frags, p4_reply = self.generate_ip4_frags(3123, 1200)
         self.pg_enable_capture()
         self.pg1.add_stream(frags)
@@ -449,7 +449,7 @@ class TestIPIP(VppTestCase):
         self.validate(reass_pkt, p4_reply)
 
         # send large packets through the tunnel, expect them to be fragmented
-        self.vapi.sw_interface_set_mtu(tun_dscp.sw_if_index, [600, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(tun_dscp.sw_if_index, [600, 0, 0, 0])
 
         p4 = (Ether(src=self.pg0.remote_mac, dst=self.pg0.local_mac) /
               IP(src="1.2.3.4", dst="130.67.0.1", tos=42) /
@@ -467,16 +467,16 @@ class TestIPIP(VppTestCase):
         """ ipip create / delete interface test """
         rv = ipip_add_tunnel(self, '1.2.3.4', '2.3.4.5')
         sw_if_index = rv.sw_if_index
-        self.vapi.ipip_del_tunnel(sw_if_index)
+        self.vclient.ipip_del_tunnel(sw_if_index)
 
     def test_ipip_vrf_create(self):
         """ ipip create / delete interface VRF test """
 
-        t = VppIpTable(self, 20)
+        t = VppIpTable(self.vclient, 20)
         t.add_vpp_config()
         rv = ipip_add_tunnel(self, '1.2.3.4', '2.3.4.5', table_id=20)
         sw_if_index = rv.sw_if_index
-        self.vapi.ipip_del_tunnel(sw_if_index)
+        self.vclient.ipip_del_tunnel(sw_if_index)
 
     def payload(self, len):
         return 'x' * len
@@ -497,7 +497,7 @@ class TestIPIP(VppTestCase):
             #  - assign an IP Addres
             #  - Add a route via the tunnel
             #
-            ipip_if = VppIpIpTunInterface(self, itf,
+            ipip_if = VppIpIpTunInterface(self.vclient, itf,
                                           itf.local_ip4,
                                           "0.0.0.0",
                                           mode=(VppEnum.vl_api_tunnel_mode_t.
@@ -507,8 +507,8 @@ class TestIPIP(VppTestCase):
             ipip_if.config_ip4()
             ipip_if.generate_remote_hosts(4)
 
-            self.logger.info(self.vapi.cli("sh adj"))
-            self.logger.info(self.vapi.cli("sh ip fib"))
+            self.logger.info(self.vclient.cli("sh adj"))
+            self.logger.info(self.vclient.cli("sh ip fib"))
 
             #
             # ensure we don't match to the tunnel if the source address
@@ -531,7 +531,7 @@ class TestIPIP(VppTestCase):
                 # route traffic via the peer
                 #
                 route_via_tun = VppIpRoute(
-                    self, route_addr, 32,
+                    self.vclient, route_addr, 32,
                     [VppRoutePath(ipip_if._remote_hosts[ii].ip4,
                                   ipip_if.sw_if_index)])
                 route_via_tun.add_vpp_config()
@@ -539,11 +539,11 @@ class TestIPIP(VppTestCase):
                 #
                 # Add a TEIB entry resolves the peer
                 #
-                teib = VppTeib(self, ipip_if,
+                teib = VppTeib(self.vclient, ipip_if,
                                ipip_if._remote_hosts[ii].ip4,
                                itf._remote_hosts[ii].ip4)
                 teib.add_vpp_config()
-                self.logger.info(self.vapi.cli("sh adj nbr ipip0 %s" %
+                self.logger.info(self.vclient.cli("sh adj nbr ipip0 %s" %
                                                ipip_if._remote_hosts[ii].ip4))
 
                 #
@@ -571,7 +571,7 @@ class TestIPIP(VppTestCase):
                          UDP(sport=1234, dport=1234) /
                          Raw(b'0x44' * 100)) for x in range(63)]
 
-                self.logger.info(self.vapi.cli("sh ipip tunnel-hash"))
+                self.logger.info(self.vclient.cli("sh ipip tunnel-hash"))
                 rx = self.send_and_expect(self.pg0, tx_i, self.pg0)
 
                 #
@@ -604,7 +604,7 @@ class TestIPIP(VppTestCase):
             # with all of the peers in place, swap the ip-table of
             # the ipip interface
             #
-            table = VppIpTable(self, 2)
+            table = VppIpTable(self.vclient, 2)
             table.add_vpp_config()
 
             ipip_if.unconfig_ip4()
@@ -669,21 +669,21 @@ class TestIPIP6(VppTestCase):
 
         sw_if_index = rv.sw_if_index
         self.tunnel_if_index = sw_if_index
-        self.vapi.sw_interface_set_flags(sw_if_index, 1)
-        self.vapi.sw_interface_set_unnumbered(
+        self.vclient.sw_interface_set_flags(sw_if_index, 1)
+        self.vclient.sw_interface_set_unnumbered(
             sw_if_index=self.pg0.sw_if_index,
             unnumbered_sw_if_index=sw_if_index)
 
         # Add IPv4 and IPv6 routes via tunnel interface
         ip4_via_tunnel = VppIpRoute(
-            self, "130.67.0.0", 16,
+            self.vclient, "130.67.0.0", 16,
             [VppRoutePath("0.0.0.0",
                           sw_if_index,
                           proto=FibPathProto.FIB_PATH_NH_PROTO_IP4)])
         ip4_via_tunnel.add_vpp_config()
 
         ip6_via_tunnel = VppIpRoute(
-            self, "dead::", 16,
+            self.vclient, "dead::", 16,
             [VppRoutePath("::",
                           sw_if_index,
                           proto=FibPathProto.FIB_PATH_NH_PROTO_IP6)])
@@ -697,7 +697,7 @@ class TestIPIP6(VppTestCase):
         self.tunnel_ip4_via_tunnel.remove_vpp_config()
         self.tunnel_ip6_via_tunnel.remove_vpp_config()
 
-        rv = self.vapi.ipip_del_tunnel(sw_if_index=self.tunnel_if_index)
+        rv = self.vclient.ipip_del_tunnel(sw_if_index=self.tunnel_if_index)
 
     def validate(self, rx, expected):
         self.assertEqual(rx, expected.__class__(expected))
@@ -830,7 +830,7 @@ class TestIPIP6(VppTestCase):
 
         # IPv4 transport that copies the DCSP from the payload
         tun_dscp = VppIpIpTunInterface(
-            self,
+            self.vclient,
             self.pg0,
             self.pg0.local_ip6,
             self.pg1.remote_hosts[0].ip6,
@@ -838,7 +838,7 @@ class TestIPIP6(VppTestCase):
         tun_dscp.add_vpp_config()
         # IPv4 transport that copies the DCSP and ECN from the payload
         tun_dscp_ecn = VppIpIpTunInterface(
-            self,
+            self.vclient,
             self.pg0,
             self.pg0.local_ip6,
             self.pg1.remote_hosts[1].ip6,
@@ -848,7 +848,7 @@ class TestIPIP6(VppTestCase):
         # IPv4 transport that copies the ECN from the payload and sets the
         # DF bit on encap. copies the ECN on decap
         tun_ecn = VppIpIpTunInterface(
-            self,
+            self.vclient,
             self.pg0,
             self.pg0.local_ip6,
             self.pg1.remote_hosts[2].ip6,
@@ -859,7 +859,7 @@ class TestIPIP6(VppTestCase):
         # IPv4 transport that sets a fixed DSCP in the encap and copies
         # the DF bit
         tun = VppIpIpTunInterface(
-            self,
+            self.vclient,
             self.pg0,
             self.pg0.local_ip6,
             self.pg1.remote_hosts[3].ip6,
@@ -887,8 +887,8 @@ class TestIPIP6(VppTestCase):
         # Configure each tunnel
         for i, t in enumerate(tuns):
             # Set interface up and enable IP on it
-            self.vapi.sw_interface_set_flags(t.sw_if_index, 1)
-            self.vapi.sw_interface_set_unnumbered(
+            self.vclient.sw_interface_set_flags(t.sw_if_index, 1)
+            self.vclient.sw_interface_set_unnumbered(
                 sw_if_index=self.pg0.sw_if_index,
                 unnumbered_sw_if_index=t.sw_if_index)
 
@@ -898,14 +898,14 @@ class TestIPIP6(VppTestCase):
 
             # Add IPv4 and IPv6 routes via tunnel interface
             ip4_via_tunnel = VppIpRoute(
-                self, a4s[i], 24,
+                self.vclient, a4s[i], 24,
                 [VppRoutePath("0.0.0.0",
                               t.sw_if_index,
                               proto=FibPathProto.FIB_PATH_NH_PROTO_IP4)])
             ip4_via_tunnel.add_vpp_config()
 
             ip6_via_tunnel = VppIpRoute(
-                self, a6s[i], 64,
+                self.vclient, a6s[i], 64,
                 [VppRoutePath("::",
                               t.sw_if_index,
                               proto=FibPathProto.FIB_PATH_NH_PROTO_IP6)])
@@ -958,7 +958,7 @@ class TestIPIP6(VppTestCase):
         #
         # Decapsulation
         #
-        n_packets_decapped = self.statistics.get_err_counter(
+        n_packets_decapped = self.vclient.statistics.get_err_counter(
             '/err/ipip6-input/packets decapsulated')
 
         self.p_ether = Ether(src=self.pg1.remote_mac, dst=self.pg1.local_mac)
@@ -984,7 +984,7 @@ class TestIPIP6(VppTestCase):
                 self.validate(p[1], p4_reply)
                 self.assert_packet_checksums_valid(p)
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/ipip6-input/packets decapsulated')
         self.assertEqual(err, n_packets_decapped)
 
@@ -1005,7 +1005,7 @@ class TestIPIP6(VppTestCase):
                 self.validate(p[1], p4_reply)
                 self.assert_packet_checksums_valid(p)
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/ipip6-input/packets decapsulated')
         self.assertEqual(err, n_packets_decapped)
 
@@ -1026,7 +1026,7 @@ class TestIPIP6(VppTestCase):
                 self.validate(p[1], p6_reply)
                 self.assert_packet_checksums_valid(p)
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/ipip6-input/packets decapsulated')
         self.assertEqual(err, n_packets_decapped)
 
@@ -1049,7 +1049,7 @@ class TestIPIP6(VppTestCase):
                 self.validate(p[1], p6_reply)
                 self.assert_packet_checksums_valid(p)
 
-        err = self.statistics.get_err_counter(
+        err = self.vclient.statistics.get_err_counter(
             '/err/ipip6-input/packets decapsulated')
         self.assertEqual(err, n_packets_decapped)
 
@@ -1064,17 +1064,17 @@ class TestIPIP6(VppTestCase):
         #
         # Fragmentation / Reassembly and Re-fragmentation
         #
-        rv = self.vapi.ip_reassembly_enable_disable(
+        rv = self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.pg1.sw_if_index,
             enable_ip6=1)
 
-        self.vapi.ip_reassembly_set(timeout_ms=1000, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=1000, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10000,
                                     is_ip6=1)
 
         # Send lots of fragments, verify reassembled packet
-        before_cnt = self.statistics.get_err_counter(
+        before_cnt = self.vclient.statistics.get_err_counter(
             '/err/ipip6-input/packets decapsulated')
         frags, p6_reply = self.generate_ip6_frags(3131, 1400)
         f = []
@@ -1088,7 +1088,7 @@ class TestIPIP6(VppTestCase):
         for p in rx:
             self.validate(p[1], p6_reply)
 
-        cnt = self.statistics.get_err_counter(
+        cnt = self.vclient.statistics.get_err_counter(
             '/err/ipip6-input/packets decapsulated')
         self.assertEqual(cnt, before_cnt + 1000)
 
@@ -1110,7 +1110,7 @@ class TestIPIP6(VppTestCase):
 
         # Simple fragmentation
         p_ether = Ether(src=self.pg0.remote_mac, dst=self.pg0.local_mac)
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index, [1280, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index, [1280, 0, 0, 0])
 
         # IPv6 in to IPv6 tunnel
         p_payload = UDP(sport=1234, dport=1234) / self.payload(1300)
@@ -1137,7 +1137,7 @@ class TestIPIP6(VppTestCase):
         # to reassemble and then refragment out the tunnel again.
         # Hair-pinning
         #
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index, [1280, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index, [1280, 0, 0, 0])
         frags, p6_reply = self.generate_ip6_hairpin_frags(8000, 1200)
         self.pg_enable_capture()
         self.pg1.add_stream(frags)
@@ -1152,16 +1152,16 @@ class TestIPIP6(VppTestCase):
         """ ipip create / delete interface test """
         rv = ipip_add_tunnel(self, '1.2.3.4', '2.3.4.5')
         sw_if_index = rv.sw_if_index
-        self.vapi.ipip_del_tunnel(sw_if_index)
+        self.vclient.ipip_del_tunnel(sw_if_index)
 
     def test_ipip_vrf_create(self):
         """ ipip create / delete interface VRF test """
 
-        t = VppIpTable(self, 20)
+        t = VppIpTable(self.vclient, 20)
         t.add_vpp_config()
         rv = ipip_add_tunnel(self, '1.2.3.4', '2.3.4.5', table_id=20)
         sw_if_index = rv.sw_if_index
-        self.vapi.ipip_del_tunnel(sw_if_index)
+        self.vclient.ipip_del_tunnel(sw_if_index)
 
     def payload(self, len):
         return 'x' * len
diff --git a/test/test_ipsec_ah.py b/test/test_ipsec_ah.py
index d44492ddd..e505a6ddf 100644
--- a/test/test_ipsec_ah.py
+++ b/test/test_ipsec_ah.py
@@ -13,10 +13,10 @@ from template_ipsec import TemplateIpsec, IpsecTra46Tests, IpsecTun46Tests, \
     IpsecTra4, IpsecTun4, IpsecTra6, IpsecTun6, \
     IpsecTun6HandoffTests, IpsecTun4HandoffTests
 from template_ipsec import IpsecTcpTests
-from vpp_ipsec import VppIpsecSA, VppIpsecSpd, VppIpsecSpdEntry,\
+from vpp_pom.vpp_ipsec import VppIpsecSA, VppIpsecSpd, VppIpsecSpdEntry,\
         VppIpsecSpdItfBinding
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip import DpoProto
 from vpp_papi import VppEnum
 
 
@@ -69,21 +69,21 @@ class ConfigIpsecAH(TemplateIpsec):
         self.net_objs = []
         self.tun_if = self.pg0
         self.tra_if = self.pg2
-        self.logger.info(self.vapi.ppcli("show int addr"))
+        self.logger.info(self.vclient.ppcli("show int addr"))
 
-        self.tra_spd = VppIpsecSpd(self, self.tra_spd_id)
+        self.tra_spd = VppIpsecSpd(self.vclient, self.tra_spd_id)
         self.tra_spd.add_vpp_config()
         self.net_objs.append(self.tra_spd)
-        self.tun_spd = VppIpsecSpd(self, self.tun_spd_id)
+        self.tun_spd = VppIpsecSpd(self.vclient, self.tun_spd_id)
         self.tun_spd.add_vpp_config()
         self.net_objs.append(self.tun_spd)
 
-        b = VppIpsecSpdItfBinding(self, self.tra_spd,
+        b = VppIpsecSpdItfBinding(self.vclient, self.tra_spd,
                                   self.tra_if)
         b.add_vpp_config()
         self.net_objs.append(b)
 
-        b = VppIpsecSpdItfBinding(self, self.tun_spd,
+        b = VppIpsecSpdItfBinding(self.vclient, self.tun_spd,
                                   self.tun_if)
         b.add_vpp_config()
         self.net_objs.append(b)
@@ -96,13 +96,13 @@ class ConfigIpsecAH(TemplateIpsec):
             config_tun_params(p, self.encryption_type, self.tun_if)
         for p in params:
             d = DpoProto.DPO_PROTO_IP6 if p.is_ipv6 else DpoProto.DPO_PROTO_IP4
-            r = VppIpRoute(self,  p.remote_tun_if_host, p.addr_len,
+            r = VppIpRoute(self.vclient,  p.remote_tun_if_host, p.addr_len,
                            [VppRoutePath(self.tun_if.remote_addr[p.addr_type],
                                          0xffffffff,
                                          proto=d)])
             r.add_vpp_config()
             self.net_objs.append(r)
-        self.logger.info(self.vapi.ppcli("show ipsec all"))
+        self.logger.info(self.vclient.ppcli("show ipsec all"))
 
     def unconfig_network(self):
         for o in reversed(self.net_objs):
@@ -127,7 +127,7 @@ class ConfigIpsecAH(TemplateIpsec):
         e = VppEnum.vl_api_ipsec_spd_action_t
         objs = []
 
-        params.tun_sa_in = VppIpsecSA(self, scapy_tun_sa_id, scapy_tun_spi,
+        params.tun_sa_in = VppIpsecSA(self.vclient, scapy_tun_sa_id, scapy_tun_spi,
                                       auth_algo_vpp_id, auth_key,
                                       crypt_algo_vpp_id, crypt_key,
                                       self.vpp_ah_protocol,
@@ -137,7 +137,7 @@ class ConfigIpsecAH(TemplateIpsec):
                                       flags=flags,
                                       dscp=params.dscp)
 
-        params.tun_sa_out = VppIpsecSA(self, vpp_tun_sa_id, vpp_tun_spi,
+        params.tun_sa_out = VppIpsecSA(self.vclient, vpp_tun_sa_id, vpp_tun_spi,
                                        auth_algo_vpp_id, auth_key,
                                        crypt_algo_vpp_id, crypt_key,
                                        self.vpp_ah_protocol,
@@ -150,12 +150,12 @@ class ConfigIpsecAH(TemplateIpsec):
         objs.append(params.tun_sa_in)
         objs.append(params.tun_sa_out)
 
-        params.spd_policy_in_any = VppIpsecSpdEntry(self, self.tun_spd,
+        params.spd_policy_in_any = VppIpsecSpdEntry(self.vclient, self.tun_spd,
                                                     vpp_tun_sa_id,
                                                     addr_any, addr_bcast,
                                                     addr_any, addr_bcast,
                                                     socket.IPPROTO_AH)
-        params.spd_policy_out_any = VppIpsecSpdEntry(self, self.tun_spd,
+        params.spd_policy_out_any = VppIpsecSpdEntry(self.vclient, self.tun_spd,
                                                      vpp_tun_sa_id,
                                                      addr_any, addr_bcast,
                                                      addr_any, addr_bcast,
@@ -165,7 +165,7 @@ class ConfigIpsecAH(TemplateIpsec):
         objs.append(params.spd_policy_out_any)
         objs.append(params.spd_policy_in_any)
 
-        e1 = VppIpsecSpdEntry(self, self.tun_spd, vpp_tun_sa_id,
+        e1 = VppIpsecSpdEntry(self.vclient, self.tun_spd, vpp_tun_sa_id,
                               remote_tun_if_host,
                               remote_tun_if_host,
                               self.pg1.remote_addr[addr_type],
@@ -173,14 +173,14 @@ class ConfigIpsecAH(TemplateIpsec):
                               0, priority=10,
                               policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                               is_outbound=0)
-        e2 = VppIpsecSpdEntry(self, self.tun_spd, scapy_tun_sa_id,
+        e2 = VppIpsecSpdEntry(self.vclient, self.tun_spd, scapy_tun_sa_id,
                               self.pg1.remote_addr[addr_type],
                               self.pg1.remote_addr[addr_type],
                               remote_tun_if_host,
                               remote_tun_if_host,
                               0, policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                               priority=10)
-        e3 = VppIpsecSpdEntry(self, self.tun_spd, vpp_tun_sa_id,
+        e3 = VppIpsecSpdEntry(self.vclient, self.tun_spd, vpp_tun_sa_id,
                               remote_tun_if_host,
                               remote_tun_if_host,
                               self.pg0.local_addr[addr_type],
@@ -188,7 +188,7 @@ class ConfigIpsecAH(TemplateIpsec):
                               0, priority=20,
                               policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                               is_outbound=0)
-        e4 = VppIpsecSpdEntry(self, self.tun_spd, scapy_tun_sa_id,
+        e4 = VppIpsecSpdEntry(self.vclient, self.tun_spd, scapy_tun_sa_id,
                               self.pg0.local_addr[addr_type],
                               self.pg0.local_addr[addr_type],
                               remote_tun_if_host,
@@ -220,12 +220,12 @@ class ConfigIpsecAH(TemplateIpsec):
         e = VppEnum.vl_api_ipsec_spd_action_t
         objs = []
 
-        params.tra_sa_in = VppIpsecSA(self, scapy_tra_sa_id, scapy_tra_spi,
+        params.tra_sa_in = VppIpsecSA(self.vclient, scapy_tra_sa_id, scapy_tra_spi,
                                       auth_algo_vpp_id, auth_key,
                                       crypt_algo_vpp_id, crypt_key,
                                       self.vpp_ah_protocol,
                                       flags=flags)
-        params.tra_sa_out = VppIpsecSA(self, vpp_tra_sa_id, vpp_tra_spi,
+        params.tra_sa_out = VppIpsecSA(self.vclient, vpp_tra_sa_id, vpp_tra_spi,
                                        auth_algo_vpp_id, auth_key,
                                        crypt_algo_vpp_id, crypt_key,
                                        self.vpp_ah_protocol,
@@ -234,16 +234,16 @@ class ConfigIpsecAH(TemplateIpsec):
         objs.append(params.tra_sa_in)
         objs.append(params.tra_sa_out)
 
-        objs.append(VppIpsecSpdEntry(self, self.tra_spd, vpp_tra_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tra_spd, vpp_tra_sa_id,
                                      addr_any, addr_bcast,
                                      addr_any, addr_bcast,
                                      socket.IPPROTO_AH))
-        objs.append(VppIpsecSpdEntry(self, self.tra_spd, scapy_tra_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tra_spd, scapy_tra_sa_id,
                                      addr_any, addr_bcast,
                                      addr_any, addr_bcast,
                                      socket.IPPROTO_AH,
                                      is_outbound=0))
-        objs.append(VppIpsecSpdEntry(self, self.tra_spd, vpp_tra_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tra_spd, vpp_tra_sa_id,
                                      self.tra_if.local_addr[addr_type],
                                      self.tra_if.local_addr[addr_type],
                                      self.tra_if.remote_addr[addr_type],
@@ -251,7 +251,7 @@ class ConfigIpsecAH(TemplateIpsec):
                                      0, priority=10,
                                      policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                                      is_outbound=0))
-        objs.append(VppIpsecSpdEntry(self, self.tra_spd, scapy_tra_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tra_spd, scapy_tra_sa_id,
                                      self.tra_if.local_addr[addr_type],
                                      self.tra_if.local_addr[addr_type],
                                      self.tra_if.remote_addr[addr_type],
@@ -437,7 +437,7 @@ class TestIpsecAhAll(ConfigIpsecAH,
         # loop through the VPP engines
         #
         for engine in engines:
-            self.vapi.cli("set crypto handler all %s" % engine)
+            self.vclient.cli("set crypto handler all %s" % engine)
             #
             # loop through each of the algorithms
             #
diff --git a/test/test_ipsec_api.py b/test/test_ipsec_api.py
index b5b4adac6..87b711506 100644
--- a/test/test_ipsec_api.py
+++ b/test/test_ipsec_api.py
@@ -35,7 +35,7 @@ class IpsecApiTestCase(VppTestCase):
 
     def test_backend_dump(self):
         """ backend dump """
-        d = self.vapi.ipsec_backend_dump()
+        d = self.vclient.ipsec_backend_dump()
         self.assert_equal(len(d), 2, "number of ipsec backends in dump")
         self.assert_equal(d[0].protocol, self.vpp_ah_protocol,
                           "ipsec protocol in dump entry")
@@ -48,15 +48,15 @@ class IpsecApiTestCase(VppTestCase):
 
     def test_select_valid_backend(self):
         """ select valid backend """
-        self.vapi.ipsec_select_backend(self.vpp_ah_protocol, 0)
-        self.vapi.ipsec_select_backend(self.vpp_esp_protocol, 0)
+        self.vclient.ipsec_select_backend(self.vpp_ah_protocol, 0)
+        self.vclient.ipsec_select_backend(self.vpp_esp_protocol, 0)
 
     def test_select_invalid_backend(self):
         """ select invalid backend """
-        with self.vapi.assert_negative_api_retval():
-            self.vapi.ipsec_select_backend(self.vpp_ah_protocol, 200)
-        with self.vapi.assert_negative_api_retval():
-            self.vapi.ipsec_select_backend(self.vpp_esp_protocol, 200)
+        with self.vclient.assert_negative_api_retval():
+            self.vclient.ipsec_select_backend(self.vpp_ah_protocol, 200)
+        with self.vclient.assert_negative_api_retval():
+            self.vclient.ipsec_select_backend(self.vpp_esp_protocol, 200)
 
     def test_select_backend_in_use(self):
         """ attempt to change backend while sad configured """
@@ -70,7 +70,7 @@ class IpsecApiTestCase(VppTestCase):
         crypt_algo_vpp_id = params.crypt_algo_vpp_id
         crypt_key = params.crypt_key
 
-        self.vapi.ipsec_sad_entry_add_del(
+        self.vclient.ipsec_sad_entry_add_del(
             is_add=1,
             entry={
                 'sad_id': scapy_tun_sa_id,
@@ -89,11 +89,11 @@ class IpsecApiTestCase(VppTestCase):
                 'tunnel_src': self.pg0.local_addr[addr_type],
                 'tunnel_dst': self.pg0.remote_addr[addr_type]
             })
-        with self.vapi.assert_negative_api_retval():
-            self.vapi.ipsec_select_backend(
+        with self.vclient.assert_negative_api_retval():
+            self.vclient.ipsec_select_backend(
                 protocol=self.vpp_ah_protocol, index=0)
 
-        self.vapi.ipsec_sad_entry_add_del(
+        self.vclient.ipsec_sad_entry_add_del(
             is_add=0,
             entry={
                 'sad_id': scapy_tun_sa_id,
@@ -112,7 +112,7 @@ class IpsecApiTestCase(VppTestCase):
                 'tunnel_src': self.pg0.local_addr[addr_type],
                 'tunnel_dst': self.pg0.remote_addr[addr_type]
             })
-        self.vapi.ipsec_select_backend(
+        self.vclient.ipsec_select_backend(
             protocol=self.vpp_ah_protocol, index=0)
 
 
diff --git a/test/test_ipsec_esp.py b/test/test_ipsec_esp.py
index 78da401ea..6c339c8a4 100644
--- a/test/test_ipsec_esp.py
+++ b/test/test_ipsec_esp.py
@@ -14,10 +14,10 @@ from template_ipsec import IpsecTra46Tests, IpsecTun46Tests, TemplateIpsec, \
     IpsecTra4, IpsecTun4, IpsecTra6, IpsecTun6, \
     IpsecTun6HandoffTests, IpsecTun4HandoffTests, \
     IpsecTra6ExtTests
-from vpp_ipsec import VppIpsecSpd, VppIpsecSpdEntry, VppIpsecSA,\
+from vpp_pom.vpp_ipsec import VppIpsecSpd, VppIpsecSpdEntry, VppIpsecSA,\
     VppIpsecSpdItfBinding
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip import DpoProto
 from vpp_papi import VppEnum
 
 NUM_PKTS = 67
@@ -53,21 +53,21 @@ class ConfigIpsecESP(TemplateIpsec):
         self.net_objs = []
         self.tun_if = self.pg0
         self.tra_if = self.pg2
-        self.logger.info(self.vapi.ppcli("show int addr"))
+        self.logger.info(self.vclient.ppcli("show int addr"))
 
-        self.tra_spd = VppIpsecSpd(self, self.tra_spd_id)
+        self.tra_spd = VppIpsecSpd(self.vclient, self.tra_spd_id)
         self.tra_spd.add_vpp_config()
         self.net_objs.append(self.tra_spd)
-        self.tun_spd = VppIpsecSpd(self, self.tun_spd_id)
+        self.tun_spd = VppIpsecSpd(self.vclient, self.tun_spd_id)
         self.tun_spd.add_vpp_config()
         self.net_objs.append(self.tun_spd)
 
-        b = VppIpsecSpdItfBinding(self, self.tun_spd,
+        b = VppIpsecSpdItfBinding(self.vclient, self.tun_spd,
                                   self.tun_if)
         b.add_vpp_config()
         self.net_objs.append(b)
 
-        b = VppIpsecSpdItfBinding(self, self.tra_spd,
+        b = VppIpsecSpdItfBinding(self.vclient, self.tra_spd,
                                   self.tra_if)
         b.add_vpp_config()
         self.net_objs.append(b)
@@ -81,14 +81,14 @@ class ConfigIpsecESP(TemplateIpsec):
 
         for p in params:
             d = DpoProto.DPO_PROTO_IP6 if p.is_ipv6 else DpoProto.DPO_PROTO_IP4
-            r = VppIpRoute(self,  p.remote_tun_if_host, p.addr_len,
+            r = VppIpRoute(self.vclient,  p.remote_tun_if_host, p.addr_len,
                            [VppRoutePath(self.tun_if.remote_addr[p.addr_type],
                                          0xffffffff,
                                          proto=d)])
             r.add_vpp_config()
             self.net_objs.append(r)
 
-        self.logger.info(self.vapi.ppcli("show ipsec all"))
+        self.logger.info(self.vclient.ppcli("show ipsec all"))
 
     def unconfig_network(self):
         for o in reversed(self.net_objs):
@@ -114,7 +114,7 @@ class ConfigIpsecESP(TemplateIpsec):
         salt = params.salt
         objs = []
 
-        params.tun_sa_in = VppIpsecSA(self, scapy_tun_sa_id, scapy_tun_spi,
+        params.tun_sa_in = VppIpsecSA(self.vclient, scapy_tun_sa_id, scapy_tun_spi,
                                       auth_algo_vpp_id, auth_key,
                                       crypt_algo_vpp_id, crypt_key,
                                       self.vpp_esp_protocol,
@@ -124,7 +124,7 @@ class ConfigIpsecESP(TemplateIpsec):
                                       dscp=params.dscp,
                                       flags=flags,
                                       salt=salt)
-        params.tun_sa_out = VppIpsecSA(self, vpp_tun_sa_id, vpp_tun_spi,
+        params.tun_sa_out = VppIpsecSA(self.vclient, vpp_tun_sa_id, vpp_tun_spi,
                                        auth_algo_vpp_id, auth_key,
                                        crypt_algo_vpp_id, crypt_key,
                                        self.vpp_esp_protocol,
@@ -137,12 +137,12 @@ class ConfigIpsecESP(TemplateIpsec):
         objs.append(params.tun_sa_in)
         objs.append(params.tun_sa_out)
 
-        params.spd_policy_in_any = VppIpsecSpdEntry(self, self.tun_spd,
+        params.spd_policy_in_any = VppIpsecSpdEntry(self.vclient, self.tun_spd,
                                                     scapy_tun_sa_id,
                                                     addr_any, addr_bcast,
                                                     addr_any, addr_bcast,
                                                     socket.IPPROTO_ESP)
-        params.spd_policy_out_any = VppIpsecSpdEntry(self, self.tun_spd,
+        params.spd_policy_out_any = VppIpsecSpdEntry(self.vclient, self.tun_spd,
                                                      scapy_tun_sa_id,
                                                      addr_any, addr_bcast,
                                                      addr_any, addr_bcast,
@@ -151,7 +151,7 @@ class ConfigIpsecESP(TemplateIpsec):
         objs.append(params.spd_policy_out_any)
         objs.append(params.spd_policy_in_any)
 
-        objs.append(VppIpsecSpdEntry(self, self.tun_spd, vpp_tun_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tun_spd, vpp_tun_sa_id,
                                      remote_tun_if_host, remote_tun_if_host,
                                      self.pg1.remote_addr[addr_type],
                                      self.pg1.remote_addr[addr_type],
@@ -159,14 +159,14 @@ class ConfigIpsecESP(TemplateIpsec):
                                      priority=10,
                                      policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                                      is_outbound=0))
-        objs.append(VppIpsecSpdEntry(self, self.tun_spd, scapy_tun_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tun_spd, scapy_tun_sa_id,
                                      self.pg1.remote_addr[addr_type],
                                      self.pg1.remote_addr[addr_type],
                                      remote_tun_if_host, remote_tun_if_host,
                                      0,
                                      policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                                      priority=10))
-        objs.append(VppIpsecSpdEntry(self, self.tun_spd, vpp_tun_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tun_spd, vpp_tun_sa_id,
                                      remote_tun_if_host, remote_tun_if_host,
                                      self.pg0.local_addr[addr_type],
                                      self.pg0.local_addr[addr_type],
@@ -174,7 +174,7 @@ class ConfigIpsecESP(TemplateIpsec):
                                      priority=20,
                                      policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                                      is_outbound=0))
-        objs.append(VppIpsecSpdEntry(self, self.tun_spd, scapy_tun_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tun_spd, scapy_tun_sa_id,
                                      self.pg0.local_addr[addr_type],
                                      self.pg0.local_addr[addr_type],
                                      remote_tun_if_host, remote_tun_if_host,
@@ -204,13 +204,13 @@ class ConfigIpsecESP(TemplateIpsec):
         salt = params.salt
         objs = []
 
-        params.tra_sa_in = VppIpsecSA(self, scapy_tra_sa_id, scapy_tra_spi,
+        params.tra_sa_in = VppIpsecSA(self.vclient, scapy_tra_sa_id, scapy_tra_spi,
                                       auth_algo_vpp_id, auth_key,
                                       crypt_algo_vpp_id, crypt_key,
                                       self.vpp_esp_protocol,
                                       flags=flags,
                                       salt=salt)
-        params.tra_sa_out = VppIpsecSA(self, vpp_tra_sa_id, vpp_tra_spi,
+        params.tra_sa_out = VppIpsecSA(self.vclient, vpp_tra_sa_id, vpp_tra_spi,
                                        auth_algo_vpp_id, auth_key,
                                        crypt_algo_vpp_id, crypt_key,
                                        self.vpp_esp_protocol,
@@ -219,16 +219,16 @@ class ConfigIpsecESP(TemplateIpsec):
         objs.append(params.tra_sa_in)
         objs.append(params.tra_sa_out)
 
-        objs.append(VppIpsecSpdEntry(self, self.tra_spd, vpp_tra_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tra_spd, vpp_tra_sa_id,
                                      addr_any, addr_bcast,
                                      addr_any, addr_bcast,
                                      socket.IPPROTO_ESP))
-        objs.append(VppIpsecSpdEntry(self, self.tra_spd, vpp_tra_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tra_spd, vpp_tra_sa_id,
                                      addr_any, addr_bcast,
                                      addr_any, addr_bcast,
                                      socket.IPPROTO_ESP,
                                      is_outbound=0))
-        objs.append(VppIpsecSpdEntry(self, self.tra_spd, vpp_tra_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tra_spd, vpp_tra_sa_id,
                                      self.tra_if.local_addr[addr_type],
                                      self.tra_if.local_addr[addr_type],
                                      self.tra_if.remote_addr[addr_type],
@@ -236,7 +236,7 @@ class ConfigIpsecESP(TemplateIpsec):
                                      0, priority=10,
                                      policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                                      is_outbound=0))
-        objs.append(VppIpsecSpdEntry(self, self.tra_spd, scapy_tra_sa_id,
+        objs.append(VppIpsecSpdEntry(self.vclient, self.tra_spd, scapy_tra_sa_id,
                                      self.tra_if.local_addr[addr_type],
                                      self.tra_if.local_addr[addr_type],
                                      self.tra_if.remote_addr[addr_type],
@@ -323,7 +323,7 @@ class TestIpsecEsp1(TemplateIpsecEsp, IpsecTra46Tests,
         p6.remote_tun_if_host4 = "2.2.2.2"
         e = VppEnum.vl_api_ipsec_spd_action_t
 
-        VppIpsecSpdEntry(self,
+        VppIpsecSpdEntry(self.vclient,
                          self.tun_spd,
                          p6.scapy_tun_sa_id,
                          self.pg1.remote_addr[p4.addr_type],
@@ -334,7 +334,7 @@ class TestIpsecEsp1(TemplateIpsecEsp, IpsecTra46Tests,
                          priority=10,
                          policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                          is_outbound=1).add_vpp_config()
-        VppIpRoute(self,  p6.remote_tun_if_host4, p4.addr_len,
+        VppIpRoute(self.vclient,  p6.remote_tun_if_host4, p4.addr_len,
                    [VppRoutePath(self.tun_if.remote_addr[p4.addr_type],
                                  0xffffffff)]).add_vpp_config()
 
@@ -353,7 +353,7 @@ class TestIpsecEsp1(TemplateIpsecEsp, IpsecTra46Tests,
         p4.remote_tun_if_host6 = "4444::4"
         e = VppEnum.vl_api_ipsec_spd_action_t
 
-        VppIpsecSpdEntry(self,
+        VppIpsecSpdEntry(self.vclient,
                          self.tun_spd,
                          p4.scapy_tun_sa_id,
                          self.pg1.remote_addr[p6.addr_type],
@@ -365,7 +365,7 @@ class TestIpsecEsp1(TemplateIpsecEsp, IpsecTra46Tests,
                          policy=e.IPSEC_API_SPD_ACTION_PROTECT,
                          is_outbound=1).add_vpp_config()
         d = DpoProto.DPO_PROTO_IP6
-        VppIpRoute(self,  p4.remote_tun_if_host6, p6.addr_len,
+        VppIpRoute(self.vclient,  p4.remote_tun_if_host6, p6.addr_len,
                    [VppRoutePath(self.tun_if.remote_addr[p6.addr_type],
                                  0xffffffff,
                                  proto=d)]).add_vpp_config()
@@ -491,31 +491,31 @@ class TemplateIpsecEspUdp(ConfigIpsecESP):
         self.net_objs = []
         self.tun_if = self.pg0
         self.tra_if = self.pg2
-        self.logger.info(self.vapi.ppcli("show int addr"))
+        self.logger.info(self.vclient.ppcli("show int addr"))
 
         p = self.ipv4_params
         p.flags = (VppEnum.vl_api_ipsec_sad_flags_t.
                    IPSEC_API_SAD_FLAG_UDP_ENCAP)
         p.nat_header = UDP(sport=5454, dport=4500)
 
-        self.tra_spd = VppIpsecSpd(self, self.tra_spd_id)
+        self.tra_spd = VppIpsecSpd(self.vclient, self.tra_spd_id)
         self.tra_spd.add_vpp_config()
-        VppIpsecSpdItfBinding(self, self.tra_spd,
+        VppIpsecSpdItfBinding(self.vclient, self.tra_spd,
                               self.tra_if).add_vpp_config()
 
         self.config_esp_tra(p)
         config_tra_params(p, self.encryption_type)
 
-        self.tun_spd = VppIpsecSpd(self, self.tun_spd_id)
+        self.tun_spd = VppIpsecSpd(self.vclient, self.tun_spd_id)
         self.tun_spd.add_vpp_config()
-        VppIpsecSpdItfBinding(self, self.tun_spd,
+        VppIpsecSpdItfBinding(self.vclient, self.tun_spd,
                               self.tun_if).add_vpp_config()
 
         self.config_esp_tun(p)
-        self.logger.info(self.vapi.ppcli("show ipsec all"))
+        self.logger.info(self.vclient.ppcli("show ipsec all"))
 
         d = DpoProto.DPO_PROTO_IP4
-        VppIpRoute(self,  p.remote_tun_if_host, p.addr_len,
+        VppIpRoute(self.vclient,  p.remote_tun_if_host, p.addr_len,
                    [VppRoutePath(self.tun_if.remote_addr[p.addr_type],
                                  0xffffffff,
                                  proto=d)]).add_vpp_config()
@@ -524,7 +524,7 @@ class TemplateIpsecEspUdp(ConfigIpsecESP):
         super(TemplateIpsecEspUdp, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show hardware"))
+        self.logger.info(self.vclient.cli("show hardware"))
 
 
 class TestIpsecEspUdp(TemplateIpsecEspUdp, IpsecTra4Tests):
@@ -639,7 +639,7 @@ class RunTestIpsecEspAll(ConfigIpsecESP,
     def run_a_test(self, engine, flag, algo, payload_size=None):
         if engine == "ia32":
             engine = "native"
-        self.vapi.cli("set crypto handler all %s" % engine)
+        self.vclient.cli("set crypto handler all %s" % engine)
 
         self.ipv4_params = IPsecIPv4Params()
         self.ipv6_params = IPsecIPv6Params()
diff --git a/test/test_ipsec_tun_if_esp.py b/test/test_ipsec_tun_if_esp.py
index ba421694d..19e07b7ee 100644
--- a/test/test_ipsec_tun_if_esp.py
+++ b/test/test_ipsec_tun_if_esp.py
@@ -11,18 +11,18 @@ from framework import VppTestRunner
 from template_ipsec import TemplateIpsec, IpsecTun4Tests, IpsecTun6Tests, \
     IpsecTun4, IpsecTun6,  IpsecTcpTests, mk_scapy_crypt_key, \
     IpsecTun6HandoffTests, IpsecTun4HandoffTests, config_tun_params
-from vpp_ipsec_tun_interface import VppIpsecTunInterface
-from vpp_gre_interface import VppGreInterface
-from vpp_ipip_tun_interface import VppIpIpTunInterface
-from vpp_ip_route import VppIpRoute, VppRoutePath, DpoProto
-from vpp_ipsec import VppIpsecSA, VppIpsecTunProtect, VppIpsecInterface
-from vpp_l2 import VppBridgeDomain, VppBridgeDomainPort
-from vpp_sub_interface import L2_VTR_OP, VppDot1QSubint
-from vpp_teib import VppTeib
-from util import ppp
+from vpp_pom.vpp_ipsec_tun_interface import VppIpsecTunInterface
+from vpp_pom.vpp_gre_interface import VppGreInterface
+from vpp_pom.vpp_ipip_tun_interface import VppIpIpTunInterface
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, DpoProto
+from vpp_pom.vpp_ipsec import VppIpsecSA, VppIpsecTunProtect, VppIpsecInterface
+from vpp_pom.vpp_l2 import VppBridgeDomain, VppBridgeDomainPort
+from vpp_pom.vpp_sub_interface import L2_VTR_OP, VppDot1QSubint
+from vpp_pom.vpp_teib import VppTeib
+from vpp_pom.util import ppp
 from vpp_papi import VppEnum
-from vpp_papi_provider import CliFailedCommandError
-from vpp_acl import AclRule, VppAcl, VppAclInterface
+from vpp_pom.vpp_papi_provider import CliFailedCommandError
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl, VppAclInterface
 
 
 def config_tun_params(p, encryption_type, tun_if, src=None, dst=None):
@@ -102,7 +102,7 @@ class TemplateIpsec4TunIfEsp(TemplateIpsec):
 
         p = self.ipv4_params
 
-        p.tun_if = VppIpsecTunInterface(self, self.pg0, p.vpp_tun_spi,
+        p.tun_if = VppIpsecTunInterface(self.vclient, self.pg0, p.vpp_tun_spi,
                                         p.scapy_tun_spi, p.crypt_algo_vpp_id,
                                         p.crypt_key, p.crypt_key,
                                         p.auth_algo_vpp_id, p.auth_key,
@@ -113,11 +113,11 @@ class TemplateIpsec4TunIfEsp(TemplateIpsec):
         p.tun_if.config_ip6()
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        r = VppIpRoute(self, p.remote_tun_if_host, 32,
+        r = VppIpRoute(self.vclient, p.remote_tun_if_host, 32,
                        [VppRoutePath(p.tun_if.remote_ip4,
                                      0xffffffff)])
         r.add_vpp_config()
-        r = VppIpRoute(self, p.remote_tun_if_host6, 128,
+        r = VppIpRoute(self.vclient, p.remote_tun_if_host6, 128,
                        [VppRoutePath(p.tun_if.remote_ip6,
                                      0xffffffff,
                                      proto=DpoProto.DPO_PROTO_IP6)])
@@ -178,7 +178,7 @@ class TemplateIpsec4TunIfEspUdp(TemplateIpsec):
 
         self.tun_if = self.pg0
         p = self.ipv4_params
-        p.tun_if = VppIpsecTunInterface(self, self.pg0, p.vpp_tun_spi,
+        p.tun_if = VppIpsecTunInterface(self.vclient, self.pg0, p.vpp_tun_spi,
                                         p.scapy_tun_spi, p.crypt_algo_vpp_id,
                                         p.crypt_key, p.crypt_key,
                                         p.auth_algo_vpp_id, p.auth_key,
@@ -189,11 +189,11 @@ class TemplateIpsec4TunIfEspUdp(TemplateIpsec):
         p.tun_if.config_ip6()
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        r = VppIpRoute(self, p.remote_tun_if_host, 32,
+        r = VppIpRoute(self.vclient, p.remote_tun_if_host, 32,
                        [VppRoutePath(p.tun_if.remote_ip4,
                                      0xffffffff)])
         r.add_vpp_config()
-        r = VppIpRoute(self, p.remote_tun_if_host6, 128,
+        r = VppIpRoute(self.vclient, p.remote_tun_if_host6, 128,
                        [VppRoutePath(p.tun_if.remote_ip6,
                                      0xffffffff,
                                      proto=DpoProto.DPO_PROTO_IP6)])
@@ -226,11 +226,11 @@ class TestIpsec4TunIfEsp1(TemplateIpsec4TunIfEsp, IpsecTun4Tests):
 
         p = self.ipv4_params
 
-        self.vapi.sw_interface_set_mtu(p.tun_if.sw_if_index,
+        self.vclient.sw_interface_set_mtu(p.tun_if.sw_if_index,
                                        [1500, 0, 0, 0])
         self.verify_tun_44(self.params[socket.AF_INET],
                            count=1, payload_size=1800, n_rx=2)
-        self.vapi.sw_interface_set_mtu(p.tun_if.sw_if_index,
+        self.vclient.sw_interface_set_mtu(p.tun_if.sw_if_index,
                                        [9000, 0, 0, 0])
 
 
@@ -283,7 +283,7 @@ class TemplateIpsec6TunIfEsp(TemplateIpsec):
         self.tun_if = self.pg0
 
         p = self.ipv6_params
-        p.tun_if = VppIpsecTunInterface(self, self.pg0, p.vpp_tun_spi,
+        p.tun_if = VppIpsecTunInterface(self.vclient, self.pg0, p.vpp_tun_spi,
                                         p.scapy_tun_spi, p.crypt_algo_vpp_id,
                                         p.crypt_key, p.crypt_key,
                                         p.auth_algo_vpp_id, p.auth_key,
@@ -294,12 +294,12 @@ class TemplateIpsec6TunIfEsp(TemplateIpsec):
         p.tun_if.config_ip4()
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        r = VppIpRoute(self, p.remote_tun_if_host, 128,
+        r = VppIpRoute(self.vclient, p.remote_tun_if_host, 128,
                        [VppRoutePath(p.tun_if.remote_ip6,
                                      0xffffffff,
                                      proto=DpoProto.DPO_PROTO_IP6)])
         r.add_vpp_config()
-        r = VppIpRoute(self, p.remote_tun_if_host4, 32,
+        r = VppIpRoute(self.vclient, p.remote_tun_if_host4, 32,
                        [VppRoutePath(p.tun_if.remote_ip4,
                                      0xffffffff)])
         r.add_vpp_config()
@@ -370,7 +370,7 @@ class TestIpsec4MultiTunIfEsp(TemplateIpsec, IpsecTun4):
             p.vpp_tra_spi = p.vpp_tra_spi + ii
             p.tun_dst = self.pg0.remote_hosts[ii].ip4
 
-            p.tun_if = VppIpsecTunInterface(self, self.pg0, p.vpp_tun_spi,
+            p.tun_if = VppIpsecTunInterface(self.vclient, self.pg0, p.vpp_tun_spi,
                                             p.scapy_tun_spi,
                                             p.crypt_algo_vpp_id,
                                             p.crypt_key, p.crypt_key,
@@ -383,7 +383,7 @@ class TestIpsec4MultiTunIfEsp(TemplateIpsec, IpsecTun4):
             config_tun_params(p, self.encryption_type, p.tun_if)
             self.multi_params.append(p)
 
-            VppIpRoute(self, p.remote_tun_if_host, 32,
+            VppIpRoute(self.vclient, p.remote_tun_if_host, 32,
                        [VppRoutePath(p.tun_if.remote_ip4,
                                      0xffffffff)]).add_vpp_config()
 
@@ -430,7 +430,7 @@ class TestIpsec4TunIfEspAll(TemplateIpsec, IpsecTun4):
 
     def config_network(self, p):
 
-        p.tun_if = VppIpsecTunInterface(self, self.pg0, p.vpp_tun_spi,
+        p.tun_if = VppIpsecTunInterface(self.vclient, self.pg0, p.vpp_tun_spi,
                                         p.scapy_tun_spi,
                                         p.crypt_algo_vpp_id,
                                         p.crypt_key, p.crypt_key,
@@ -441,10 +441,10 @@ class TestIpsec4TunIfEspAll(TemplateIpsec, IpsecTun4):
         p.tun_if.admin_up()
         p.tun_if.config_ip4()
         config_tun_params(p, self.encryption_type, p.tun_if)
-        self.logger.info(self.vapi.cli("sh ipsec sa 0"))
-        self.logger.info(self.vapi.cli("sh ipsec sa 1"))
+        self.logger.info(self.vclient.cli("sh ipsec sa 0"))
+        self.logger.info(self.vclient.cli("sh ipsec sa 1"))
 
-        p.route = VppIpRoute(self, p.remote_tun_if_host, 32,
+        p.route = VppIpRoute(self.vclient, p.remote_tun_if_host, 32,
                              [VppRoutePath(p.tun_if.remote_ip4,
                                            0xffffffff)])
         p.route.add_vpp_config()
@@ -476,7 +476,7 @@ class TestIpsec4TunIfEspAll(TemplateIpsec, IpsecTun4):
 
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        p.tun_sa_in = VppIpsecSA(self,
+        p.tun_sa_in = VppIpsecSA(self.vclient,
                                  p.scapy_tun_sa_id,
                                  p.scapy_tun_spi,
                                  p.auth_algo_vpp_id,
@@ -486,7 +486,7 @@ class TestIpsec4TunIfEspAll(TemplateIpsec, IpsecTun4):
                                  self.vpp_esp_protocol,
                                  flags=p.flags,
                                  salt=p.salt)
-        p.tun_sa_out = VppIpsecSA(self,
+        p.tun_sa_out = VppIpsecSA(self.vclient,
                                   p.vpp_tun_sa_id,
                                   p.vpp_tun_spi,
                                   p.auth_algo_vpp_id,
@@ -499,13 +499,13 @@ class TestIpsec4TunIfEspAll(TemplateIpsec, IpsecTun4):
         p.tun_sa_in.add_vpp_config()
         p.tun_sa_out.add_vpp_config()
 
-        self.vapi.ipsec_tunnel_if_set_sa(sw_if_index=p.tun_if.sw_if_index,
+        self.vclient.ipsec_tunnel_if_set_sa(sw_if_index=p.tun_if.sw_if_index,
                                          sa_id=p.tun_sa_in.id,
                                          is_outbound=1)
-        self.vapi.ipsec_tunnel_if_set_sa(sw_if_index=p.tun_if.sw_if_index,
+        self.vclient.ipsec_tunnel_if_set_sa(sw_if_index=p.tun_if.sw_if_index,
                                          sa_id=p.tun_sa_out.id,
                                          is_outbound=0)
-        self.logger.info(self.vapi.cli("sh ipsec sa"))
+        self.logger.info(self.vclient.cli("sh ipsec sa"))
 
     def test_tun_44(self):
         """IPSEC tunnel all algos """
@@ -572,7 +572,7 @@ class TestIpsec4TunIfEspAll(TemplateIpsec, IpsecTun4):
                   'key': b"JPjyOWBeVEQiMe7hJPjyOWBeVEQiMe7h"}]
 
         for engine in engines:
-            self.vapi.cli("set crypto handler all %s" % engine)
+            self.vclient.cli("set crypto handler all %s" % engine)
 
             #
             # loop through each of the algorithms
@@ -626,7 +626,7 @@ class TestIpsec4TunIfEspNoAlgo(TemplateIpsec, IpsecTun4):
         p.crypt_algo = 'NULL'
         p.crypt_key = []
 
-        p.tun_if = VppIpsecTunInterface(self, self.pg0, p.vpp_tun_spi,
+        p.tun_if = VppIpsecTunInterface(self.vclient, self.pg0, p.vpp_tun_spi,
                                         p.scapy_tun_spi,
                                         p.crypt_algo_vpp_id,
                                         p.crypt_key, p.crypt_key,
@@ -637,10 +637,10 @@ class TestIpsec4TunIfEspNoAlgo(TemplateIpsec, IpsecTun4):
         p.tun_if.admin_up()
         p.tun_if.config_ip4()
         config_tun_params(p, self.encryption_type, p.tun_if)
-        self.logger.info(self.vapi.cli("sh ipsec sa 0"))
-        self.logger.info(self.vapi.cli("sh ipsec sa 1"))
+        self.logger.info(self.vclient.cli("sh ipsec sa 0"))
+        self.logger.info(self.vclient.cli("sh ipsec sa 1"))
 
-        p.route = VppIpRoute(self, p.remote_tun_if_host, 32,
+        p.route = VppIpRoute(self.vclient, p.remote_tun_if_host, 32,
                              [VppRoutePath(p.tun_if.remote_ip4,
                                            0xffffffff)])
         p.route.add_vpp_config()
@@ -701,7 +701,7 @@ class TestIpsec6MultiTunIfEsp(TemplateIpsec, IpsecTun6):
             p.vpp_tra_sa_id = p.vpp_tra_sa_id + ii
             p.vpp_tra_spi = p.vpp_tra_spi + ii
 
-            p.tun_if = VppIpsecTunInterface(self, self.pg0, p.vpp_tun_spi,
+            p.tun_if = VppIpsecTunInterface(self.vclient, self.pg0, p.vpp_tun_spi,
                                             p.scapy_tun_spi,
                                             p.crypt_algo_vpp_id,
                                             p.crypt_key, p.crypt_key,
@@ -714,7 +714,7 @@ class TestIpsec6MultiTunIfEsp(TemplateIpsec, IpsecTun6):
             config_tun_params(p, self.encryption_type, p.tun_if)
             self.multi_params.append(p)
 
-            r = VppIpRoute(self, p.remote_tun_if_host, 128,
+            r = VppIpRoute(self.vclient, p.remote_tun_if_host, 128,
                            [VppRoutePath(p.tun_if.remote_ip6,
                                          0xffffffff,
                                          proto=DpoProto.DPO_PROTO_IP6)])
@@ -794,10 +794,10 @@ class TestIpsecGreTebIfEsp(TemplateIpsec,
 
         p = self.ipv4_params
 
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol,
@@ -805,7 +805,7 @@ class TestIpsecGreTebIfEsp(TemplateIpsec,
                                   self.pg0.remote_ip4)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol,
@@ -813,14 +813,14 @@ class TestIpsecGreTebIfEsp(TemplateIpsec,
                                  self.pg0.local_ip4)
         p.tun_sa_in.add_vpp_config()
 
-        p.tun_if = VppGreInterface(self,
+        p.tun_if = VppGreInterface(self.vclient,
                                    self.pg0.local_ip4,
                                    self.pg0.remote_ip4,
                                    type=(VppEnum.vl_api_gre_tunnel_type_t.
                                          GRE_API_TUNNEL_TYPE_TEB))
         p.tun_if.add_vpp_config()
 
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
@@ -831,12 +831,12 @@ class TestIpsecGreTebIfEsp(TemplateIpsec,
         p.tun_if.config_ip4()
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        VppBridgeDomainPort(self, bd1, p.tun_if).add_vpp_config()
-        VppBridgeDomainPort(self, bd1, self.pg1).add_vpp_config()
+        VppBridgeDomainPort(self.vclient, bd1, p.tun_if).add_vpp_config()
+        VppBridgeDomainPort(self.vclient, bd1, self.pg1).add_vpp_config()
 
-        self.vapi.cli("clear ipsec sa")
-        self.vapi.cli("sh adj")
-        self.vapi.cli("sh ipsec tun")
+        self.vclient.cli("clear ipsec sa")
+        self.vclient.cli("sh adj")
+        self.vclient.cli("sh ipsec tun")
 
     def tearDown(self):
         p = self.ipv4_params
@@ -908,16 +908,16 @@ class TestIpsecGreTebVlanIfEsp(TemplateIpsec,
 
         p = self.ipv4_params
 
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
 
-        self.pg1_11 = VppDot1QSubint(self, self.pg1, 11)
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.pg1_11 = VppDot1QSubint(self.vclient, self.pg1, 11)
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=self.pg1_11.sw_if_index, vtr_op=L2_VTR_OP.L2_POP_1,
             push_dot1q=11)
         self.pg1_11.admin_up()
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol,
@@ -925,7 +925,7 @@ class TestIpsecGreTebVlanIfEsp(TemplateIpsec,
                                   self.pg0.remote_ip4)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol,
@@ -933,14 +933,14 @@ class TestIpsecGreTebVlanIfEsp(TemplateIpsec,
                                  self.pg0.local_ip4)
         p.tun_sa_in.add_vpp_config()
 
-        p.tun_if = VppGreInterface(self,
+        p.tun_if = VppGreInterface(self.vclient,
                                    self.pg0.local_ip4,
                                    self.pg0.remote_ip4,
                                    type=(VppEnum.vl_api_gre_tunnel_type_t.
                                          GRE_API_TUNNEL_TYPE_TEB))
         p.tun_if.add_vpp_config()
 
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
@@ -951,10 +951,10 @@ class TestIpsecGreTebVlanIfEsp(TemplateIpsec,
         p.tun_if.config_ip4()
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        VppBridgeDomainPort(self, bd1, p.tun_if).add_vpp_config()
-        VppBridgeDomainPort(self, bd1, self.pg1_11).add_vpp_config()
+        VppBridgeDomainPort(self.vclient, bd1, p.tun_if).add_vpp_config()
+        VppBridgeDomainPort(self.vclient, bd1, self.pg1_11).add_vpp_config()
 
-        self.vapi.cli("clear ipsec sa")
+        self.vclient.cli("clear ipsec sa")
 
     def tearDown(self):
         p = self.ipv4_params
@@ -1025,29 +1025,29 @@ class TestIpsecGreTebIfEspTra(TemplateIpsec,
 
         p = self.ipv4_params
 
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol)
         p.tun_sa_in.add_vpp_config()
 
-        p.tun_if = VppGreInterface(self,
+        p.tun_if = VppGreInterface(self.vclient,
                                    self.pg0.local_ip4,
                                    self.pg0.remote_ip4,
                                    type=(VppEnum.vl_api_gre_tunnel_type_t.
                                          GRE_API_TUNNEL_TYPE_TEB))
         p.tun_if.add_vpp_config()
 
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
@@ -1058,10 +1058,10 @@ class TestIpsecGreTebIfEspTra(TemplateIpsec,
         p.tun_if.config_ip4()
         config_tra_params(p, self.encryption_type, p.tun_if)
 
-        VppBridgeDomainPort(self, bd1, p.tun_if).add_vpp_config()
-        VppBridgeDomainPort(self, bd1, self.pg1).add_vpp_config()
+        VppBridgeDomainPort(self.vclient, bd1, p.tun_if).add_vpp_config()
+        VppBridgeDomainPort(self.vclient, bd1, self.pg1).add_vpp_config()
 
-        self.vapi.cli("clear ipsec sa")
+        self.vclient.cli("clear ipsec sa")
 
     def tearDown(self):
         p = self.ipv4_params
@@ -1137,10 +1137,10 @@ class TestIpsecGreTebUdpIfEspTra(TemplateIpsec,
                    IPSEC_API_SAD_FLAG_UDP_ENCAP)
         p.nat_header = UDP(sport=5454, dport=4545)
 
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol,
@@ -1149,7 +1149,7 @@ class TestIpsecGreTebUdpIfEspTra(TemplateIpsec,
                                   udp_dst=4545)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol,
@@ -1160,14 +1160,14 @@ class TestIpsecGreTebUdpIfEspTra(TemplateIpsec,
                                  udp_dst=4545)
         p.tun_sa_in.add_vpp_config()
 
-        p.tun_if = VppGreInterface(self,
+        p.tun_if = VppGreInterface(self.vclient,
                                    self.pg0.local_ip4,
                                    self.pg0.remote_ip4,
                                    type=(VppEnum.vl_api_gre_tunnel_type_t.
                                          GRE_API_TUNNEL_TYPE_TEB))
         p.tun_if.add_vpp_config()
 
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
@@ -1178,11 +1178,11 @@ class TestIpsecGreTebUdpIfEspTra(TemplateIpsec,
         p.tun_if.config_ip4()
         config_tra_params(p, self.encryption_type, p.tun_if)
 
-        VppBridgeDomainPort(self, bd1, p.tun_if).add_vpp_config()
-        VppBridgeDomainPort(self, bd1, self.pg1).add_vpp_config()
+        VppBridgeDomainPort(self.vclient, bd1, p.tun_if).add_vpp_config()
+        VppBridgeDomainPort(self.vclient, bd1, self.pg1).add_vpp_config()
 
-        self.vapi.cli("clear ipsec sa")
-        self.logger.info(self.vapi.cli("sh ipsec sa 0"))
+        self.vclient.cli("clear ipsec sa")
+        self.logger.info(self.vclient.cli("sh ipsec sa 0"))
 
     def tearDown(self):
         p = self.ipv4_params
@@ -1249,10 +1249,10 @@ class TestIpsecGreIfEsp(TemplateIpsec,
 
         p = self.ipv4_params
 
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol,
@@ -1260,7 +1260,7 @@ class TestIpsecGreIfEsp(TemplateIpsec,
                                   self.pg0.remote_ip4)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol,
@@ -1268,12 +1268,12 @@ class TestIpsecGreIfEsp(TemplateIpsec,
                                  self.pg0.local_ip4)
         p.tun_sa_in.add_vpp_config()
 
-        p.tun_if = VppGreInterface(self,
+        p.tun_if = VppGreInterface(self.vclient,
                                    self.pg0.local_ip4,
                                    self.pg0.remote_ip4)
         p.tun_if.add_vpp_config()
 
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
@@ -1283,7 +1283,7 @@ class TestIpsecGreIfEsp(TemplateIpsec,
         p.tun_if.config_ip4()
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        VppIpRoute(self, "1.1.1.2", 32,
+        VppIpRoute(self.vclient, "1.1.1.2", 32,
                    [VppRoutePath(p.tun_if.remote_ip4,
                                  0xffffffff)]).add_vpp_config()
 
@@ -1360,24 +1360,24 @@ class TestIpsecGreIfEspTra(TemplateIpsec,
 
         p = self.ipv4_params
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol)
         p.tun_sa_in.add_vpp_config()
 
-        p.tun_if = VppGreInterface(self,
+        p.tun_if = VppGreInterface(self.vclient,
                                    self.pg0.local_ip4,
                                    self.pg0.remote_ip4)
         p.tun_if.add_vpp_config()
 
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
@@ -1387,7 +1387,7 @@ class TestIpsecGreIfEspTra(TemplateIpsec,
         p.tun_if.config_ip4()
         config_tra_params(p, self.encryption_type, p.tun_if)
 
-        VppIpRoute(self, "1.1.1.2", 32,
+        VppIpRoute(self.vclient, "1.1.1.2", 32,
                    [VppRoutePath(p.tun_if.remote_ip4,
                                  0xffffffff)]).add_vpp_config()
 
@@ -1404,7 +1404,7 @@ class TestIpsecGreIfEspTra(TemplateIpsec,
         self.send_and_assert_no_replies(self.tun_if, tx)
         node_name = ('/err/%s/unsupported payload' %
                      self.tun4_decrypt_node_name)
-        self.assertEqual(1, self.statistics.get_err_counter(node_name))
+        self.assertEqual(1, self.vclient.statistics.get_err_counter(node_name))
 
 
 class TestIpsecGre6IfEspTra(TemplateIpsec,
@@ -1464,27 +1464,27 @@ class TestIpsecGre6IfEspTra(TemplateIpsec,
 
         p = self.ipv6_params
 
-        bd1 = VppBridgeDomain(self, 1)
+        bd1 = VppBridgeDomain(self.vclient, 1)
         bd1.add_vpp_config()
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol)
         p.tun_sa_in.add_vpp_config()
 
-        p.tun_if = VppGreInterface(self,
+        p.tun_if = VppGreInterface(self.vclient,
                                    self.pg0.local_ip6,
                                    self.pg0.remote_ip6)
         p.tun_if.add_vpp_config()
 
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
@@ -1494,7 +1494,7 @@ class TestIpsecGre6IfEspTra(TemplateIpsec,
         p.tun_if.config_ip6()
         config_tra_params(p, self.encryption_type, p.tun_if)
 
-        r = VppIpRoute(self, "1::2", 128,
+        r = VppIpRoute(self.vclient, "1::2", 128,
                        [VppRoutePath(p.tun_if.remote_ip6,
                                      0xffffffff,
                                      proto=DpoProto.DPO_PROTO_IP6)])
@@ -1561,7 +1561,7 @@ class TestIpsecMGreIfEspTra4(TemplateIpsec, IpsecTun4):
         N_NHS = 16
         self.tun_if = self.pg0
         p = self.ipv4_params
-        p.tun_if = VppGreInterface(self,
+        p.tun_if = VppGreInterface(self.vclient,
                                    self.pg0.local_ip4,
                                    "0.0.0.0",
                                    mode=(VppEnum.vl_api_tunnel_mode_t.
@@ -1589,20 +1589,20 @@ class TestIpsecMGreIfEspTra4(TemplateIpsec, IpsecTun4):
             p.scapy_tra_spi = p.scapy_tra_spi + ii
             p.vpp_tra_sa_id = p.vpp_tra_sa_id + ii
             p.vpp_tra_spi = p.vpp_tra_spi + ii
-            p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+            p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                       p.auth_algo_vpp_id, p.auth_key,
                                       p.crypt_algo_vpp_id, p.crypt_key,
                                       self.vpp_esp_protocol)
             p.tun_sa_out.add_vpp_config()
 
-            p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+            p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                      p.auth_algo_vpp_id, p.auth_key,
                                      p.crypt_algo_vpp_id, p.crypt_key,
                                      self.vpp_esp_protocol)
             p.tun_sa_in.add_vpp_config()
 
             p.tun_protect = VppIpsecTunProtect(
-                self,
+                self.vclient,
                 p.tun_if,
                 p.tun_sa_out,
                 [p.tun_sa_in],
@@ -1611,16 +1611,16 @@ class TestIpsecMGreIfEspTra4(TemplateIpsec, IpsecTun4):
             config_tra_params(p, self.encryption_type, p.tun_if)
             self.multi_params.append(p)
 
-            VppIpRoute(self, p.remote_tun_if_host, 32,
+            VppIpRoute(self.vclient, p.remote_tun_if_host, 32,
                        [VppRoutePath(p.tun_if.remote_hosts[ii].ip4,
                                      p.tun_if.sw_if_index)]).add_vpp_config()
 
             # in this v4 variant add the teibs after the protect
-            p.teib = VppTeib(self, p.tun_if,
+            p.teib = VppTeib(self.vclient, p.tun_if,
                              p.tun_if.remote_hosts[ii].ip4,
                              self.pg0.remote_hosts[ii].ip4).add_vpp_config()
             p.tun_dst = self.pg0.remote_hosts[ii].ip4
-        self.logger.info(self.vapi.cli("sh ipsec protect-hash"))
+        self.logger.info(self.vclient.cli("sh ipsec protect-hash"))
 
     def tearDown(self):
         p = self.ipv4_params
@@ -1690,12 +1690,12 @@ class TestIpsecMGreIfEspTra6(TemplateIpsec, IpsecTun6):
     def setUp(self):
         super(TestIpsecMGreIfEspTra6, self).setUp()
 
-        self.vapi.cli("set logging class ipsec level debug")
+        self.vclient.cli("set logging class ipsec level debug")
 
         N_NHS = 16
         self.tun_if = self.pg0
         p = self.ipv6_params
-        p.tun_if = VppGreInterface(self,
+        p.tun_if = VppGreInterface(self.vclient,
                                    self.pg0.local_ip6,
                                    "::",
                                    mode=(VppEnum.vl_api_tunnel_mode_t.
@@ -1723,13 +1723,13 @@ class TestIpsecMGreIfEspTra6(TemplateIpsec, IpsecTun6):
             p.scapy_tra_spi = p.scapy_tra_spi + ii
             p.vpp_tra_sa_id = p.vpp_tra_sa_id + ii
             p.vpp_tra_spi = p.vpp_tra_spi + ii
-            p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+            p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                       p.auth_algo_vpp_id, p.auth_key,
                                       p.crypt_algo_vpp_id, p.crypt_key,
                                       self.vpp_esp_protocol)
             p.tun_sa_out.add_vpp_config()
 
-            p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+            p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                      p.auth_algo_vpp_id, p.auth_key,
                                      p.crypt_algo_vpp_id, p.crypt_key,
                                      self.vpp_esp_protocol)
@@ -1737,12 +1737,12 @@ class TestIpsecMGreIfEspTra6(TemplateIpsec, IpsecTun6):
 
             # in this v6 variant add the teibs first then the protection
             p.tun_dst = self.pg0.remote_hosts[ii].ip6
-            VppTeib(self, p.tun_if,
+            VppTeib(self.vclient, p.tun_if,
                     p.tun_if.remote_hosts[ii].ip6,
                     p.tun_dst).add_vpp_config()
 
             p.tun_protect = VppIpsecTunProtect(
-                self,
+                self.vclient,
                 p.tun_if,
                 p.tun_sa_out,
                 [p.tun_sa_in],
@@ -1751,14 +1751,14 @@ class TestIpsecMGreIfEspTra6(TemplateIpsec, IpsecTun6):
             config_tra_params(p, self.encryption_type, p.tun_if)
             self.multi_params.append(p)
 
-            VppIpRoute(self, p.remote_tun_if_host, 128,
+            VppIpRoute(self.vclient, p.remote_tun_if_host, 128,
                        [VppRoutePath(p.tun_if.remote_hosts[ii].ip6,
                                      p.tun_if.sw_if_index)]).add_vpp_config()
             p.tun_dst = self.pg0.remote_hosts[ii].ip6
 
-        self.logger.info(self.vapi.cli("sh log"))
-        self.logger.info(self.vapi.cli("sh ipsec protect-hash"))
-        self.logger.info(self.vapi.cli("sh adj 41"))
+        self.logger.info(self.vclient.cli("sh log"))
+        self.logger.info(self.vclient.cli("sh ipsec protect-hash"))
+        self.logger.info(self.vclient.cli("sh adj 41"))
 
     def tearDown(self):
         p = self.ipv6_params
@@ -1782,14 +1782,14 @@ class TemplateIpsec4TunProtect(object):
     def config_sa_tra(self, p):
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol,
                                   flags=p.flags)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol,
@@ -1799,7 +1799,7 @@ class TemplateIpsec4TunProtect(object):
     def config_sa_tun(self, p):
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol,
@@ -1808,7 +1808,7 @@ class TemplateIpsec4TunProtect(object):
                                   flags=p.flags)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol,
@@ -1818,14 +1818,14 @@ class TemplateIpsec4TunProtect(object):
         p.tun_sa_in.add_vpp_config()
 
     def config_protect(self, p):
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
         p.tun_protect.add_vpp_config()
 
     def config_network(self, p):
-        p.tun_if = VppIpIpTunInterface(self, self.pg0,
+        p.tun_if = VppIpIpTunInterface(self.vclient, self.pg0,
                                        self.pg0.local_ip4,
                                        self.pg0.remote_ip4)
         p.tun_if.add_vpp_config()
@@ -1833,11 +1833,11 @@ class TemplateIpsec4TunProtect(object):
         p.tun_if.config_ip4()
         p.tun_if.config_ip6()
 
-        p.route = VppIpRoute(self, p.remote_tun_if_host, 32,
+        p.route = VppIpRoute(self.vclient, p.remote_tun_if_host, 32,
                              [VppRoutePath(p.tun_if.remote_ip4,
                                            0xffffffff)])
         p.route.add_vpp_config()
-        r = VppIpRoute(self, p.remote_tun_if_host6, 128,
+        r = VppIpRoute(self.vclient, p.remote_tun_if_host6, 128,
                        [VppRoutePath(p.tun_if.remote_ip6,
                                      0xffffffff,
                                      proto=DpoProto.DPO_PROTO_IP6)])
@@ -1883,7 +1883,7 @@ class TestIpsec4TunProtect(TemplateIpsec,
         c = p.tun_if.get_tx_stats()
         self.assertEqual(c['packets'], 127)
 
-        self.vapi.cli("clear ipsec sa")
+        self.vclient.cli("clear ipsec sa")
         self.verify_tun_64(p, count=127)
         c = p.tun_if.get_rx_stats()
         self.assertEqual(c['packets'], 254)
@@ -2040,10 +2040,10 @@ class TestIpsec4TunProtectTun(TemplateIpsec,
                         src_prefix="0.0.0.0/0",
                         dst_prefix="0.0.0.0/0",
                         proto=0)
-        a = VppAcl(self, [r_all]).add_vpp_config()
+        a = VppAcl(self.vclient, [r_all]).add_vpp_config()
 
-        VppAclInterface(self, self.pg0.sw_if_index, [a]).add_vpp_config()
-        VppAclInterface(self, p.tun_if.sw_if_index, [a]).add_vpp_config()
+        VppAclInterface(self.vclient, self.pg0.sw_if_index, [a]).add_vpp_config()
+        VppAclInterface(self.vclient, p.tun_if.sw_if_index, [a]).add_vpp_config()
 
         self.verify_tun_44(p, count=127)
 
@@ -2132,13 +2132,13 @@ class TemplateIpsec6TunProtect(object):
     def config_sa_tra(self, p):
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol)
@@ -2147,7 +2147,7 @@ class TemplateIpsec6TunProtect(object):
     def config_sa_tun(self, p):
         config_tun_params(p, self.encryption_type, p.tun_if)
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol,
@@ -2155,7 +2155,7 @@ class TemplateIpsec6TunProtect(object):
                                   self.tun_if.remote_addr[p.addr_type])
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol,
@@ -2164,14 +2164,14 @@ class TemplateIpsec6TunProtect(object):
         p.tun_sa_in.add_vpp_config()
 
     def config_protect(self, p):
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
         p.tun_protect.add_vpp_config()
 
     def config_network(self, p):
-        p.tun_if = VppIpIpTunInterface(self, self.pg0,
+        p.tun_if = VppIpIpTunInterface(self.vclient, self.pg0,
                                        self.pg0.local_ip6,
                                        self.pg0.remote_ip6)
         p.tun_if.add_vpp_config()
@@ -2179,12 +2179,12 @@ class TemplateIpsec6TunProtect(object):
         p.tun_if.config_ip6()
         p.tun_if.config_ip4()
 
-        p.route = VppIpRoute(self, p.remote_tun_if_host, 128,
+        p.route = VppIpRoute(self.vclient, p.remote_tun_if_host, 128,
                              [VppRoutePath(p.tun_if.remote_ip6,
                                            0xffffffff,
                                            proto=DpoProto.DPO_PROTO_IP6)])
         p.route.add_vpp_config()
-        r = VppIpRoute(self, p.remote_tun_if_host4, 32,
+        r = VppIpRoute(self.vclient, p.remote_tun_if_host4, 32,
                        [VppRoutePath(p.tun_if.remote_ip4,
                                      0xffffffff)])
         r.add_vpp_config()
@@ -2258,7 +2258,7 @@ class TestIpsec6TunProtect(TemplateIpsec,
         self.verify_drop_tun_66(np, count=127)
         node = ('/err/ipsec6-tun-input/%s' %
                 'ipsec packets received on disabled interface')
-        self.assertEqual(127, self.statistics.get_err_counter(node))
+        self.assertEqual(127, self.vclient.statistics.get_err_counter(node))
         p.tun_if.admin_up()
         self.verify_tun_66(np, count=127)
 
@@ -2490,7 +2490,7 @@ class TemplateIpsecItf4(object):
     def config_sa_tun(self, p, src, dst):
         config_tun_params(p, self.encryption_type, None, src, dst)
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol,
@@ -2498,7 +2498,7 @@ class TemplateIpsecItf4(object):
                                   flags=p.flags)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol,
@@ -2507,25 +2507,25 @@ class TemplateIpsecItf4(object):
         p.tun_sa_in.add_vpp_config()
 
     def config_protect(self, p):
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
         p.tun_protect.add_vpp_config()
 
     def config_network(self, p, instance=0xffffffff):
-        p.tun_if = VppIpsecInterface(self, instance=instance)
+        p.tun_if = VppIpsecInterface(self.vclient, instance=instance)
 
         p.tun_if.add_vpp_config()
         p.tun_if.admin_up()
         p.tun_if.config_ip4()
         p.tun_if.config_ip6()
 
-        p.route = VppIpRoute(self, p.remote_tun_if_host, 32,
+        p.route = VppIpRoute(self.vclient, p.remote_tun_if_host, 32,
                              [VppRoutePath(p.tun_if.remote_ip4,
                                            0xffffffff)])
         p.route.add_vpp_config()
-        r = VppIpRoute(self, p.remote_tun_if_host6, 128,
+        r = VppIpRoute(self.vclient, p.remote_tun_if_host6, 128,
                        [VppRoutePath(p.tun_if.remote_ip6,
                                      0xffffffff,
                                      proto=DpoProto.DPO_PROTO_IP6)])
@@ -2561,9 +2561,9 @@ class TestIpsecItf4(TemplateIpsec,
         self.config_network(p, instance=3)
 
         with self.assertRaises(CliFailedCommandError):
-            self.vapi.cli("show interface ipsec0")
+            self.vclient.cli("show interface ipsec0")
 
-        output = self.vapi.cli("show interface ipsec3")
+        output = self.vclient.cli("show interface ipsec3")
         self.assertTrue("unknown" not in output)
 
         self.unconfig_network(p)
@@ -2607,7 +2607,7 @@ class TestIpsecItf4(TemplateIpsec,
 
         self.tun4_encrypt_node_name = "esp4-encrypt-tun"
 
-        self.vapi.cli("clear interfaces")
+        self.vclient.cli("clear interfaces")
 
         # rekey - create new SAs and update the tunnel protection
         np = copy.copy(p)
@@ -2674,7 +2674,7 @@ class TemplateIpsecItf6(object):
     def config_sa_tun(self, p, src, dst):
         config_tun_params(p, self.encryption_type, None, src, dst)
 
-        p.tun_sa_out = VppIpsecSA(self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+        p.tun_sa_out = VppIpsecSA(self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                                   p.auth_algo_vpp_id, p.auth_key,
                                   p.crypt_algo_vpp_id, p.crypt_key,
                                   self.vpp_esp_protocol,
@@ -2682,7 +2682,7 @@ class TemplateIpsecItf6(object):
                                   flags=p.flags)
         p.tun_sa_out.add_vpp_config()
 
-        p.tun_sa_in = VppIpsecSA(self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+        p.tun_sa_in = VppIpsecSA(self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                                  p.auth_algo_vpp_id, p.auth_key,
                                  p.crypt_algo_vpp_id, p.crypt_key,
                                  self.vpp_esp_protocol,
@@ -2691,26 +2691,26 @@ class TemplateIpsecItf6(object):
         p.tun_sa_in.add_vpp_config()
 
     def config_protect(self, p):
-        p.tun_protect = VppIpsecTunProtect(self,
+        p.tun_protect = VppIpsecTunProtect(self.vclient,
                                            p.tun_if,
                                            p.tun_sa_out,
                                            [p.tun_sa_in])
         p.tun_protect.add_vpp_config()
 
     def config_network(self, p):
-        p.tun_if = VppIpsecInterface(self)
+        p.tun_if = VppIpsecInterface(self.vclient)
 
         p.tun_if.add_vpp_config()
         p.tun_if.admin_up()
         p.tun_if.config_ip4()
         p.tun_if.config_ip6()
 
-        r = VppIpRoute(self, p.remote_tun_if_host4, 32,
+        r = VppIpRoute(self.vclient, p.remote_tun_if_host4, 32,
                        [VppRoutePath(p.tun_if.remote_ip4,
                                      0xffffffff)])
         r.add_vpp_config()
 
-        p.route = VppIpRoute(self, p.remote_tun_if_host, 128,
+        p.route = VppIpRoute(self.vclient, p.remote_tun_if_host, 128,
                              [VppRoutePath(p.tun_if.remote_ip6,
                                            0xffffffff,
                                            proto=DpoProto.DPO_PROTO_IP6)])
@@ -2780,7 +2780,7 @@ class TestIpsecItf6(TemplateIpsec,
 
         self.tun6_encrypt_node_name = "esp6-encrypt-tun"
 
-        self.vapi.cli("clear interfaces")
+        self.vclient.cli("clear interfaces")
 
         # rekey - create new SAs and update the tunnel protection
         np = copy.copy(p)
@@ -2863,7 +2863,7 @@ class TestIpsecMIfEsp4(TemplateIpsec, IpsecTun4):
         N_NHS = 16
         self.tun_if = self.pg0
         p = self.ipv4_params
-        p.tun_if = VppIpsecInterface(self,
+        p.tun_if = VppIpsecInterface(self.vclient,
                                      mode=(VppEnum.vl_api_tunnel_mode_t.
                                            TUNNEL_API_MODE_MP))
         p.tun_if.add_vpp_config()
@@ -2890,7 +2890,7 @@ class TestIpsecMIfEsp4(TemplateIpsec, IpsecTun4):
             p.vpp_tra_sa_id = p.vpp_tra_sa_id + ii
             p.vpp_tra_spi = p.vpp_tra_spi + ii
             p.tun_sa_out = VppIpsecSA(
-                self, p.scapy_tun_sa_id, p.scapy_tun_spi,
+                self.vclient, p.scapy_tun_sa_id, p.scapy_tun_spi,
                 p.auth_algo_vpp_id, p.auth_key,
                 p.crypt_algo_vpp_id, p.crypt_key,
                 self.vpp_esp_protocol,
@@ -2900,7 +2900,7 @@ class TestIpsecMIfEsp4(TemplateIpsec, IpsecTun4):
             p.tun_sa_out.add_vpp_config()
 
             p.tun_sa_in = VppIpsecSA(
-                self, p.vpp_tun_sa_id, p.vpp_tun_spi,
+                self.vclient, p.vpp_tun_sa_id, p.vpp_tun_spi,
                 p.auth_algo_vpp_id, p.auth_key,
                 p.crypt_algo_vpp_id, p.crypt_key,
                 self.vpp_esp_protocol,
@@ -2910,7 +2910,7 @@ class TestIpsecMIfEsp4(TemplateIpsec, IpsecTun4):
             p.tun_sa_in.add_vpp_config()
 
             p.tun_protect = VppIpsecTunProtect(
-                self,
+                self.vclient,
                 p.tun_if,
                 p.tun_sa_out,
                 [p.tun_sa_in],
@@ -2921,7 +2921,7 @@ class TestIpsecMIfEsp4(TemplateIpsec, IpsecTun4):
                               self.pg0.remote_hosts[ii].ip4)
             self.multi_params.append(p)
 
-            VppIpRoute(self, p.remote_tun_if_host, 32,
+            VppIpRoute(self.vclient, p.remote_tun_if_host, 32,
                        [VppRoutePath(p.tun_if.remote_hosts[ii].ip4,
                                      p.tun_if.sw_if_index)]).add_vpp_config()
 
diff --git a/test/test_l2_fib.py b/test/test_l2_fib.py
index 51c174709..f44656d2f 100644
--- a/test/test_l2_fib.py
+++ b/test/test_l2_fib.py
@@ -68,7 +68,7 @@ from scapy.layers.l2 import Ether
 from scapy.layers.inet import IP, UDP
 
 from framework import VppTestCase, VppTestRunner
-from util import Host, ppp
+from vpp_pom.util import Host, ppp
 from vpp_papi import mac_pton, VppEnum
 
 
@@ -112,11 +112,11 @@ class TestL2fib(VppTestCase):
             for bd_id in n_brs:
                 # Create BD with MAC learning and unknown unicast flooding
                 # disabled and put interfaces to this BD
-                cls.vapi.bridge_domain_add_del(bd_id=bd_id, uu_flood=0,
+                cls.vclient.bridge_domain_add_del(bd_id=bd_id, uu_flood=0,
                                                learn=0)
                 ifs = [cls.pg_interfaces[i] for i in cls.bd_ifs(bd_id)]
                 for pg_if in ifs:
-                    cls.vapi.sw_interface_set_l2_bridge(
+                    cls.vclient.sw_interface_set_l2_bridge(
                         rx_sw_if_index=pg_if.sw_if_index, bd_id=bd_id)
 
             # Set up all interfaces
@@ -141,11 +141,11 @@ class TestL2fib(VppTestCase):
         super(TestL2fib, self).tearDown()
         if not self.vpp_dead:
             for bd_id in self.n_brs:
-                self.logger.info(self.vapi.ppcli("show bridge-domain %s detail"
+                self.logger.info(self.vclient.ppcli("show bridge-domain %s detail"
                                                  % bd_id))
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show l2fib verbose"))
+        self.logger.info(self.vclient.ppcli("show l2fib verbose"))
 
     def create_hosts(self, n_hosts_per_if, subnet):
         """
@@ -184,7 +184,7 @@ class TestL2fib(VppTestCase):
         :param int bd_id: BD to teach
         :param dict hosts: dict of hosts per interface
         """
-        self.vapi.bridge_flags(bd_id=bd_id, is_set=1, flags=1)
+        self.vclient.bridge_flags(bd_id=bd_id, is_set=1, flags=1)
         ifs = [self.pg_interfaces[i] for i in self.bd_ifs(bd_id)]
         for pg_if in ifs:
             swif = pg_if.sw_if_index
@@ -206,7 +206,7 @@ class TestL2fib(VppTestCase):
         for pg_if in ifs:
             swif = pg_if.sw_if_index
             for host in hosts[swif]:
-                self.vapi.l2fib_add_del(
+                self.vclient.l2fib_add_del(
                     mac_pton(host.mac), bd_id, swif, static_mac=1)
 
     def delete_l2_fib_entry(self, bd_id, hosts):
@@ -219,7 +219,7 @@ class TestL2fib(VppTestCase):
         for pg_if in ifs:
             swif = pg_if.sw_if_index
             for host in hosts[swif]:
-                self.vapi.l2fib_add_del(
+                self.vclient.l2fib_add_del(
                     mac_pton(host.mac), bd_id, swif, is_add=0)
 
     def flush_int(self, swif, learned_hosts):
@@ -229,7 +229,7 @@ class TestL2fib(VppTestCase):
         :param int swif: sw if index.
         """
         flushed = dict()
-        self.vapi.l2fib_flush_int(swif)
+        self.vclient.l2fib_flush_int(swif)
         flushed[swif] = learned_hosts[swif]
         learned_hosts[swif] = []
         return flushed
@@ -240,7 +240,7 @@ class TestL2fib(VppTestCase):
 
         :param int bd_id: Bridge Domain id.
         """
-        self.vapi.l2fib_flush_bd(bd_id)
+        self.vclient.l2fib_flush_bd(bd_id)
         flushed = dict()
         ifs = [self.pg_interfaces[i] for i in self.bd_ifs(bd_id)]
         for pg_if in ifs:
@@ -253,7 +253,7 @@ class TestL2fib(VppTestCase):
         """
         Flush All L2 FIB entries.
         """
-        self.vapi.l2fib_flush_all()
+        self.vclient.l2fib_flush_all()
 
     def create_stream(self, src_if, packet_sizes, if_src_hosts, if_dst_hosts):
         """
@@ -344,7 +344,7 @@ class TestL2fib(VppTestCase):
             if pkts:
                 i.add_stream(pkts)
 
-        self.vapi.bridge_flags(bd_id=bd_id, is_set=0, flags=1)
+        self.vclient.bridge_flags(bd_id=bd_id, is_set=0, flags=1)
         # Enable packet capture and start packet sending
         self.pg_enable_capture(ifs)
         self.pg_start()
@@ -372,7 +372,7 @@ class TestL2fib(VppTestCase):
             if pkts:
                 i.add_stream(pkts)
 
-        self.vapi.bridge_flags(bd_id=bd_id, is_set=0, flags=1)
+        self.vclient.bridge_flags(bd_id=bd_id, is_set=0, flags=1)
         # Enable packet capture and start packet sending
         self.pg_enable_capture(ifs)
         self.pg_start()
@@ -483,19 +483,19 @@ class TestL2fib(VppTestCase):
         bd1 = 1
         hosts = self.create_hosts(10, subnet=39)
 
-        self.vapi.want_l2_macs_events()
+        self.vclient.want_l2_macs_events()
         self.learn_hosts(bd1, hosts)
 
         self.sleep(1)
-        self.logger.info(self.vapi.ppcli("show l2fib"))
-        evs = self.vapi.collect_events()
+        self.logger.info(self.vclient.ppcli("show l2fib"))
+        evs = self.vclient.collect_events()
         action = VppEnum.vl_api_mac_event_action_t.MAC_EVENT_ACTION_API_ADD
         learned_macs = {
             e.mac[i].mac_addr.packed for e in evs for i in range(e.n_macs)
             if e.mac[i].action == action}
         macs = {h.bin_mac for swif in self.bd_ifs(bd1)
                 for h in hosts[self.pg_interfaces[swif].sw_if_index]}
-        self.vapi.want_l2_macs_events(enable_disable=0)
+        self.vclient.want_l2_macs_events(enable_disable=0)
         self.assertEqual(len(learned_macs ^ macs), 0)
 
     def test_l2_fib_macs_learn_max(self):
@@ -505,13 +505,13 @@ class TestL2fib(VppTestCase):
         hosts = self.create_hosts(10, subnet=40)
 
         ev_macs = 1
-        self.vapi.want_l2_macs_events(max_macs_in_event=ev_macs)
+        self.vclient.want_l2_macs_events(max_macs_in_event=ev_macs)
         self.learn_hosts(bd1, hosts)
 
         self.sleep(1)
-        self.logger.info(self.vapi.ppcli("show l2fib"))
-        evs = self.vapi.collect_events()
-        self.vapi.want_l2_macs_events(enable_disable=0)
+        self.logger.info(self.vclient.ppcli("show l2fib"))
+        evs = self.vclient.collect_events()
+        self.vclient.want_l2_macs_events(enable_disable=0)
 
         self.assertGreater(len(evs), 0)
         action = VppEnum.vl_api_mac_event_action_t.MAC_EVENT_ACTION_API_ADD
diff --git a/test/test_l2_flood.py b/test/test_l2_flood.py
index 7f3c57a39..82a43d67b 100644
--- a/test/test_l2_flood.py
+++ b/test/test_l2_flood.py
@@ -4,8 +4,8 @@ import unittest
 import socket
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_l2 import L2_PORT_TYPE, BRIDGE_FLAGS
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_l2 import L2_PORT_TYPE, BRIDGE_FLAGS
 
 from scapy.packet import Raw
 from scapy.layers.l2 import Ether
@@ -57,22 +57,22 @@ class TestL2Flood(VppTestCase):
         #
         # Create a single bridge Domain
         #
-        self.vapi.bridge_domain_add_del(bd_id=1)
+        self.vclient.bridge_domain_add_del(bd_id=1)
 
         #
         # add each interface to the BD. 3 interfaces per split horizon group
         #
         for i in self.pg_interfaces[0:4]:
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                                  bd_id=1, shg=0)
         for i in self.pg_interfaces[4:8]:
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                                  bd_id=1, shg=1)
         for i in self.pg_interfaces[8:12]:
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                                  bd_id=1, shg=2)
         for i in self.bvi_interfaces:
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                                  bd_id=1, shg=2,
                                                  port_type=L2_PORT_TYPE.BVI)
 
@@ -112,12 +112,12 @@ class TestL2Flood(VppTestCase):
         #
         # An IP route so the packet that hits the BVI is sent out of pg12
         #
-        ip_route = VppIpRoute(self, "1.1.1.1", 32,
+        ip_route = VppIpRoute(self.vclient, "1.1.1.1", 32,
                               [VppRoutePath(self.pg12.remote_ip4,
                                             self.pg12.sw_if_index)])
         ip_route.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh bridge 1 detail"))
+        self.logger.info(self.vclient.cli("sh bridge 1 detail"))
 
         #
         # input on pg0 expect copies on pg1->12
@@ -150,15 +150,15 @@ class TestL2Flood(VppTestCase):
         # cleanup
         #
         for i in self.pg_interfaces[:12]:
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                                  bd_id=1, enable=0)
         for i in self.bvi_interfaces:
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                                  bd_id=1, shg=2,
                                                  port_type=L2_PORT_TYPE.BVI,
                                                  enable=0)
 
-        self.vapi.bridge_domain_add_del(bd_id=1, is_add=0)
+        self.vclient.bridge_domain_add_del(bd_id=1, is_add=0)
 
     def test_flood_one(self):
         """ L2 no-Flood Test """
@@ -166,14 +166,14 @@ class TestL2Flood(VppTestCase):
         #
         # Create a single bridge Domain
         #
-        self.vapi.bridge_domain_add_del(bd_id=1)
+        self.vclient.bridge_domain_add_del(bd_id=1)
 
         #
         # add 2 interfaces to the BD. this means a flood goes to only
         # one member
         #
         for i in self.pg_interfaces[:2]:
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                                  bd_id=1, shg=0)
 
         p = (Ether(dst="ff:ff:ff:ff:ff:ff",
@@ -191,9 +191,9 @@ class TestL2Flood(VppTestCase):
         # cleanup
         #
         for i in self.pg_interfaces[:2]:
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                                  bd_id=1, enable=0)
-        self.vapi.bridge_domain_add_del(bd_id=1, is_add=0)
+        self.vclient.bridge_domain_add_del(bd_id=1, is_add=0)
 
     def test_uu_fwd(self):
         """ UU Flood """
@@ -201,13 +201,13 @@ class TestL2Flood(VppTestCase):
         #
         # Create a single bridge Domain
         #
-        self.vapi.bridge_domain_add_del(bd_id=1, uu_flood=1)
+        self.vclient.bridge_domain_add_del(bd_id=1, uu_flood=1)
 
         #
         # add each interface to the BD. 3 interfaces per split horizon group
         #
         for i in self.pg_interfaces[0:4]:
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                                  bd_id=1, shg=0)
 
         #
@@ -244,7 +244,7 @@ class TestL2Flood(VppTestCase):
         #
         # use pg8 as the uu-fwd interface
         #
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg8.sw_if_index, bd_id=1, shg=0,
             port_type=L2_PORT_TYPE.UU_FWD)
 
@@ -270,7 +270,7 @@ class TestL2Flood(VppTestCase):
         #
         # remove the uu-fwd interface and expect UU to be flooded again
         #
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg8.sw_if_index, bd_id=1, shg=0,
             port_type=L2_PORT_TYPE.UU_FWD, enable=0)
 
@@ -284,17 +284,17 @@ class TestL2Flood(VppTestCase):
         #
         # change the BD config to not support UU-flood
         #
-        self.vapi.bridge_flags(bd_id=1, is_set=0, flags=BRIDGE_FLAGS.UU_FLOOD)
+        self.vclient.bridge_flags(bd_id=1, is_set=0, flags=BRIDGE_FLAGS.UU_FLOOD)
 
         self.send_and_assert_no_replies(self.pg0, p_uu)
 
         #
         # re-add the uu-fwd interface
         #
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg8.sw_if_index, bd_id=1, shg=0,
             port_type=L2_PORT_TYPE.UU_FWD)
-        self.logger.info(self.vapi.cli("sh bridge 1 detail"))
+        self.logger.info(self.vclient.cli("sh bridge 1 detail"))
 
         self.pg0.add_stream(p_uu*NUM_PKTS)
         self.pg_enable_capture(self.pg_interfaces)
@@ -308,7 +308,7 @@ class TestL2Flood(VppTestCase):
         #
         # remove the uu-fwd interface
         #
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg8.sw_if_index, bd_id=1, shg=0,
             port_type=L2_PORT_TYPE.UU_FWD, enable=0)
         self.send_and_assert_no_replies(self.pg0, p_uu)
@@ -317,10 +317,10 @@ class TestL2Flood(VppTestCase):
         # cleanup
         #
         for i in self.pg_interfaces[:4]:
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                                  bd_id=1, enable=0)
 
-        self.vapi.bridge_domain_add_del(bd_id=1, is_add=0)
+        self.vclient.bridge_domain_add_del(bd_id=1, is_add=0)
 
 
 if __name__ == '__main__':
diff --git a/test/test_l2bd.py b/test/test_l2bd.py
index 5eca48c6e..7f6dbfe63 100644
--- a/test/test_l2bd.py
+++ b/test/test_l2bd.py
@@ -8,8 +8,8 @@ from scapy.layers.l2 import Ether, Dot1Q
 from scapy.layers.inet import IP, UDP
 
 from framework import VppTestCase, VppTestRunner
-from util import Host, ppp
-from vpp_sub_interface import VppDot1QSubint, VppDot1ADSubint
+from vpp_pom.util import Host, ppp
+from vpp_pom.vpp_sub_interface import VppDot1QSubint, VppDot1ADSubint
 
 
 class TestL2bd(VppTestCase):
@@ -53,8 +53,8 @@ class TestL2bd(VppTestCase):
 
             # create 2 sub-interfaces for pg1 and pg2
             cls.sub_interfaces = [
-                VppDot1QSubint(cls, cls.pg1, cls.dot1q_tag),
-                VppDot1ADSubint(cls, cls.pg2, cls.dot1ad_sub_id,
+                VppDot1QSubint(cls.vclient, cls.pg1, cls.dot1q_tag),
+                VppDot1ADSubint(cls.vclient, cls.pg2, cls.dot1ad_sub_id,
                                 cls.dot1ad_outer_tag, cls.dot1ad_inner_tag)]
 
             # packet flows mapping pg0 -> pg1, pg2, etc.
@@ -75,7 +75,7 @@ class TestL2bd(VppTestCase):
             for pg_if in cls.pg_interfaces:
                 sw_if_index = pg_if.sub_if.sw_if_index \
                     if hasattr(pg_if, 'sub_if') else pg_if.sw_if_index
-                cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=sw_if_index,
+                cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=sw_if_index,
                                                     bd_id=cls.bd_id)
 
             # setup all interfaces
@@ -88,7 +88,7 @@ class TestL2bd(VppTestCase):
             # create test host entries and inject packets to learn MAC entries
             # in the bridge-domain
             cls.create_hosts_and_learn(cls.mac_entries_count)
-            cls.logger.info(cls.vapi.ppcli("show l2fib"))
+            cls.logger.info(cls.vclient.ppcli("show l2fib"))
 
         except Exception:
             super(TestL2bd, cls).tearDownClass()
@@ -111,8 +111,8 @@ class TestL2bd(VppTestCase):
         """
         super(TestL2bd, self).tearDown()
         if not self.vpp_dead:
-            self.logger.info(self.vapi.ppcli("show l2fib verbose"))
-            self.logger.info(self.vapi.ppcli("show bridge-domain %s detail" %
+            self.logger.info(self.vclient.ppcli("show l2fib verbose"))
+            self.logger.info(self.vclient.ppcli("show bridge-domain %s detail" %
                                              self.bd_id))
 
     @classmethod
diff --git a/test/test_l2bd_arp_term.py b/test/test_l2bd_arp_term.py
index c64d5d4f0..fa394b6db 100644
--- a/test/test_l2bd_arp_term.py
+++ b/test/test_l2bd_arp_term.py
@@ -18,7 +18,7 @@ from scapy.layers.inet6 import IPv6, UDP, ICMPv6ND_NS, ICMPv6ND_RS, \
     ICMPv6ND_NA, ICMPv6NDOptDstLLAddr, ICMPv6DestUnreach, icmp6types
 
 from framework import VppTestCase, VppTestRunner
-from util import Host, ppp
+from vpp_pom.util import Host, ppp
 
 
 class TestL2bdArpTerm(VppTestCase):
@@ -68,16 +68,16 @@ class TestL2bdArpTerm(VppTestCase):
         super(TestL2bdArpTerm, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show l2fib verbose"))
+        self.logger.info(self.vclient.ppcli("show l2fib verbose"))
         # many tests delete bridge-domain 1 as the last task.  don't output
         # the details of a non-existent bridge-domain.
-        if self.vapi.l2_fib_table_dump(bd_id=1):
-            self.logger.info(self.vapi.ppcli("show bridge-domain 1 detail"))
+        if self.vclient.l2_fib_table_dump(bd_id=1):
+            self.logger.info(self.vclient.ppcli("show bridge-domain 1 detail"))
 
     def add_del_arp_term_hosts(self, entries, bd_id=1, is_add=1, is_ipv6=0):
         for e in entries:
             ip = e.ip4 if is_ipv6 == 0 else e.ip6
-            self.vapi.bd_ip_mac_add_del(is_add=is_add,
+            self.vclient.bd_ip_mac_add_del(is_add=is_add,
                                         entry={
                                             'bd_id': bd_id,
                                             'ip': ip,
@@ -115,13 +115,13 @@ class TestL2bdArpTerm(VppTestCase):
 
     def bd_add_del(self, bd_id=1, is_add=1):
         if is_add:
-            self.vapi.bridge_domain_add_del(bd_id=bd_id, is_add=is_add)
+            self.vclient.bridge_domain_add_del(bd_id=bd_id, is_add=is_add)
         for swif in self.bd_swifs(bd_id):
             swif_idx = swif.sw_if_index
-            self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=swif_idx,
+            self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=swif_idx,
                                                  bd_id=bd_id, enable=is_add)
         if not is_add:
-            self.vapi.bridge_domain_add_del(bd_id=bd_id, is_add=is_add)
+            self.vclient.bridge_domain_add_del(bd_id=bd_id, is_add=is_add)
 
     @classmethod
     def arp_req(cls, src_host, host):
@@ -236,7 +236,7 @@ class TestL2bdArpTerm(VppTestCase):
             else:
                 raise ValueError("Unknown feature used: %s" % flag)
             is_set = 1 if args[flag] else 0
-            self.vapi.bridge_flags(bd_id=bd_id, is_set=is_set,
+            self.vclient.bridge_flags(bd_id=bd_id, is_set=is_set,
                                    flags=feature_bitmap)
         self.logger.info("Bridge domain ID %d updated" % bd_id)
 
@@ -391,7 +391,7 @@ class TestL2bdArpTerm(VppTestCase):
     def test_l2bd_arp_term_09(self):
         """ L2BD arp term - send garps, verify arp event reports
         """
-        self.vapi.want_l2_arp_term_events(enable=1)
+        self.vclient.want_l2_arp_term_events(enable=1)
         self.bd_add_del(1, is_add=1)
         self.set_bd_flags(1, arp_term=True, flood=False,
                           uu_flood=False, learn=False)
@@ -403,7 +403,7 @@ class TestL2bdArpTerm(VppTestCase):
 
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
-        evs = [self.vapi.wait_for_event(1, "l2_arp_term_event")
+        evs = [self.vclient.wait_for_event(1, "l2_arp_term_event")
                for i in range(len(hosts))]
         ev_hosts = self.arp_event_hosts(evs)
         self.assertEqual(len(ev_hosts ^ hosts), 0)
@@ -421,7 +421,7 @@ class TestL2bdArpTerm(VppTestCase):
 
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
-        evs = [self.vapi.wait_for_event(1, "l2_arp_term_event")
+        evs = [self.vclient.wait_for_event(1, "l2_arp_term_event")
                for i in range(len(hosts))]
         ev_hosts = self.arp_event_hosts(evs)
         self.assertEqual(len(ev_hosts ^ hosts), 0)
@@ -429,7 +429,7 @@ class TestL2bdArpTerm(VppTestCase):
     def test_l2bd_arp_term_11(self):
         """ L2BD arp term - disable ip4 arp events,send garps, verify no events
         """
-        self.vapi.want_l2_arp_term_events(enable=0)
+        self.vclient.want_l2_arp_term_events(enable=0)
         macs = self.mac_list(range(90, 95))
         hosts = self.ip4_hosts(5, 1, macs)
 
@@ -439,13 +439,13 @@ class TestL2bdArpTerm(VppTestCase):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
         self.sleep(1)
-        self.assertEqual(len(self.vapi.collect_events()), 0)
+        self.assertEqual(len(self.vclient.collect_events()), 0)
         self.bd_add_del(1, is_add=0)
 
     def test_l2bd_arp_term_12(self):
         """ L2BD ND term - send NS packets verify reports
         """
-        self.vapi.want_l2_arp_term_events(enable=1)
+        self.vclient.want_l2_arp_term_events(enable=1)
         dst_host = self.ip6_host(50, 50, "00:00:11:22:33:44")
         self.bd_add_del(1, is_add=1)
         self.set_bd_flags(1, arp_term=True, flood=False,
@@ -457,7 +457,7 @@ class TestL2bdArpTerm(VppTestCase):
 
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
-        evs = [self.vapi.wait_for_event(2, "l2_arp_term_event")
+        evs = [self.vclient.wait_for_event(2, "l2_arp_term_event")
                for i in range(len(hosts))]
         ev_hosts = self.nd_event_hosts(evs)
         self.assertEqual(len(ev_hosts ^ hosts), 0)
@@ -473,7 +473,7 @@ class TestL2bdArpTerm(VppTestCase):
 
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
-        evs = [self.vapi.wait_for_event(2, "l2_arp_term_event")
+        evs = [self.vclient.wait_for_event(2, "l2_arp_term_event")
                for i in range(len(hosts))]
         ev_hosts = self.nd_event_hosts(evs)
         self.assertEqual(len(ev_hosts ^ hosts), 0)
@@ -481,7 +481,7 @@ class TestL2bdArpTerm(VppTestCase):
     def test_l2bd_arp_term_14(self):
         """ L2BD ND term - disable ip4 arp events,send ns, verify no events
         """
-        self.vapi.want_l2_arp_term_events(enable=0)
+        self.vclient.want_l2_arp_term_events(enable=0)
         dst_host = self.ip6_host(50, 50, "00:00:11:22:33:44")
         macs = self.mac_list(range(10, 15))
         hosts = self.ip6_hosts(5, 1, macs)
@@ -491,7 +491,7 @@ class TestL2bdArpTerm(VppTestCase):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
         self.sleep(1)
-        self.assertEqual(len(self.vapi.collect_events()), 0)
+        self.assertEqual(len(self.vclient.collect_events()), 0)
         self.bd_add_del(1, is_add=0)
 
 
diff --git a/test/test_l2bd_multi_instance.py b/test/test_l2bd_multi_instance.py
index b51bb5e6c..6b3669b0e 100644
--- a/test/test_l2bd_multi_instance.py
+++ b/test/test_l2bd_multi_instance.py
@@ -70,7 +70,7 @@ from scapy.layers.l2 import Ether
 from scapy.layers.inet import IP, UDP
 
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from util import Host, ppp
+from vpp_pom.util import Host, ppp
 
 
 class TestL2bdMultiInst(VppTestCase):
@@ -144,8 +144,8 @@ class TestL2bdMultiInst(VppTestCase):
         """
         super(TestL2bdMultiInst, self).tearDown()
         if not self.vpp_dead:
-            self.logger.info(self.vapi.ppcli("show l2fib verbose"))
-            self.logger.info(self.vapi.ppcli("show bridge-domain"))
+            self.logger.info(self.vclient.ppcli("show l2fib verbose"))
+            self.logger.info(self.vclient.ppcli("show bridge-domain"))
 
     @classmethod
     def create_hosts(cls, hosts_per_if):
@@ -182,7 +182,7 @@ class TestL2bdMultiInst(VppTestCase):
             (Default value = 1)
         """
         for b in range(start, start + count):
-            self.vapi.bridge_domain_add_del(bd_id=b)
+            self.vclient.bridge_domain_add_del(bd_id=b)
             self.logger.info("Bridge domain ID %d created" % b)
             if self.bd_list.count(b) == 0:
                 self.bd_list.append(b)
@@ -190,7 +190,7 @@ class TestL2bdMultiInst(VppTestCase):
                 self.bd_deleted_list.remove(b)
             for j in self.bd_if_range(b):
                 pg_if = self.pg_interfaces[j]
-                self.vapi.sw_interface_set_l2_bridge(
+                self.vclient.sw_interface_set_l2_bridge(
                     rx_sw_if_index=pg_if.sw_if_index, bd_id=b)
                 self.logger.info("pg-interface %s added to bridge domain ID %d"
                                  % (pg_if.name, b))
@@ -201,8 +201,8 @@ class TestL2bdMultiInst(VppTestCase):
                 pg_if.add_stream(packets)
         self.logger.info("Sending broadcast eth frames for MAC learning")
         self.pg_start()
-        self.logger.info(self.vapi.ppcli("show bridge-domain"))
-        self.logger.info(self.vapi.ppcli("show l2fib"))
+        self.logger.info(self.vclient.ppcli("show bridge-domain"))
+        self.logger.info(self.vclient.ppcli("show l2fib"))
 
     def delete_bd(self, count, start=1):
         """
@@ -215,10 +215,10 @@ class TestL2bdMultiInst(VppTestCase):
         for b in range(start, start + count):
             for j in self.bd_if_range(b):
                 pg_if = self.pg_interfaces[j]
-                self.vapi.sw_interface_set_l2_bridge(
+                self.vclient.sw_interface_set_l2_bridge(
                     rx_sw_if_index=pg_if.sw_if_index, bd_id=b, enable=0)
                 self.pg_in_bd.remove(pg_if)
-            self.vapi.bridge_domain_add_del(bd_id=b, is_add=0)
+            self.vclient.bridge_domain_add_del(bd_id=b, is_add=0)
             self.bd_list.remove(b)
             self.bd_deleted_list.append(b)
             self.logger.info("Bridge domain ID %d deleted" % b)
@@ -319,7 +319,7 @@ class TestL2bdMultiInst(VppTestCase):
             else:
                 raise ValueError("Unknown feature used: %s" % flag)
             is_set = 1 if args[flag] else 0
-            self.vapi.bridge_flags(bd_id=bd_id, is_set=is_set,
+            self.vclient.bridge_flags(bd_id=bd_id, is_set=is_set,
                                    flags=feature_bitmap)
         self.logger.info("Bridge domain ID %d updated" % bd_id)
 
@@ -335,7 +335,7 @@ class TestL2bdMultiInst(VppTestCase):
         :return: 1 if bridge domain is configured, otherwise return 0.
         :raise: ValueError in case of unknown feature in the input.
         """
-        bd_dump = self.vapi.bridge_domain_dump(bd_id)
+        bd_dump = self.vclient.bridge_domain_dump(bd_id)
         if len(bd_dump) == 0:
             self.logger.info("Bridge domain ID %d is not configured" % bd_id)
             return 0
@@ -403,7 +403,7 @@ class TestL2bdMultiInst(VppTestCase):
             self.assertEqual(self.verify_bd(bd_id), 1)
 
         # Test 1
-        # self.vapi.cli("clear trace")
+        # self.vclient.cli("clear trace")
         self.run_verify_test()
         self.delete_bd(5)
 
@@ -466,7 +466,7 @@ class TestL2bdMultiInst(VppTestCase):
             self.assertEqual(self.verify_bd(bd_id), 1)
 
         # Test 4
-        # self.vapi.cli("clear trace")
+        # self.vclient.cli("clear trace")
         self.run_verify_test()
         self.delete_bd(2)
 
diff --git a/test/test_l2xc.py b/test/test_l2xc.py
index bc653f0b4..489abee39 100644
--- a/test/test_l2xc.py
+++ b/test/test_l2xc.py
@@ -8,7 +8,7 @@ from scapy.layers.l2 import Ether
 from scapy.layers.inet import IP, UDP
 
 from framework import VppTestCase, VppTestRunner
-from util import Host, ppp
+from vpp_pom.util import Host, ppp
 
 
 class TestL2xc(VppTestCase):
@@ -51,15 +51,15 @@ class TestL2xc(VppTestCase):
             cls.interfaces = list(cls.pg_interfaces)
 
             # Create bi-directional cross-connects between pg0 and pg1
-            cls.vapi.sw_interface_set_l2_xconnect(
+            cls.vclient.sw_interface_set_l2_xconnect(
                 cls.pg0.sw_if_index, cls.pg1.sw_if_index, enable=1)
-            cls.vapi.sw_interface_set_l2_xconnect(
+            cls.vclient.sw_interface_set_l2_xconnect(
                 cls.pg1.sw_if_index, cls.pg0.sw_if_index, enable=1)
 
             # Create bi-directional cross-connects between pg2 and pg3
-            cls.vapi.sw_interface_set_l2_xconnect(
+            cls.vclient.sw_interface_set_l2_xconnect(
                 cls.pg2.sw_if_index, cls.pg3.sw_if_index, enable=1)
-            cls.vapi.sw_interface_set_l2_xconnect(
+            cls.vclient.sw_interface_set_l2_xconnect(
                 cls.pg3.sw_if_index, cls.pg2.sw_if_index, enable=1)
 
             # mapping between packet-generator index and lists of test hosts
@@ -91,7 +91,7 @@ class TestL2xc(VppTestCase):
         super(TestL2xc, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show l2patch"))
+        self.logger.info(self.vclient.ppcli("show l2patch"))
 
     @classmethod
     def create_host_lists(cls, count):
diff --git a/test/test_l2xc_multi_instance.py b/test/test_l2xc_multi_instance.py
index 2a6e41c87..ebbd545e8 100644
--- a/test/test_l2xc_multi_instance.py
+++ b/test/test_l2xc_multi_instance.py
@@ -59,7 +59,7 @@ from scapy.layers.l2 import Ether
 from scapy.layers.inet import IP, UDP
 
 from framework import VppTestCase, VppTestRunner
-from util import Host, ppp
+from vpp_pom.util import Host, ppp
 
 
 class TestL2xcMultiInst(VppTestCase):
@@ -130,7 +130,7 @@ class TestL2xcMultiInst(VppTestCase):
         super(TestL2xcMultiInst, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show l2patch"))
+        self.logger.info(self.vclient.ppcli("show l2patch"))
 
     @classmethod
     def create_hosts(cls, count):
@@ -167,7 +167,7 @@ class TestL2xcMultiInst(VppTestCase):
             rx_if = self.pg_interfaces[i + start]
             delta = 1 if i % 2 == 0 else -1
             tx_if = self.pg_interfaces[i + start + delta]
-            self.vapi.sw_interface_set_l2_xconnect(rx_if.sw_if_index,
+            self.vclient.sw_interface_set_l2_xconnect(rx_if.sw_if_index,
                                                    tx_if.sw_if_index, 1)
             self.logger.info("Cross-connect from %s to %s created"
                              % (tx_if.name, rx_if.name))
@@ -189,7 +189,7 @@ class TestL2xcMultiInst(VppTestCase):
             rx_if = self.pg_interfaces[i + start]
             delta = 1 if i % 2 == 0 else -1
             tx_if = self.pg_interfaces[i + start + delta]
-            self.vapi.sw_interface_set_l2_xconnect(rx_if.sw_if_index,
+            self.vclient.sw_interface_set_l2_xconnect(rx_if.sw_if_index,
                                                    tx_if.sw_if_index, 0)
             self.logger.info("Cross-connect from %s to %s deleted"
                              % (tx_if.name, rx_if.name))
diff --git a/test/test_mpcap.py b/test/test_mpcap.py
index d77b54379..382dd7aa6 100644
--- a/test/test_mpcap.py
+++ b/test/test_mpcap.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 import os
 
 
@@ -43,7 +43,7 @@ class TestMpcap(VppTestCase):
                 "show error"]
 
         for cmd in cmds:
-            self.logger.info(self.vapi.cli(cmd))
+            self.logger.info(self.vclient.cli(cmd))
 
         size = os.path.getsize("/tmp/mpcap_unittest.pcap")
         os.remove("/tmp/mpcap_unittest.pcap")
diff --git a/test/test_mpls.py b/test/test_mpls.py
index 0f3c617fc..45099b09c 100644
--- a/test/test_mpls.py
+++ b/test/test_mpls.py
@@ -4,13 +4,13 @@ import unittest
 import socket
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto, INVALID_INDEX
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppMplsRoute, \
+from vpp_pom.vpp_ip import DpoProto, INVALID_INDEX
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppMplsRoute, \
     VppMplsIpBind, VppIpMRoute, VppMRoutePath, \
     VppIpTable, VppMplsTable, \
     VppMplsLabel, MplsLspMode, find_mpls_route, \
     FibPathProto, FibPathType, FibPathFlags, VppMplsLabel, MplsLspMode
-from vpp_mpls_tunnel_interface import VppMPLSTunnelInterface
+from vpp_pom.vpp_mpls_tunnel_interface import VppMPLSTunnelInterface
 from vpp_papi import VppEnum
 
 import scapy.compat
@@ -81,7 +81,7 @@ class TestMPLS(VppTestCase):
         table_id = 0
         self.tables = []
 
-        tbl = VppMplsTable(self, 0)
+        tbl = VppMplsTable(self.vclient, 0)
         tbl.add_vpp_config()
         self.tables.append(tbl)
 
@@ -89,10 +89,10 @@ class TestMPLS(VppTestCase):
             i.admin_up()
 
             if table_id != 0:
-                tbl = VppIpTable(self, table_id)
+                tbl = VppIpTable(self.vclient, table_id)
                 tbl.add_vpp_config()
                 self.tables.append(tbl)
-                tbl = VppIpTable(self, table_id, is_ip6=1)
+                tbl = VppIpTable(self.vclient, table_id, is_ip6=1)
                 tbl.add_vpp_config()
                 self.tables.append(tbl)
 
@@ -418,14 +418,14 @@ class TestMPLS(VppTestCase):
         #
         # A simple MPLS xconnect - eos label in label out
         #
-        route_32_eos = VppMplsRoute(self, 32, 1,
+        route_32_eos = VppMplsRoute(self.vclient, 32, 1,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index,
                                                   labels=[VppMplsLabel(33)])])
         route_32_eos.add_vpp_config()
 
         self.assertTrue(
-            find_mpls_route(self, 0, 32, 1,
+            find_mpls_route(self.vclient, 0, 32, 1,
                             [VppRoutePath(self.pg0.remote_ip4,
                                           self.pg0.sw_if_index,
                                           labels=[VppMplsLabel(33)])]))
@@ -445,7 +445,7 @@ class TestMPLS(VppTestCase):
         #
         # A simple MPLS xconnect - non-eos label in label out
         #
-        route_32_neos = VppMplsRoute(self, 32, 0,
+        route_32_neos = VppMplsRoute(self.vclient, 32, 0,
                                      [VppRoutePath(self.pg0.remote_ip4,
                                                    self.pg0.sw_if_index,
                                                    labels=[VppMplsLabel(33)])])
@@ -468,7 +468,7 @@ class TestMPLS(VppTestCase):
         # A simple MPLS xconnect - non-eos label in label out, uniform mode
         #
         route_42_neos = VppMplsRoute(
-            self, 42, 0,
+            self.vclient, 42, 0,
             [VppRoutePath(self.pg0.remote_ip4,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(43, MplsLspMode.UNIFORM)])])
@@ -485,7 +485,7 @@ class TestMPLS(VppTestCase):
         #
         # An MPLS xconnect - EOS label in IP out
         #
-        route_33_eos = VppMplsRoute(self, 33, 1,
+        route_33_eos = VppMplsRoute(self.vclient, 33, 1,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index,
                                                   labels=[])])
@@ -508,7 +508,7 @@ class TestMPLS(VppTestCase):
         # An MPLS xconnect - EOS label in IP out, uniform mode
         #
         route_3333_eos = VppMplsRoute(
-            self, 3333, 1,
+            self.vclient, 3333, 1,
             [VppRoutePath(self.pg0.remote_ip4,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(3, MplsLspMode.UNIFORM)])])
@@ -529,7 +529,7 @@ class TestMPLS(VppTestCase):
         # An MPLS xconnect - EOS label in IPv6 out
         #
         route_333_eos = VppMplsRoute(
-            self, 333, 1,
+            self.vclient, 333, 1,
             [VppRoutePath(self.pg0.remote_ip6,
                           self.pg0.sw_if_index,
                           labels=[])],
@@ -554,7 +554,7 @@ class TestMPLS(VppTestCase):
         # An MPLS xconnect - EOS label in IPv6 out w imp-null
         #
         route_334_eos = VppMplsRoute(
-            self, 334, 1,
+            self.vclient, 334, 1,
             [VppRoutePath(self.pg0.remote_ip6,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(3)])],
@@ -570,7 +570,7 @@ class TestMPLS(VppTestCase):
         # An MPLS xconnect - EOS label in IPv6 out w imp-null in uniform mode
         #
         route_335_eos = VppMplsRoute(
-            self, 335, 1,
+            self.vclient, 335, 1,
             [VppRoutePath(self.pg0.remote_ip6,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(3, MplsLspMode.UNIFORM)])],
@@ -596,7 +596,7 @@ class TestMPLS(VppTestCase):
         # An MPLS xconnect - non-EOS label in IP out - an invalid configuration
         # so this traffic should be dropped.
         #
-        route_33_neos = VppMplsRoute(self, 33, 0,
+        route_33_neos = VppMplsRoute(self.vclient, 33, 0,
                                      [VppRoutePath(self.pg0.remote_ip4,
                                                    self.pg0.sw_if_index,
                                                    labels=[])])
@@ -613,14 +613,14 @@ class TestMPLS(VppTestCase):
         # A recursive EOS x-connect, which resolves through another x-connect
         # in pipe mode
         #
-        route_34_eos = VppMplsRoute(self, 34, 1,
+        route_34_eos = VppMplsRoute(self.vclient, 34, 1,
                                     [VppRoutePath("0.0.0.0",
                                                   0xffffffff,
                                                   nh_via_label=32,
                                                   labels=[VppMplsLabel(44),
                                                           VppMplsLabel(45)])])
         route_34_eos.add_vpp_config()
-        self.logger.info(self.vapi.cli("sh mpls fib 34"))
+        self.logger.info(self.vclient.cli("sh mpls fib 34"))
 
         tx = self.create_stream_labelled_ip4(self.pg0,
                                              [VppMplsLabel(34, ttl=3)])
@@ -638,7 +638,7 @@ class TestMPLS(VppTestCase):
         # in uniform mode
         #
         route_35_eos = VppMplsRoute(
-            self, 35, 1,
+            self.vclient, 35, 1,
             [VppRoutePath("0.0.0.0",
                           0xffffffff,
                           nh_via_label=42,
@@ -656,7 +656,7 @@ class TestMPLS(VppTestCase):
         # A recursive non-EOS x-connect, which resolves through another
         # x-connect
         #
-        route_34_neos = VppMplsRoute(self, 34, 0,
+        route_34_neos = VppMplsRoute(self.vclient, 34, 0,
                                      [VppRoutePath("0.0.0.0",
                                                    0xffffffff,
                                                    nh_via_label=32,
@@ -679,7 +679,7 @@ class TestMPLS(VppTestCase):
         # an recursive IP route that resolves through the recursive non-eos
         # x-connect
         #
-        ip_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        ip_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                  [VppRoutePath("0.0.0.0",
                                                0xffffffff,
                                                nh_via_label=34,
@@ -709,14 +709,14 @@ class TestMPLS(VppTestCase):
         #
         # Add a non-recursive route with a single out label
         #
-        route_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        route_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index,
                                                   labels=[VppMplsLabel(45)])])
         route_10_0_0_1.add_vpp_config()
 
         # bind a local label to the route
-        binding = VppMplsIpBind(self, 44, "10.0.0.1", 32)
+        binding = VppMplsIpBind(self.vclient, 44, "10.0.0.1", 32)
         binding.add_vpp_config()
 
         # non-EOS stream
@@ -751,7 +751,7 @@ class TestMPLS(VppTestCase):
         #
         # Add a non-recursive route with a single out label
         #
-        route_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        route_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index,
                                                   labels=[VppMplsLabel(32)])])
@@ -768,7 +768,7 @@ class TestMPLS(VppTestCase):
         #
         # Add a non-recursive route with a 3 out labels
         #
-        route_10_0_0_2 = VppIpRoute(self, "10.0.0.2", 32,
+        route_10_0_0_2 = VppIpRoute(self.vclient, "10.0.0.2", 32,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index,
                                                   labels=[VppMplsLabel(32),
@@ -789,7 +789,7 @@ class TestMPLS(VppTestCase):
         # Add a non-recursive route with a single out label in uniform mode
         #
         route_10_0_0_3 = VppIpRoute(
-            self, "10.0.0.3", 32,
+            self.vclient, "10.0.0.3", 32,
             [VppRoutePath(self.pg0.remote_ip4,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(32,
@@ -807,7 +807,7 @@ class TestMPLS(VppTestCase):
         # uniform mode
         #
         route_2001_3 = VppIpRoute(
-            self, "2001::3", 128,
+            self.vclient, "2001::3", 128,
             [VppRoutePath(self.pg0.remote_ip6,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(32,
@@ -823,7 +823,7 @@ class TestMPLS(VppTestCase):
         #
         # add a recursive path, with output label, via the 1 label route
         #
-        route_11_0_0_1 = VppIpRoute(self, "11.0.0.1", 32,
+        route_11_0_0_1 = VppIpRoute(self.vclient, "11.0.0.1", 32,
                                     [VppRoutePath("10.0.0.1",
                                                   0xffffffff,
                                                   labels=[VppMplsLabel(44)])])
@@ -844,7 +844,7 @@ class TestMPLS(VppTestCase):
         #
         # add a recursive path, with 2 labels, via the 3 label route
         #
-        route_11_0_0_2 = VppIpRoute(self, "11.0.0.2", 32,
+        route_11_0_0_2 = VppIpRoute(self.vclient, "11.0.0.2", 32,
                                     [VppRoutePath("10.0.0.2",
                                                   0xffffffff,
                                                   labels=[VppMplsLabel(44),
@@ -890,7 +890,7 @@ class TestMPLS(VppTestCase):
         #
         # Add a ipv4 non-recursive route with a single out label
         #
-        route_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        route_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index,
                                                   labels=[VppMplsLabel(32)])])
@@ -923,7 +923,7 @@ class TestMPLS(VppTestCase):
         # Create a tunnel with two out labels
         #
         mpls_tun = VppMPLSTunnelInterface(
-            self,
+            self.vclient,
             [VppRoutePath(self.pg0.remote_ip4,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(44),
@@ -934,12 +934,12 @@ class TestMPLS(VppTestCase):
         #
         # add an unlabelled route through the new tunnel
         #
-        route_10_0_0_3 = VppIpRoute(self, "10.0.0.3", 32,
+        route_10_0_0_3 = VppIpRoute(self.vclient, "10.0.0.3", 32,
                                     [VppRoutePath("0.0.0.0",
                                                   mpls_tun._sw_if_index)])
         route_10_0_0_3.add_vpp_config()
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "10.0.0.3")
         self.pg0.add_stream(tx)
 
@@ -954,13 +954,13 @@ class TestMPLS(VppTestCase):
         #
         # add a labelled route through the new tunnel
         #
-        route_10_0_0_4 = VppIpRoute(self, "10.0.0.4", 32,
+        route_10_0_0_4 = VppIpRoute(self.vclient, "10.0.0.4", 32,
                                     [VppRoutePath("0.0.0.0",
                                                   mpls_tun._sw_if_index,
                                                   labels=[33])])
         route_10_0_0_4.add_vpp_config()
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "10.0.0.4")
         self.pg0.add_stream(tx)
 
@@ -1013,7 +1013,7 @@ class TestMPLS(VppTestCase):
         # The label stack is specified here from outer to inner
         #
         mpls_tun = VppMPLSTunnelInterface(
-            self,
+            self.vclient,
             [VppRoutePath(self.pg0.remote_ip4,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(44, ttl=32),
@@ -1024,12 +1024,12 @@ class TestMPLS(VppTestCase):
         #
         # add an unlabelled route through the new tunnel
         #
-        route_10_0_0_3 = VppIpRoute(self, "10.0.0.3", 32,
+        route_10_0_0_3 = VppIpRoute(self.vclient, "10.0.0.3", 32,
                                     [VppRoutePath("0.0.0.0",
                                                   mpls_tun._sw_if_index)])
         route_10_0_0_3.add_vpp_config()
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "10.0.0.3", ip_ttl=24)
         self.pg0.add_stream(tx)
 
@@ -1045,13 +1045,13 @@ class TestMPLS(VppTestCase):
         # add a labelled route through the new tunnel
         #
         route_10_0_0_4 = VppIpRoute(
-            self, "10.0.0.4", 32,
+            self.vclient, "10.0.0.4", 32,
             [VppRoutePath("0.0.0.0",
                           mpls_tun._sw_if_index,
                           labels=[VppMplsLabel(33, ttl=47)])])
         route_10_0_0_4.add_vpp_config()
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "10.0.0.4")
         self.pg0.add_stream(tx)
 
@@ -1069,7 +1069,7 @@ class TestMPLS(VppTestCase):
 
         for ii in range(10):
             mpls_tun = VppMPLSTunnelInterface(
-                self,
+                self.vclient,
                 [VppRoutePath(self.pg0.remote_ip4,
                               self.pg0.sw_if_index,
                               labels=[VppMplsLabel(44, ttl=32),
@@ -1132,7 +1132,7 @@ class TestMPLS(VppTestCase):
         #
         # A de-agg route - next-hop lookup in default table
         #
-        route_34_eos = VppMplsRoute(self, 34, 1,
+        route_34_eos = VppMplsRoute(self.vclient, 34, 1,
                                     [VppRoutePath("0.0.0.0",
                                                   0xffffffff,
                                                   nh_table_id=0)])
@@ -1152,7 +1152,7 @@ class TestMPLS(VppTestCase):
         #
         # A de-agg route - next-hop lookup in non-default table
         #
-        route_35_eos = VppMplsRoute(self, 35, 1,
+        route_35_eos = VppMplsRoute(self.vclient, 35, 1,
                                     [VppRoutePath("0.0.0.0",
                                                   0xffffffff,
                                                   nh_table_id=1)])
@@ -1171,7 +1171,7 @@ class TestMPLS(VppTestCase):
         #
         # Double pop
         #
-        route_36_neos = VppMplsRoute(self, 36, 0,
+        route_36_neos = VppMplsRoute(self.vclient, 36, 0,
                                      [VppRoutePath("0.0.0.0",
                                                    0xffffffff)])
         route_36_neos.add_vpp_config()
@@ -1194,7 +1194,7 @@ class TestMPLS(VppTestCase):
         # Add a non-recursive route that will forward the traffic
         # post-interface-rx
         #
-        route_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        route_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                     table_id=1,
                                     paths=[VppRoutePath(self.pg1.remote_ip4,
                                                         self.pg1.sw_if_index)])
@@ -1209,7 +1209,7 @@ class TestMPLS(VppTestCase):
         # so as to have matched the route in table 1
         #
         route_34_eos = VppMplsRoute(
-            self, 34, 1,
+            self.vclient, 34, 1,
             [VppRoutePath("0.0.0.0",
                           self.pg1.sw_if_index,
                           type=FibPathType.FIB_PATH_TYPE_INTERFACE_RX)])
@@ -1232,7 +1232,7 @@ class TestMPLS(VppTestCase):
         # Add a non-recursive route that will forward the traffic
         # post-interface-rx
         #
-        route_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        route_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                     table_id=1,
                                     paths=[VppRoutePath(self.pg1.remote_ip4,
                                                         self.pg1.sw_if_index)])
@@ -1243,7 +1243,7 @@ class TestMPLS(VppTestCase):
         # and replicate to a interface-rx (like a bud node would)
         #
         route_3400_eos = VppMplsRoute(
-            self, 3400, 1,
+            self.vclient, 3400, 1,
             [VppRoutePath(self.pg2.remote_ip4,
                           self.pg2.sw_if_index,
                           labels=[VppMplsLabel(3401)]),
@@ -1260,7 +1260,7 @@ class TestMPLS(VppTestCase):
         # ping an interface in the default table
         # PG0 is in the default table
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_labelled_ip4(self.pg0,
                                              [VppMplsLabel(3400, ttl=64)],
                                              n=257,
@@ -1290,7 +1290,7 @@ class TestMPLS(VppTestCase):
         # Create a multicast tunnel with two replications
         #
         mpls_tun = VppMPLSTunnelInterface(
-            self,
+            self.vclient,
             [VppRoutePath(self.pg2.remote_ip4,
                           self.pg2.sw_if_index,
                           labels=[VppMplsLabel(42)]),
@@ -1304,12 +1304,12 @@ class TestMPLS(VppTestCase):
         #
         # add an unlabelled route through the new tunnel
         #
-        route_10_0_0_3 = VppIpRoute(self, "10.0.0.3", 32,
+        route_10_0_0_3 = VppIpRoute(self.vclient, "10.0.0.3", 32,
                                     [VppRoutePath("0.0.0.0",
                                                   mpls_tun._sw_if_index)])
         route_10_0_0_3.add_vpp_config()
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "10.0.0.3")
         self.pg0.add_stream(tx)
 
@@ -1327,7 +1327,7 @@ class TestMPLS(VppTestCase):
         # one accepting interface, pg0, 1 forwarding interface via the tunnel
         #
         route_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -1336,9 +1336,9 @@ class TestMPLS(VppTestCase):
              VppMRoutePath(mpls_tun._sw_if_index,
                            MRouteItfFlags.MFIB_API_ITF_FLAG_FORWARD)])
         route_232_1_1_1.add_vpp_config()
-        self.logger.info(self.vapi.cli("sh ip mfib index 0"))
+        self.logger.info(self.vclient.cli("sh ip mfib index 0"))
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_ip4(self.pg0, "232.1.1.1")
         self.pg0.add_stream(tx)
 
@@ -1361,7 +1361,7 @@ class TestMPLS(VppTestCase):
         # post-disposition
         #
         route_232_1_1_1 = VppIpMRoute(
-            self,
+            self.vclient,
             "0.0.0.0",
             "232.1.1.1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -1379,7 +1379,7 @@ class TestMPLS(VppTestCase):
         # table 1
         #
         route_34_eos = VppMplsRoute(
-            self, 34, 1,
+            self.vclient, 34, 1,
             [VppRoutePath("0.0.0.0",
                           0xffffffff,
                           nh_table_id=1,
@@ -1392,7 +1392,7 @@ class TestMPLS(VppTestCase):
         #
         # Drop due to interface lookup miss
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         tx = self.create_stream_labelled_ip4(self.pg0, [VppMplsLabel(34)],
                                              dst_ip="232.1.1.1", n=1)
         self.send_and_assert_no_replies(self.pg0, tx, "RPF-ID drop none")
@@ -1401,7 +1401,7 @@ class TestMPLS(VppTestCase):
         # set the RPF-ID of the entry to match the input packet's
         #
         route_232_1_1_1.update_rpf_id(55)
-        self.logger.info(self.vapi.cli("sh ip mfib index 1 232.1.1.1"))
+        self.logger.info(self.vclient.cli("sh ip mfib index 1 232.1.1.1"))
 
         tx = self.create_stream_labelled_ip4(self.pg0, [VppMplsLabel(34)],
                                              dst_ip="232.1.1.1")
@@ -1435,7 +1435,7 @@ class TestMPLS(VppTestCase):
         # post-disposition
         #
         route_ff = VppIpMRoute(
-            self,
+            self.vclient,
             "::",
             "ff01::1", 32,
             MRouteEntryFlags.MFIB_API_ENTRY_FLAG_NONE,
@@ -1454,7 +1454,7 @@ class TestMPLS(VppTestCase):
         # table 1
         #
         route_34_eos = VppMplsRoute(
-            self, 34, 1,
+            self.vclient, 34, 1,
             [VppRoutePath("::",
                           0xffffffff,
                           nh_table_id=1,
@@ -1506,21 +1506,21 @@ class TestMPLS(VppTestCase):
         #
         # Add a non-recursive route with a single out label
         #
-        route_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        route_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index,
                                                   labels=[VppMplsLabel(45)])])
         route_10_0_0_1.add_vpp_config()
 
         # bind a local label to the route
-        binding = VppMplsIpBind(self, 44, "10.0.0.1", 32)
+        binding = VppMplsIpBind(self.vclient, 44, "10.0.0.1", 32)
         binding.add_vpp_config()
 
         #
         # a labelled v6 route that resolves through the v4
         #
         route_2001_3 = VppIpRoute(
-            self, "2001::3", 128,
+            self.vclient, "2001::3", 128,
             [VppRoutePath("10.0.0.1",
                           INVALID_INDEX,
                           labels=[VppMplsLabel(32)])])
@@ -1537,7 +1537,7 @@ class TestMPLS(VppTestCase):
         # and a v4 recursive via the v6
         #
         route_20_3 = VppIpRoute(
-            self, "20.0.0.3", 32,
+            self.vclient, "20.0.0.3", 32,
             [VppRoutePath("2001::3",
                           INVALID_INDEX,
                           labels=[VppMplsLabel(99)])])
@@ -1569,7 +1569,7 @@ class TestMPLSDisabled(VppTestCase):
         # create 2 pg interfaces
         self.create_pg_interfaces(range(2))
 
-        self.tbl = VppMplsTable(self, 0)
+        self.tbl = VppMplsTable(self.vclient, 0)
         self.tbl.add_vpp_config()
 
         # PG0 is MPLS enabled
@@ -1602,7 +1602,7 @@ class TestMPLSDisabled(VppTestCase):
         #
         # A simple MPLS xconnect - eos label in label out
         #
-        route_32_eos = VppMplsRoute(self, 32, 1,
+        route_32_eos = VppMplsRoute(self.vclient, 32, 1,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index,
                                                   labels=[33])])
@@ -1656,11 +1656,11 @@ class TestMPLSPIC(VppTestCase):
         # create 2 pg interfaces
         self.create_pg_interfaces(range(4))
 
-        mpls_tbl = VppMplsTable(self, 0)
+        mpls_tbl = VppMplsTable(self.vclient, 0)
         mpls_tbl.add_vpp_config()
-        tbl4 = VppIpTable(self, 1)
+        tbl4 = VppIpTable(self.vclient, 1)
         tbl4.add_vpp_config()
-        tbl6 = VppIpTable(self, 1, is_ip6=1)
+        tbl6 = VppIpTable(self.vclient, 1, is_ip6=1)
         tbl6.add_vpp_config()
 
         # core links
@@ -1714,13 +1714,13 @@ class TestMPLSPIC(VppTestCase):
         #
         # IGP+LDP core routes
         #
-        core_10_0_0_45 = VppIpRoute(self, "10.0.0.45", 32,
+        core_10_0_0_45 = VppIpRoute(self.vclient, "10.0.0.45", 32,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index,
                                                   labels=[45])])
         core_10_0_0_45.add_vpp_config()
 
-        core_10_0_0_46 = VppIpRoute(self, "10.0.0.46", 32,
+        core_10_0_0_46 = VppIpRoute(self.vclient, "10.0.0.46", 32,
                                     [VppRoutePath(self.pg1.remote_ip4,
                                                   self.pg1.sw_if_index,
                                                   labels=[46])])
@@ -1735,7 +1735,7 @@ class TestMPLSPIC(VppTestCase):
         for ii in range(NUM_PKTS):
             dst = "192.168.1.%d" % ii
             vpn_routes.append(VppIpRoute(
-                self, dst, 32,
+                self.vclient, dst, 32,
                 [VppRoutePath(
                     "10.0.0.45",
                     0xffffffff,
@@ -1779,7 +1779,7 @@ class TestMPLSPIC(VppTestCase):
         # will prevent the FIB converging the VPN routes and thus allow
         # us to probe the interim (post-fail, pre-converge) state
         #
-        self.vapi.ppcli("test fib-walk-process disable")
+        self.vclient.ppcli("test fib-walk-process disable")
 
         #
         # Withdraw one of the IGP routes
@@ -1789,7 +1789,7 @@ class TestMPLSPIC(VppTestCase):
         #
         # now all packets should be forwarded through the remaining peer
         #
-        self.vapi.ppcli("clear trace")
+        self.vclient.ppcli("clear trace")
         self.pg2.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -1802,7 +1802,7 @@ class TestMPLSPIC(VppTestCase):
         #
         # enable the FIB walk process to converge the FIB
         #
-        self.vapi.ppcli("test fib-walk-process enable")
+        self.vclient.ppcli("test fib-walk-process enable")
 
         #
         # packets should still be forwarded through the remaining peer
@@ -1852,7 +1852,7 @@ class TestMPLSPIC(VppTestCase):
             dst = "192.168.1.%d" % ii
             local_label = 1600 + ii
             vpn_routes.append(VppIpRoute(
-                self, dst, 32,
+                self.vclient, dst, 32,
                 [VppRoutePath(
                     self.pg2.remote_ip4,
                     0xffffffff,
@@ -1866,7 +1866,7 @@ class TestMPLSPIC(VppTestCase):
                 table_id=1))
             vpn_routes[ii].add_vpp_config()
 
-            vpn_bindings.append(VppMplsIpBind(self, local_label, dst, 32,
+            vpn_bindings.append(VppMplsIpBind(self.vclient, local_label, dst, 32,
                                               ip_table_id=1))
             vpn_bindings[ii].add_vpp_config()
 
@@ -1901,7 +1901,7 @@ class TestMPLSPIC(VppTestCase):
         # will prevent the FIB converging the VPN routes and thus allow
         # us to probe the interim (post-fail, pre-converge) state
         #
-        self.vapi.ppcli("test fib-walk-process disable")
+        self.vclient.ppcli("test fib-walk-process disable")
 
         #
         # withdraw the connected prefix on the interface.
@@ -1923,7 +1923,7 @@ class TestMPLSPIC(VppTestCase):
         #
         # enable the FIB walk process to converge the FIB
         #
-        self.vapi.ppcli("test fib-walk-process enable")
+        self.vclient.ppcli("test fib-walk-process enable")
 
         #
         # packets should still be forwarded through the remaining peer
@@ -1974,7 +1974,7 @@ class TestMPLSPIC(VppTestCase):
             dst = "3000::%d" % ii
             local_label = 1600 + ii
             vpn_routes.append(VppIpRoute(
-                self, dst, 128,
+                self.vclient, dst, 128,
                 [VppRoutePath(
                     self.pg2.remote_ip6,
                     0xffffffff,
@@ -1988,7 +1988,7 @@ class TestMPLSPIC(VppTestCase):
                 table_id=1))
             vpn_routes[ii].add_vpp_config()
 
-            vpn_bindings.append(VppMplsIpBind(self, local_label, dst, 128,
+            vpn_bindings.append(VppMplsIpBind(self.vclient, local_label, dst, 128,
                                               ip_table_id=1))
             vpn_bindings[ii].add_vpp_config()
 
@@ -1998,7 +1998,7 @@ class TestMPLSPIC(VppTestCase):
                         IPv6(src=self.pg0.remote_ip6, dst=dst) /
                         UDP(sport=1234, dport=1234) /
                         Raw(b'\xa5' * 100))
-            self.logger.info(self.vapi.cli("sh ip6 fib %s" % dst))
+            self.logger.info(self.vclient.cli("sh ip6 fib %s" % dst))
 
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
@@ -2017,7 +2017,7 @@ class TestMPLSPIC(VppTestCase):
         # will prevent the FIB converging the VPN routes and thus allow
         # us to probe the interim (post-fail, pre-converge) state
         #
-        self.vapi.ppcli("test fib-walk-process disable")
+        self.vclient.ppcli("test fib-walk-process disable")
 
         #
         # withdraw the connected prefix on the interface.
@@ -2041,7 +2041,7 @@ class TestMPLSPIC(VppTestCase):
         #
         # enable the FIB walk process to converge the FIB
         #
-        self.vapi.ppcli("test fib-walk-process enable")
+        self.vclient.ppcli("test fib-walk-process enable")
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -2054,7 +2054,7 @@ class TestMPLSPIC(VppTestCase):
         #
         # put the connected routes back
         #
-        self.logger.info(self.vapi.cli("sh log"))
+        self.logger.info(self.vclient.cli("sh log"))
         self.pg2.admin_up()
         self.pg2.config_ip6()
         self.pg2.resolve_ndp()
@@ -2091,7 +2091,7 @@ class TestMPLSL2(VppTestCase):
 
         # create the default MPLS table
         self.tables = []
-        tbl = VppMplsTable(self, 0)
+        tbl = VppMplsTable(self.vclient, 0)
         tbl.add_vpp_config()
         self.tables.append(tbl)
 
@@ -2156,7 +2156,7 @@ class TestMPLSL2(VppTestCase):
         # information is not in the packet, but we test it works anyway
         #
         mpls_tun_1 = VppMPLSTunnelInterface(
-            self,
+            self.vclient,
             [VppRoutePath(self.pg0.remote_ip4,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(42, MplsLspMode.UNIFORM)])],
@@ -2168,7 +2168,7 @@ class TestMPLSL2(VppTestCase):
         # Create a label entry to for 55 that does L2 input to the tunnel
         #
         route_55_eos = VppMplsRoute(
-            self, 55, 1,
+            self.vclient, 55, 1,
             [VppRoutePath("0.0.0.0",
                           mpls_tun_1.sw_if_index,
                           type=FibPathType.FIB_PATH_TYPE_INTERFACE_RX,
@@ -2179,10 +2179,10 @@ class TestMPLSL2(VppTestCase):
         #
         # Cross-connect the tunnel with one of the customers L2 interfaces
         #
-        self.vapi.sw_interface_set_l2_xconnect(self.pg1.sw_if_index,
+        self.vclient.sw_interface_set_l2_xconnect(self.pg1.sw_if_index,
                                                mpls_tun_1.sw_if_index,
                                                enable=1)
-        self.vapi.sw_interface_set_l2_xconnect(mpls_tun_1.sw_if_index,
+        self.vclient.sw_interface_set_l2_xconnect(mpls_tun_1.sw_if_index,
                                                self.pg1.sw_if_index,
                                                enable=1)
 
@@ -2237,7 +2237,7 @@ class TestMPLSL2(VppTestCase):
         # Create a L2 MPLS tunnels
         #
         mpls_tun1 = VppMPLSTunnelInterface(
-            self,
+            self.vclient,
             [VppRoutePath(self.pg0.remote_ip4,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(42)])],
@@ -2246,7 +2246,7 @@ class TestMPLSL2(VppTestCase):
         mpls_tun1.admin_up()
 
         mpls_tun2 = VppMPLSTunnelInterface(
-            self,
+            self.vclient,
             [VppRoutePath(self.pg0.remote_ip4,
                           self.pg0.sw_if_index,
                           labels=[VppMplsLabel(43)])],
@@ -2259,7 +2259,7 @@ class TestMPLSL2(VppTestCase):
         # the latter includes a Psuedo Wire Control Word
         #
         route_55_eos = VppMplsRoute(
-            self, 55, 1,
+            self.vclient, 55, 1,
             [VppRoutePath("0.0.0.0",
                           mpls_tun1.sw_if_index,
                           type=FibPathType.FIB_PATH_TYPE_INTERFACE_RX,
@@ -2267,7 +2267,7 @@ class TestMPLSL2(VppTestCase):
             eos_proto=FibPathProto.FIB_PATH_NH_PROTO_ETHERNET)
 
         route_56_eos = VppMplsRoute(
-            self, 56, 1,
+            self.vclient, 56, 1,
             [VppRoutePath("0.0.0.0",
                           mpls_tun2.sw_if_index,
                           type=FibPathType.FIB_PATH_TYPE_INTERFACE_RX,
@@ -2279,16 +2279,16 @@ class TestMPLSL2(VppTestCase):
         route_56_eos.add_vpp_config()
         route_55_eos.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh mpls fib 56"))
+        self.logger.info(self.vclient.cli("sh mpls fib 56"))
 
         #
         # add to tunnel to the customers bridge-domain
         #
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=mpls_tun1.sw_if_index, bd_id=1)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=mpls_tun2.sw_if_index, bd_id=1)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg1.sw_if_index, bd_id=1)
 
         #
@@ -2357,11 +2357,11 @@ class TestMPLSL2(VppTestCase):
         #
         # remove interfaces from customers bridge-domain
         #
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=mpls_tun1.sw_if_index, bd_id=1, enable=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=mpls_tun2.sw_if_index, bd_id=1, enable=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg1.sw_if_index, bd_id=1, enable=0)
 
 
diff --git a/test/test_mtu.py b/test/test_mtu.py
index 3c938a8cd..91ebecd15 100644
--- a/test/test_mtu.py
+++ b/test/test_mtu.py
@@ -12,10 +12,10 @@ import unittest
 from scapy.layers.inet6 import IPv6, Ether, IP, UDP, ICMPv6PacketTooBig
 from scapy.layers.inet import ICMP
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, FibPathProto
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, FibPathProto
 from socket import AF_INET, AF_INET6, inet_pton
-from util import reassemble4
+from vpp_pom.util import reassemble4
 
 
 """ Test_mtu is a subclass of VPPTestCase classes.
@@ -65,7 +65,7 @@ class TestMTU(VppTestCase):
         return 'x' * len
 
     def get_mtu(self, sw_if_index):
-        rv = self.vapi.sw_interface_dump(sw_if_index=sw_if_index)
+        rv = self.vclient.sw_interface_dump(sw_if_index=sw_if_index)
         for i in rv:
             if i.sw_if_index == sw_if_index:
                 return i.mtu[0]
@@ -91,7 +91,7 @@ class TestMTU(VppTestCase):
             self.validate(p[1], p4_reply)
 
         # MTU
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index, [576, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index, [576, 0, 0, 0])
         self.assertEqual(576, self.get_mtu(self.pg1.sw_if_index))
 
         # Should fail. Too large MTU
@@ -149,7 +149,7 @@ class TestMTU(VppTestCase):
         '''
 
         # Reset MTU
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index,
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index,
                                        [current_mtu, 0, 0, 0])
 
     def test_ip6_mtu(self):
@@ -171,7 +171,7 @@ class TestMTU(VppTestCase):
             self.validate(p[1], p6_reply)
 
         # MTU (only checked on encap)
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index, [1280, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index, [1280, 0, 0, 0])
         self.assertEqual(1280, self.get_mtu(self.pg1.sw_if_index))
 
         # Should fail. Too large MTU
@@ -190,7 +190,7 @@ class TestMTU(VppTestCase):
             self.validate_bytes(bytes(p[1]), icmp6_reply_str)
 
         # Reset MTU
-        self.vapi.sw_interface_set_mtu(self.pg1.sw_if_index,
+        self.vclient.sw_interface_set_mtu(self.pg1.sw_if_index,
                                        [current_mtu, 0, 0, 0])
 
 
diff --git a/test/test_neighbor.py b/test/test_neighbor.py
index dfefb1510..03d18bf2e 100644
--- a/test/test_neighbor.py
+++ b/test/test_neighbor.py
@@ -5,8 +5,8 @@ import os
 from socket import AF_INET, AF_INET6, inet_pton
 
 from framework import VppTestCase, VppTestRunner
-from vpp_neighbor import VppNeighbor, find_nbr
-from vpp_ip_route import VppIpRoute, VppRoutePath, find_route, \
+from vpp_pom.vpp_neighbor import VppNeighbor, find_nbr
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, find_route, \
     VppIpTable, DpoProto, FibPathType
 from vpp_papi import VppEnum
 
@@ -56,7 +56,7 @@ class ARPTestCase(VppTestCase):
         self.pg1.config_ip6()
 
         # pg3 in a different VRF
-        self.tbl = VppIpTable(self, 1)
+        self.tbl = VppIpTable(self.vclient, 1)
         self.tbl.add_vpp_config()
 
         self.pg3.set_table_ip4(1)
@@ -162,17 +162,17 @@ class ARPTestCase(VppTestCase):
         #  - all neighbor events on pg1
         #  - neighbor events for host[1] on pg1
         #
-        self.vapi.want_ip_neighbor_events(enable=1,
+        self.vclient.want_ip_neighbor_events(enable=1,
                                           pid=os.getpid())
-        self.vapi.want_ip_neighbor_events(enable=1,
+        self.vclient.want_ip_neighbor_events(enable=1,
                                           pid=os.getpid(),
                                           sw_if_index=self.pg1.sw_if_index)
-        self.vapi.want_ip_neighbor_events(enable=1,
+        self.vclient.want_ip_neighbor_events(enable=1,
                                           pid=os.getpid(),
                                           sw_if_index=self.pg1.sw_if_index,
                                           ip=self.pg1.remote_hosts[1].ip4)
 
-        self.logger.info(self.vapi.cli("sh ip neighbor-watcher"))
+        self.logger.info(self.vclient.cli("sh ip neighbor-watcher"))
 
         #
         # Send IP traffic to one of these unresolved hosts.
@@ -197,7 +197,7 @@ class ARPTestCase(VppTestCase):
         #
         # And a dynamic ARP entry for host 1
         #
-        dyn_arp = VppNeighbor(self,
+        dyn_arp = VppNeighbor(self.vclient,
                               self.pg1.sw_if_index,
                               self.pg1.remote_hosts[1].mac,
                               self.pg1.remote_hosts[1].ip4)
@@ -205,7 +205,7 @@ class ARPTestCase(VppTestCase):
         self.assertTrue(dyn_arp.query_vpp_config())
 
         # this matches all of the listnerers
-        es = [self.vapi.wait_for_event(1, "ip_neighbor_event")
+        es = [self.vclient.wait_for_event(1, "ip_neighbor_event")
               for i in range(3)]
         for e in es:
             self.assertEqual(str(e.neighbor.ip_address),
@@ -235,13 +235,13 @@ class ARPTestCase(VppTestCase):
         #
         # And a Static ARP entry for host 2
         #
-        static_arp = VppNeighbor(self,
+        static_arp = VppNeighbor(self.vclient,
                                  self.pg1.sw_if_index,
                                  self.pg1.remote_hosts[2].mac,
                                  self.pg1.remote_hosts[2].ip4,
                                  is_static=1)
         static_arp.add_vpp_config()
-        es = [self.vapi.wait_for_event(1, "ip_neighbor_event")
+        es = [self.vclient.wait_for_event(1, "ip_neighbor_event")
               for i in range(2)]
         for e in es:
             self.assertEqual(str(e.neighbor.ip_address),
@@ -268,12 +268,12 @@ class ARPTestCase(VppTestCase):
         #
         # remove all the listeners
         #
-        self.vapi.want_ip_neighbor_events(enable=0,
+        self.vclient.want_ip_neighbor_events(enable=0,
                                           pid=os.getpid())
-        self.vapi.want_ip_neighbor_events(enable=0,
+        self.vclient.want_ip_neighbor_events(enable=0,
                                           pid=os.getpid(),
                                           sw_if_index=self.pg1.sw_if_index)
-        self.vapi.want_ip_neighbor_events(enable=0,
+        self.vclient.want_ip_neighbor_events(enable=0,
                                           pid=os.getpid(),
                                           sw_if_index=self.pg1.sw_if_index,
                                           ip=self.pg1.remote_hosts[1].ip4)
@@ -331,7 +331,7 @@ class ARPTestCase(VppTestCase):
         #
         # VPP should have learned the mapping for the remote host
         #
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg1.sw_if_index,
                                  self.pg1._remote_hosts[3].ip4))
         #
@@ -362,11 +362,11 @@ class ARPTestCase(VppTestCase):
         # test the unnumbered dump both by all interfaces and just the enabled
         # one
         #
-        unnum = self.vapi.ip_unnumbered_dump()
+        unnum = self.vclient.ip_unnumbered_dump()
         self.assertTrue(len(unnum))
         self.assertEqual(unnum[0].ip_sw_if_index, self.pg1.sw_if_index)
         self.assertEqual(unnum[0].sw_if_index, self.pg2.sw_if_index)
-        unnum = self.vapi.ip_unnumbered_dump(self.pg2.sw_if_index)
+        unnum = self.vclient.ip_unnumbered_dump(self.pg2.sw_if_index)
         self.assertTrue(len(unnum))
         self.assertEqual(unnum[0].ip_sw_if_index, self.pg1.sw_if_index)
         self.assertEqual(unnum[0].sw_if_index, self.pg2.sw_if_index)
@@ -379,7 +379,7 @@ class ARPTestCase(VppTestCase):
             self.pg2, p,
             "ARP req for unnumbered address - no source")
 
-        attached_host = VppIpRoute(self, self.pg2.remote_hosts[3].ip4, 32,
+        attached_host = VppIpRoute(self.vclient, self.pg2.remote_hosts[3].ip4, 32,
                                    [VppRoutePath("0.0.0.0",
                                                  self.pg2.sw_if_index)])
         attached_host.add_vpp_config()
@@ -409,7 +409,7 @@ class ARPTestCase(VppTestCase):
         #
         # A neighbor entry that has no associated FIB-entry
         #
-        arp_no_fib = VppNeighbor(self,
+        arp_no_fib = VppNeighbor(self.vclient,
                                  self.pg1.sw_if_index,
                                  self.pg1.remote_hosts[4].mac,
                                  self.pg1.remote_hosts[4].ip4,
@@ -419,17 +419,17 @@ class ARPTestCase(VppTestCase):
         #
         # check we have the neighbor, but no route
         #
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg1.sw_if_index,
                                  self.pg1._remote_hosts[4].ip4))
-        self.assertFalse(find_route(self,
+        self.assertFalse(find_route(self.vclient,
                                     self.pg1._remote_hosts[4].ip4,
                                     32))
         #
         # pg2 is unnumbered to pg1, so we can form adjacencies out of pg2
         # from within pg1's subnet
         #
-        arp_unnum = VppNeighbor(self,
+        arp_unnum = VppNeighbor(self.vclient,
                                 self.pg2.sw_if_index,
                                 self.pg1.remote_hosts[5].mac,
                                 self.pg1.remote_hosts[5].ip4)
@@ -478,7 +478,7 @@ class ARPTestCase(VppTestCase):
         # An attached host route out of pg2 for an undiscovered hosts generates
         # an ARP request with the unnumbered address as the source
         #
-        att_unnum = VppIpRoute(self, self.pg1.remote_hosts[7].ip4, 32,
+        att_unnum = VppIpRoute(self.vclient, self.pg1.remote_hosts[7].ip4, 32,
                                [VppRoutePath("0.0.0.0",
                                              self.pg2.sw_if_index)])
         att_unnum.add_vpp_config()
@@ -521,7 +521,7 @@ class ARPTestCase(VppTestCase):
         # An attached host route as yet unresolved out of pg2 for an
         # undiscovered host, an ARP requests begets a response.
         #
-        att_unnum1 = VppIpRoute(self, self.pg1.remote_hosts[8].ip4, 32,
+        att_unnum1 = VppIpRoute(self.vclient, self.pg1.remote_hosts[8].ip4, 32,
                                 [VppRoutePath("0.0.0.0",
                                               self.pg2.sw_if_index)])
         att_unnum1.add_vpp_config()
@@ -576,7 +576,7 @@ class ARPTestCase(VppTestCase):
                  pdst=self.pg1.local_ip4,
                  psrc=self.pg1.remote_hosts[10].ip4))
 
-        r1 = VppIpRoute(self, self.pg1.remote_hosts[10].ip4, 30,
+        r1 = VppIpRoute(self.vclient, self.pg1.remote_hosts[10].ip4, 30,
                         [VppRoutePath(self.pg1.remote_hosts[10].ip4,
                                       self.pg1.sw_if_index)])
         r1.add_vpp_config()
@@ -591,7 +591,7 @@ class ARPTestCase(VppTestCase):
                              self.pg1.local_ip4,
                              self.pg1.remote_hosts[10].ip4)
 
-        r2 = VppIpRoute(self, self.pg1.remote_hosts[10].ip4, 32,
+        r2 = VppIpRoute(self.vclient, self.pg1.remote_hosts[10].ip4, 32,
                         [VppRoutePath(self.pg1.remote_hosts[10].ip4,
                                       self.pg1.sw_if_index)])
         r2.add_vpp_config()
@@ -611,7 +611,7 @@ class ARPTestCase(VppTestCase):
         # adj-fib fails the refinement check. then send an ARP request
         # from that source
         #
-        a1 = VppNeighbor(self,
+        a1 = VppNeighbor(self.vclient,
                          self.pg0.sw_if_index,
                          self.pg0.remote_mac,
                          "100.100.100.50")
@@ -639,7 +639,7 @@ class ARPTestCase(VppTestCase):
                  psrc=self.pg0.remote_ip4))
         self.send_and_assert_no_replies(self.pg0, p,
                                         "ARP req for non-local destination")
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg0.sw_if_index,
                                   "10.10.10.3"))
 
@@ -659,7 +659,7 @@ class ARPTestCase(VppTestCase):
                  psrc=self.pg1.remote_ip4))
         self.send_and_assert_no_replies(self.pg0, p,
                                         "ARP req diff sub-net")
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg0.sw_if_index,
                                   self.pg1.remote_ip4))
 
@@ -761,7 +761,7 @@ class ARPTestCase(VppTestCase):
         #
         # Configure Proxy ARP for the subnet on PG0addresses on pg0
         #
-        self.vapi.proxy_arp_add_del(self.pg0._local_ip4_subnet,
+        self.vclient.proxy_arp_add_del(self.pg0._local_ip4_subnet,
                                     self.pg0._local_ip4_bcast)
 
         # Make pg2 un-numbered to pg0
@@ -787,14 +787,14 @@ class ARPTestCase(VppTestCase):
         #
         # validate we have not learned an ARP entry as a result of this
         #
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg2.sw_if_index,
                                   self.pg0.local_ip4))
 
         #
         # setup a punt redirect so packets from the uplink go to the tap
         #
-        self.vapi.ip_punt_redirect(self.pg0.sw_if_index,
+        self.vclient.ip_punt_redirect(self.pg0.sw_if_index,
                                    self.pg2.sw_if_index,
                                    self.pg0.local_ip4)
 
@@ -810,7 +810,7 @@ class ARPTestCase(VppTestCase):
         self.assertTrue(rx[0].haslayer(ARP))
 
         # and ARP entry for VPP's pg0 address on the host interface
-        n1 = VppNeighbor(self,
+        n1 = VppNeighbor(self.vclient,
                          self.pg2.sw_if_index,
                          self.pg2.remote_mac,
                          self.pg0.local_ip4,
@@ -824,12 +824,12 @@ class ARPTestCase(VppTestCase):
         # flush the neighbor cache on the uplink
         #
         af = VppEnum.vl_api_address_family_t
-        self.vapi.ip_neighbor_flush(af.ADDRESS_IP4, self.pg0.sw_if_index)
+        self.vclient.ip_neighbor_flush(af.ADDRESS_IP4, self.pg0.sw_if_index)
 
         # ensure we can still resolve the ARPs on the uplink
         self.pg0.resolve_arp()
 
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg0.sw_if_index,
                                  self.pg0.remote_ip4))
 
@@ -837,7 +837,7 @@ class ARPTestCase(VppTestCase):
         # cleanup
         #
         self.pg2.set_proxy_arp(0)
-        self.vapi.proxy_arp_add_del(self.pg0._local_ip4_subnet,
+        self.vclient.proxy_arp_add_del(self.pg0._local_ip4_subnet,
                                     self.pg0._local_ip4_bcast,
                                     is_add=0)
 
@@ -884,7 +884,7 @@ class ARPTestCase(VppTestCase):
         #
         # Configure Proxy ARP for 10.10.10.0 -> 10.10.10.124
         #
-        self.vapi.proxy_arp_add_del(inet_pton(AF_INET, "10.10.10.2"),
+        self.vclient.proxy_arp_add_del(inet_pton(AF_INET, "10.10.10.2"),
                                     inet_pton(AF_INET, "10.10.10.124"))
 
         #
@@ -1017,7 +1017,7 @@ class ARPTestCase(VppTestCase):
         #
         # Add a route with out going label via an ARP unresolved next-hop
         #
-        ip_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        ip_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                  [VppRoutePath(self.pg2.remote_hosts[1].ip4,
                                                self.pg2.sw_if_index,
                                                labels=[55])])
@@ -1123,12 +1123,12 @@ class ARPTestCase(VppTestCase):
         #
         # Add host 1 on pg1 and pg2
         #
-        arp_pg1 = VppNeighbor(self,
+        arp_pg1 = VppNeighbor(self.vclient,
                               self.pg1.sw_if_index,
                               self.pg1.remote_hosts[1].mac,
                               self.pg1.remote_hosts[1].ip4)
         arp_pg1.add_vpp_config()
-        arp_pg2 = VppNeighbor(self,
+        arp_pg2 = VppNeighbor(self.vclient,
                               self.pg2.sw_if_index,
                               self.pg2.remote_mac,
                               self.pg1.remote_hosts[1].ip4)
@@ -1197,7 +1197,7 @@ class ARPTestCase(VppTestCase):
         #
         # Add a static ARP entry
         #
-        static_arp = VppNeighbor(self,
+        static_arp = VppNeighbor(self.vclient,
                                  self.pg2.sw_if_index,
                                  self.pg2.remote_hosts[1].mac,
                                  self.pg2.remote_hosts[1].ip4,
@@ -1212,11 +1212,11 @@ class ARPTestCase(VppTestCase):
         #
         # We should now find the adj-fib
         #
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg2.sw_if_index,
                                  self.pg2.remote_hosts[1].ip4,
                                  is_static=1))
-        self.assertTrue(find_route(self,
+        self.assertTrue(find_route(self.vclient,
                                    self.pg2.remote_hosts[1].ip4,
                                    32))
 
@@ -1235,7 +1235,7 @@ class ARPTestCase(VppTestCase):
         # adj fib in the new table
         #
         self.pg2.config_ip4()
-        self.assertTrue(find_route(self,
+        self.assertTrue(find_route(self.vclient,
                                    self.pg2.remote_hosts[1].ip4,
                                    32,
                                    table_id=1))
@@ -1251,11 +1251,11 @@ class ARPTestCase(VppTestCase):
         """ ARP Static can replace Dynamic (same mac) """
         self.pg2.generate_remote_hosts(1)
 
-        dyn_arp = VppNeighbor(self,
+        dyn_arp = VppNeighbor(self.vclient,
                               self.pg2.sw_if_index,
                               self.pg2.remote_hosts[0].mac,
                               self.pg2.remote_hosts[0].ip4)
-        static_arp = VppNeighbor(self,
+        static_arp = VppNeighbor(self.vclient,
                                  self.pg2.sw_if_index,
                                  self.pg2.remote_hosts[0].mac,
                                  self.pg2.remote_hosts[0].ip4,
@@ -1269,11 +1269,11 @@ class ARPTestCase(VppTestCase):
         #
         # We should find the dynamic nbr
         #
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg2.sw_if_index,
                                   self.pg2.remote_hosts[0].ip4,
                                   is_static=1))
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg2.sw_if_index,
                                  self.pg2.remote_hosts[0].ip4,
                                  is_static=0,
@@ -1287,11 +1287,11 @@ class ARPTestCase(VppTestCase):
         #
         # We should now find the static nbr with the same mac
         #
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg2.sw_if_index,
                                   self.pg2.remote_hosts[0].ip4,
                                   is_static=0))
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg2.sw_if_index,
                                  self.pg2.remote_hosts[0].ip4,
                                  is_static=1,
@@ -1306,11 +1306,11 @@ class ARPTestCase(VppTestCase):
         """ ARP Static can replace Dynamic (diff mac) """
         self.pg2.generate_remote_hosts(2)
 
-        dyn_arp = VppNeighbor(self,
+        dyn_arp = VppNeighbor(self.vclient,
                               self.pg2.sw_if_index,
                               self.pg2.remote_hosts[0].mac,
                               self.pg2.remote_hosts[0].ip4)
-        static_arp = VppNeighbor(self,
+        static_arp = VppNeighbor(self.vclient,
                                  self.pg2.sw_if_index,
                                  self.pg2.remote_hosts[1].mac,
                                  self.pg2.remote_hosts[0].ip4,
@@ -1324,11 +1324,11 @@ class ARPTestCase(VppTestCase):
         #
         # We should find the dynamic nbr
         #
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg2.sw_if_index,
                                   self.pg2.remote_hosts[0].ip4,
                                   is_static=1))
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg2.sw_if_index,
                                  self.pg2.remote_hosts[0].ip4,
                                  is_static=0,
@@ -1342,11 +1342,11 @@ class ARPTestCase(VppTestCase):
         #
         # We should now find the static nbr with a changed mac
         #
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg2.sw_if_index,
                                   self.pg2.remote_hosts[0].ip4,
                                   is_static=0))
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg2.sw_if_index,
                                  self.pg2.remote_hosts[0].ip4,
                                  is_static=1,
@@ -1384,7 +1384,7 @@ class ARPTestCase(VppTestCase):
         #
         # add a neighbour for remote host 1
         #
-        static_arp = VppNeighbor(self,
+        static_arp = VppNeighbor(self.vclient,
                                  self.pg1.sw_if_index,
                                  self.pg1.remote_hosts[1].mac,
                                  self.pg1.remote_hosts[1].ip4,
@@ -1399,7 +1399,7 @@ class ARPTestCase(VppTestCase):
                scapy.compat.chb(0x33), scapy.compat.chb(0x33)]
         mac_string = ''.join(mac)
 
-        self.vapi.sw_interface_set_mac_address(self.pg1.sw_if_index,
+        self.vclient.sw_interface_set_mac_address(self.pg1.sw_if_index,
                                                mac_string)
 
         #
@@ -1425,7 +1425,7 @@ class ARPTestCase(VppTestCase):
         # set the mac address on the interface that does not have a
         # configured subnet and thus no glean
         #
-        self.vapi.sw_interface_set_mac_address(self.pg2.sw_if_index,
+        self.vclient.sw_interface_set_mac_address(self.pg2.sw_if_index,
                                                mac_string)
 
     def test_garp(self):
@@ -1440,13 +1440,13 @@ class ARPTestCase(VppTestCase):
         #
         # And an ARP entry
         #
-        arp = VppNeighbor(self,
+        arp = VppNeighbor(self.vclient,
                           self.pg1.sw_if_index,
                           self.pg1.remote_hosts[1].mac,
                           self.pg1.remote_hosts[1].ip4)
         arp.add_vpp_config()
 
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg1.sw_if_index,
                                  self.pg1.remote_hosts[1].ip4,
                                  mac=self.pg1.remote_hosts[1].mac))
@@ -1466,7 +1466,7 @@ class ARPTestCase(VppTestCase):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg1.sw_if_index,
                                  self.pg1.remote_hosts[1].ip4,
                                  mac=self.pg1.remote_hosts[2].mac))
@@ -1486,7 +1486,7 @@ class ARPTestCase(VppTestCase):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg1.sw_if_index,
                                  self.pg1.remote_hosts[1].ip4,
                                  mac=self.pg1.remote_hosts[3].mac))
@@ -1507,7 +1507,7 @@ class ARPTestCase(VppTestCase):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg1.sw_if_index,
                                   self.pg1.remote_hosts[2].ip4))
 
@@ -1523,7 +1523,7 @@ class ARPTestCase(VppTestCase):
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg1.sw_if_index,
                                   self.pg1.remote_hosts[2].ip4))
 
@@ -1549,12 +1549,12 @@ class ARPTestCase(VppTestCase):
                        psrc=self.pg2.remote_hosts[1].ip4))]
 
             self.send_and_assert_no_replies(self.pg1, p1)
-            self.assertFalse(find_nbr(self,
+            self.assertFalse(find_nbr(self.vclient,
                                       self.pg1.sw_if_index,
                                       self.pg2.remote_hosts[1].ip4))
 
         # they are all dropped because the subnet's don't match
-        self.assertEqual(4, self.statistics.get_err_counter(
+        self.assertEqual(4, self.vclient.statistics.get_err_counter(
             "/err/arp-reply/IP4 destination address not local to subnet"))
 
     def test_arp_incomplete(self):
@@ -1568,7 +1568,7 @@ class ARPTestCase(VppTestCase):
         #
         # IPv4/ARP
         #
-        ip_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        ip_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                  [VppRoutePath(self.pg0.remote_hosts[1].ip4,
                                                self.pg0.sw_if_index)])
         ip_10_0_0_1.add_vpp_config()
@@ -1594,7 +1594,7 @@ class ARPTestCase(VppTestCase):
         #
         # IPv6/ND
         #
-        ip_10_1 = VppIpRoute(self, "10::1", 128,
+        ip_10_1 = VppIpRoute(self.vclient, "10::1", 128,
                              [VppRoutePath(self.pg0.remote_hosts[1].ip6,
                                            self.pg0.sw_if_index,
                                            proto=DpoProto.DPO_PROTO_IP6)])
@@ -1631,7 +1631,7 @@ class ARPTestCase(VppTestCase):
         self.pg0.generate_remote_hosts(2)
 
         forus = VppIpRoute(
-            self, self.pg0.remote_hosts[1].ip4, 32,
+            self.vclient, self.pg0.remote_hosts[1].ip4, 32,
             [VppRoutePath("0.0.0.0",
                           self.pg0.sw_if_index,
                           type=FibPathType.FIB_PATH_TYPE_LOCAL)])
@@ -1662,7 +1662,7 @@ class ARPTestCase(VppTestCase):
 
         for n in range(N_NBRS):
             # a route thru each neighbour
-            VppIpRoute(self, "10.0.0.%d" % n, 32,
+            VppIpRoute(self.vclient, "10.0.0.%d" % n, 32,
                        [VppRoutePath(self.pg1.remote_hosts[n].ip4,
                                      self.pg1.sw_if_index)]).add_vpp_config()
 
@@ -1674,12 +1674,12 @@ class ARPTestCase(VppTestCase):
 
             self.send_and_assert_no_replies(self.pg1, p1, "ARP reply")
 
-        self.logger.info(self.vapi.cli("sh ip neighbors"))
+        self.logger.info(self.vclient.cli("sh ip neighbors"))
 
         #
         # swap the table pg1 is in
         #
-        table = VppIpTable(self, 100).add_vpp_config()
+        table = VppIpTable(self.vclient, 100).add_vpp_config()
 
         self.pg1.unconfig_ip4()
         self.pg1.set_table_ip4(100)
@@ -1689,7 +1689,7 @@ class ARPTestCase(VppTestCase):
         # all neighbours are cleared
         #
         for n in range(N_NBRS):
-            self.assertFalse(find_nbr(self,
+            self.assertFalse(find_nbr(self.vclient,
                                       self.pg1.sw_if_index,
                                       self.pg1.remote_hosts[n].ip4))
 
@@ -1698,7 +1698,7 @@ class ARPTestCase(VppTestCase):
         #
         for n in range(N_NBRS):
             # a route thru each neighbour
-            VppIpRoute(self, "10.0.0.%d" % n, 32,
+            VppIpRoute(self.vclient, "10.0.0.%d" % n, 32,
                        [VppRoutePath(self.pg1.remote_hosts[n].ip4,
                                      self.pg1.sw_if_index)],
                        table_id=100).add_vpp_config()
@@ -1756,15 +1756,15 @@ class NeighborStatsTestCase(VppTestCase):
     def test_arp_stats(self):
         """ ARP Counters """
 
-        self.vapi.cli("adj counters enable")
+        self.vclient.cli("adj counters enable")
         self.pg1.generate_remote_hosts(2)
 
-        arp1 = VppNeighbor(self,
+        arp1 = VppNeighbor(self.vclient,
                            self.pg1.sw_if_index,
                            self.pg1.remote_hosts[0].mac,
                            self.pg1.remote_hosts[0].ip4)
         arp1.add_vpp_config()
-        arp2 = VppNeighbor(self,
+        arp2 = VppNeighbor(self.vclient,
                            self.pg1.sw_if_index,
                            self.pg1.remote_hosts[1].mac,
                            self.pg1.remote_hosts[1].ip4)
@@ -1795,15 +1795,15 @@ class NeighborStatsTestCase(VppTestCase):
     def test_nd_stats(self):
         """ ND Counters """
 
-        self.vapi.cli("adj counters enable")
+        self.vclient.cli("adj counters enable")
         self.pg0.generate_remote_hosts(3)
 
-        nd1 = VppNeighbor(self,
+        nd1 = VppNeighbor(self.vclient,
                           self.pg0.sw_if_index,
                           self.pg0.remote_hosts[1].mac,
                           self.pg0.remote_hosts[1].ip6)
         nd1.add_vpp_config()
-        nd2 = VppNeighbor(self,
+        nd2 = VppNeighbor(self.vclient,
                           self.pg0.sw_if_index,
                           self.pg0.remote_hosts[2].mac,
                           self.pg0.remote_hosts[2].ip6)
@@ -1869,7 +1869,7 @@ class NeighborAgeTestCase(VppTestCase):
     def wait_for_no_nbr(self, intf, address,
                         n_tries=50, s_time=1):
         while (n_tries):
-            if not find_nbr(self, intf, address):
+            if not find_nbr(self.vclient, intf, address):
                 return True
             n_tries = n_tries - 1
             self.sleep(s_time)
@@ -1895,8 +1895,8 @@ class NeighborAgeTestCase(VppTestCase):
     def test_age(self):
         """ Aging/Recycle """
 
-        self.vapi.cli("set logging unthrottle 0")
-        self.vapi.cli("set logging size %d" % 0xffff)
+        self.vclient.cli("set logging unthrottle 0")
+        self.vclient.cli("set logging size %d" % 0xffff)
 
         self.pg0.generate_remote_hosts(201)
 
@@ -1913,23 +1913,23 @@ class NeighborAgeTestCase(VppTestCase):
         #   age  = 0 seconds
         #   recycle = false
         #
-        self.vapi.ip_neighbor_config(af=vaf.ADDRESS_IP4,
+        self.vclient.ip_neighbor_config(af=vaf.ADDRESS_IP4,
                                      max_number=200,
                                      max_age=0,
                                      recycle=False)
 
-        self.vapi.cli("sh ip neighbor-config")
+        self.vclient.cli("sh ip neighbor-config")
 
         # add the 198 neighbours that should pass (-1 for one created in setup)
         for ii in range(200):
-            VppNeighbor(self,
+            VppNeighbor(self.vclient,
                         self.pg0.sw_if_index,
                         self.pg0.remote_hosts[ii].mac,
                         self.pg0.remote_hosts[ii].ip4).add_vpp_config()
 
         # one more neighbor over the limit should fail
-        with self.vapi.assert_negative_api_retval():
-            VppNeighbor(self,
+        with self.vclient.assert_negative_api_retval():
+            VppNeighbor(self.vclient,
                         self.pg0.sw_if_index,
                         self.pg0.remote_hosts[200].mac,
                         self.pg0.remote_hosts[200].ip4).add_vpp_config()
@@ -1937,34 +1937,34 @@ class NeighborAgeTestCase(VppTestCase):
         #
         # change the config to allow recycling the old neighbors
         #
-        self.vapi.ip_neighbor_config(af=vaf.ADDRESS_IP4,
+        self.vclient.ip_neighbor_config(af=vaf.ADDRESS_IP4,
                                      max_number=200,
                                      max_age=0,
                                      recycle=True)
 
         # now new additions are allowed
-        VppNeighbor(self,
+        VppNeighbor(self.vclient,
                     self.pg0.sw_if_index,
                     self.pg0.remote_hosts[200].mac,
                     self.pg0.remote_hosts[200].ip4).add_vpp_config()
 
         # add the first neighbor we configured has been re-used
-        self.assertFalse(find_nbr(self,
+        self.assertFalse(find_nbr(self.vclient,
                                   self.pg0.sw_if_index,
                                   self.pg0.remote_hosts[0].ip4))
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg0.sw_if_index,
                                  self.pg0.remote_hosts[200].ip4))
 
         #
         # change the config to age old neighbors
         #
-        self.vapi.ip_neighbor_config(af=vaf.ADDRESS_IP4,
+        self.vclient.ip_neighbor_config(af=vaf.ADDRESS_IP4,
                                      max_number=200,
                                      max_age=2,
                                      recycle=True)
 
-        self.vapi.cli("sh ip4 neighbor-sorted")
+        self.vclient.cli("sh ip4 neighbor-sorted")
 
         #
         # expect probes from all these ARP entries as they age
@@ -1984,7 +1984,7 @@ class NeighborAgeTestCase(VppTestCase):
             self.wait_for_no_nbr(self.pg0.sw_if_index,
                                  self.pg0.remote_hosts[jj].ip4)
 
-        self.assertFalse(self.vapi.ip_neighbor_dump(sw_if_index=0xffffffff,
+        self.assertFalse(self.vclient.ip_neighbor_dump(sw_if_index=0xffffffff,
                                                     af=vaf.ADDRESS_IP4))
 
         #
@@ -1992,18 +1992,18 @@ class NeighborAgeTestCase(VppTestCase):
         # they should be removed after 10s (2s age + 4s for probes + gap)
         #
         for ii in range(10):
-            VppNeighbor(self,
+            VppNeighbor(self.vclient,
                         self.pg0.sw_if_index,
                         self.pg0.remote_hosts[ii].mac,
                         self.pg0.remote_hosts[ii].ip4).add_vpp_config()
         self.sleep(10)
-        self.assertFalse(self.vapi.ip_neighbor_dump(sw_if_index=0xffffffff,
+        self.assertFalse(self.vclient.ip_neighbor_dump(sw_if_index=0xffffffff,
                                                     af=vaf.ADDRESS_IP4))
 
         #
         # check if we can set age and recycle with empty neighbor list
         #
-        self.vapi.ip_neighbor_config(af=vaf.ADDRESS_IP4,
+        self.vclient.ip_neighbor_config(af=vaf.ADDRESS_IP4,
                                      max_number=200,
                                      max_age=1000,
                                      recycle=True)
@@ -2013,17 +2013,17 @@ class NeighborAgeTestCase(VppTestCase):
         # they should still be there in 10 seconds time
         #
         for ii in range(10):
-            VppNeighbor(self,
+            VppNeighbor(self.vclient,
                         self.pg0.sw_if_index,
                         self.pg0.remote_hosts[ii].mac,
                         self.pg0.remote_hosts[ii].ip4).add_vpp_config()
-        self.vapi.ip_neighbor_config(af=vaf.ADDRESS_IP4,
+        self.vclient.ip_neighbor_config(af=vaf.ADDRESS_IP4,
                                      max_number=200,
                                      max_age=0,
                                      recycle=False)
 
         self.sleep(10)
-        self.assertTrue(find_nbr(self,
+        self.assertTrue(find_nbr(self.vclient,
                                  self.pg0.sw_if_index,
                                  self.pg0.remote_hosts[0].ip4))
 
@@ -2073,15 +2073,15 @@ class NeighborReplaceTestCase(VppTestCase):
             i.configure_ipv6_neighbors()
 
         # replace them all
-        self.vapi.ip_neighbor_replace_begin()
-        self.vapi.ip_neighbor_replace_end()
+        self.vclient.ip_neighbor_replace_begin()
+        self.vclient.ip_neighbor_replace_end()
 
         for i in self.pg_interfaces:
             for h in range(N_HOSTS):
-                self.assertFalse(find_nbr(self,
+                self.assertFalse(find_nbr(self.vclient,
                                           self.pg0.sw_if_index,
                                           self.pg0.remote_hosts[h].ip4))
-                self.assertFalse(find_nbr(self,
+                self.assertFalse(find_nbr(self.vclient,
                                           self.pg0.sw_if_index,
                                           self.pg0.remote_hosts[h].ip6))
 
@@ -2090,11 +2090,11 @@ class NeighborReplaceTestCase(VppTestCase):
         #
         for i in self.pg_interfaces:
             for h in range(N_HOSTS):
-                VppNeighbor(self,
+                VppNeighbor(self.vclient,
                             i.sw_if_index,
                             i.remote_hosts[h].mac,
                             i.remote_hosts[h].ip4).add_vpp_config()
-                VppNeighbor(self,
+                VppNeighbor(self.vclient,
                             i.sw_if_index,
                             i.remote_hosts[h].mac,
                             i.remote_hosts[h].ip6).add_vpp_config()
@@ -2103,15 +2103,15 @@ class NeighborReplaceTestCase(VppTestCase):
         # begin the replacement again, this time touch some
         # the neighbours on pg1 so they are not deleted
         #
-        self.vapi.ip_neighbor_replace_begin()
+        self.vclient.ip_neighbor_replace_begin()
 
         # update from the API all neighbours on pg1
         for h in range(N_HOSTS):
-            VppNeighbor(self,
+            VppNeighbor(self.vclient,
                         self.pg1.sw_if_index,
                         self.pg1.remote_hosts[h].mac,
                         self.pg1.remote_hosts[h].ip4).add_vpp_config()
-            VppNeighbor(self,
+            VppNeighbor(self.vclient,
                         self.pg1.sw_if_index,
                         self.pg1.remote_hosts[h].mac,
                         self.pg1.remote_hosts[h].ip6).add_vpp_config()
@@ -2121,26 +2121,26 @@ class NeighborReplaceTestCase(VppTestCase):
         self.pg3.configure_ipv6_neighbors()
 
         # complete the replacement
-        self.logger.info(self.vapi.cli("sh ip neighbors"))
-        self.vapi.ip_neighbor_replace_end()
+        self.logger.info(self.vclient.cli("sh ip neighbors"))
+        self.vclient.ip_neighbor_replace_end()
 
         for i in self.pg_interfaces:
             if i == self.pg1 or i == self.pg3:
                 # neighbours on pg1 and pg3 are still present
                 for h in range(N_HOSTS):
-                    self.assertTrue(find_nbr(self,
+                    self.assertTrue(find_nbr(self.vclient,
                                              i.sw_if_index,
                                              i.remote_hosts[h].ip4))
-                    self.assertTrue(find_nbr(self,
+                    self.assertTrue(find_nbr(self.vclient,
                                              i.sw_if_index,
                                              i.remote_hosts[h].ip6))
             else:
                 # all other neighbours are toast
                 for h in range(N_HOSTS):
-                    self.assertFalse(find_nbr(self,
+                    self.assertFalse(find_nbr(self.vclient,
                                               i.sw_if_index,
                                               i.remote_hosts[h].ip4))
-                    self.assertFalse(find_nbr(self,
+                    self.assertFalse(find_nbr(self.vclient,
                                               i.sw_if_index,
                                               i.remote_hosts[h].ip6))
 
@@ -2190,69 +2190,69 @@ class NeighborFlush(VppTestCase):
         for s in static:
             # a few v4 and v6 dynamic neoghbors
             for n in range(N_HOSTS):
-                VppNeighbor(self,
+                VppNeighbor(self.vclient,
                             self.pg0.sw_if_index,
                             self.pg0.remote_hosts[n].mac,
                             self.pg0.remote_hosts[n].ip4,
                             is_static=s).add_vpp_config()
-                VppNeighbor(self,
+                VppNeighbor(self.vclient,
                             self.pg1.sw_if_index,
                             self.pg1.remote_hosts[n].mac,
                             self.pg1.remote_hosts[n].ip6,
                             is_static=s).add_vpp_config()
 
             # flush the interfaces individually
-            self.vapi.ip_neighbor_flush(af.ADDRESS_IP4, self.pg0.sw_if_index)
+            self.vclient.ip_neighbor_flush(af.ADDRESS_IP4, self.pg0.sw_if_index)
 
             # check we haven't flushed that which we shouldn't
             for n in range(N_HOSTS):
-                self.assertTrue(find_nbr(self,
+                self.assertTrue(find_nbr(self.vclient,
                                          self.pg1.sw_if_index,
                                          self.pg1.remote_hosts[n].ip6,
                                          is_static=s))
 
-            self.vapi.ip_neighbor_flush(af.ADDRESS_IP6, self.pg1.sw_if_index)
+            self.vclient.ip_neighbor_flush(af.ADDRESS_IP6, self.pg1.sw_if_index)
 
             for n in range(N_HOSTS):
-                self.assertFalse(find_nbr(self,
+                self.assertFalse(find_nbr(self.vclient,
                                           self.pg0.sw_if_index,
                                           self.pg0.remote_hosts[n].ip4))
-                self.assertFalse(find_nbr(self,
+                self.assertFalse(find_nbr(self.vclient,
                                           self.pg1.sw_if_index,
                                           self.pg1.remote_hosts[n].ip6))
 
             # add the nieghbours back
             for n in range(N_HOSTS):
-                VppNeighbor(self,
+                VppNeighbor(self.vclient,
                             self.pg0.sw_if_index,
                             self.pg0.remote_hosts[n].mac,
                             self.pg0.remote_hosts[n].ip4,
                             is_static=s).add_vpp_config()
-                VppNeighbor(self,
+                VppNeighbor(self.vclient,
                             self.pg1.sw_if_index,
                             self.pg1.remote_hosts[n].mac,
                             self.pg1.remote_hosts[n].ip6,
                             is_static=s).add_vpp_config()
 
-            self.logger.info(self.vapi.cli("sh ip neighbor"))
+            self.logger.info(self.vclient.cli("sh ip neighbor"))
 
             # flush both interfaces at the same time
-            self.vapi.ip_neighbor_flush(af.ADDRESS_IP6, 0xffffffff)
+            self.vclient.ip_neighbor_flush(af.ADDRESS_IP6, 0xffffffff)
 
             # check we haven't flushed that which we shouldn't
             for n in range(N_HOSTS):
-                self.assertTrue(find_nbr(self,
+                self.assertTrue(find_nbr(self.vclient,
                                          self.pg0.sw_if_index,
                                          self.pg0.remote_hosts[n].ip4,
                                          is_static=s))
 
-            self.vapi.ip_neighbor_flush(af.ADDRESS_IP4, 0xffffffff)
+            self.vclient.ip_neighbor_flush(af.ADDRESS_IP4, 0xffffffff)
 
             for n in range(N_HOSTS):
-                self.assertFalse(find_nbr(self,
+                self.assertFalse(find_nbr(self.vclient,
                                           self.pg0.sw_if_index,
                                           self.pg0.remote_hosts[n].ip4))
-                self.assertFalse(find_nbr(self,
+                self.assertFalse(find_nbr(self.vclient,
                                           self.pg1.sw_if_index,
                                           self.pg1.remote_hosts[n].ip6))
 
diff --git a/test/test_node_variants.py b/test/test_node_variants.py
index 3632910e3..a02663c84 100644
--- a/test/test_node_variants.py
+++ b/test/test_node_variants.py
@@ -49,7 +49,7 @@ class TestNodeVariant(VppTestCase):
         super(TestNodeVariant, self).tearDown()
 
     def getActiveVariant(self, node):
-        node_desc = self.vapi.cli("show node " + node)
+        node_desc = self.vclient.cli("show node " + node)
         self.logger.info(node_desc)
 
         match = re.search(r'\s+(\S+)\s+(\d+)\s+(:?yes)',
diff --git a/test/test_offload.py b/test/test_offload.py
index 8b045bfe1..ff9694c59 100644
--- a/test/test_offload.py
+++ b/test/test_offload.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner, running_gcov_tests
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 class TestOffload(VppTestCase):
@@ -54,14 +54,14 @@ class TestOffload(VppTestCase):
                 "show error"]
 
         for cmd in cmds:
-            r = self.vapi.cli_return_response(cmd)
+            r = self.vclient.cli_return_response(cmd)
             if r.retval != 0:
                 if hasattr(r, 'reply'):
                     self.logger.info(cmd + " FAIL reply " + r.reply)
                 else:
                     self.logger.info(cmd + " FAIL retval " + str(r.retval))
 
-        r = self.vapi.cli_return_response("show trace")
+        r = self.vclient.cli_return_response("show trace")
         self.assertTrue(r.retval == 0)
         self.assertTrue(hasattr(r, 'reply'))
         rv = r.reply
diff --git a/test/test_p2p_ethernet.py b/test/test_p2p_ethernet.py
index 7cc6cdce4..c3714ecb1 100644
--- a/test/test_p2p_ethernet.py
+++ b/test/test_p2p_ethernet.py
@@ -10,9 +10,9 @@ from scapy.layers.inet import IP, UDP
 from scapy.layers.inet6 import IPv6
 
 from framework import VppTestCase, VppTestRunner
-from vpp_sub_interface import VppP2PSubint
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_sub_interface import VppP2PSubint
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
 from vpp_papi import mac_pton
 
 
@@ -37,11 +37,11 @@ class P2PEthernetAPI(VppTestCase):
         super(P2PEthernetAPI, cls).tearDownClass()
 
     def create_p2p_ethernet(self, parent_if, sub_id, remote_mac):
-        p2p = VppP2PSubint(self, parent_if, sub_id, mac_pton(remote_mac))
+        p2p = VppP2PSubint(self.vclient, parent_if, sub_id, mac_pton(remote_mac))
         self.p2p_sub_ifs.append(p2p)
 
     def delete_p2p_ethernet(self, parent_if, remote_mac):
-        self.vapi.p2p_ethernet_del(parent_if.sw_if_index,
+        self.vclient.p2p_ethernet_del(parent_if.sw_if_index,
                                    mac_pton(remote_mac))
 
     def test_api(self):
@@ -50,7 +50,7 @@ class P2PEthernetAPI(VppTestCase):
 
         self.create_p2p_ethernet(self.pg0, 1, "de:ad:00:00:00:01")
         self.create_p2p_ethernet(self.pg0, 2, "de:ad:00:00:00:02")
-        intfs = self.vapi.cli("show interface")
+        intfs = self.vclient.cli("show interface")
 
         self.assertIn('pg0.1', intfs)
         self.assertIn('pg0.2', intfs)
@@ -58,12 +58,12 @@ class P2PEthernetAPI(VppTestCase):
 
         # create pg2.5 subif
         self.create_p2p_ethernet(self.pg0, 5, "de:ad:00:00:00:ff")
-        intfs = self.vapi.cli("show interface")
+        intfs = self.vclient.cli("show interface")
         self.assertIn('pg0.5', intfs)
         # delete pg2.5 subif
         self.delete_p2p_ethernet(self.pg0, "de:ad:00:00:00:ff")
 
-        intfs = self.vapi.cli("show interface")
+        intfs = self.vclient.cli("show interface")
 
         self.assertIn('pg0.1', intfs)
         self.assertIn('pg0.2', intfs)
@@ -83,7 +83,7 @@ class P2PEthernetAPI(VppTestCase):
             try:
                 macs.append(':'.join(re.findall('..', '{:02x}'.format(
                     mac+i))))
-                self.vapi.p2p_ethernet_add(self.pg2.sw_if_index,
+                self.vclient.p2p_ethernet_add(self.pg2.sw_if_index,
                                            mac_pton(macs[i-1]),
                                            i)
             except Exception:
@@ -91,7 +91,7 @@ class P2PEthernetAPI(VppTestCase):
                     i, macs[i-1]))
                 raise
 
-        intfs = self.vapi.cli("show interface").split("\n")
+        intfs = self.vclient.cli("show interface").split("\n")
         count = 0
         for intf in intfs:
             if intf.startswith('pg2.'):
@@ -143,7 +143,7 @@ class P2PEthernetIPV6(VppTestCase):
         self.p2p_sub_ifs.append(
             self.create_p2p_ethernet(self.pg0, 2,
                                      self.pg0._remote_hosts[1].mac))
-        self.vapi.cli("trace add p2p-ethernet-input 50")
+        self.vclient.cli("trace add p2p-ethernet-input 50")
 
     def tearDown(self):
         while len(self.p2p_sub_ifs):
@@ -153,7 +153,7 @@ class P2PEthernetIPV6(VppTestCase):
         super(P2PEthernetIPV6, self).tearDown()
 
     def create_p2p_ethernet(self, parent_if, sub_id, remote_mac):
-        p2p = VppP2PSubint(self, parent_if, sub_id, mac_pton(remote_mac))
+        p2p = VppP2PSubint(self.vclient, parent_if, sub_id, mac_pton(remote_mac))
         p2p.admin_up()
         p2p.config_ip6()
         p2p.disable_ipv6_ra()
@@ -162,7 +162,7 @@ class P2PEthernetIPV6(VppTestCase):
     def delete_p2p_ethernet(self, p2p):
         p2p.unconfig_ip6()
         p2p.admin_down()
-        self.vapi.p2p_ethernet_del(p2p.parent.sw_if_index,
+        self.vclient.p2p_ethernet_del(p2p.parent.sw_if_index,
                                    p2p.p2p_remote_mac)
 
     def create_stream(self, src_mac=None, dst_mac=None,
@@ -190,7 +190,7 @@ class P2PEthernetIPV6(VppTestCase):
         """standard routing without p2p subinterfaces"""
         self.logger.info("FFP_TEST_START_0001")
 
-        route_8000 = VppIpRoute(self, "8000::", 64,
+        route_8000 = VppIpRoute(self.vclient, "8000::", 64,
                                 [VppRoutePath(self.pg0.remote_ip6,
                                               self.pg0.sw_if_index)])
         route_8000.add_vpp_config()
@@ -208,7 +208,7 @@ class P2PEthernetIPV6(VppTestCase):
         """receive ipv6 packet via p2p subinterface"""
         self.logger.info("FFP_TEST_START_0002")
 
-        route_9001 = VppIpRoute(self, "9001::", 64,
+        route_9001 = VppIpRoute(self.vclient, "9001::", 64,
                                 [VppRoutePath(self.pg1.remote_ip6,
                                               self.pg1.sw_if_index)])
         route_9001.add_vpp_config()
@@ -231,7 +231,7 @@ class P2PEthernetIPV6(VppTestCase):
 
         self.pg0.config_ip6()
 
-        route_3 = VppIpRoute(self, "9000::", 64,
+        route_3 = VppIpRoute(self.vclient, "9000::", 64,
                              [VppRoutePath(self.pg1._remote_hosts[0].ip6,
                                            self.pg1.sw_if_index)])
         route_3.add_vpp_config()
@@ -254,7 +254,7 @@ class P2PEthernetIPV6(VppTestCase):
         """drop rx packet not matching p2p subinterface"""
         self.logger.info("FFP_TEST_START_0004")
 
-        route_9001 = VppIpRoute(self, "9000::", 64,
+        route_9001 = VppIpRoute(self.vclient, "9000::", 64,
                                 [VppRoutePath(self.pg1._remote_hosts[0].ip6,
                                               self.pg1.sw_if_index)])
         route_9001.add_vpp_config()
@@ -273,16 +273,16 @@ class P2PEthernetIPV6(VppTestCase):
         """send packet via p2p subinterface"""
         self.logger.info("FFP_TEST_START_0005")
 
-        route_8000 = VppIpRoute(self, "8000::", 64,
+        route_8000 = VppIpRoute(self.vclient, "8000::", 64,
                                 [VppRoutePath(self.pg0.remote_ip6,
                                               self.pg0.sw_if_index)])
         route_8000.add_vpp_config()
-        route_8001 = VppIpRoute(self, "8001::", 64,
+        route_8001 = VppIpRoute(self.vclient, "8001::", 64,
                                 [VppRoutePath(
                                     self.p2p_sub_ifs[0].remote_ip6,
                                     self.p2p_sub_ifs[0].sw_if_index)])
         route_8001.add_vpp_config()
-        route_8002 = VppIpRoute(self, "8002::", 64,
+        route_8002 = VppIpRoute(self.vclient, "8002::", 64,
                                 [VppRoutePath(
                                     self.p2p_sub_ifs[1].remote_ip6,
                                     self.p2p_sub_ifs[1].sw_if_index)])
@@ -360,7 +360,7 @@ class P2PEthernetIPV4(VppTestCase):
         self.p2p_sub_ifs.append(
             self.create_p2p_ethernet(self.pg0, 2,
                                      self.pg0._remote_hosts[1].mac))
-        self.vapi.cli("trace add p2p-ethernet-input 50")
+        self.vclient.cli("trace add p2p-ethernet-input 50")
 
     def tearDown(self):
         while len(self.p2p_sub_ifs):
@@ -390,7 +390,7 @@ class P2PEthernetIPV4(VppTestCase):
         return dst_if.get_capture(count)
 
     def create_p2p_ethernet(self, parent_if, sub_id, remote_mac):
-        p2p = VppP2PSubint(self, parent_if, sub_id, mac_pton(remote_mac))
+        p2p = VppP2PSubint(self.vclient, parent_if, sub_id, mac_pton(remote_mac))
         p2p.admin_up()
         p2p.config_ip4()
         return p2p
@@ -398,14 +398,14 @@ class P2PEthernetIPV4(VppTestCase):
     def delete_p2p_ethernet(self, p2p):
         p2p.unconfig_ip4()
         p2p.admin_down()
-        self.vapi.p2p_ethernet_del(p2p.parent.sw_if_index,
+        self.vclient.p2p_ethernet_del(p2p.parent.sw_if_index,
                                    p2p.p2p_remote_mac)
 
     def test_ip4_rx_p2p_subif(self):
         """receive ipv4 packet via p2p subinterface"""
         self.logger.info("FFP_TEST_START_0002")
 
-        route_9000 = VppIpRoute(self, "9.0.0.0", 16,
+        route_9000 = VppIpRoute(self.vclient, "9.0.0.0", 16,
                                 [VppRoutePath(self.pg1.remote_ip4,
                                               self.pg1.sw_if_index)])
         route_9000.add_vpp_config()
@@ -427,7 +427,7 @@ class P2PEthernetIPV4(VppTestCase):
         """route rx packet not matching p2p subinterface"""
         self.logger.info("FFP_TEST_START_0003")
 
-        route_9001 = VppIpRoute(self, "9.0.0.0", 24,
+        route_9001 = VppIpRoute(self.vclient, "9.0.0.0", 24,
                                 [VppRoutePath(self.pg1.remote_ip4,
                                               self.pg1.sw_if_index)])
         route_9001.add_vpp_config()
@@ -448,17 +448,17 @@ class P2PEthernetIPV4(VppTestCase):
         """send ip4 packet via p2p subinterface"""
         self.logger.info("FFP_TEST_START_0005")
 
-        route_9100 = VppIpRoute(self, "9.1.0.100", 24,
+        route_9100 = VppIpRoute(self.vclient, "9.1.0.100", 24,
                                 [VppRoutePath(self.pg0.remote_ip4,
                                               self.pg0.sw_if_index,
                                               )])
         route_9100.add_vpp_config()
-        route_9200 = VppIpRoute(self, "9.2.0.100", 24,
+        route_9200 = VppIpRoute(self.vclient, "9.2.0.100", 24,
                                 [VppRoutePath(self.p2p_sub_ifs[0].remote_ip4,
                                               self.p2p_sub_ifs[0].sw_if_index,
                                               )])
         route_9200.add_vpp_config()
-        route_9300 = VppIpRoute(self, "9.3.0.100", 24,
+        route_9300 = VppIpRoute(self.vclient, "9.3.0.100", 24,
                                 [VppRoutePath(self.p2p_sub_ifs[1].remote_ip4,
                                               self.p2p_sub_ifs[1].sw_if_index
                                               )])
diff --git a/test/test_pcap.py b/test/test_pcap.py
index c3c7a662f..b522d1e33 100644
--- a/test/test_pcap.py
+++ b/test/test_pcap.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner, running_gcov_tests
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 from os import path, remove
 
 
@@ -71,7 +71,7 @@ class TestPcap(VppTestCase):
                 "match l3 ip4 src 11.22.33.44"]
 
         for cmd in cmds:
-            r = self.vapi.cli_return_response(cmd)
+            r = self.vclient.cli_return_response(cmd)
             if r.retval != 0:
                 if hasattr(r, 'reply'):
                     self.logger.info(cmd + " FAIL reply " + r.reply)
diff --git a/test/test_ping.py b/test/test_ping.py
index 87cb45c32..167060094 100644
--- a/test/test_ping.py
+++ b/test/test_ping.py
@@ -6,7 +6,7 @@ from scapy.layers.l2 import Ether, GRE
 from scapy.packet import Raw
 
 from framework import VppTestCase
-from util import ppp
+from vpp_pom.util import ppp
 
 """ TestPing is a subclass of  VPPTestCase classes.
 
@@ -44,19 +44,19 @@ class TestPing(VppTestCase):
         super(TestPing, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show hardware"))
+        self.logger.info(self.vclient.cli("show hardware"))
 
     def test_ping_basic(self):
         """ basic ping test """
         try:
             self.pg_enable_capture(self.pg_interfaces)
             self.pg_start()
-            self.logger.info(self.vapi.cli("show ip4 neighbors"))
-            self.logger.info(self.vapi.cli("show ip6 neighbors"))
+            self.logger.info(self.vclient.cli("show ip4 neighbors"))
+            self.logger.info(self.vclient.cli("show ip6 neighbors"))
 
             remote_ip4 = self.pg1.remote_ip4
             ping_cmd = "ping " + remote_ip4 + " interval 0.01 repeat 10"
-            ret = self.vapi.cli(ping_cmd)
+            ret = self.vclient.cli(ping_cmd)
             self.logger.info(ret)
             out = self.pg1.get_capture(10)
             icmp_id = None
@@ -80,18 +80,18 @@ class TestPing(VppTestCase):
                 else:
                     self.assertEqual(icmp.id, icmp_id)
         finally:
-            self.vapi.cli("show error")
+            self.vclient.cli("show error")
 
     def test_ping_burst(self):
         """ burst ping test """
         try:
             self.pg_enable_capture(self.pg_interfaces)
             self.pg_start()
-            self.logger.info(self.vapi.cli("show ip neighbors"))
+            self.logger.info(self.vclient.cli("show ip neighbors"))
 
             remote_ip4 = self.pg1.remote_ip4
             ping_cmd = "ping " + remote_ip4 + " interval 0.01 burst 3"
-            ret = self.vapi.cli(ping_cmd)
+            ret = self.vclient.cli(ping_cmd)
             self.logger.info(ret)
             out = self.pg1.get_capture(3*5)
             icmp_id = None
@@ -119,4 +119,4 @@ class TestPing(VppTestCase):
                 else:
                     self.assertEqual(icmp.id, icmp_id)
         finally:
-            self.vapi.cli("show error")
+            self.vclient.cli("show error")
diff --git a/test/test_pipe.py b/test/test_pipe.py
index 0e766654d..b3b44d5c5 100644
--- a/test/test_pipe.py
+++ b/test/test_pipe.py
@@ -8,58 +8,13 @@ from scapy.layers.l2 import Ether
 from scapy.layers.inet import IP, UDP
 
 from framework import VppTestCase, VppTestRunner
-from vpp_interface import VppInterface
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
-from vpp_acl import AclRule, VppAcl, VppAclInterface
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.plugins.vpp_acl import AclRule, VppAcl, VppAclInterface
+from vpp_pom.vpp_pipe import VppPipe
 
 NUM_PKTS = 67
 
 
-class VppPipe(VppInterface):
-    """
-    VPP Pipe
-    """
-
-    @property
-    def east(self):
-        return self.result.pipe_sw_if_index[1]
-
-    @property
-    def west(self):
-        return self.result.pipe_sw_if_index[0]
-
-    def __init__(self, test, instance=0xffffffff):
-        super(VppPipe, self).__init__(test)
-        self._test = test
-        self.instance = instance
-
-    def add_vpp_config(self):
-        self.result = self._test.vapi.pipe_create(
-            0 if self.instance == 0xffffffff else 1,
-            self.instance)
-        self.set_sw_if_index(self.result.sw_if_index)
-
-    def remove_vpp_config(self):
-        self._test.vapi.pipe_delete(
-            self.result.sw_if_index)
-
-    def object_id(self):
-        return "pipe-%d" % (self._sw_if_index)
-
-    def query_vpp_config(self):
-        pipes = self._test.vapi.pipe_dump()
-        for p in pipes:
-            if p.sw_if_index == self.result.sw_if_index:
-                return True
-        return False
-
-    def set_unnumbered(self, ip_sw_if_index, is_add=True):
-        res = self._test.vapi.sw_interface_set_unnumbered(ip_sw_if_index,
-                                                          self.east, is_add)
-        res = self._test.vapi.sw_interface_set_unnumbered(ip_sw_if_index,
-                                                          self.west, is_add)
-
-
 class TestPipe(VppTestCase):
     """ Pipes """
 
@@ -88,7 +43,7 @@ class TestPipe(VppTestCase):
     def test_pipe(self):
         """ Pipes """
 
-        pipes = [VppPipe(self), VppPipe(self, 10)]
+        pipes = [VppPipe(self.vclient), VppPipe(self.vclient, 10)]
 
         for p in pipes:
             p.add_vpp_config()
@@ -97,16 +52,16 @@ class TestPipe(VppTestCase):
         #
         # L2 cross-connect pipe0 east with pg0 and west with pg1
         #
-        self.vapi.sw_interface_set_l2_xconnect(self.pg0.sw_if_index,
+        self.vclient.sw_interface_set_l2_xconnect(self.pg0.sw_if_index,
                                                pipes[0].east,
                                                enable=1)
-        self.vapi.sw_interface_set_l2_xconnect(pipes[0].east,
+        self.vclient.sw_interface_set_l2_xconnect(pipes[0].east,
                                                self.pg0.sw_if_index,
                                                enable=1)
-        self.vapi.sw_interface_set_l2_xconnect(self.pg1.sw_if_index,
+        self.vclient.sw_interface_set_l2_xconnect(self.pg1.sw_if_index,
                                                pipes[0].west,
                                                enable=1)
-        self.vapi.sw_interface_set_l2_xconnect(pipes[0].west,
+        self.vclient.sw_interface_set_l2_xconnect(pipes[0].west,
                                                self.pg1.sw_if_index,
                                                enable=1)
 
@@ -127,11 +82,11 @@ class TestPipe(VppTestCase):
         rule_1 = AclRule(is_permit=0, proto=17,
                          src_prefix=IPv4Network("1.1.1.1/32"),
                          dst_prefix=IPv4Network("1.1.1.2/32"), ports=1234)
-        acl = VppAcl(self, rules=[rule_1])
+        acl = VppAcl(self.vclient, rules=[rule_1])
         acl.add_vpp_config()
 
         # Apply the ACL on the pipe on output
-        acl_if_e = VppAclInterface(self, sw_if_index=pipes[0].east, n_input=0,
+        acl_if_e = VppAclInterface(self.vclient, sw_if_index=pipes[0].east, n_input=0,
                                    acls=[acl])
         acl_if_e.add_vpp_config()
 
@@ -140,7 +95,7 @@ class TestPipe(VppTestCase):
 
         # remove from output and apply on input
         acl_if_e.remove_vpp_config()
-        acl_if_w = VppAclInterface(self, sw_if_index=pipes[0].west, n_input=1,
+        acl_if_w = VppAclInterface(self.vclient, sw_if_index=pipes[0].west, n_input=1,
                                    acls=[acl])
         acl_if_w.add_vpp_config()
 
@@ -156,8 +111,8 @@ class TestPipe(VppTestCase):
         # x-connect
         #
         tables = []
-        tables.append(VppIpTable(self, 1))
-        tables.append(VppIpTable(self, 2))
+        tables.append(VppIpTable(self.vclient, 1))
+        tables.append(VppIpTable(self.vclient, 2))
 
         for t in tables:
             t.add_vpp_config()
@@ -170,17 +125,17 @@ class TestPipe(VppTestCase):
         self.pg3.resolve_arp()
 
         routes = []
-        routes.append(VppIpRoute(self, "1.1.1.1", 32,
+        routes.append(VppIpRoute(self.vclient, "1.1.1.1", 32,
                                  [VppRoutePath(self.pg3.remote_ip4,
                                                self.pg3.sw_if_index)],
                                  table_id=2))
-        routes.append(VppIpRoute(self, "1.1.1.1", 32,
+        routes.append(VppIpRoute(self.vclient, "1.1.1.1", 32,
                                  [VppRoutePath("0.0.0.0", pipes[1].east)],
                                  table_id=1))
-        routes.append(VppIpRoute(self, "1.1.1.2", 32,
+        routes.append(VppIpRoute(self.vclient, "1.1.1.2", 32,
                                  [VppRoutePath("0.0.0.0", pipes[1].west)],
                                  table_id=2))
-        routes.append(VppIpRoute(self, "1.1.1.2", 32,
+        routes.append(VppIpRoute(self.vclient, "1.1.1.2", 32,
                                  [VppRoutePath(self.pg2.remote_ip4,
                                                self.pg2.sw_if_index)],
                                  table_id=1))
@@ -196,8 +151,8 @@ class TestPipe(VppTestCase):
                   Raw(b'\xa5' * 100))
 
         # bind the pipe ends to the correct tables
-        self.vapi.sw_interface_set_table(pipes[1].west, 0, 2)
-        self.vapi.sw_interface_set_table(pipes[1].east, 0, 1)
+        self.vclient.sw_interface_set_table(pipes[1].west, 0, 2)
+        self.vclient.sw_interface_set_table(pipes[1].east, 0, 1)
 
         # IP is not enabled on the pipes at this point
         self.send_and_assert_no_replies(self.pg2, p_east * NUM_PKTS)
@@ -220,7 +175,7 @@ class TestPipe(VppTestCase):
         #
         # Use ACLs to test features run on the Pipes
         #
-        acl_if_e1 = VppAclInterface(self, sw_if_index=pipes[1].east, n_input=0,
+        acl_if_e1 = VppAclInterface(self.vclient, sw_if_index=pipes[1].east, n_input=0,
                                     acls=[acl])
         acl_if_e1.add_vpp_config()
         self.send_and_assert_no_replies(self.pg2, p_east * NUM_PKTS)
@@ -228,7 +183,7 @@ class TestPipe(VppTestCase):
 
         # remove from output and apply on input
         acl_if_e1.remove_vpp_config()
-        acl_if_w1 = VppAclInterface(self, sw_if_index=pipes[1].west, n_input=1,
+        acl_if_w1 = VppAclInterface(self.vclient, sw_if_index=pipes[1].west, n_input=1,
                                     acls=[acl])
         acl_if_w1.add_vpp_config()
         self.send_and_assert_no_replies(self.pg2, p_east * NUM_PKTS)
@@ -243,8 +198,8 @@ class TestPipe(VppTestCase):
         self.pg2.set_table_ip4(0)
         self.pg3.unconfig_ip4()
         self.pg3.set_table_ip4(0)
-        self.vapi.sw_interface_set_table(pipes[1].west, 0, 0)
-        self.vapi.sw_interface_set_table(pipes[1].east, 0, 0)
+        self.vclient.sw_interface_set_table(pipes[1].west, 0, 0)
+        self.vclient.sw_interface_set_table(pipes[1].east, 0, 0)
 
 
 if __name__ == '__main__':
diff --git a/test/test_punt.py b/test/test_punt.py
index 0c5ec7efe..1bbe03f54 100644
--- a/test/test_punt.py
+++ b/test/test_punt.py
@@ -16,7 +16,7 @@ try:
 except ImportError:
     import unittest
 
-from util import ppp, ppc
+from vpp_pom.util import ppp, ppc
 from re import compile
 import scapy.compat
 from scapy.packet import Raw
@@ -28,10 +28,10 @@ from scapy.layers.inet6 import IPv6, ICMPv6DestUnreach
 from scapy.contrib.ospf import OSPF_Hdr, OSPFv3_Hello
 from framework import VppTestCase, VppTestRunner
 
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
 from vpp_papi import VppEnum
-from vpp_ipsec_tun_interface import VppIpsecTunInterface
+from vpp_pom.vpp_ipsec_tun_interface import VppIpsecTunInterface
 
 NUM_PKTS = 67
 
@@ -236,7 +236,7 @@ class TestIP4PuntSocket(TestPuntSocket):
         af_ip4 = VppEnum.vl_api_address_family_t.ADDRESS_IP4
         udp_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_UDP
 
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
 
         #
@@ -244,11 +244,11 @@ class TestIP4PuntSocket(TestPuntSocket):
         #
         punt_l4 = mk_vpp_cfg4()
 
-        self.vapi.punt_socket_register(set_port(punt_l4, 1111),
+        self.vclient.punt_socket_register(set_port(punt_l4, 1111),
                                        "%s/socket_punt_1111" % self.tempdir)
-        self.vapi.punt_socket_register(set_port(punt_l4, 2222),
+        self.vclient.punt_socket_register(set_port(punt_l4, 2222),
                                        "%s/socket_punt_2222" % self.tempdir)
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 2)
         self.verify_port(set_port(punt_l4, 1111), punts[0])
         self.verify_port(set_port(punt_l4, 2222), punts[1])
@@ -256,29 +256,29 @@ class TestIP4PuntSocket(TestPuntSocket):
         #
         # deregister a punt socket
         #
-        self.vapi.punt_socket_deregister(set_port(punt_l4, 1111))
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        self.vclient.punt_socket_deregister(set_port(punt_l4, 1111))
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 1)
 
         #
         # configure a punt socket again
         #
-        self.vapi.punt_socket_register(set_port(punt_l4, 1111),
+        self.vclient.punt_socket_register(set_port(punt_l4, 1111),
                                        "%s/socket_punt_1111" % self.tempdir)
-        self.vapi.punt_socket_register(set_port(punt_l4, 3333),
+        self.vclient.punt_socket_register(set_port(punt_l4, 3333),
                                        "%s/socket_punt_3333" % self.tempdir)
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 3)
 
-        self.logger.info(self.vapi.cli("sh punt sock reg"))
+        self.logger.info(self.vclient.cli("sh punt sock reg"))
 
         #
         # deregister all punt socket
         #
-        self.vapi.punt_socket_deregister(set_port(punt_l4, 1111))
-        self.vapi.punt_socket_deregister(set_port(punt_l4, 2222))
-        self.vapi.punt_socket_deregister(set_port(punt_l4, 3333))
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        self.vclient.punt_socket_deregister(set_port(punt_l4, 1111))
+        self.vclient.punt_socket_deregister(set_port(punt_l4, 2222))
+        self.vclient.punt_socket_deregister(set_port(punt_l4, 3333))
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
 
     def test_punt_socket_traffic_single_port_single_socket(self):
@@ -296,7 +296,7 @@ class TestIP4PuntSocket(TestPuntSocket):
 
         pkts = p * self.nr_packets
 
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
 
         #
@@ -312,9 +312,9 @@ class TestIP4PuntSocket(TestPuntSocket):
         # configure a punt socket
         #
         self.socket_client_create("%s/socket_%d" % (self.tempdir, port))
-        self.vapi.punt_socket_register(punt_l4, "%s/socket_%d" %
+        self.vclient.punt_socket_register(punt_l4, "%s/socket_%d" %
                                        (self.tempdir, port))
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 1)
 
         #
@@ -327,8 +327,8 @@ class TestIP4PuntSocket(TestPuntSocket):
         #
         # remove punt socket. expect ICMP - port unreachable for all packets
         #
-        self.vapi.punt_socket_deregister(punt_l4)
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        self.vclient.punt_socket_deregister(punt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
 
         rx = self.send_and_expect(self.pg0, pkts, self.pg0)
@@ -363,7 +363,7 @@ class TestIP4PuntSocket(TestPuntSocket):
             # configure punt sockets
             cfgs[port]['sock'] = self.socket_client_create(
                 "%s/socket_%d" % (self.tempdir, port))
-            self.vapi.punt_socket_register(
+            self.vclient.punt_socket_register(
                 cfgs[port]['vpp'],
                 "%s/socket_%d" % (self.tempdir, port))
 
@@ -379,7 +379,7 @@ class TestIP4PuntSocket(TestPuntSocket):
         for cfg in cfgs.values():
             rx = cfg['sock'].close()
             self.verify_udp_pkts(rx, len(cfg['pkts']), cfg['port'])
-            self.vapi.punt_socket_deregister(cfg['vpp'])
+            self.vclient.punt_socket_deregister(cfg['vpp'])
 
     def test_punt_socket_traffic_multi_ports_single_socket(self):
         """ Punt socket traffic multi ports and single socket"""
@@ -405,22 +405,22 @@ class TestIP4PuntSocket(TestPuntSocket):
         #
         self.socket_client_create("%s/socket_multi" % self.tempdir)
         for p in self.ports:
-            self.vapi.punt_socket_register(set_port(punt_l4, p),
+            self.vclient.punt_socket_register(set_port(punt_l4, p),
                                            "%s/socket_multi" % self.tempdir)
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), len(self.ports))
 
         #
         # expect punt socket and no packets on pg0
         #
         self.send_and_assert_no_replies(self.pg0, pkts)
-        self.logger.info(self.vapi.cli("show trace"))
+        self.logger.info(self.vclient.cli("show trace"))
         rx = self.socket_client_close()
 
         for p in self.ports:
             self.verify_udp_pkts(rx, self.nr_packets, p)
-            self.vapi.punt_socket_deregister(set_port(punt_l4, p))
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+            self.vclient.punt_socket_deregister(set_port(punt_l4, p))
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
 
 
@@ -467,17 +467,17 @@ class TestIP6PuntSocket(TestPuntSocket):
             }
         }
 
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
 
         #
         # configure a punt socket
         #
-        self.vapi.punt_socket_register(set_port(punt_l4, 1111),
+        self.vclient.punt_socket_register(set_port(punt_l4, 1111),
                                        "%s/socket_1111" % self.tempdir)
-        self.vapi.punt_socket_register(set_port(punt_l4, 2222),
+        self.vclient.punt_socket_register(set_port(punt_l4, 2222),
                                        "%s/socket_2222" % self.tempdir)
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 2)
         self.verify_port(set_port(punt_l4, 1111), punts[0])
         self.verify_port(set_port(punt_l4, 2222), punts[1])
@@ -485,25 +485,25 @@ class TestIP6PuntSocket(TestPuntSocket):
         #
         # deregister a punt socket
         #
-        self.vapi.punt_socket_deregister(set_port(punt_l4, 1111))
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        self.vclient.punt_socket_deregister(set_port(punt_l4, 1111))
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 1)
 
         #
         # configure a punt socket again
         #
-        self.vapi.punt_socket_register(set_port(punt_l4, 1111),
+        self.vclient.punt_socket_register(set_port(punt_l4, 1111),
                                        "%s/socket_1111" % self.tempdir)
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 2)
 
         #
         # deregister all punt socket
         #
-        self.vapi.punt_socket_deregister(set_port(punt_l4, 1111))
-        self.vapi.punt_socket_deregister(set_port(punt_l4, 2222))
-        self.vapi.punt_socket_deregister(set_port(punt_l4, 3333))
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        self.vclient.punt_socket_deregister(set_port(punt_l4, 1111))
+        self.vclient.punt_socket_deregister(set_port(punt_l4, 2222))
+        self.vclient.punt_socket_deregister(set_port(punt_l4, 3333))
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
 
     def test_punt_socket_traffic_single_port_single_socket(self):
@@ -532,13 +532,13 @@ class TestIP6PuntSocket(TestPuntSocket):
 
         pkts = p * self.nr_packets
 
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
 
         #
         # expect ICMPv6 - destination unreachable for all packets
         #
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -552,29 +552,29 @@ class TestIP6PuntSocket(TestPuntSocket):
         # configure a punt socket
         #
         self.socket_client_create("%s/socket_%d" % (self.tempdir, port))
-        self.vapi.punt_socket_register(punt_l4, "%s/socket_%d" %
+        self.vclient.punt_socket_register(punt_l4, "%s/socket_%d" %
                                        (self.tempdir, port))
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 1)
 
         #
         # expect punt socket and no packets on pg0
         #
-        self.vapi.cli("clear errors")
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear errors")
+        self.vclient.cli("clear trace")
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
         self.pg0.get_capture(0)
-        self.logger.info(self.vapi.cli("show trace"))
+        self.logger.info(self.vclient.cli("show trace"))
         rx = self.socket_client_close()
         self.verify_udp_pkts(rx, len(pkts), port)
 
         #
         # remove punt socket. expect ICMP - dest. unreachable for all packets
         #
-        self.vapi.punt_socket_deregister(punt_l4)
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        self.vclient.punt_socket_deregister(punt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
@@ -609,7 +609,7 @@ class TestIP6PuntSocket(TestPuntSocket):
             # configure punt sockets
             cfgs[port]['sock'] = self.socket_client_create(
                 "%s/socket_%d" % (self.tempdir, port))
-            self.vapi.punt_socket_register(
+            self.vclient.punt_socket_register(
                 cfgs[port]['vpp'],
                 "%s/socket_%d" % (self.tempdir, port))
 
@@ -625,7 +625,7 @@ class TestIP6PuntSocket(TestPuntSocket):
         for cfg in cfgs.values():
             rx = cfg['sock'].close()
             self.verify_udp_pkts(rx, len(cfg['pkts']), cfg['port'])
-            self.vapi.punt_socket_deregister(cfg['vpp'])
+            self.vclient.punt_socket_deregister(cfg['vpp'])
 
     def test_punt_socket_traffic_multi_ports_single_socket(self):
         """ Punt socket traffic multi ports and single socket"""
@@ -659,7 +659,7 @@ class TestIP6PuntSocket(TestPuntSocket):
         #
         # no punt socket
         #
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
 
         #
@@ -667,16 +667,16 @@ class TestIP6PuntSocket(TestPuntSocket):
         #
         self.socket_client_create("%s/socket_multi" % self.tempdir)
         for p in self.ports:
-            self.vapi.punt_socket_register(set_port(punt_l4, p),
+            self.vclient.punt_socket_register(set_port(punt_l4, p),
                                            "%s/socket_multi" % self.tempdir)
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), len(self.ports))
 
         #
         # expect punt socket and no packets on pg0
         #
-        self.vapi.cli("clear errors")
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear errors")
+        self.vclient.cli("clear trace")
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -687,8 +687,8 @@ class TestIP6PuntSocket(TestPuntSocket):
 
         for p in self.ports:
             self.verify_udp_pkts(rx, self.nr_packets, p)
-            self.vapi.punt_socket_deregister(set_port(punt_l4, p))
-        punts = self.vapi.punt_socket_dump(type=pt_l4)
+            self.vclient.punt_socket_deregister(set_port(punt_l4, p))
+        punts = self.vclient.punt_socket_dump(type=pt_l4)
         self.assertEqual(len(punts), 0)
 
 
@@ -722,7 +722,7 @@ class TestExceptionPuntSocket(TestPuntSocket):
 
         pt_ex = VppEnum.vl_api_punt_type_t.PUNT_API_TYPE_EXCEPTION
 
-        punts = self.vapi.punt_socket_dump(type=pt_ex)
+        punts = self.vclient.punt_socket_dump(type=pt_ex)
         self.assertEqual(len(punts), 0)
 
         #
@@ -735,11 +735,11 @@ class TestExceptionPuntSocket(TestPuntSocket):
             }
         }
 
-        self.vapi.punt_socket_register(set_reason(punt_ex, 1),
+        self.vclient.punt_socket_register(set_reason(punt_ex, 1),
                                        "%s/socket_punt_1" % self.tempdir)
-        self.vapi.punt_socket_register(set_reason(punt_ex, 2),
+        self.vclient.punt_socket_register(set_reason(punt_ex, 2),
                                        "%s/socket_punt_2" % self.tempdir)
-        punts = self.vapi.punt_socket_dump(type=pt_ex)
+        punts = self.vclient.punt_socket_dump(type=pt_ex)
         self.assertEqual(len(punts), 2)
         self.verify_exception(set_reason(punt_ex, 1), punts[0])
         self.verify_exception(set_reason(punt_ex, 2), punts[1])
@@ -747,29 +747,29 @@ class TestExceptionPuntSocket(TestPuntSocket):
         #
         # deregister a punt socket
         #
-        self.vapi.punt_socket_deregister(set_reason(punt_ex, 1))
-        punts = self.vapi.punt_socket_dump(type=pt_ex)
+        self.vclient.punt_socket_deregister(set_reason(punt_ex, 1))
+        punts = self.vclient.punt_socket_dump(type=pt_ex)
         self.assertEqual(len(punts), 1)
 
         #
         # configure a punt socket again
         #
-        self.vapi.punt_socket_register(set_reason(punt_ex, 1),
+        self.vclient.punt_socket_register(set_reason(punt_ex, 1),
                                        "%s/socket_punt_1" % self.tempdir)
-        self.vapi.punt_socket_register(set_reason(punt_ex, 3),
+        self.vclient.punt_socket_register(set_reason(punt_ex, 3),
                                        "%s/socket_punt_3" % self.tempdir)
-        punts = self.vapi.punt_socket_dump(type=pt_ex)
+        punts = self.vclient.punt_socket_dump(type=pt_ex)
         self.assertEqual(len(punts), 3)
 
-        self.logger.info(self.vapi.cli("sh punt sock reg exception"))
+        self.logger.info(self.vclient.cli("sh punt sock reg exception"))
 
         #
         # deregister all punt socket
         #
-        self.vapi.punt_socket_deregister(set_reason(punt_ex, 1))
-        self.vapi.punt_socket_deregister(set_reason(punt_ex, 2))
-        self.vapi.punt_socket_deregister(set_reason(punt_ex, 3))
-        punts = self.vapi.punt_socket_dump(type=pt_ex)
+        self.vclient.punt_socket_deregister(set_reason(punt_ex, 1))
+        self.vclient.punt_socket_deregister(set_reason(punt_ex, 2))
+        self.vclient.punt_socket_deregister(set_reason(punt_ex, 3))
+        punts = self.vclient.punt_socket_dump(type=pt_ex)
         self.assertEqual(len(punts), 0)
 
     def verify_esp_pkts(self, rxs, n_sent, spi, has_udp):
@@ -805,7 +805,7 @@ class TestExceptionPuntSocket(TestPuntSocket):
         #
         # find the VPP ID for these punt exception reasin
         #
-        rs = self.vapi.punt_reason_dump()
+        rs = self.vclient.punt_reason_dump()
         for key in cfgs:
             for r in rs:
                 print(r.reason.name)
@@ -823,7 +823,7 @@ class TestExceptionPuntSocket(TestPuntSocket):
         for cfg in cfgs.values():
             cfg['sock'] = self.socket_client_create("%s/socket_%d" %
                                                     (self.tempdir, cfg['id']))
-            self.vapi.punt_socket_register(
+            self.vclient.punt_socket_register(
                 cfg['vpp'], "%s/socket_%d" % (self.tempdir, cfg['id']))
 
         #
@@ -857,7 +857,7 @@ class TestExceptionPuntSocket(TestPuntSocket):
         #
         # add some tunnels, make sure it still punts
         #
-        VppIpsecTunInterface(self, self.pg0, 1000, 1000,
+        VppIpsecTunInterface(self.vclient, self.pg0, 1000, 1000,
                              (VppEnum.vl_api_ipsec_crypto_alg_t.
                               IPSEC_API_CRYPTO_ALG_AES_CBC_128),
                              b"0123456701234567",
@@ -866,7 +866,7 @@ class TestExceptionPuntSocket(TestPuntSocket):
                               IPSEC_API_INTEG_ALG_SHA1_96),
                              b"0123456701234567",
                              b"0123456701234567").add_vpp_config()
-        VppIpsecTunInterface(self, self.pg1, 1000, 1000,
+        VppIpsecTunInterface(self.vclient, self.pg1, 1000, 1000,
                              (VppEnum.vl_api_ipsec_crypto_alg_t.
                               IPSEC_API_CRYPTO_ALG_AES_CBC_128),
                              b"0123456701234567",
@@ -894,7 +894,7 @@ class TestExceptionPuntSocket(TestPuntSocket):
         # socket deregister
         #
         for cfg in cfgs.values():
-            self.vapi.punt_socket_deregister(cfg['vpp'])
+            self.vclient.punt_socket_deregister(cfg['vpp'])
 
 
 class TestIpProtoPuntSocket(TestPuntSocket):
@@ -929,7 +929,7 @@ class TestIpProtoPuntSocket(TestPuntSocket):
         proto_ospf = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_OSPF
         proto_eigrp = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_EIGRP
 
-        punts = self.vapi.punt_socket_dump(type=pt_ip)
+        punts = self.vclient.punt_socket_dump(type=pt_ip)
         self.assertEqual(len(punts), 0)
 
         #
@@ -954,12 +954,12 @@ class TestIpProtoPuntSocket(TestPuntSocket):
             }
         }
 
-        self.vapi.punt_socket_register(punt_ospf,
+        self.vclient.punt_socket_register(punt_ospf,
                                        "%s/socket_punt_1" % self.tempdir)
-        self.vapi.punt_socket_register(punt_eigrp,
+        self.vclient.punt_socket_register(punt_eigrp,
                                        "%s/socket_punt_2" % self.tempdir)
-        self.logger.info(self.vapi.cli("sh punt sock reg ip"))
-        punts = self.vapi.punt_socket_dump(type=pt_ip)
+        self.logger.info(self.vclient.cli("sh punt sock reg ip"))
+        punts = self.vclient.punt_socket_dump(type=pt_ip)
         self.assertEqual(len(punts), 2)
         self.verify_ip_proto(punt_ospf, punts[0])
         self.verify_ip_proto(punt_eigrp, punts[1])
@@ -967,26 +967,26 @@ class TestIpProtoPuntSocket(TestPuntSocket):
         #
         # deregister a punt socket
         #
-        self.vapi.punt_socket_deregister(punt_ospf)
-        punts = self.vapi.punt_socket_dump(type=pt_ip)
+        self.vclient.punt_socket_deregister(punt_ospf)
+        punts = self.vclient.punt_socket_dump(type=pt_ip)
         self.assertEqual(len(punts), 1)
 
         #
         # configure a punt socket again
         #
-        self.vapi.punt_socket_register(punt_ospf,
+        self.vclient.punt_socket_register(punt_ospf,
                                        "%s/socket_punt_3" % self.tempdir)
-        punts = self.vapi.punt_socket_dump(type=pt_ip)
+        punts = self.vclient.punt_socket_dump(type=pt_ip)
         self.assertEqual(len(punts), 2)
 
-        self.logger.info(self.vapi.cli("sh punt sock reg exception"))
+        self.logger.info(self.vclient.cli("sh punt sock reg exception"))
 
         #
         # deregister all punt socket
         #
-        self.vapi.punt_socket_deregister(punt_eigrp)
-        self.vapi.punt_socket_deregister(punt_ospf)
-        punts = self.vapi.punt_socket_dump(type=pt_ip)
+        self.vclient.punt_socket_deregister(punt_eigrp)
+        self.vclient.punt_socket_deregister(punt_ospf)
+        punts = self.vclient.punt_socket_dump(type=pt_ip)
         self.assertEqual(len(punts), 0)
 
     def verify_ospf_pkts(self, rxs, n_sent):
@@ -1025,7 +1025,7 @@ class TestIpProtoPuntSocket(TestPuntSocket):
         pkts = pkt * 7
 
         sock = self.socket_client_create("%s/socket_1" % self.tempdir)
-        self.vapi.punt_socket_register(
+        self.vclient.punt_socket_register(
             punt_ospf, "%s/socket_1" % self.tempdir)
 
         #
@@ -1038,7 +1038,7 @@ class TestIpProtoPuntSocket(TestPuntSocket):
         #
         rx = sock.close()
         self.verify_ospf_pkts(rx, len(pkts))
-        self.vapi.punt_socket_deregister(punt_ospf)
+        self.vclient.punt_socket_deregister(punt_ospf)
 
 
 class TestPunt(VppTestCase):
@@ -1078,7 +1078,7 @@ class TestPunt(VppTestCase):
         # dump the punt registered reasons
         #  search for a few we know should be there
         #
-        rs = self.vapi.punt_reason_dump()
+        rs = self.vclient.punt_reason_dump()
 
         reasons = ["ipsec6-no-such-tunnel",
                    "ipsec4-no-such-tunnel",
@@ -1097,11 +1097,11 @@ class TestPunt(VppTestCase):
         # send ACL deny packets out of pg0 and pg1.
         # the ACL is src,dst = 1.1.1.1,1.1.1.2
         #
-        ip_1_1_1_2 = VppIpRoute(self, "1.1.1.2", 32,
+        ip_1_1_1_2 = VppIpRoute(self.vclient, "1.1.1.2", 32,
                                 [VppRoutePath(self.pg3.remote_ip4,
                                               self.pg3.sw_if_index)])
         ip_1_1_1_2.add_vpp_config()
-        ip_1_2 = VppIpRoute(self, "1::2", 128,
+        ip_1_2 = VppIpRoute(self.vclient, "1::2", 128,
                             [VppRoutePath(self.pg3.remote_ip6,
                                           self.pg3.sw_if_index,
                                           proto=DpoProto.DPO_PROTO_IP6)])
@@ -1123,14 +1123,14 @@ class TestPunt(VppTestCase):
         #
         # apply the punting features
         #
-        self.vapi.cli("test punt pg2")
+        self.vclient.cli("test punt pg2")
 
         #
         # dump the punt reasons to learn the IDs assigned
         #
-        rs = self.vapi.punt_reason_dump(reason={'name': "reason-v4"})
+        rs = self.vclient.punt_reason_dump(reason={'name': "reason-v4"})
         r4 = rs[0].reason.id
-        rs = self.vapi.punt_reason_dump(reason={'name': "reason-v6"})
+        rs = self.vclient.punt_reason_dump(reason={'name': "reason-v6"})
         r6 = rs[0].reason.id
 
         #
@@ -1145,11 +1145,11 @@ class TestPunt(VppTestCase):
         #  2 - per-reason counters
         #    2, 3 are the index of the assigned punt reason
         #
-        stats = self.statistics.get_err_counter(
+        stats = self.vclient.statistics.get_err_counter(
             "/err/punt-dispatch/No registrations")
         self.assertEqual(stats, 2*NUM_PKTS)
 
-        stats = self.statistics.get_counter("/net/punt")
+        stats = self.vclient.statistics.get_counter("/net/punt")
         self.assertEqual(stats[0][r4]['packets'], NUM_PKTS)
         self.assertEqual(stats[0][r6]['packets'], NUM_PKTS)
 
@@ -1157,8 +1157,8 @@ class TestPunt(VppTestCase):
         # use the test CLI to test a client that punts exception
         # packets out of pg0
         #
-        self.vapi.cli("test punt pg0 %s" % self.pg0.remote_ip4)
-        self.vapi.cli("test punt pg0 %s" % self.pg0.remote_ip6)
+        self.vclient.cli("test punt pg0 %s" % self.pg0.remote_ip4)
+        self.vclient.cli("test punt pg0 %s" % self.pg0.remote_ip6)
 
         rx4s = self.send_and_expect(self.pg2, p4*NUM_PKTS, self.pg0)
         rx6s = self.send_and_expect(self.pg2, p6*NUM_PKTS, self.pg0)
@@ -1177,7 +1177,7 @@ class TestPunt(VppTestCase):
             self.assertEqual(p6[IPv6].dst, rx[IPv6].dst)
             self.assertEqual(p6[IPv6].hlim, rx[IPv6].hlim)
 
-        stats = self.statistics.get_counter("/net/punt")
+        stats = self.vclient.statistics.get_counter("/net/punt")
         self.assertEqual(stats[0][r4]['packets'], 2*NUM_PKTS)
         self.assertEqual(stats[0][r6]['packets'], 2*NUM_PKTS)
 
@@ -1185,10 +1185,10 @@ class TestPunt(VppTestCase):
         # add another registration for the same reason to send packets
         # out of pg1
         #
-        self.vapi.cli("test punt pg1 %s" % self.pg1.remote_ip4)
-        self.vapi.cli("test punt pg1 %s" % self.pg1.remote_ip6)
+        self.vclient.cli("test punt pg1 %s" % self.pg1.remote_ip4)
+        self.vclient.cli("test punt pg1 %s" % self.pg1.remote_ip6)
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.pg2.add_stream(p4 * NUM_PKTS)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -1206,7 +1206,7 @@ class TestPunt(VppTestCase):
             self.assertEqual(p4[IP].dst, rx[IP].dst)
             self.assertEqual(p4[IP].ttl, rx[IP].ttl)
 
-        self.vapi.cli("clear trace")
+        self.vclient.cli("clear trace")
         self.pg2.add_stream(p6 * NUM_PKTS)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -1224,15 +1224,15 @@ class TestPunt(VppTestCase):
             self.assertEqual(p6[IPv6].dst, rx[IPv6].dst)
             self.assertEqual(p6[IPv6].hlim, rx[IPv6].hlim)
 
-        stats = self.statistics.get_counter("/net/punt")
+        stats = self.vclient.statistics.get_counter("/net/punt")
         self.assertEqual(stats[0][r4]['packets'], 3*NUM_PKTS)
         self.assertEqual(stats[0][r6]['packets'], 3*NUM_PKTS)
 
-        self.logger.info(self.vapi.cli("show vlib graph punt-dispatch"))
-        self.logger.info(self.vapi.cli("show punt client"))
-        self.logger.info(self.vapi.cli("show punt reason"))
-        self.logger.info(self.vapi.cli("show punt stats"))
-        self.logger.info(self.vapi.cli("show punt db"))
+        self.logger.info(self.vclient.cli("show vlib graph punt-dispatch"))
+        self.logger.info(self.vclient.cli("show punt client"))
+        self.logger.info(self.vclient.cli("show punt reason"))
+        self.logger.info(self.vclient.cli("show punt stats"))
+        self.logger.info(self.vclient.cli("show punt db"))
 
 
 if __name__ == '__main__':
diff --git a/test/test_qos.py b/test/test_qos.py
index 02941a163..4c7cbb3c2 100644
--- a/test/test_qos.py
+++ b/test/test_qos.py
@@ -3,9 +3,9 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_sub_interface import VppDot1QSubint
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppMplsRoute, \
+from vpp_pom.vpp_sub_interface import VppDot1QSubint
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppMplsRoute, \
     VppMplsLabel, VppMplsTable, FibPathProto
 
 import scapy.compat
@@ -15,7 +15,7 @@ from scapy.layers.inet import IP, UDP
 from scapy.layers.inet6 import IPv6
 from scapy.contrib.mpls import MPLS
 from vpp_papi import VppEnum
-from vpp_qos import VppQosRecord, VppQosEgressMap, VppQosMark, VppQosStore
+from vpp_pom.vpp_qos import VppQosRecord, VppQosEgressMap, VppQosMark, VppQosStore
 
 NUM_PKTS = 67
 
@@ -43,7 +43,7 @@ class TestQOS(VppTestCase):
 
         self.create_pg_interfaces(range(5))
 
-        tbl = VppMplsTable(self, 0)
+        tbl = VppMplsTable(self.vclient, 0)
         tbl.add_vpp_config()
 
         for i in self.pg_interfaces:
@@ -78,7 +78,7 @@ class TestQOS(VppTestCase):
                 {'outputs': os},
                 {'outputs': os}]
 
-        qem1 = VppQosEgressMap(self, 1, rows).add_vpp_config()
+        qem1 = VppQosEgressMap(self.vclient, 1, rows).add_vpp_config()
 
         #
         # For table 2 (and up) use the value n for everything
@@ -90,7 +90,7 @@ class TestQOS(VppTestCase):
                 {'outputs': os},
                 {'outputs': os}]
 
-        qem2 = VppQosEgressMap(self, 2, rows).add_vpp_config()
+        qem2 = VppQosEgressMap(self.vclient, 2, rows).add_vpp_config()
 
         output = [scapy.compat.chb(3)] * 256
         os = b''.join(output)
@@ -99,7 +99,7 @@ class TestQOS(VppTestCase):
                 {'outputs': os},
                 {'outputs': os}]
 
-        qem3 = VppQosEgressMap(self, 3, rows).add_vpp_config()
+        qem3 = VppQosEgressMap(self.vclient, 3, rows).add_vpp_config()
 
         output = [scapy.compat.chb(4)] * 256
         os = b''.join(output)
@@ -108,28 +108,28 @@ class TestQOS(VppTestCase):
                 {'outputs': os},
                 {'outputs': os}]
 
-        qem4 = VppQosEgressMap(self, 4, rows).add_vpp_config()
-        qem5 = VppQosEgressMap(self, 5, rows).add_vpp_config()
-        qem6 = VppQosEgressMap(self, 6, rows).add_vpp_config()
-        qem7 = VppQosEgressMap(self, 7, rows).add_vpp_config()
+        qem4 = VppQosEgressMap(self.vclient, 4, rows).add_vpp_config()
+        qem5 = VppQosEgressMap(self.vclient, 5, rows).add_vpp_config()
+        qem6 = VppQosEgressMap(self.vclient, 6, rows).add_vpp_config()
+        qem7 = VppQosEgressMap(self.vclient, 7, rows).add_vpp_config()
 
         self.assertTrue(qem7.query_vpp_config())
-        self.logger.info(self.vapi.cli("sh qos eg map"))
+        self.logger.info(self.vclient.cli("sh qos eg map"))
 
         #
         # Bind interface pgN to table n
         #
-        qm1 = VppQosMark(self, self.pg1, qem1,
+        qm1 = VppQosMark(self.vclient, self.pg1, qem1,
                          self.QOS_SOURCE.QOS_API_SOURCE_IP).add_vpp_config()
-        qm2 = VppQosMark(self, self.pg2, qem2,
+        qm2 = VppQosMark(self.vclient, self.pg2, qem2,
                          self.QOS_SOURCE.QOS_API_SOURCE_IP).add_vpp_config()
-        qm3 = VppQosMark(self, self.pg3, qem3,
+        qm3 = VppQosMark(self.vclient, self.pg3, qem3,
                          self.QOS_SOURCE.QOS_API_SOURCE_IP).add_vpp_config()
-        qm4 = VppQosMark(self, self.pg4, qem4,
+        qm4 = VppQosMark(self.vclient, self.pg4, qem4,
                          self.QOS_SOURCE.QOS_API_SOURCE_IP).add_vpp_config()
         self.assertTrue(qm3.query_vpp_config())
 
-        self.logger.info(self.vapi.cli("sh qos mark"))
+        self.logger.info(self.vclient.cli("sh qos mark"))
 
         #
         # packets ingress on Pg0
@@ -158,10 +158,10 @@ class TestQOS(VppTestCase):
         #
         # Enable QoS recording on IP input for pg0
         #
-        qr1 = VppQosRecord(self, self.pg0,
+        qr1 = VppQosRecord(self.vclient, self.pg0,
                            self.QOS_SOURCE.QOS_API_SOURCE_IP)
         qr1.add_vpp_config()
-        self.logger.info(self.vapi.cli("sh qos record"))
+        self.logger.info(self.vclient.cli("sh qos record"))
 
         #
         # send the same packets, this time expect the input TOS of 1
@@ -219,10 +219,10 @@ class TestQOS(VppTestCase):
         #
         qm2.remove_vpp_config()
         qm3.remove_vpp_config()
-        self.logger.info(self.vapi.cli("sh qos mark"))
+        self.logger.info(self.vclient.cli("sh qos mark"))
 
         self.assertFalse(qm3.query_vpp_config())
-        self.logger.info(self.vapi.cli("sh int feat pg2"))
+        self.logger.info(self.vclient.cli("sh int feat pg2"))
 
         p_v4[IP].dst = self.pg2.remote_ip4
         rx = self.send_and_expect(self.pg0, p_v4 * NUM_PKTS, self.pg2)
@@ -258,10 +258,10 @@ class TestQOS(VppTestCase):
         #
         # enable QoS stroe instead of record
         #
-        qst1 = VppQosStore(self, self.pg0,
+        qst1 = VppQosStore(self.vclient, self.pg0,
                            self.QOS_SOURCE.QOS_API_SOURCE_IP,
                            5).add_vpp_config()
-        self.logger.info(self.vapi.cli("sh qos store"))
+        self.logger.info(self.vclient.cli("sh qos store"))
 
         p_v4[IP].dst = self.pg1.remote_ip4
         rx = self.send_and_expect(self.pg0, p_v4 * NUM_PKTS, self.pg1)
@@ -317,12 +317,12 @@ class TestQOS(VppTestCase):
                 {'outputs': os3},
                 {'outputs': os4}]
 
-        qem1 = VppQosEgressMap(self, 1, rows).add_vpp_config()
+        qem1 = VppQosEgressMap(self.vclient, 1, rows).add_vpp_config()
 
         #
         # a route with 1 MPLS label
         #
-        route_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        route_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                     [VppRoutePath(self.pg1.remote_ip4,
                                                   self.pg1.sw_if_index,
                                                   labels=[32])])
@@ -331,7 +331,7 @@ class TestQOS(VppTestCase):
         #
         # a route with 3 MPLS labels
         #
-        route_10_0_0_3 = VppIpRoute(self, "10.0.0.3", 32,
+        route_10_0_0_3 = VppIpRoute(self.vclient, "10.0.0.3", 32,
                                     [VppRoutePath(self.pg1.remote_ip4,
                                                   self.pg1.sw_if_index,
                                                   labels=[63, 33, 34])])
@@ -341,9 +341,9 @@ class TestQOS(VppTestCase):
         # enable IP QoS recording on the input Pg0 and MPLS egress marking
         # on Pg1
         #
-        qr1 = VppQosRecord(self, self.pg0,
+        qr1 = VppQosRecord(self.vclient, self.pg0,
                            self.QOS_SOURCE.QOS_API_SOURCE_IP).add_vpp_config()
-        qm1 = VppQosMark(self, self.pg1, qem1,
+        qm1 = VppQosMark(self.vclient, self.pg1, qem1,
                          self.QOS_SOURCE.QOS_API_SOURCE_MPLS).add_vpp_config()
 
         #
@@ -387,16 +387,16 @@ class TestQOS(VppTestCase):
         # on Pg1
         #
         qr2 = VppQosRecord(
-            self, self.pg0,
+            self.vclient, self.pg0,
             self.QOS_SOURCE.QOS_API_SOURCE_MPLS).add_vpp_config()
         qm2 = VppQosMark(
-            self, self.pg1, qem1,
+            self.vclient, self.pg1, qem1,
             self.QOS_SOURCE.QOS_API_SOURCE_IP).add_vpp_config()
 
         #
         # MPLS x-connect - COS according to pg1 map
         #
-        route_32_eos = VppMplsRoute(self, 32, 1,
+        route_32_eos = VppMplsRoute(self.vclient, 32, 1,
                                     [VppRoutePath(self.pg1.remote_ip4,
                                                   self.pg1.sw_if_index,
                                                   labels=[VppMplsLabel(33)])])
@@ -417,13 +417,13 @@ class TestQOS(VppTestCase):
         #
         # MPLS deag - COS is copied from MPLS to IP
         #
-        route_33_eos = VppMplsRoute(self, 33, 1,
+        route_33_eos = VppMplsRoute(self.vclient, 33, 1,
                                     [VppRoutePath("0.0.0.0",
                                                   0xffffffff,
                                                   nh_table_id=0)])
         route_33_eos.add_vpp_config()
 
-        route_10_0_0_4 = VppIpRoute(self, "10.0.0.4", 32,
+        route_10_0_0_4 = VppIpRoute(self.vclient, "10.0.0.4", 32,
                                     [VppRoutePath(self.pg1.remote_ip4,
                                                   self.pg1.sw_if_index)])
         route_10_0_0_4.add_vpp_config()
@@ -454,9 +454,9 @@ class TestQOS(VppTestCase):
                 {'outputs': os},
                 {'outputs': os}]
 
-        qem1 = VppQosEgressMap(self, 1, rows).add_vpp_config()
+        qem1 = VppQosEgressMap(self.vclient, 1, rows).add_vpp_config()
 
-        sub_if = VppDot1QSubint(self, self.pg0, 11)
+        sub_if = VppDot1QSubint(self.vclient, self.pg0, 11)
 
         sub_if.admin_up()
         sub_if.config_ip4()
@@ -468,38 +468,38 @@ class TestQOS(VppTestCase):
         # enable VLAN QoS recording/marking on the input Pg0 subinterface and
         #
         qr_v = VppQosRecord(
-            self, sub_if,
+            self.vclient, sub_if,
             self.QOS_SOURCE.QOS_API_SOURCE_VLAN).add_vpp_config()
         qm_v = VppQosMark(
-            self, sub_if, qem1,
+            self.vclient, sub_if, qem1,
             self.QOS_SOURCE.QOS_API_SOURCE_VLAN).add_vpp_config()
 
         #
         # IP marking/recording on pg1
         #
         qr_ip = VppQosRecord(
-            self, self.pg1,
+            self.vclient, self.pg1,
             self.QOS_SOURCE.QOS_API_SOURCE_IP).add_vpp_config()
         qm_ip = VppQosMark(
-            self, self.pg1, qem1,
+            self.vclient, self.pg1, qem1,
             self.QOS_SOURCE.QOS_API_SOURCE_IP).add_vpp_config()
 
         #
         # a routes to/from sub-interface
         #
-        route_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        route_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                     [VppRoutePath(sub_if.remote_ip4,
                                                   sub_if.sw_if_index)])
         route_10_0_0_1.add_vpp_config()
-        route_10_0_0_2 = VppIpRoute(self, "10.0.0.2", 32,
+        route_10_0_0_2 = VppIpRoute(self.vclient, "10.0.0.2", 32,
                                     [VppRoutePath(self.pg1.remote_ip4,
                                                   self.pg1.sw_if_index)])
         route_10_0_0_2.add_vpp_config()
-        route_2001_1 = VppIpRoute(self, "2001::1", 128,
+        route_2001_1 = VppIpRoute(self.vclient, "2001::1", 128,
                                   [VppRoutePath(sub_if.remote_ip6,
                                                 sub_if.sw_if_index)])
         route_2001_1.add_vpp_config()
-        route_2001_2 = VppIpRoute(self, "2001::2", 128,
+        route_2001_2 = VppIpRoute(self.vclient, "2001::2", 128,
                                   [VppRoutePath(self.pg1.remote_ip6,
                                                 self.pg1.sw_if_index)])
         route_2001_2.add_vpp_config()
diff --git a/test/test_reassembly.py b/test/test_reassembly.py
index cb6b8ff5d..a9b53c425 100644
--- a/test/test_reassembly.py
+++ b/test/test_reassembly.py
@@ -13,10 +13,10 @@ from scapy.layers.inet import IP, UDP, ICMP
 from scapy.layers.inet6 import HBHOptUnknown, ICMPv6ParamProblem,\
     ICMPv6TimeExceeded, IPv6, IPv6ExtHdrFragment, IPv6ExtHdrHopByHop
 from framework import VppTestCase, VppTestRunner
-from util import ppp, ppc, fragment_rfc791, fragment_rfc8200
-from vpp_gre_interface import VppGreInterface
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, FibPathProto
+from vpp_pom.util import ppp, ppc, fragment_rfc791, fragment_rfc8200
+from vpp_pom.vpp_gre_interface import VppGreInterface
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, FibPathProto
 from vpp_papi import VppEnum
 
 # 35 is enough to have >257 400-byte fragments
@@ -56,13 +56,13 @@ class TestIPv4Reassembly(VppTestCase):
     def setUp(self):
         """ Test setup - force timeout on existing reassemblies """
         super(TestIPv4Reassembly, self).setUp()
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.src_if.sw_if_index, enable_ip4=True)
-        self.vapi.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10)
         self.sleep(.25)
-        self.vapi.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10000)
 
@@ -70,8 +70,8 @@ class TestIPv4Reassembly(VppTestCase):
         super(TestIPv4Reassembly, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.ppcli("show ip4-full-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show ip4-full-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
 
     @classmethod
     def create_stream(cls, packet_sizes, packet_count=test_packet_count):
@@ -200,9 +200,9 @@ class TestIPv4Reassembly(VppTestCase):
         error_cnt_str = \
             "/err/ip4-full-reassembly-feature/fragment chain too long (drop)"
 
-        error_cnt = self.statistics.get_err_counter(error_cnt_str)
+        error_cnt = self.vclient.statistics.get_err_counter(error_cnt_str)
 
-        self.vapi.ip_reassembly_set(timeout_ms=100, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=100, max_reassemblies=1000,
                                     max_reassembly_length=3,
                                     expire_walk_interval_ms=50)
 
@@ -227,7 +227,7 @@ class TestIPv4Reassembly(VppTestCase):
 
     def test_5737(self):
         """ fragment length + ip header size > 65535 """
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
         raw = b'''E\x00\x00\x88,\xf8\x1f\xfe@\x01\x98\x00\xc0\xa8\n-\xc0\xa8\n\
 \x01\x08\x00\xf0J\xed\xcb\xf1\xf5Test-group: IPv4.IPv4.ipv4-message.\
 Ethernet-Payload.IPv4-Packet.IPv4-Header.Fragment-Offset; Test-case: 5737'''
@@ -242,14 +242,14 @@ Ethernet-Payload.IPv4-Packet.IPv4-Header.Fragment-Offset; Test-case: 5737'''
         valid_fragments = fragment_rfc791(p, 400)
 
         counter = "/err/ip4-full-reassembly-feature/malformed packets"
-        error_counter = self.statistics.get_err_counter(counter)
+        error_counter = self.vclient.statistics.get_err_counter(counter)
         self.pg_enable_capture()
         self.src_if.add_stream([malformed_packet] + valid_fragments)
         self.pg_start()
 
         self.dst_if.get_capture(1)
-        self.logger.debug(self.vapi.ppcli("show error"))
-        self.assertEqual(self.statistics.get_err_counter(counter),
+        self.logger.debug(self.vclient.ppcli("show error"))
+        self.assertEqual(self.vclient.statistics.get_err_counter(counter),
                          error_counter + 1)
 
     def test_44924(self):
@@ -285,7 +285,7 @@ Ethernet-Payload.IPv4-Packet.IPv4-Header.Fragment-Offset; Test-case: 5737'''
 
     def test_frag_1(self):
         """ fragment of size 1 """
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
         malformed_packets = [(Ether(dst=self.src_if.local_mac,
                                     src=self.src_if.remote_mac) /
                               IP(id=7, len=21, flags="MF", frag=0, ttl=64,
@@ -430,7 +430,7 @@ Ethernet-Payload.IPv4-Packet.IPv4-Header.Fragment-Offset; Test-case: 5737'''
             index for (index, frags, _, _) in self.pkt_infos if len(frags) > 1
         )
 
-        self.vapi.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
                                     max_reassembly_length=3,
                                     expire_walk_interval_ms=10000)
 
@@ -461,7 +461,7 @@ Ethernet-Payload.IPv4-Packet.IPv4-Header.Fragment-Offset; Test-case: 5737'''
             index for (index, frags_400, _, _) in self.pkt_infos
             if len(frags_400) > 1)
 
-        self.vapi.ip_reassembly_set(timeout_ms=100, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=100, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=50)
 
@@ -486,7 +486,7 @@ Ethernet-Payload.IPv4-Packet.IPv4-Header.Fragment-Offset; Test-case: 5737'''
             index for (index, frags_400, _, _) in self.pkt_infos
             if len(frags_400) > 1)
 
-        self.vapi.ip_reassembly_set(timeout_ms=1000, max_reassemblies=0,
+        self.vclient.ip_reassembly_set(timeout_ms=1000, max_reassemblies=0,
                                     max_reassembly_length=3,
                                     expire_walk_interval_ms=10000)
 
@@ -520,16 +520,16 @@ class TestIPv4SVReassembly(VppTestCase):
     def setUp(self):
         """ Test setup - force timeout on existing reassemblies """
         super(TestIPv4SVReassembly, self).setUp()
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.src_if.sw_if_index, enable_ip4=True,
             type=VppEnum.vl_api_ip_reass_type_t.IP_REASS_TYPE_SHALLOW_VIRTUAL)
-        self.vapi.ip_reassembly_set(
+        self.vclient.ip_reassembly_set(
             timeout_ms=0, max_reassemblies=1000,
             max_reassembly_length=1000,
             type=VppEnum.vl_api_ip_reass_type_t.IP_REASS_TYPE_SHALLOW_VIRTUAL,
             expire_walk_interval_ms=10)
         self.sleep(.25)
-        self.vapi.ip_reassembly_set(
+        self.vclient.ip_reassembly_set(
             timeout_ms=1000000, max_reassemblies=1000,
             max_reassembly_length=1000,
             type=VppEnum.vl_api_ip_reass_type_t.IP_REASS_TYPE_SHALLOW_VIRTUAL,
@@ -537,8 +537,8 @@ class TestIPv4SVReassembly(VppTestCase):
 
     def tearDown(self):
         super(TestIPv4SVReassembly, self).tearDown()
-        self.logger.debug(self.vapi.ppcli("show ip4-sv-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show ip4-sv-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
 
     def test_basic(self):
         """ basic reassembly """
@@ -560,9 +560,9 @@ class TestIPv4SVReassembly(VppTestCase):
         self.pg_enable_capture()
         self.src_if.add_stream(fragments[1])
         self.pg_start()
-        self.logger.debug(self.vapi.ppcli("show ip4-sv-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
-        self.logger.debug(self.vapi.ppcli("show trace"))
+        self.logger.debug(self.vclient.ppcli("show ip4-sv-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show trace"))
         self.dst_if.assert_nothing_captured()
 
         # send fragment #1 - reassembly is finished now and both fragments
@@ -570,9 +570,9 @@ class TestIPv4SVReassembly(VppTestCase):
         self.pg_enable_capture()
         self.src_if.add_stream(fragments[0])
         self.pg_start()
-        self.logger.debug(self.vapi.ppcli("show ip4-sv-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
-        self.logger.debug(self.vapi.ppcli("show trace"))
+        self.logger.debug(self.vclient.ppcli("show ip4-sv-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show trace"))
         c = self.dst_if.get_capture(2)
         for sent, recvd in zip([fragments[1], fragments[0]], c):
             self.assertEqual(sent[IP].src, recvd[IP].src)
@@ -605,7 +605,7 @@ class TestIPv4SVReassembly(VppTestCase):
              Raw(payload))
         fragments = fragment_rfc791(p, payload_len/4)
 
-        self.vapi.ip_reassembly_set(
+        self.vclient.ip_reassembly_set(
             timeout_ms=100, max_reassemblies=1000,
             max_reassembly_length=1000,
             expire_walk_interval_ms=50,
@@ -615,9 +615,9 @@ class TestIPv4SVReassembly(VppTestCase):
         self.pg_enable_capture()
         self.src_if.add_stream(fragments[0:2])
         self.pg_start()
-        self.logger.debug(self.vapi.ppcli("show ip4-sv-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
-        self.logger.debug(self.vapi.ppcli("show trace"))
+        self.logger.debug(self.vclient.ppcli("show ip4-sv-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show trace"))
         c = self.dst_if.get_capture(2)
         for sent, recvd in zip([fragments[1], fragments[0]], c):
             self.assertEqual(sent[IP].src, recvd[IP].src)
@@ -636,7 +636,7 @@ class TestIPv4SVReassembly(VppTestCase):
     def test_lru(self):
         """ reassembly reuses LRU element """
 
-        self.vapi.ip_reassembly_set(
+        self.vclient.ip_reassembly_set(
             timeout_ms=1000000, max_reassemblies=1,
             max_reassembly_length=1000,
             type=VppEnum.vl_api_ip_reass_type_t.IP_REASS_TYPE_SHALLOW_VIRTUAL,
@@ -688,9 +688,9 @@ class TestIPv4SVReassembly(VppTestCase):
         self.pg_enable_capture()
         self.src_if.add_stream(stream)
         self.pg_start()
-        self.logger.debug(self.vapi.ppcli("show ip4-sv-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
-        self.logger.debug(self.vapi.ppcli("show trace"))
+        self.logger.debug(self.vclient.ppcli("show ip4-sv-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show trace"))
         self.dst_if.get_capture(len(stream))
 
     def test_mixed(self):
@@ -773,13 +773,13 @@ class TestIPv4MWReassembly(VppTestCase):
         """ Test setup - force timeout on existing reassemblies """
         super(TestIPv4MWReassembly, self).setUp()
         for intf in self.send_ifs:
-            self.vapi.ip_reassembly_enable_disable(
+            self.vclient.ip_reassembly_enable_disable(
                 sw_if_index=intf.sw_if_index, enable_ip4=True)
-        self.vapi.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10)
         self.sleep(.25)
-        self.vapi.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10000)
 
@@ -787,8 +787,8 @@ class TestIPv4MWReassembly(VppTestCase):
         super(TestIPv4MWReassembly, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.ppcli("show ip4-full-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show ip4-full-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
 
     @classmethod
     def create_stream(cls, packet_sizes, packet_count=test_packet_count):
@@ -899,10 +899,10 @@ class TestIPv4MWReassembly(VppTestCase):
         for send_if in self.send_ifs:
             send_if.assert_nothing_captured()
 
-        self.logger.debug(self.vapi.ppcli("show trace"))
-        self.logger.debug(self.vapi.ppcli("show ip4-full-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
-        self.vapi.cli("clear trace")
+        self.logger.debug(self.vclient.ppcli("show trace"))
+        self.logger.debug(self.vclient.ppcli("show ip4-full-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
+        self.vclient.cli("clear trace")
 
         self.pg_enable_capture()
         self.send_packets(first_packets)
@@ -945,24 +945,24 @@ class TestIPv6Reassembly(VppTestCase):
     def setUp(self):
         """ Test setup - force timeout on existing reassemblies """
         super(TestIPv6Reassembly, self).setUp()
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.src_if.sw_if_index, enable_ip6=True)
-        self.vapi.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10, is_ip6=1)
         self.sleep(.25)
-        self.vapi.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10000, is_ip6=1)
-        self.logger.debug(self.vapi.ppcli("show ip6-full-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show ip6-full-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
 
     def tearDown(self):
         super(TestIPv6Reassembly, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.ppcli("show ip6-full-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show ip6-full-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
 
     @classmethod
     def create_stream(cls, packet_sizes, packet_count=test_packet_count):
@@ -1143,9 +1143,9 @@ class TestIPv6Reassembly(VppTestCase):
         error_cnt_str = \
             "/err/ip6-full-reassembly-feature/fragment chain too long (drop)"
 
-        error_cnt = self.statistics.get_err_counter(error_cnt_str)
+        error_cnt = self.vclient.statistics.get_err_counter(error_cnt_str)
 
-        self.vapi.ip_reassembly_set(timeout_ms=100, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=100, max_reassemblies=1000,
                                     max_reassembly_length=3,
                                     expire_walk_interval_ms=50, is_ip6=1)
 
@@ -1226,7 +1226,7 @@ class TestIPv6Reassembly(VppTestCase):
             index for (index, frags, _) in self.pkt_infos if len(frags) > 1
         )
 
-        self.vapi.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
                                     max_reassembly_length=3,
                                     expire_walk_interval_ms=10000, is_ip6=1)
 
@@ -1263,11 +1263,11 @@ class TestIPv6Reassembly(VppTestCase):
             index for (index, frags_400, _) in self.pkt_infos
             if len(frags_400) > 1)
 
-        self.vapi.ip_reassembly_set(timeout_ms=100, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=100, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=50)
 
-        self.vapi.ip_reassembly_set(timeout_ms=100, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=100, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=50, is_ip6=1)
 
@@ -1298,7 +1298,7 @@ class TestIPv6Reassembly(VppTestCase):
             index for (index, frags_400, _) in self.pkt_infos
             if len(frags_400) > 1)
 
-        self.vapi.ip_reassembly_set(timeout_ms=1000, max_reassemblies=0,
+        self.vclient.ip_reassembly_set(timeout_ms=1000, max_reassemblies=0,
                                     max_reassembly_length=3,
                                     expire_walk_interval_ms=10000, is_ip6=1)
 
@@ -1406,13 +1406,13 @@ class TestIPv6MWReassembly(VppTestCase):
         """ Test setup - force timeout on existing reassemblies """
         super(TestIPv6MWReassembly, self).setUp()
         for intf in self.send_ifs:
-            self.vapi.ip_reassembly_enable_disable(
+            self.vclient.ip_reassembly_enable_disable(
                 sw_if_index=intf.sw_if_index, enable_ip6=True)
-        self.vapi.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10, is_ip6=1)
         self.sleep(.25)
-        self.vapi.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=1000, is_ip6=1)
 
@@ -1420,8 +1420,8 @@ class TestIPv6MWReassembly(VppTestCase):
         super(TestIPv6MWReassembly, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.ppcli("show ip6-full-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show ip6-full-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
 
     @classmethod
     def create_stream(cls, packet_sizes, packet_count=test_packet_count):
@@ -1532,10 +1532,10 @@ class TestIPv6MWReassembly(VppTestCase):
         for send_if in self.send_ifs:
             send_if.assert_nothing_captured()
 
-        self.logger.debug(self.vapi.ppcli("show trace"))
-        self.logger.debug(self.vapi.ppcli("show ip6-full-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
-        self.vapi.cli("clear trace")
+        self.logger.debug(self.vclient.ppcli("show trace"))
+        self.logger.debug(self.vclient.ppcli("show ip6-full-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
+        self.vclient.cli("clear trace")
 
         self.pg_enable_capture()
         self.send_packets(first_packets)
@@ -1568,16 +1568,16 @@ class TestIPv6SVReassembly(VppTestCase):
     def setUp(self):
         """ Test setup - force timeout on existing reassemblies """
         super(TestIPv6SVReassembly, self).setUp()
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.src_if.sw_if_index, enable_ip6=True,
             type=VppEnum.vl_api_ip_reass_type_t.IP_REASS_TYPE_SHALLOW_VIRTUAL)
-        self.vapi.ip_reassembly_set(
+        self.vclient.ip_reassembly_set(
             timeout_ms=0, max_reassemblies=1000,
             max_reassembly_length=1000,
             type=VppEnum.vl_api_ip_reass_type_t.IP_REASS_TYPE_SHALLOW_VIRTUAL,
             expire_walk_interval_ms=10, is_ip6=1)
         self.sleep(.25)
-        self.vapi.ip_reassembly_set(
+        self.vclient.ip_reassembly_set(
             timeout_ms=1000000, max_reassemblies=1000,
             max_reassembly_length=1000,
             type=VppEnum.vl_api_ip_reass_type_t.IP_REASS_TYPE_SHALLOW_VIRTUAL,
@@ -1585,8 +1585,8 @@ class TestIPv6SVReassembly(VppTestCase):
 
     def tearDown(self):
         super(TestIPv6SVReassembly, self).tearDown()
-        self.logger.debug(self.vapi.ppcli("show ip6-sv-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show ip6-sv-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
 
     def test_basic(self):
         """ basic reassembly """
@@ -1607,9 +1607,9 @@ class TestIPv6SVReassembly(VppTestCase):
         self.pg_enable_capture()
         self.src_if.add_stream(fragments[1])
         self.pg_start()
-        self.logger.debug(self.vapi.ppcli("show ip6-sv-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
-        self.logger.debug(self.vapi.ppcli("show trace"))
+        self.logger.debug(self.vclient.ppcli("show ip6-sv-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show trace"))
         self.dst_if.assert_nothing_captured()
 
         # send fragment #1 - reassembly is finished now and both fragments
@@ -1617,9 +1617,9 @@ class TestIPv6SVReassembly(VppTestCase):
         self.pg_enable_capture()
         self.src_if.add_stream(fragments[0])
         self.pg_start()
-        self.logger.debug(self.vapi.ppcli("show ip6-sv-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
-        self.logger.debug(self.vapi.ppcli("show trace"))
+        self.logger.debug(self.vclient.ppcli("show ip6-sv-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show trace"))
         c = self.dst_if.get_capture(2)
         for sent, recvd in zip([fragments[1], fragments[0]], c):
             self.assertEqual(sent[IPv6].src, recvd[IPv6].src)
@@ -1651,7 +1651,7 @@ class TestIPv6SVReassembly(VppTestCase):
              Raw(payload))
         fragments = fragment_rfc8200(p, 1, payload_len/4)
 
-        self.vapi.ip_reassembly_set(
+        self.vclient.ip_reassembly_set(
             timeout_ms=100, max_reassemblies=1000,
             max_reassembly_length=1000,
             expire_walk_interval_ms=50,
@@ -1662,9 +1662,9 @@ class TestIPv6SVReassembly(VppTestCase):
         self.pg_enable_capture()
         self.src_if.add_stream(fragments[0:2])
         self.pg_start()
-        self.logger.debug(self.vapi.ppcli("show ip4-sv-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
-        self.logger.debug(self.vapi.ppcli("show trace"))
+        self.logger.debug(self.vclient.ppcli("show ip4-sv-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show trace"))
         c = self.dst_if.get_capture(2)
         for sent, recvd in zip([fragments[1], fragments[0]], c):
             self.assertEqual(sent[IPv6].src, recvd[IPv6].src)
@@ -1683,7 +1683,7 @@ class TestIPv6SVReassembly(VppTestCase):
     def test_lru(self):
         """ reassembly reuses LRU element """
 
-        self.vapi.ip_reassembly_set(
+        self.vclient.ip_reassembly_set(
             timeout_ms=1000000, max_reassemblies=1,
             max_reassembly_length=1000,
             type=VppEnum.vl_api_ip_reass_type_t.IP_REASS_TYPE_SHALLOW_VIRTUAL,
@@ -1745,11 +1745,11 @@ class TestIPv4ReassemblyLocalNode(VppTestCase):
     def setUp(self):
         """ Test setup - force timeout on existing reassemblies """
         super(TestIPv4ReassemblyLocalNode, self).setUp()
-        self.vapi.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10)
         self.sleep(.25)
-        self.vapi.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10000)
 
@@ -1757,8 +1757,8 @@ class TestIPv4ReassemblyLocalNode(VppTestCase):
         super(TestIPv4ReassemblyLocalNode, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.ppcli("show ip4-full-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show ip4-full-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
 
     @classmethod
     def create_stream(cls, packet_count=test_packet_count):
@@ -1872,23 +1872,23 @@ class TestFIFReassembly(VppTestCase):
     def setUp(self):
         """ Test setup - force timeout on existing reassemblies """
         super(TestFIFReassembly, self).setUp()
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.src_if.sw_if_index, enable_ip4=True,
             enable_ip6=True)
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.dst_if.sw_if_index, enable_ip4=True,
             enable_ip6=True)
-        self.vapi.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10)
-        self.vapi.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=0, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10, is_ip6=1)
         self.sleep(.25)
-        self.vapi.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10000)
-        self.vapi.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
+        self.vclient.ip_reassembly_set(timeout_ms=1000000, max_reassemblies=1000,
                                     max_reassembly_length=1000,
                                     expire_walk_interval_ms=10000, is_ip6=1)
 
@@ -1896,9 +1896,9 @@ class TestFIFReassembly(VppTestCase):
         super(TestFIFReassembly, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.debug(self.vapi.ppcli("show ip4-full-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show ip6-full-reassembly details"))
-        self.logger.debug(self.vapi.ppcli("show buffers"))
+        self.logger.debug(self.vclient.ppcli("show ip4-full-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show ip6-full-reassembly details"))
+        self.logger.debug(self.vclient.ppcli("show buffers"))
 
     def verify_capture(self, capture, ip_class, dropped_packet_indexes=[]):
         """Verify captured packet stream.
@@ -1944,15 +1944,15 @@ class TestFIFReassembly(VppTestCase):
         # it shared for multiple test cases
         self.tun_ip4 = "1.1.1.2"
 
-        self.gre4 = VppGreInterface(self, self.src_if.local_ip4, self.tun_ip4)
+        self.gre4 = VppGreInterface(self.vclient, self.src_if.local_ip4, self.tun_ip4)
         self.gre4.add_vpp_config()
         self.gre4.admin_up()
         self.gre4.config_ip4()
 
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.gre4.sw_if_index, enable_ip4=True)
 
-        self.route4 = VppIpRoute(self, self.tun_ip4, 32,
+        self.route4 = VppIpRoute(self.vclient, self.tun_ip4, 32,
                                  [VppRoutePath(self.src_if.remote_ip4,
                                                self.src_if.sw_if_index)])
         self.route4.add_vpp_config()
@@ -1999,7 +1999,7 @@ class TestFIFReassembly(VppTestCase):
         # TODO remove gre vpp config by hand until VppIpRoute gets fixed
         # so that it's query_vpp_config() works as it should
         self.gre4.remove_vpp_config()
-        self.logger.debug(self.vapi.ppcli("show interface"))
+        self.logger.debug(self.vclient.ppcli("show interface"))
 
     def test_fif6(self):
         """ Fragments in fragments (6o6) """
@@ -2009,15 +2009,15 @@ class TestFIFReassembly(VppTestCase):
         # it shared for multiple test cases
         self.tun_ip6 = "1002::1"
 
-        self.gre6 = VppGreInterface(self, self.src_if.local_ip6, self.tun_ip6)
+        self.gre6 = VppGreInterface(self.vclient, self.src_if.local_ip6, self.tun_ip6)
         self.gre6.add_vpp_config()
         self.gre6.admin_up()
         self.gre6.config_ip6()
 
-        self.vapi.ip_reassembly_enable_disable(
+        self.vclient.ip_reassembly_enable_disable(
             sw_if_index=self.gre6.sw_if_index, enable_ip6=True)
 
-        self.route6 = VppIpRoute(self, self.tun_ip6, 128,
+        self.route6 = VppIpRoute(self.vclient, self.tun_ip6, 128,
                                  [VppRoutePath(
                                      self.src_if.remote_ip6,
                                      self.src_if.sw_if_index)])
diff --git a/test/test_session.py b/test/test_session.py
index 309bf6e32..e7f4e71ca 100644
--- a/test/test_session.py
+++ b/test/test_session.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 class TestSession(VppTestCase):
@@ -20,7 +20,7 @@ class TestSession(VppTestCase):
     def setUp(self):
         super(TestSession, self).setUp()
 
-        self.vapi.session_enable_disable(is_enabled=1)
+        self.vclient.session_enable_disable(is_enabled=1)
         self.create_loopback_interfaces(2)
 
         table_id = 0
@@ -29,7 +29,7 @@ class TestSession(VppTestCase):
             i.admin_up()
 
             if table_id != 0:
-                tbl = VppIpTable(self, table_id)
+                tbl = VppIpTable(self.vclient, table_id)
                 tbl.add_vpp_config()
 
             i.set_table_ip4(table_id)
@@ -37,9 +37,9 @@ class TestSession(VppTestCase):
             table_id += 1
 
         # Configure namespaces
-        self.vapi.app_namespace_add_del(namespace_id="0",
+        self.vclient.app_namespace_add_del(namespace_id="0",
                                         sw_if_index=self.loop0.sw_if_index)
-        self.vapi.app_namespace_add_del(namespace_id="1",
+        self.vclient.app_namespace_add_del(namespace_id="1",
                                         sw_if_index=self.loop1.sw_if_index)
 
     def tearDown(self):
@@ -49,17 +49,17 @@ class TestSession(VppTestCase):
             i.admin_down()
 
         super(TestSession, self).tearDown()
-        self.vapi.session_enable_disable(is_enabled=1)
+        self.vclient.session_enable_disable(is_enabled=1)
 
     def test_segment_manager_alloc(self):
         """ Session Segment Manager Multiple Segment Allocation """
 
         # Add inter-table routes
-        ip_t01 = VppIpRoute(self, self.loop1.local_ip4, 32,
+        ip_t01 = VppIpRoute(self.vclient, self.loop1.local_ip4, 32,
                             [VppRoutePath("0.0.0.0",
                                           0xffffffff,
                                           nh_table_id=1)])
-        ip_t10 = VppIpRoute(self, self.loop0.local_ip4, 32,
+        ip_t10 = VppIpRoute(self.vclient, self.loop0.local_ip4, 32,
                             [VppRoutePath("0.0.0.0",
                                           0xffffffff,
                                           nh_table_id=0)], table_id=1)
@@ -68,13 +68,13 @@ class TestSession(VppTestCase):
 
         # Start builtin server and client with small private segments
         uri = "tcp://" + self.loop0.local_ip4 + "/1234"
-        error = self.vapi.cli("test echo server appns 0 fifo-size 64 " +
+        error = self.vclient.cli("test echo server appns 0 fifo-size 64 " +
                               "private-segment-size 1m uri " + uri)
         if error:
             self.logger.critical(error)
             self.assertNotIn("failed", error)
 
-        error = self.vapi.cli("test echo client nclients 100 appns 1 " +
+        error = self.vclient.cli("test echo client nclients 100 appns 1 " +
                               "no-output fifo-size 64 syn-timeout 2 " +
                               "private-segment-size 1m uri " + uri)
         if error:
@@ -102,11 +102,11 @@ class TestSessionUnitTests(VppTestCase):
 
     def setUp(self):
         super(TestSessionUnitTests, self).setUp()
-        self.vapi.session_enable_disable(is_enabled=1)
+        self.vclient.session_enable_disable(is_enabled=1)
 
     def test_session(self):
         """ Session Unit Tests """
-        error = self.vapi.cli("test session all")
+        error = self.vclient.cli("test session all")
 
         if error:
             self.logger.critical(error)
@@ -114,7 +114,7 @@ class TestSessionUnitTests(VppTestCase):
 
     def tearDown(self):
         super(TestSessionUnitTests, self).tearDown()
-        self.vapi.session_enable_disable(is_enabled=0)
+        self.vclient.session_enable_disable(is_enabled=0)
 
 
 class TestSvmFifoUnitTests(VppTestCase):
@@ -137,7 +137,7 @@ class TestSvmFifoUnitTests(VppTestCase):
 
     def test_svm_fifo(self):
         """ SVM Fifo Unit Tests """
-        error = self.vapi.cli("test svm fifo all")
+        error = self.vclient.cli("test svm fifo all")
 
         if error:
             self.logger.critical(error)
diff --git a/test/test_sixrd.py b/test/test_sixrd.py
index 24ff74b8d..d426f9950 100644
--- a/test/test_sixrd.py
+++ b/test/test_sixrd.py
@@ -6,8 +6,8 @@ from scapy.layers.inet import IP, UDP, Ether
 from scapy.layers.inet6 import IPv6
 from scapy.packet import Raw
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable, FibPathProto
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable, FibPathProto
 from socket import AF_INET, AF_INET6, inet_pton
 
 """ Test6rd is a subclass of  VPPTestCase classes.
@@ -32,8 +32,8 @@ class Test6RD(VppTestCase):
 
     def setUp(self):
         super(Test6RD, self).setUp()
-        t4 = VppIpTable(self, 10)
-        t6 = VppIpTable(self, 20, True)
+        t4 = VppIpTable(self.vclient, 10)
+        t6 = VppIpTable(self.vclient, 20, True)
 
         t4.add_vpp_config()
         t6.add_vpp_config()
@@ -89,7 +89,7 @@ class Test6RD(VppTestCase):
         p_ether = Ether(src=self.pg0.remote_mac, dst=self.pg0.local_mac)
         p_ip6 = IPv6(src="1::1", dst="2002:AC10:0202::1", nh='UDP')
 
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=0,
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=0,
                                            ip4_table_id=0,
                                            ip6_prefix='2002::/16',
                                            ip4_prefix='0.0.0.0/0',
@@ -98,7 +98,7 @@ class Test6RD(VppTestCase):
 
         self.tunnel_index = rv.sw_if_index
 
-        self.vapi.cli("show ip6 fib")
+        self.vclient.cli("show ip6 fib")
         p_payload = UDP(sport=1234, dport=1234)
         p = (p_ether / p_ip6 / p_payload)
 
@@ -119,21 +119,21 @@ class Test6RD(VppTestCase):
                       proto='ipv6') / p_ip6)
 
         rx = self.send_and_assert_no_replies(self.pg0, p * 10)
-        self.vapi.ipip_6rd_del_tunnel(self.tunnel_index)
+        self.vclient.ipip_6rd_del_tunnel(self.tunnel_index)
 
     def test_6rd_ip6_to_ip4_vrf(self):
         """ ip6 -> ip4 (encap) 6rd VRF test """
         p_ether = Ether(src=self.pg2.remote_mac, dst=self.pg2.local_mac)
         p_ip6 = IPv6(src="1::1", dst="2002:AC10:0402::1", nh='UDP')
 
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=20, ip4_table_id=10,
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=20, ip4_table_id=10,
                                            ip6_prefix='2002::/16',
                                            ip4_prefix='0.0.0.0/0',
                                            ip4_src=self.pg2.local_ip4,
                                            security_check=True)
         self.tunnel_index = rv.sw_if_index
 
-        self.vapi.cli("show ip6 fib")
+        self.vclient.cli("show ip6 fib")
         p_payload = UDP(sport=1234, dport=1234)
         p = (p_ether / p_ip6 / p_payload)
 
@@ -154,20 +154,20 @@ class Test6RD(VppTestCase):
                       proto='ipv6') / p_ip6)
 
         rx = self.send_and_assert_no_replies(self.pg0, p * 10)
-        self.vapi.ipip_6rd_del_tunnel(self.tunnel_index)
+        self.vclient.ipip_6rd_del_tunnel(self.tunnel_index)
 
     def test_6rd_ip4_to_ip6(self):
         """ ip4 -> ip6 (decap) 6rd test """
 
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=0,
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=0,
                                            ip4_table_id=0,
                                            ip6_prefix='2002::/16',
                                            ip4_prefix='0.0.0.0/0',
                                            ip4_src=self.pg0.local_ip4,
                                            security_check=True)
         self.tunnel_index = rv.sw_if_index
-        rv = self.vapi.ipip_6rd_del_tunnel(rv.sw_if_index)
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=0,
+        rv = self.vclient.ipip_6rd_del_tunnel(rv.sw_if_index)
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=0,
                                            ip4_table_id=0,
                                            ip6_prefix='2002::/16',
                                            ip4_prefix='0.0.0.0/0',
@@ -188,27 +188,27 @@ class Test6RD(VppTestCase):
         rx = self.send_and_expect(self.pg0, p * 10, self.pg1)
         for p in rx:
             self.validate_4in6(p, p_reply)
-        self.vapi.ipip_6rd_del_tunnel(self.tunnel_index)
+        self.vclient.ipip_6rd_del_tunnel(self.tunnel_index)
 
     def test_6rd_ip4_to_ip6_vrf(self):
         """ ip4 -> ip6 (decap) 6rd VRF test """
 
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=20,
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=20,
                                            ip4_table_id=10,
                                            ip6_prefix='2002::/16',
                                            ip4_prefix='0.0.0.0/0',
                                            ip4_src=self.pg2.local_ip4,
                                            security_check=True)
         self.tunnel_index = rv.sw_if_index
-        rv = self.vapi.ipip_6rd_del_tunnel(rv.sw_if_index)
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=20,
+        rv = self.vclient.ipip_6rd_del_tunnel(rv.sw_if_index)
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=20,
                                            ip4_table_id=10,
                                            ip6_prefix='2002::/16',
                                            ip4_prefix='0.0.0.0/0',
                                            ip4_src=self.pg2.local_ip4,
                                            security_check=True)
         self.tunnel_index = rv.sw_if_index
-        self.vapi.sw_interface_set_table(self.tunnel_index, 1, 20)
+        self.vclient.sw_interface_set_table(self.tunnel_index, 1, 20)
 
         p_ip6 = (IPv6(src="2002:AC10:0402::1", dst=self.pg3.remote_ip6) /
                  UDP(sport=1234, dport=1234))
@@ -223,21 +223,21 @@ class Test6RD(VppTestCase):
         rx = self.send_and_expect(self.pg2, p * 10, self.pg3)
         for p in rx:
             self.validate_4in6(p, p_reply)
-        self.vapi.sw_interface_set_table(self.tunnel_index, 1, 0)
-        self.vapi.ipip_6rd_del_tunnel(self.tunnel_index)
+        self.vclient.sw_interface_set_table(self.tunnel_index, 1, 0)
+        self.vclient.ipip_6rd_del_tunnel(self.tunnel_index)
 
     def test_6rd_ip4_to_ip6_multiple(self):
         """ ip4 -> ip6 (decap) 6rd test """
 
         self.tunnel_index = []
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=0,
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=0,
                                            ip4_table_id=0,
                                            ip6_prefix='2002::/16',
                                            ip4_prefix='0.0.0.0/0',
                                            ip4_src=self.pg0.local_ip4,
                                            security_check=True)
         self.tunnel_index.append(rv.sw_if_index)
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=0,
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=0,
                                            ip4_table_id=0,
                                            ip6_prefix='2003::/16',
                                            ip4_prefix='0.0.0.0/0',
@@ -246,7 +246,7 @@ class Test6RD(VppTestCase):
 
         self.tunnel_index.append(rv.sw_if_index)
 
-        self.vapi.cli("show ip6 fib")
+        self.vclient.cli("show ip6 fib")
         p_ether = Ether(src=self.pg0.remote_mac, dst=self.pg0.local_mac)
         p_ip4 = IP(src=self.pg1.remote_ip4, dst=self.pg0.local_ip4)
         p_ip6_1 = (IPv6(src="2002:AC10:0202::1", dst=self.pg1.remote_ip6) /
@@ -264,12 +264,12 @@ class Test6RD(VppTestCase):
         for p in rx:
             self.validate_4in6(p, p_ip6_2)
         for i in self.tunnel_index:
-            self.vapi.ipip_6rd_del_tunnel(i)
+            self.vclient.ipip_6rd_del_tunnel(i)
 
     def test_6rd_ip4_to_ip6_suffix(self):
         """ ip4 -> ip6 (decap) 6rd test """
 
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=0,
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=0,
                                            ip4_table_id=0,
                                            ip6_prefix='2002::/16',
                                            ip4_prefix='172.0.0.0/8',
@@ -277,7 +277,7 @@ class Test6RD(VppTestCase):
                                            security_check=True)
         self.tunnel_index = rv.sw_if_index
 
-        self.vapi.cli("show ip6 fib")
+        self.vclient.cli("show ip6 fib")
         p_ether = Ether(src=self.pg0.remote_mac, dst=self.pg0.local_mac)
         p_ip4 = IP(src=self.pg1.remote_ip4, dst=self.pg0.local_ip4)
         p_ip6 = (IPv6(src="2002:1002:0200::1", dst=self.pg1.remote_ip6) /
@@ -287,12 +287,12 @@ class Test6RD(VppTestCase):
         rx = self.send_and_expect(self.pg0, p * 10, self.pg1)
         for p in rx:
             self.validate_4in6(p, p_ip6)
-        self.vapi.ipip_6rd_del_tunnel(self.tunnel_index)
+        self.vclient.ipip_6rd_del_tunnel(self.tunnel_index)
 
     def test_6rd_ip4_to_ip6_sec_check(self):
         """ ip4 -> ip6 (decap) security check 6rd test """
 
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=0,
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=0,
                                            ip4_table_id=0,
                                            ip6_prefix='2002::/16',
                                            ip4_prefix='0.0.0.0/0',
@@ -300,7 +300,7 @@ class Test6RD(VppTestCase):
                                            security_check=True)
         self.tunnel_index = rv.sw_if_index
 
-        self.vapi.cli("show ip6 fib")
+        self.vclient.cli("show ip6 fib")
         p_ip6 = (IPv6(src="2002:AC10:0202::1", dst=self.pg1.remote_ip6) /
                  UDP(sport=1234, dport=1234))
         p_ip6_fail = (IPv6(src="2002:DEAD:0202::1", dst=self.pg1.remote_ip6) /
@@ -322,12 +322,12 @@ class Test6RD(VppTestCase):
              IP(src=self.pg1.remote_ip4, dst=self.pg0.local_ip4) /
              p_ip6_fail)
         rx = self.send_and_assert_no_replies(self.pg0, p * 10)
-        self.vapi.ipip_6rd_del_tunnel(self.tunnel_index)
+        self.vclient.ipip_6rd_del_tunnel(self.tunnel_index)
 
     def test_6rd_bgp_tunnel(self):
         """ 6rd BGP tunnel """
 
-        rv = self.vapi.ipip_6rd_add_tunnel(ip6_table_id=0,
+        rv = self.vclient.ipip_6rd_add_tunnel(ip6_table_id=0,
                                            ip4_table_id=0,
                                            ip6_prefix='2002::/16',
                                            ip4_prefix='0.0.0.0/0',
@@ -336,12 +336,12 @@ class Test6RD(VppTestCase):
 
         self.tunnel_index = rv.sw_if_index
 
-        default_route = VppIpRoute(self, "DEAD::", 16,
+        default_route = VppIpRoute(self.vclient, "DEAD::", 16,
                                    [VppRoutePath("2002:0808:0808::",
                                                  self.tunnel_index)])
         default_route.add_vpp_config()
 
-        ip4_route = VppIpRoute(self, "8.0.0.0", 8,
+        ip4_route = VppIpRoute(self.vclient, "8.0.0.0", 8,
                                [VppRoutePath(self.pg1.remote_ip4, 0xFFFFFFFF)])
         ip4_route.add_vpp_config()
 
@@ -374,7 +374,7 @@ class Test6RD(VppTestCase):
             self.validate_4in6(p, p_reply)
         ip4_route.remove_vpp_config()
         default_route.remove_vpp_config()
-        self.vapi.ipip_6rd_del_tunnel(self.tunnel_index)
+        self.vclient.ipip_6rd_del_tunnel(self.tunnel_index)
 
 
 if __name__ == '__main__':
diff --git a/test/test_span.py b/test/test_span.py
index ecefe1537..78c07fb33 100644
--- a/test/test_span.py
+++ b/test/test_span.py
@@ -8,10 +8,10 @@ from scapy.layers.inet import IP, UDP
 from scapy.layers.vxlan import VXLAN
 
 from framework import VppTestCase, VppTestRunner
-from util import Host, ppp
-from vpp_sub_interface import L2_VTR_OP, VppDot1QSubint, VppDot1ADSubint
-from vpp_gre_interface import VppGreInterface
-from vpp_vxlan_tunnel import VppVxlanTunnel
+from vpp_pom.util import Host, ppp
+from vpp_pom.vpp_sub_interface import L2_VTR_OP, VppDot1QSubint, VppDot1ADSubint
+from vpp_pom.vpp_gre_interface import VppGreInterface
+from vpp_pom.vpp_vxlan_tunnel import VppVxlanTunnel
 from collections import namedtuple
 from vpp_papi import VppEnum
 
@@ -33,11 +33,11 @@ class TestSpan(VppTestCase):
         cls.create_pg_interfaces(range(3))
 
         cls.bd_id = 55
-        cls.sub_if = VppDot1QSubint(cls, cls.pg0, 100)
-        cls.vlan_sub_if = VppDot1QSubint(cls, cls.pg2, 300)
+        cls.sub_if = VppDot1QSubint(cls.vclient, cls.pg0, 100)
+        cls.vlan_sub_if = VppDot1QSubint(cls.vclient, cls.pg2, 300)
         cls.vlan_sub_if.set_vtr(L2_VTR_OP.L2_POP_1, tag=300)
 
-        cls.qinq_sub_if = VppDot1ADSubint(cls, cls.pg2, 33, 400, 500)
+        cls.qinq_sub_if = VppDot1ADSubint(cls.vclient, cls.pg2, 33, 400, 500)
         cls.qinq_sub_if.set_vtr(L2_VTR_OP.L2_POP_2, outer=500, inner=400)
 
         # packet flows mapping pg0 -> pg1, pg2 -> pg3, etc.
@@ -56,7 +56,7 @@ class TestSpan(VppTestCase):
 
     def setUp(self):
         super(TestSpan, self).setUp()
-        self.vxlan = VppVxlanTunnel(self, src=self.pg2.local_ip4,
+        self.vxlan = VppVxlanTunnel(self.vclient, src=self.pg2.local_ip4,
                                     dst=self.pg2.remote_ip4, vni=1111)
         self.vxlan.add_vpp_config()
         self.reset_packet_infos()
@@ -65,14 +65,14 @@ class TestSpan(VppTestCase):
         super(TestSpan, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show interface span"))
+        self.logger.info(self.vclient.ppcli("show interface span"))
 
     def xconnect(self, a, b, is_add=1):
-        self.vapi.sw_interface_set_l2_xconnect(a, b, enable=is_add)
-        self.vapi.sw_interface_set_l2_xconnect(b, a, enable=is_add)
+        self.vclient.sw_interface_set_l2_xconnect(a, b, enable=is_add)
+        self.vclient.sw_interface_set_l2_xconnect(b, a, enable=is_add)
 
     def bridge(self, sw_if_index, is_add=1):
-        self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=sw_if_index,
+        self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=sw_if_index,
                                              bd_id=self.bd_id, enable=is_add)
 
     def _remove_tag(self, packet, vlan, tag_type):
@@ -175,10 +175,10 @@ class TestSpan(VppTestCase):
         self.pg0.add_stream(pkts)
 
         # Enable SPAN on pg0 (mirrored to pg2)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.pg0.sw_if_index, self.pg2.sw_if_index)
 
-        self.logger.info(self.vapi.ppcli("show interface span"))
+        self.logger.info(self.vclient.ppcli("show interface span"))
         # Enable packet capturing and start packet sending
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -189,7 +189,7 @@ class TestSpan(VppTestCase):
         pg2_pkts = self.pg2.get_capture(n_pkts)
 
         # Disable SPAN on pg0 (mirrored to pg2)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.pg0.sw_if_index, self.pg2.sw_if_index, state=0)
         self.xconnect(self.pg0.sw_if_index, self.pg1.sw_if_index, is_add=0)
 
@@ -209,10 +209,10 @@ class TestSpan(VppTestCase):
         self.pg0.add_stream(pkts)
 
         # Enable SPAN on pg0 (mirrored to pg2)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.pg2.sw_if_index, is_l2=1)
 
-        self.logger.info(self.vapi.ppcli("show interface span"))
+        self.logger.info(self.vclient.ppcli("show interface span"))
         # Enable packet capturing and start packet sending
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -224,7 +224,7 @@ class TestSpan(VppTestCase):
         self.bridge(self.pg2.sw_if_index, is_add=0)
 
         # Disable SPAN on pg0 (mirrored to pg2)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.pg2.sw_if_index, state=0, is_l2=1)
         self.xconnect(self.sub_if.sw_if_index, self.pg1.sw_if_index, is_add=0)
 
@@ -234,7 +234,7 @@ class TestSpan(VppTestCase):
         """ SPAN l2 rx mirror into vxlan """
 
         self.sub_if.admin_up()
-        self.vapi.sw_interface_set_flags(self.vxlan.sw_if_index,
+        self.vclient.sw_interface_set_flags(self.vxlan.sw_if_index,
                                          flags=1)
 
         self.bridge(self.vxlan.sw_if_index, is_add=1)
@@ -246,10 +246,10 @@ class TestSpan(VppTestCase):
         self.pg0.add_stream(pkts)
 
         # Enable SPAN on pg0 sub if (mirrored to vxlan)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.vxlan.sw_if_index, is_l2=1)
 
-        self.logger.info(self.vapi.ppcli("show interface span"))
+        self.logger.info(self.vclient.ppcli("show interface span"))
         # Enable packet capturing and start packet sending
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -261,7 +261,7 @@ class TestSpan(VppTestCase):
 
         self.bridge(self.vxlan.sw_if_index, is_add=0)
         # Disable SPAN on pg0 sub if (mirrored to vxlan)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.vxlan.sw_if_index, state=0, is_l2=1)
         self.xconnect(self.sub_if.sw_if_index, self.pg1.sw_if_index, is_add=0)
         self.verify_capture(pg1_pkts, pg2_pkts)
@@ -271,7 +271,7 @@ class TestSpan(VppTestCase):
 
         self.sub_if.admin_up()
 
-        gre_if = VppGreInterface(self, self.pg2.local_ip4,
+        gre_if = VppGreInterface(self.vclient, self.pg2.local_ip4,
                                  self.pg2.remote_ip4,
                                  session=543,
                                  type=(VppEnum.vl_api_gre_tunnel_type_t.
@@ -290,7 +290,7 @@ class TestSpan(VppTestCase):
         self.pg0.add_stream(pkts)
 
         # Enable SPAN on pg0 sub if (mirrored to gre-erspan)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, gre_if.sw_if_index, is_l2=1)
 
         # Enable packet capturing and start packet sending
@@ -308,7 +308,7 @@ class TestSpan(VppTestCase):
         self.bridge(gre_if.sw_if_index, is_add=0)
 
         # Disable SPAN on pg0 sub if
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, gre_if.sw_if_index, state=0, is_l2=1)
         gre_if.remove_vpp_config()
         self.xconnect(self.sub_if.sw_if_index, self.pg1.sw_if_index, is_add=0)
@@ -320,7 +320,7 @@ class TestSpan(VppTestCase):
 
         self.sub_if.admin_up()
 
-        gre_if = VppGreInterface(self, self.pg2.local_ip4,
+        gre_if = VppGreInterface(self.vclient, self.pg2.local_ip4,
                                  self.pg2.remote_ip4,
                                  type=(VppEnum.vl_api_gre_tunnel_type_t.
                                        GRE_API_TUNNEL_TYPE_TEB))
@@ -328,7 +328,7 @@ class TestSpan(VppTestCase):
         gre_if.add_vpp_config()
         gre_if.admin_up()
 
-        gre_sub_if = VppDot1QSubint(self, gre_if, 500)
+        gre_sub_if = VppDot1QSubint(self.vclient, gre_if, 500)
         gre_sub_if.set_vtr(L2_VTR_OP.L2_POP_1, tag=500)
         gre_sub_if.admin_up()
 
@@ -342,7 +342,7 @@ class TestSpan(VppTestCase):
         self.pg0.add_stream(pkts)
 
         # Enable SPAN on pg0 sub if (mirrored to gre sub if)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, gre_sub_if.sw_if_index, is_l2=1)
 
         # Enable packet capturing and start packet sending
@@ -361,7 +361,7 @@ class TestSpan(VppTestCase):
         self.bridge(gre_sub_if.sw_if_index, is_add=0)
 
         # Disable SPAN on pg0 sub if
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, gre_sub_if.sw_if_index, state=0, is_l2=1)
         gre_if.remove_vpp_config()
         self.xconnect(self.sub_if.sw_if_index, self.pg1.sw_if_index, is_add=0)
@@ -383,7 +383,7 @@ class TestSpan(VppTestCase):
             self.pg0, self.pg_if_packet_sizes, do_dot1=True)
         self.pg0.add_stream(pkts)
 
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.vlan_sub_if.sw_if_index, is_l2=1)
 
         # Enable packet capturing and start packet sending
@@ -399,7 +399,7 @@ class TestSpan(VppTestCase):
 
         self.bridge(self.vlan_sub_if.sw_if_index, is_add=0)
         # Disable SPAN on pg0 sub if (mirrored to vxlan)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.vlan_sub_if.sw_if_index, state=0,
             is_l2=1)
         self.xconnect(self.sub_if.sw_if_index, self.pg1.sw_if_index, is_add=0)
@@ -421,7 +421,7 @@ class TestSpan(VppTestCase):
             self.pg0, self.pg_if_packet_sizes, do_dot1=True)
         self.pg0.add_stream(pkts)
 
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.qinq_sub_if.sw_if_index, is_l2=1)
 
         # Enable packet capturing and start packet sending
@@ -438,7 +438,7 @@ class TestSpan(VppTestCase):
 
         self.bridge(self.qinq_sub_if.sw_if_index, is_add=0)
         # Disable SPAN on pg0 sub if (mirrored to vxlan)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.qinq_sub_if.sw_if_index, state=0,
             is_l2=1)
         self.xconnect(self.sub_if.sw_if_index, self.pg1.sw_if_index, is_add=0)
@@ -458,10 +458,10 @@ class TestSpan(VppTestCase):
         self.pg0.add_stream(pkts)
 
         # Enable SPAN on pg1 (mirrored to pg2)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.pg1.sw_if_index, self.pg2.sw_if_index, is_l2=1, state=2)
 
-        self.logger.info(self.vapi.ppcli("show interface span"))
+        self.logger.info(self.vclient.ppcli("show interface span"))
         # Enable packet capturing and start packet sending
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
@@ -472,7 +472,7 @@ class TestSpan(VppTestCase):
         pg2_pkts = self.pg2.get_capture(n_pkts)
         self.bridge(self.pg2.sw_if_index, is_add=0)
         # Disable SPAN on pg0 (mirrored to pg2)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.pg1.sw_if_index, self.pg2.sw_if_index, state=0, is_l2=1)
         self.xconnect(self.sub_if.sw_if_index, self.pg1.sw_if_index, is_add=0)
 
@@ -495,9 +495,9 @@ class TestSpan(VppTestCase):
         self.pg1.add_stream(pg1_pkts)
 
         # Enable SPAN on pg0 (mirrored to pg2)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.pg2.sw_if_index, is_l2=1, state=3)
-        self.logger.info(self.vapi.ppcli("show interface span"))
+        self.logger.info(self.vclient.ppcli("show interface span"))
 
         # Enable packet capturing and start packet sending
         self.pg_enable_capture(self.pg_interfaces)
@@ -514,7 +514,7 @@ class TestSpan(VppTestCase):
 
         self.bridge(self.pg2.sw_if_index, is_add=0)
         # Disable SPAN on pg0 (mirrored to pg2)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.pg2.sw_if_index, state=0, is_l2=1)
         self.xconnect(self.sub_if.sw_if_index, self.pg1.sw_if_index, is_add=0)
 
@@ -527,9 +527,9 @@ class TestSpan(VppTestCase):
         self.bridge(self.pg2.sw_if_index)
 
         # Create bi-directional cross-connects between pg0 and pg1
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.sub_if.sw_if_index, bd_id=99, enable=1)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg1.sw_if_index, bd_id=99, enable=1)
 
         # Create incoming packet streams for packet-generator interfaces
@@ -541,9 +541,9 @@ class TestSpan(VppTestCase):
         self.pg1.add_stream(pg1_pkts)
 
         # Enable SPAN on pg0 (mirrored to pg2)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.pg2.sw_if_index, is_l2=1, state=3)
-        self.logger.info(self.vapi.ppcli("show interface span"))
+        self.logger.info(self.vclient.ppcli("show interface span"))
 
         # Enable packet capturing and start packet sending
         self.pg_enable_capture(self.pg_interfaces)
@@ -559,12 +559,12 @@ class TestSpan(VppTestCase):
         pg2_pkts = self.pg2.get_capture(pg2_expected)
 
         self.bridge(self.pg2.sw_if_index, is_add=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.sub_if.sw_if_index, bd_id=99, enable=0)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg1.sw_if_index, bd_id=99, enable=0)
         # Disable SPAN on pg0 (mirrored to pg2)
-        self.vapi.sw_interface_span_enable_disable(
+        self.vclient.sw_interface_span_enable_disable(
             self.sub_if.sw_if_index, self.pg2.sw_if_index, state=0, is_l2=1)
 
         self.verify_capture(pg0_pkts + pg1_pkts, pg2_pkts)
diff --git a/test/test_sparse_vec.py b/test/test_sparse_vec.py
index a683faefd..cca933a29 100644
--- a/test/test_sparse_vec.py
+++ b/test/test_sparse_vec.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 class TestSparseVec(VppTestCase):
@@ -25,7 +25,7 @@ class TestSparseVec(VppTestCase):
 
     def test_string_unittest(self):
         """ SparseVec unit tests """
-        error = self.vapi.cli("test sparse_vec")
+        error = self.vclient.cli("test sparse_vec")
         if error.find("failed") != -1:
             self.logger.critical("FAILURE in the sparse_vec test")
         self.assertNotIn("failed", error)
diff --git a/test/test_srmpls.py b/test/test_srmpls.py
index b9abeaeff..62f93b20c 100644
--- a/test/test_srmpls.py
+++ b/test/test_srmpls.py
@@ -4,10 +4,10 @@ import unittest
 import socket
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip import DpoProto
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppMplsRoute, \
+from vpp_pom.vpp_ip import DpoProto
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppMplsRoute, \
     VppIpTable, VppMplsTable, VppMplsLabel
-from vpp_mpls_tunnel_interface import VppMPLSTunnelInterface
+from vpp_pom.vpp_mpls_tunnel_interface import VppMPLSTunnelInterface
 
 from scapy.packet import Raw
 from scapy.layers.l2 import Ether
@@ -68,7 +68,7 @@ class TestSRMPLS(VppTestCase):
         table_id = 0
         self.tables = []
 
-        tbl = VppMplsTable(self, 0)
+        tbl = VppMplsTable(self.vclient, 0)
         tbl.add_vpp_config()
         self.tables.append(tbl)
 
@@ -157,7 +157,7 @@ class TestSRMPLS(VppTestCase):
         #
         # A simple MPLS xconnect - neos label in label out
         #
-        route_32_eos = VppMplsRoute(self, 32, 0,
+        route_32_eos = VppMplsRoute(self.vclient, 32, 0,
                                     [VppRoutePath(self.pg0.remote_ip4,
                                                   self.pg0.sw_if_index,
                                                   labels=[VppMplsLabel(32)])])
@@ -166,12 +166,12 @@ class TestSRMPLS(VppTestCase):
         #
         # A binding SID with only one label
         #
-        self.vapi.sr_mpls_policy_add(999, 1, 0, [32])
+        self.vclient.sr_mpls_policy_add(999, 1, 0, [32])
 
         #
         # A labeled IP route that resolves thru the binding SID
         #
-        ip_10_0_0_1 = VppIpRoute(self, "10.0.0.1", 32,
+        ip_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.1", 32,
                                  [VppRoutePath("0.0.0.0",
                                                0xffffffff,
                                                nh_via_label=999,
@@ -187,7 +187,7 @@ class TestSRMPLS(VppTestCase):
         #
         # An unlabeled IP route that resolves thru the binding SID
         #
-        ip_10_0_0_1 = VppIpRoute(self, "10.0.0.2", 32,
+        ip_10_0_0_1 = VppIpRoute(self.vclient, "10.0.0.2", 32,
                                  [VppRoutePath("0.0.0.0",
                                                0xffffffff,
                                                nh_via_label=999)])
@@ -198,12 +198,12 @@ class TestSRMPLS(VppTestCase):
         self.verify_capture_labelled_ip4(self.pg0, rx, tx,
                                          [VppMplsLabel(32)])
 
-        self.vapi.sr_mpls_policy_del(999)
+        self.vclient.sr_mpls_policy_del(999)
 
         #
         # this time the SID has many labels pushed
         #
-        self.vapi.sr_mpls_policy_add(999, 1, 0, [32, 33, 34])
+        self.vclient.sr_mpls_policy_add(999, 1, 0, [32, 33, 34])
 
         tx = self.create_stream_ip4(self.pg1, "10.0.0.1")
         rx = self.send_and_expect(self.pg1, tx, self.pg0)
@@ -223,7 +223,7 @@ class TestSRMPLS(VppTestCase):
         # Resolve an MPLS tunnel via the SID
         #
         mpls_tun = VppMPLSTunnelInterface(
-            self,
+            self.vclient,
             [VppRoutePath("0.0.0.0",
                           0xffffffff,
                           nh_via_label=999,
@@ -235,12 +235,12 @@ class TestSRMPLS(VppTestCase):
         #
         # add an unlabelled route through the new tunnel
         #
-        route_10_0_0_3 = VppIpRoute(self, "10.0.0.3", 32,
+        route_10_0_0_3 = VppIpRoute(self.vclient, "10.0.0.3", 32,
                                     [VppRoutePath("0.0.0.0",
                                                   mpls_tun._sw_if_index)])
         route_10_0_0_3.add_vpp_config()
-        self.logger.info(self.vapi.cli("sh mpls tun 0"))
-        self.logger.info(self.vapi.cli("sh adj 21"))
+        self.logger.info(self.vclient.cli("sh mpls tun 0"))
+        self.logger.info(self.vclient.cli("sh adj 21"))
 
         tx = self.create_stream_ip4(self.pg1, "10.0.0.3")
         rx = self.send_and_expect(self.pg1, tx, self.pg0)
@@ -254,7 +254,7 @@ class TestSRMPLS(VppTestCase):
         #
         # add a labelled route through the new tunnel
         #
-        route_10_0_0_3 = VppIpRoute(self, "10.0.0.4", 32,
+        route_10_0_0_3 = VppIpRoute(self.vclient, "10.0.0.4", 32,
                                     [VppRoutePath("0.0.0.0",
                                                   mpls_tun._sw_if_index,
                                                   labels=[VppMplsLabel(55)])])
@@ -270,7 +270,7 @@ class TestSRMPLS(VppTestCase):
                                           VppMplsLabel(46),
                                           VppMplsLabel(55)])
 
-        self.vapi.sr_mpls_policy_del(999)
+        self.vclient.sr_mpls_policy_del(999)
 
 
 if __name__ == '__main__':
diff --git a/test/test_srv6_un.py b/test/test_srv6_un.py
index 5248e68c4..6b685a28b 100644
--- a/test/test_srv6_un.py
+++ b/test/test_srv6_un.py
@@ -64,22 +64,22 @@ class TestSRv6uSIDSRH(VppTestCase):
         """ test_srv6_usid_srh """
         pkts = self.create_packets([("A::1", "B::1"), ("C::1", "D::1")])
 
-        self.vapi.cli("set sr encaps source addr A1::1")
-        self.vapi.cli(
+        self.vclient.cli("set sr encaps source addr A1::1")
+        self.vclient.cli(
             "sr localsid prefix 1111:2222:aaaa::/48 behavior un 16")
-        self.vapi.cli(
+        self.vclient.cli(
             "ip route add 1111:2222:bbbb::/48 via {}".format(self.ip6_nhop))
 
-        self.logger.info(self.vapi.cli("show sr localsids"))
+        self.logger.info(self.vclient.cli("show sr localsids"))
 
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
 
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.logger.info(self.vapi.cli("show errors"))
-        self.logger.info(self.vapi.cli("show int address"))
+        self.logger.info(self.vclient.cli("show errors"))
+        self.logger.info(self.vclient.cli("show int address"))
 
         capture = self.pg1.get_capture(len(pkts))
 
@@ -140,22 +140,22 @@ class TestSRv6uSID(VppTestCase):
         """ test_srv6_usid """
         pkts = self.create_packets([("A::1", "B::1"), ("C::1", "D::1")])
 
-        self.vapi.cli("set sr encaps source addr A1::1")
-        self.vapi.cli(
+        self.vclient.cli("set sr encaps source addr A1::1")
+        self.vclient.cli(
             "sr localsid prefix 1111:2222:aaaa::/48 behavior un 16")
-        self.vapi.cli(
+        self.vclient.cli(
             "ip route add 1111:2222:bbbb::/48 via {}".format(self.ip6_nhop))
 
-        self.logger.info(self.vapi.cli("show sr localsids"))
+        self.logger.info(self.vclient.cli("show sr localsids"))
 
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
 
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.logger.info(self.vapi.cli("show errors"))
-        self.logger.info(self.vapi.cli("show int address"))
+        self.logger.info(self.vclient.cli("show errors"))
+        self.logger.info(self.vclient.cli("show int address"))
 
         capture = self.pg1.get_capture(len(pkts))
 
@@ -222,22 +222,22 @@ class TestSRv6uSIDFlexSRH(VppTestCase):
         """ test_srv6_usid_flex_srh """
         pkts = self.create_packets([("A::1", "B::1"), ("C::1", "D::1")])
 
-        self.vapi.cli("set sr encaps source addr A1::1")
-        self.vapi.cli(
+        self.vclient.cli("set sr encaps source addr A1::1")
+        self.vclient.cli(
             "sr localsid prefix 1111:2222:aaaa::/48 behavior un.flex 16")
-        self.vapi.cli(
+        self.vclient.cli(
             "ip route add 1111:2222:bbbb::/48 via {}".format(self.ip6_nhop))
 
-        self.logger.info(self.vapi.cli("show sr localsids"))
+        self.logger.info(self.vclient.cli("show sr localsids"))
 
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
 
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.logger.info(self.vapi.cli("show errors"))
-        self.logger.info(self.vapi.cli("show int address"))
+        self.logger.info(self.vclient.cli("show errors"))
+        self.logger.info(self.vclient.cli("show int address"))
 
         capture = self.pg1.get_capture(len(pkts))
 
@@ -298,22 +298,22 @@ class TestSRv6uSIDFlex(VppTestCase):
         """ test_srv6_usid_flex """
         pkts = self.create_packets([("A::1", "B::1"), ("C::1", "D::1")])
 
-        self.vapi.cli("set sr encaps source addr A1::1")
-        self.vapi.cli(
+        self.vclient.cli("set sr encaps source addr A1::1")
+        self.vclient.cli(
             "sr localsid prefix 1111:2222:aaaa::/48 behavior un.flex 16")
-        self.vapi.cli(
+        self.vclient.cli(
             "ip route add 1111:2222:bbbb::/48 via {}".format(self.ip6_nhop))
 
-        self.logger.info(self.vapi.cli("show sr localsids"))
+        self.logger.info(self.vclient.cli("show sr localsids"))
 
-        self.vapi.cli("clear errors")
+        self.vclient.cli("clear errors")
 
         self.pg0.add_stream(pkts)
         self.pg_enable_capture(self.pg_interfaces)
         self.pg_start()
 
-        self.logger.info(self.vapi.cli("show errors"))
-        self.logger.info(self.vapi.cli("show int address"))
+        self.logger.info(self.vclient.cli("show errors"))
+        self.logger.info(self.vclient.cli("show int address"))
 
         capture = self.pg1.get_capture(len(pkts))
 
diff --git a/test/test_stats_client.py b/test/test_stats_client.py
index ced58710e..3f6af85d4 100644
--- a/test/test_stats_client.py
+++ b/test/test_stats_client.py
@@ -20,8 +20,8 @@ class StatsClientTestCase(VppTestCase):
 
     def test_set_errors(self):
         """Test set errors"""
-        self.assertEqual(self.statistics.set_errors(), {})
-        self.assertEqual(self.statistics.get_counter('/err/ethernet-input/no'),
+        self.assertEqual(self.vclient.statistics.set_errors(), {})
+        self.assertEqual(self.vclient.statistics.get_counter('/err/ethernet-input/no'),
                          [0])
 
     def test_client_fd_leak(self):
@@ -47,19 +47,19 @@ class StatsClientTestCase(VppTestCase):
         def loop():
             print('Running loop')
             for i in range(50):
-                rv = self.vapi.papi.tap_create_v2(id=i, use_random_mac=1)
+                rv = self.vclient.papi.tap_create_v2(id=i, use_random_mac=1)
                 self.assertEqual(rv.retval, 0)
-                rv = self.vapi.papi.tap_delete_v2(sw_if_index=rv.sw_if_index)
+                rv = self.vclient.papi.tap_delete_v2(sw_if_index=rv.sw_if_index)
                 self.assertEqual(rv.retval, 0)
 
-        before = self.statistics.get_counter('/mem/statseg/used')
+        before = self.vclient.statistics.get_counter('/mem/statseg/used')
         loop()
-        self.vapi.cli("memory-trace on stats-segment")
+        self.vclient.cli("memory-trace on stats-segment")
         for j in range(100):
             loop()
-        print(self.vapi.cli("show memory stats-segment verbose"))
+        print(self.vclient.cli("show memory stats-segment verbose"))
         print('AFTER', before,
-              self.statistics.get_counter('/mem/statseg/used'))
+              self.vclient.statistics.get_counter('/mem/statseg/used'))
 
 
 if __name__ == '__main__':
diff --git a/test/test_string.py b/test/test_string.py
index 51c6a1414..57f02b377 100644
--- a/test/test_string.py
+++ b/test/test_string.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 class TestString(VppTestCase):
@@ -36,7 +36,7 @@ class TestString(VppTestCase):
                  "strnlen_s", "strstr_s", "strtok_s", "clib_count_equal"]
 
         for name in names:
-            error = self.vapi.cli("test string " + name)
+            error = self.vclient.cli("test string " + name)
             if error.find("failed") != -1:
                 self.logger.critical("FAILURE in the " + name + " test")
                 self.assertNotIn("failed", error)
diff --git a/test/test_syslog.py b/test/test_syslog.py
index b084a1d18..00e38706b 100644
--- a/test/test_syslog.py
+++ b/test/test_syslog.py
@@ -2,7 +2,7 @@
 
 import unittest
 from framework import VppTestCase, VppTestRunner
-from util import ppp
+from vpp_pom.util import ppp
 from scapy.packet import Raw
 from scapy.layers.inet import IP, UDP
 from syslog_rfc5424_parser import SyslogMessage, ParseError
@@ -68,7 +68,7 @@ class TestSyslog(VppTestCase):
                     cli_str += " sd-param %s %s" % (name, value)
         if msg is not None:
             cli_str += " %s" % (msg)
-        self.vapi.cli(cli_str)
+        self.vclient.cli(cli_str)
 
     def syslog_verify(self, data, facility, severity, appname, msgid, sd=None,
                       msg=None):
@@ -103,9 +103,9 @@ class TestSyslog(VppTestCase):
 
     def test_syslog(self):
         """ Syslog Protocol test """
-        self.vapi.syslog_set_sender(src_address=self.pg0.local_ip4,
+        self.vclient.syslog_set_sender(src_address=self.pg0.local_ip4,
                                     collector_address=self.pg0.remote_ip4)
-        config = self.vapi.syslog_get_sender()
+        config = self.vclient.syslog_get_sender()
         self.assertEqual(str(config.collector_address),
                          self.pg0.remote_ip4)
         self.assertEqual(config.collector_port, 514)
@@ -149,9 +149,9 @@ class TestSyslog(VppTestCase):
                            msg)
 
         self.pg_enable_capture(self.pg_interfaces)
-        self.vapi.syslog_set_filter(
+        self.vclient.syslog_set_filter(
             self.SYSLOG_SEVERITY.SYSLOG_API_SEVERITY_WARN)
-        filter = self.vapi.syslog_get_filter()
+        filter = self.vclient.syslog_get_filter()
         self.assertEqual(filter.severity,
                          self.SYSLOG_SEVERITY.SYSLOG_API_SEVERITY_WARN)
         self.syslog_generate(SyslogFacility.local7,
@@ -178,10 +178,10 @@ class TestSyslog(VppTestCase):
                            sd1,
                            msg)
 
-        self.vapi.syslog_set_sender(self.pg0.local_ip4,
+        self.vclient.syslog_set_sender(self.pg0.local_ip4,
                                     self.pg0.remote_ip4,
                                     collector_port=12345)
-        config = self.vapi.syslog_get_sender()
+        config = self.vclient.syslog_get_sender()
         self.assertEqual(config.collector_port, 12345)
 
         self.pg_enable_capture(self.pg_interfaces)
diff --git a/test/test_tap.py b/test/test_tap.py
index 0e5b31596..0ec7c91e9 100644
--- a/test/test_tap.py
+++ b/test/test_tap.py
@@ -2,7 +2,7 @@ import unittest
 import os
 
 from framework import VppTestCase, VppTestRunner
-from vpp_devices import VppTAPInterface
+from vpp_pom.vpp_devices import VppTAPInterface
 
 
 def check_tuntap_driver_access():
@@ -15,7 +15,7 @@ class TestTAP(VppTestCase):
 
     def test_tap_add_del(self):
         """Create TAP interface"""
-        tap0 = VppTAPInterface(self, tap_id=0)
+        tap0 = VppTAPInterface(self.vclient, tap_id=0)
         tap0.add_vpp_config()
         self.assertTrue(tap0.query_vpp_config())
 
@@ -24,12 +24,12 @@ class TestTAP(VppTestCase):
         MAX_INSTANCES = 10
         tap_instances = []
         for instance in range(MAX_INSTANCES):
-            i = VppTAPInterface(self, tap_id=instance)
+            i = VppTAPInterface(self.vclient, tap_id=instance)
             i.add_vpp_config()
             tap_instances.append(i)
-        details = self.vapi.sw_interface_tap_v2_dump()
+        details = self.vclient.sw_interface_tap_v2_dump()
         self.assertEqual(MAX_INSTANCES, len(details))
-        details = self.vapi.sw_interface_tap_v2_dump(
+        details = self.vclient.sw_interface_tap_v2_dump(
             tap_instances[5].sw_if_index)
         self.assertEqual(1, len(details))
 
diff --git a/test/test_tcp.py b/test/test_tcp.py
index 40579e284..db7238d02 100644
--- a/test/test_tcp.py
+++ b/test/test_tcp.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 class TestTCP(VppTestCase):
@@ -19,7 +19,7 @@ class TestTCP(VppTestCase):
 
     def setUp(self):
         super(TestTCP, self).setUp()
-        self.vapi.session_enable_disable(is_enabled=1)
+        self.vclient.session_enable_disable(is_enabled=1)
         self.create_loopback_interfaces(2)
 
         table_id = 0
@@ -28,7 +28,7 @@ class TestTCP(VppTestCase):
             i.admin_up()
 
             if table_id != 0:
-                tbl = VppIpTable(self, table_id)
+                tbl = VppIpTable(self.vclient, table_id)
                 tbl.add_vpp_config()
 
             i.set_table_ip4(table_id)
@@ -36,9 +36,9 @@ class TestTCP(VppTestCase):
             table_id += 1
 
         # Configure namespaces
-        self.vapi.app_namespace_add_del(namespace_id="0",
+        self.vclient.app_namespace_add_del(namespace_id="0",
                                         sw_if_index=self.loop0.sw_if_index)
-        self.vapi.app_namespace_add_del(namespace_id="1",
+        self.vclient.app_namespace_add_del(namespace_id="1",
                                         sw_if_index=self.loop1.sw_if_index)
 
     def tearDown(self):
@@ -46,18 +46,18 @@ class TestTCP(VppTestCase):
             i.unconfig_ip4()
             i.set_table_ip4(0)
             i.admin_down()
-        self.vapi.session_enable_disable(is_enabled=0)
+        self.vclient.session_enable_disable(is_enabled=0)
         super(TestTCP, self).tearDown()
 
     def test_tcp_transfer(self):
         """ TCP echo client/server transfer """
 
         # Add inter-table routes
-        ip_t01 = VppIpRoute(self, self.loop1.local_ip4, 32,
+        ip_t01 = VppIpRoute(self.vclient, self.loop1.local_ip4, 32,
                             [VppRoutePath("0.0.0.0",
                                           0xffffffff,
                                           nh_table_id=1)])
-        ip_t10 = VppIpRoute(self, self.loop0.local_ip4, 32,
+        ip_t10 = VppIpRoute(self.vclient, self.loop0.local_ip4, 32,
                             [VppRoutePath("0.0.0.0",
                                           0xffffffff,
                                           nh_table_id=0)], table_id=1)
@@ -66,13 +66,13 @@ class TestTCP(VppTestCase):
 
         # Start builtin server and client
         uri = "tcp://" + self.loop0.local_ip4 + "/1234"
-        error = self.vapi.cli("test echo server appns 0 fifo-size 4 uri " +
+        error = self.vclient.cli("test echo server appns 0 fifo-size 4 uri " +
                               uri)
         if error:
             self.logger.critical(error)
             self.assertNotIn("failed", error)
 
-        error = self.vapi.cli("test echo client mbytes 10 appns 1 " +
+        error = self.vclient.cli("test echo client mbytes 10 appns 1 " +
                               "fifo-size 4 no-output test-bytes " +
                               "syn-timeout 2 uri " + uri)
         if error:
@@ -97,15 +97,15 @@ class TestTCPUnitTests(VppTestCase):
 
     def setUp(self):
         super(TestTCPUnitTests, self).setUp()
-        self.vapi.session_enable_disable(is_enabled=1)
+        self.vclient.session_enable_disable(is_enabled=1)
 
     def tearDown(self):
         super(TestTCPUnitTests, self).tearDown()
-        self.vapi.session_enable_disable(is_enabled=0)
+        self.vclient.session_enable_disable(is_enabled=0)
 
     def test_tcp_unittest(self):
         """ TCP Unit Tests """
-        error = self.vapi.cli("test tcp all")
+        error = self.vclient.cli("test tcp all")
 
         if error:
             self.logger.critical(error)
diff --git a/test/test_tls.py b/test/test_tls.py
index 008664dfd..2f1d5bba2 100644
--- a/test/test_tls.py
+++ b/test/test_tls.py
@@ -6,7 +6,7 @@ import re
 import subprocess
 
 from framework import VppTestCase, VppTestRunner
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 def checkQat():
@@ -65,7 +65,7 @@ class TestTLS(VppTestCase):
     def setUp(self):
         super(TestTLS, self).setUp()
 
-        self.vapi.session_enable_disable(is_enabled=1)
+        self.vclient.session_enable_disable(is_enabled=1)
         self.create_loopback_interfaces(2)
 
         table_id = 0
@@ -74,7 +74,7 @@ class TestTLS(VppTestCase):
             i.admin_up()
 
             if table_id != 0:
-                tbl = VppIpTable(self, table_id)
+                tbl = VppIpTable(self.vclient, table_id)
                 tbl.add_vpp_config()
 
             i.set_table_ip4(table_id)
@@ -82,9 +82,9 @@ class TestTLS(VppTestCase):
             table_id += 1
 
         # Configure namespaces
-        self.vapi.app_namespace_add_del(namespace_id="0",
+        self.vclient.app_namespace_add_del(namespace_id="0",
                                         sw_if_index=self.loop0.sw_if_index)
-        self.vapi.app_namespace_add_del(namespace_id="1",
+        self.vclient.app_namespace_add_del(namespace_id="1",
                                         sw_if_index=self.loop1.sw_if_index)
 
     def tearDown(self):
@@ -92,7 +92,7 @@ class TestTLS(VppTestCase):
             i.unconfig_ip4()
             i.set_table_ip4(0)
             i.admin_down()
-        self.vapi.session_enable_disable(is_enabled=0)
+        self.vclient.session_enable_disable(is_enabled=0)
         super(TestTLS, self).tearDown()
 
     @unittest.skipUnless(checkAll(),
@@ -101,12 +101,12 @@ class TestTLS(VppTestCase):
         """ TLS qat echo client/server transfer """
 
         # Add inter-table routes
-        ip_t01 = VppIpRoute(self, self.loop1.local_ip4, 32,
+        ip_t01 = VppIpRoute(self.vclient, self.loop1.local_ip4, 32,
                             [VppRoutePath("0.0.0.0",
                                           0xffffffff,
                                           nh_table_id=1)])
 
-        ip_t10 = VppIpRoute(self, self.loop0.local_ip4, 32,
+        ip_t10 = VppIpRoute(self.vclient, self.loop0.local_ip4, 32,
                             [VppRoutePath("0.0.0.0",
                                           0xffffffff,
                                           nh_table_id=0)], table_id=1)
@@ -114,7 +114,7 @@ class TestTLS(VppTestCase):
         ip_t10.add_vpp_config()
 
         # Enable QAT engine and TLS async
-        r = self.vapi.tls_openssl_set_engine(
+        r = self.vclient.tls_openssl_set_engine(
                 async_enable=1,
                 engine="qat",
                 algorithm="RSA,PKEY_CRYPTO",
@@ -124,14 +124,14 @@ class TestTLS(VppTestCase):
 
         # Start builtin server and client
         uri = "tls://" + self.loop0.local_ip4 + "/1234"
-        error = self.vapi.cli("test echo server appns 0 fifo-size 4 "
+        error = self.vclient.cli("test echo server appns 0 fifo-size 4 "
                               "tls-engine 1 uri " +
                               uri)
         if error:
             self.logger.critical(error)
             self.assertNotIn("failed", error)
 
-        error = self.vapi.cli("test echo client mbytes 10 appns 1 "
+        error = self.vclient.cli("test echo client mbytes 10 appns 1 "
                               "fifo-size 4 no-output test-bytes "
                               "tls-engine 1 "
                               "syn-timeout 2 uri " + uri)
diff --git a/test/test_trace_filter.py b/test/test_trace_filter.py
index cd93c7463..44ac760cf 100644
--- a/test/test_trace_filter.py
+++ b/test/test_trace_filter.py
@@ -3,7 +3,7 @@
 import unittest
 
 from framework import VppTestCase, VppTestRunner, running_extended_tests
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 from scapy.contrib.geneve import GENEVE
 from scapy.packet import Raw
@@ -38,7 +38,7 @@ class TestTracefilter(VppTestCase):
             i.admin_down()
 
     def cli(self, cmd):
-        r = self.vapi.cli_return_response(cmd)
+        r = self.vclient.cli_return_response(cmd)
         if r.retval != 0:
             if hasattr(r, 'reply'):
                 self.logger.info(cmd + " FAIL reply " + r.reply)
diff --git a/test/test_udp.py b/test/test_udp.py
index 0f1c5a472..de332993e 100644
--- a/test/test_udp.py
+++ b/test/test_udp.py
@@ -2,8 +2,8 @@
 import unittest
 from framework import VppTestCase, VppTestRunner
 
-from vpp_udp_encap import find_udp_encap, VppUdpEncap
-from vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable, VppMplsLabel, \
+from vpp_pom.vpp_udp_encap import find_udp_encap, VppUdpEncap
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath, VppIpTable, VppMplsLabel, \
     FibPathType
 
 from scapy.packet import Raw
@@ -41,10 +41,10 @@ class TestUdpEncap(VppTestCase):
             i.admin_up()
 
             if table_id != 0:
-                tbl = VppIpTable(self, table_id)
+                tbl = VppIpTable(self.vclient, table_id)
                 tbl.add_vpp_config()
                 self.tables.append(tbl)
-                tbl = VppIpTable(self, table_id, is_ip6=1)
+                tbl = VppIpTable(self.vclient, table_id, is_ip6=1)
                 tbl.add_vpp_config()
                 self.tables.append(tbl)
 
@@ -98,21 +98,21 @@ class TestUdpEncap(VppTestCase):
         # construct a UDP encap object through each of the peers
         # v4 through the first two peers, v6 through the second.
         #
-        udp_encap_0 = VppUdpEncap(self,
+        udp_encap_0 = VppUdpEncap(self.vclient,
                                   self.pg0.local_ip4,
                                   self.pg0.remote_ip4,
                                   330, 440)
-        udp_encap_1 = VppUdpEncap(self,
+        udp_encap_1 = VppUdpEncap(self.vclient,
                                   self.pg1.local_ip4,
                                   self.pg1.remote_ip4,
                                   331, 441,
                                   table_id=1)
-        udp_encap_2 = VppUdpEncap(self,
+        udp_encap_2 = VppUdpEncap(self.vclient,
                                   self.pg2.local_ip6,
                                   self.pg2.remote_ip6,
                                   332, 442,
                                   table_id=2)
-        udp_encap_3 = VppUdpEncap(self,
+        udp_encap_3 = VppUdpEncap(self.vclient,
                                   self.pg3.local_ip6,
                                   self.pg3.remote_ip6,
                                   333, 443,
@@ -122,36 +122,36 @@ class TestUdpEncap(VppTestCase):
         udp_encap_2.add_vpp_config()
         udp_encap_3.add_vpp_config()
 
-        self.logger.info(self.vapi.cli("sh udp encap"))
+        self.logger.info(self.vclient.cli("sh udp encap"))
 
-        self.assertTrue(find_udp_encap(self, udp_encap_2))
-        self.assertTrue(find_udp_encap(self, udp_encap_3))
-        self.assertTrue(find_udp_encap(self, udp_encap_0))
-        self.assertTrue(find_udp_encap(self, udp_encap_1))
+        self.assertTrue(find_udp_encap(self.vclient, udp_encap_2))
+        self.assertTrue(find_udp_encap(self.vclient, udp_encap_3))
+        self.assertTrue(find_udp_encap(self.vclient, udp_encap_0))
+        self.assertTrue(find_udp_encap(self.vclient, udp_encap_1))
 
         #
         # Routes via each UDP encap object - all combinations of v4 and v6.
         #
         route_4o4 = VppIpRoute(
-            self, "1.1.0.1", 32,
+            self.vclient, "1.1.0.1", 32,
             [VppRoutePath("0.0.0.0",
                           0xFFFFFFFF,
                           type=FibPathType.FIB_PATH_TYPE_UDP_ENCAP,
                           next_hop_id=udp_encap_0.id)])
         route_4o6 = VppIpRoute(
-            self, "1.1.2.1", 32,
+            self.vclient, "1.1.2.1", 32,
             [VppRoutePath("0.0.0.0",
                           0xFFFFFFFF,
                           type=FibPathType.FIB_PATH_TYPE_UDP_ENCAP,
                           next_hop_id=udp_encap_2.id)])
         route_6o4 = VppIpRoute(
-            self, "2001::1", 128,
+            self.vclient, "2001::1", 128,
             [VppRoutePath("0.0.0.0",
                           0xFFFFFFFF,
                           type=FibPathType.FIB_PATH_TYPE_UDP_ENCAP,
                           next_hop_id=udp_encap_1.id)])
         route_6o6 = VppIpRoute(
-            self, "2001::3", 128,
+            self.vclient, "2001::3", 128,
             [VppRoutePath("0.0.0.0",
                           0xFFFFFFFF,
                           type=FibPathType.FIB_PATH_TYPE_UDP_ENCAP,
@@ -226,7 +226,7 @@ class TestUdpEncap(VppTestCase):
         # the TTL of the inner packet is decremented on LSP ingress
         #
         route_4oMPLSo4 = VppIpRoute(
-            self, "1.1.2.22", 32,
+            self.vclient, "1.1.2.22", 32,
             [VppRoutePath("0.0.0.0",
                           0xFFFFFFFF,
                           type=FibPathType.FIB_PATH_TYPE_UDP_ENCAP,
@@ -260,7 +260,7 @@ class TestUDP(VppTestCase):
 
     def setUp(self):
         super(TestUDP, self).setUp()
-        self.vapi.session_enable_disable(is_enabled=1)
+        self.vclient.session_enable_disable(is_enabled=1)
         self.create_loopback_interfaces(2)
 
         table_id = 0
@@ -269,7 +269,7 @@ class TestUDP(VppTestCase):
             i.admin_up()
 
             if table_id != 0:
-                tbl = VppIpTable(self, table_id)
+                tbl = VppIpTable(self.vclient, table_id)
                 tbl.add_vpp_config()
 
             i.set_table_ip4(table_id)
@@ -277,9 +277,9 @@ class TestUDP(VppTestCase):
             table_id += 1
 
         # Configure namespaces
-        self.vapi.app_namespace_add_del(namespace_id="0",
+        self.vclient.app_namespace_add_del(namespace_id="0",
                                         sw_if_index=self.loop0.sw_if_index)
-        self.vapi.app_namespace_add_del(namespace_id="1",
+        self.vclient.app_namespace_add_del(namespace_id="1",
                                         sw_if_index=self.loop1.sw_if_index)
 
     def tearDown(self):
@@ -287,18 +287,18 @@ class TestUDP(VppTestCase):
             i.unconfig_ip4()
             i.set_table_ip4(0)
             i.admin_down()
-        self.vapi.session_enable_disable(is_enabled=0)
+        self.vclient.session_enable_disable(is_enabled=0)
         super(TestUDP, self).tearDown()
 
     def test_udp_transfer(self):
         """ UDP echo client/server transfer """
 
         # Add inter-table routes
-        ip_t01 = VppIpRoute(self, self.loop1.local_ip4, 32,
+        ip_t01 = VppIpRoute(self.vclient, self.loop1.local_ip4, 32,
                             [VppRoutePath("0.0.0.0",
                                           0xffffffff,
                                           nh_table_id=1)])
-        ip_t10 = VppIpRoute(self, self.loop0.local_ip4, 32,
+        ip_t10 = VppIpRoute(self.vclient, self.loop0.local_ip4, 32,
                             [VppRoutePath("0.0.0.0",
                                           0xffffffff,
                                           nh_table_id=0)], table_id=1)
@@ -307,20 +307,20 @@ class TestUDP(VppTestCase):
 
         # Start builtin server and client
         uri = "udp://" + self.loop0.local_ip4 + "/1234"
-        error = self.vapi.cli("test echo server appns 0 fifo-size 4 no-echo" +
+        error = self.vclient.cli("test echo server appns 0 fifo-size 4 no-echo" +
                               "uri " + uri)
         if error:
             self.logger.critical(error)
             self.assertNotIn("failed", error)
 
-        error = self.vapi.cli("test echo client mbytes 10 appns 1 " +
+        error = self.vclient.cli("test echo client mbytes 10 appns 1 " +
                               "fifo-size 4 no-output test-bytes " +
                               "syn-timeout 2 no-return uri " + uri)
         if error:
             self.logger.critical(error)
             self.assertNotIn("failed", error)
 
-        self.logger.debug(self.vapi.cli("show session verbose 2"))
+        self.logger.debug(self.vclient.cli("show session verbose 2"))
 
         # Delete inter-table routes
         ip_t01.remove_vpp_config()
diff --git a/test/test_vapi.py b/test/test_vapi.py
index 1a4293d78..48292b65d 100644
--- a/test/test_vapi.py
+++ b/test/test_vapi.py
@@ -1,5 +1,5 @@
 #!/usr/bin/env python3
-""" VAPI test """
+""" vapi test """
 
 import unittest
 import os
@@ -7,19 +7,19 @@ import signal
 from framework import VppTestCase, running_on_centos, VppTestRunner, Worker
 
 
-class VAPITestCase(VppTestCase):
-    """ VAPI test """
+class vapiTestCase(VppTestCase):
+    """ vapi test """
 
     @classmethod
     def setUpClass(cls):
-        super(VAPITestCase, cls).setUpClass()
+        super(vapiTestCase, cls).setUpClass()
 
     @classmethod
     def tearDownClass(cls):
-        super(VAPITestCase, cls).tearDownClass()
+        super(vapiTestCase, cls).tearDownClass()
 
     def test_vapi_c(self):
-        """ run C VAPI tests """
+        """ run C vapi tests """
         var = "TEST_BR"
         built_root = os.getenv(var, None)
         self.assertIsNotNone(built_root,
@@ -49,7 +49,7 @@ class VAPITestCase(VppTestCase):
 
     @unittest.skipIf(running_on_centos, "Centos's gcc can't compile our C++")
     def test_vapi_cpp(self):
-        """ run C++ VAPI tests """
+        """ run C++ vapi tests """
         var = "TEST_BR"
         built_root = os.getenv(var, None)
         self.assertIsNotNone(built_root,
diff --git a/test/test_vhost.py b/test/test_vhost.py
index e8cb27d6e..814ee7a43 100644
--- a/test/test_vhost.py
+++ b/test/test_vhost.py
@@ -4,7 +4,7 @@ import unittest
 
 from framework import VppTestCase, VppTestRunner
 
-from vpp_vhost_interface import VppVhostInterface
+from vpp_pom.vpp_vhost_interface import VppVhostInterface
 
 
 class TesVhostInterface(VppTestCase):
@@ -22,31 +22,31 @@ class TesVhostInterface(VppTestCase):
     def tearDown(self):
         super(TesVhostInterface, self).tearDown()
         if not self.vpp_dead:
-            if_dump = self.vapi.sw_interface_vhost_user_dump()
+            if_dump = self.vclient.sw_interface_vhost_user_dump()
             for ifc in if_dump:
-                self.vapi.delete_vhost_user_if(ifc.sw_if_index)
+                self.vclient.delete_vhost_user_if(ifc.sw_if_index)
 
     def test_vhost(self):
         """ Vhost User add/delete interface test """
         self.logger.info("Vhost User add interfaces")
 
         # create interface 1 (VirtualEthernet0/0/0)
-        vhost_if1 = VppVhostInterface(self, sock_filename='/tmp/sock1')
+        vhost_if1 = VppVhostInterface(self.vclient, sock_filename='/tmp/sock1')
         vhost_if1.add_vpp_config()
         vhost_if1.admin_up()
 
         # create interface 2 (VirtualEthernet0/0/1)
-        vhost_if2 = VppVhostInterface(self, sock_filename='/tmp/sock2')
+        vhost_if2 = VppVhostInterface(self.vclient, sock_filename='/tmp/sock2')
         vhost_if2.add_vpp_config()
         vhost_if2.admin_up()
 
         # verify both interfaces in the show
-        ifs = self.vapi.cli("show interface")
+        ifs = self.vclient.cli("show interface")
         self.assertIn('VirtualEthernet0/0/0', ifs)
         self.assertIn('VirtualEthernet0/0/1', ifs)
 
         # verify they are in the dump also
-        if_dump = self.vapi.sw_interface_vhost_user_dump()
+        if_dump = self.vclient.sw_interface_vhost_user_dump()
         self.assertTrue(vhost_if1.is_interface_config_in_dump(if_dump))
         self.assertTrue(vhost_if2.is_interface_config_in_dump(if_dump))
 
@@ -56,7 +56,7 @@ class TesVhostInterface(VppTestCase):
 
         self.logger.info("Verifying VirtualEthernet0/0/1 is deleted")
 
-        ifs = self.vapi.cli("show interface")
+        ifs = self.vclient.cli("show interface")
         # verify VirtualEthernet0/0/0 still in the show
         self.assertIn('VirtualEthernet0/0/0', ifs)
 
@@ -64,7 +64,7 @@ class TesVhostInterface(VppTestCase):
         self.assertNotIn('VirtualEthernet0/0/1', ifs)
 
         # verify VirtualEthernet0/0/1 is not in the dump
-        if_dump = self.vapi.sw_interface_vhost_user_dump()
+        if_dump = self.vclient.sw_interface_vhost_user_dump()
         self.assertFalse(vhost_if2.is_interface_config_in_dump(if_dump))
 
         # verify VirtualEthernet0/0/0 is still in the dump
@@ -77,28 +77,28 @@ class TesVhostInterface(VppTestCase):
         self.logger.info("Verifying VirtualEthernet0/0/0 is deleted")
 
         # verify VirtualEthernet0/0/0 not in the show
-        ifs = self.vapi.cli("show interface")
+        ifs = self.vclient.cli("show interface")
         self.assertNotIn('VirtualEthernet0/0/0', ifs)
 
         # verify VirtualEthernet0/0/0 is not in the dump
-        if_dump = self.vapi.sw_interface_vhost_user_dump()
+        if_dump = self.vclient.sw_interface_vhost_user_dump()
         self.assertFalse(vhost_if1.is_interface_config_in_dump(if_dump))
 
     def test_vhost_interface_state(self):
         """ Vhost User interface states and events test """
 
-        self.vapi.want_interface_events()
+        self.vclient.want_interface_events()
 
         # clear outstanding events
         # (like delete interface events from other tests)
-        self.vapi.collect_events()
+        self.vclient.collect_events()
 
-        vhost_if = VppVhostInterface(self, sock_filename='/tmp/sock1')
+        vhost_if = VppVhostInterface(self.vclient, sock_filename='/tmp/sock1')
 
         # create vhost interface
         vhost_if.add_vpp_config()
         self.sleep(0.1)
-        events = self.vapi.collect_events()
+        events = self.vclient.collect_events()
         # creating interface does now create events
         self.assert_equal(len(events), 1, "number of events")
 
@@ -110,13 +110,13 @@ class TesVhostInterface(VppTestCase):
 
         # delete vhost interface
         vhost_if.remove_vpp_config()
-        event = self.vapi.wait_for_event(timeout=1)
+        event = self.vclient.wait_for_event(timeout=1)
         self.assert_equal(event.sw_if_index, vhost_if.sw_if_index,
                           "sw_if_index")
         self.assert_equal(event.deleted, 1, "deleted flag")
 
         # verify there are no more events
-        events = self.vapi.collect_events()
+        events = self.vclient.collect_events()
         self.assert_equal(len(events), 0, "number of events")
 
 if __name__ == '__main__':
diff --git a/test/test_vlib.py b/test/test_vlib.py
index 8bc5f57a5..83b373907 100644
--- a/test/test_vlib.py
+++ b/test/test_vlib.py
@@ -6,7 +6,7 @@ import time
 import signal
 from framework import VppTestCase, VppTestRunner, running_extended_tests
 from framework import running_gcov_tests
-from vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip_route import VppIpTable, VppIpRoute, VppRoutePath
 
 
 class TestVlib(VppTestCase):
@@ -62,7 +62,7 @@ class TestVlib(VppTestCase):
                 ]
 
         for cmd in cmds:
-            r = self.vapi.cli_return_response(cmd)
+            r = self.vclient.cli_return_response(cmd)
             if r.retval != 0:
                 if hasattr(r, 'reply'):
                     self.logger.info(cmd + " FAIL reply " + r.reply)
@@ -107,7 +107,7 @@ class TestVlib(VppTestCase):
                 ]
 
         for cmd in cmds:
-            r = self.vapi.cli_return_response(cmd)
+            r = self.vclient.cli_return_response(cmd)
             if r.retval != 0:
                 if hasattr(r, 'reply'):
                     self.logger.info(cmd + " FAIL reply " + r.reply)
@@ -163,7 +163,7 @@ class TestVlib(VppTestCase):
                 ]
 
         for cmd in cmds:
-            r = self.vapi.cli_return_response(cmd)
+            r = self.vclient.cli_return_response(cmd)
             if r.retval != 0:
                 if hasattr(r, 'reply'):
                     self.logger.info(cmd + " FAIL reply " + r.reply)
@@ -181,7 +181,7 @@ class TestVlib(VppTestCase):
                 ]
 
         for cmd in cmds:
-            r = self.vapi.cli_return_response(cmd)
+            r = self.vclient.cli_return_response(cmd)
             if r.retval != 0:
                 if hasattr(r, 'reply'):
                     self.logger.info(cmd + " FAIL reply " + r.reply)
diff --git a/test/test_vpe_api.py b/test/test_vpe_api.py
index 54f7e4115..457b15b1f 100644
--- a/test/test_vpe_api.py
+++ b/test/test_vpe_api.py
@@ -23,29 +23,29 @@ class TestVpeApi(VppTestCase):
     """TestVpeApi"""
 
     def test_log_dump_default(self):
-        rv = self.vapi.cli('test log notice fib entry this is a test')
-        rv = self.vapi.log_dump()
+        rv = self.vclient.cli('test log notice fib entry this is a test')
+        rv = self.vclient.log_dump()
         if enable_print:
             print('\n'.join([str(v) for v in rv]))
         self.assertTrue(rv)
 
     def test_log_dump_timestamp_0(self):
-        rv = self.vapi.cli('test log notice fib entry this is a test')
-        rv = self.vapi.log_dump(start_timestamp=0.0)
+        rv = self.vclient.cli('test log notice fib entry this is a test')
+        rv = self.vclient.log_dump(start_timestamp=0.0)
         if enable_print:
             print('\n'.join([str(v) for v in rv]))
         self.assertTrue(rv)
 
     def test_log_dump_timestamp_future(self):
-        rv = self.vapi.cli('test log debug fib entry test')
-        rv = self.vapi.log_dump(start_timestamp=time.time() + 60.0)
+        rv = self.vclient.cli('test log debug fib entry test')
+        rv = self.vclient.log_dump(start_timestamp=time.time() + 60.0)
         if enable_print:
             print('\n'.join([str(v) for v in rv]))
         self.assertFalse(rv)
 
     def test_show_vpe_system_time(self):
         local_start_time = datetime.datetime.now()
-        rv = self.vapi.show_vpe_system_time()
+        rv = self.vclient.show_vpe_system_time()
         self.assertTrue(rv.vpe_system_time > local_start_time -
                         datetime.timedelta(hours=1.0),
                         'system times differ by more than an hour.')
diff --git a/test/test_vppinfra.py b/test/test_vppinfra.py
index 9cb782d35..10960d307 100644
--- a/test/test_vppinfra.py
+++ b/test/test_vppinfra.py
@@ -29,7 +29,7 @@ class TestVppinfra(VppTestCase):
         cmds = ["test bitmap"]
 
         for cmd in cmds:
-            r = self.vapi.cli_return_response(cmd)
+            r = self.vclient.cli_return_response(cmd)
             if r.retval != 0:
                 if hasattr(r, 'reply'):
                     self.logger.info(cmd + " FAIL reply " + r.reply)
diff --git a/test/test_vtr.py b/test/test_vtr.py
index c3704f1e7..e96afee96 100644
--- a/test/test_vtr.py
+++ b/test/test_vtr.py
@@ -7,9 +7,9 @@ from scapy.packet import Raw
 from scapy.layers.l2 import Ether, Dot1Q
 from scapy.layers.inet import IP, UDP
 
-from util import Host
+from vpp_pom.util import Host
 from framework import VppTestCase, VppTestRunner
-from vpp_sub_interface import L2_VTR_OP, VppDot1QSubint, VppDot1ADSubint
+from vpp_pom.vpp_sub_interface import L2_VTR_OP, VppDot1QSubint, VppDot1ADSubint
 from collections import namedtuple
 
 Tag = namedtuple('Tag', ['dot1', 'vlan'])
@@ -36,9 +36,9 @@ class TestVtr(VppTestCase):
             cls.create_pg_interfaces(ifs)
 
             cls.sub_interfaces = [
-                VppDot1ADSubint(cls, cls.pg1, cls.dot1ad_sub_id,
+                VppDot1ADSubint(cls.vclient, cls.pg1, cls.dot1ad_sub_id,
                                 cls.Btag, cls.Atag),
-                VppDot1QSubint(cls, cls.pg2, cls.Btag)]
+                VppDot1QSubint(cls.vclient, cls.pg2, cls.Btag)]
 
             interfaces = list(cls.pg_interfaces)
             interfaces.extend(cls.sub_interfaces)
@@ -48,7 +48,7 @@ class TestVtr(VppTestCase):
             for pg_if in cls.pg_interfaces:
                 sw_if_index = pg_if.sub_if.sw_if_index \
                     if hasattr(pg_if, 'sub_if') else pg_if.sw_if_index
-                cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=sw_if_index,
+                cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=sw_if_index,
                                                     bd_id=cls.bd_id)
 
             # setup all interfaces
@@ -61,7 +61,7 @@ class TestVtr(VppTestCase):
             # create test host entries and inject packets to learn MAC entries
             # in the bridge-domain
             cls.create_hosts_and_learn(cls.mac_entries_count)
-            cls.logger.info(cls.vapi.ppcli("show l2fib"))
+            cls.logger.info(cls.vclient.ppcli("show l2fib"))
 
         except Exception:
             super(TestVtr, cls).tearDownClass()
@@ -85,8 +85,8 @@ class TestVtr(VppTestCase):
         super(TestVtr, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.ppcli("show l2fib verbose"))
-        self.logger.info(self.vapi.ppcli("show bridge-domain %s detail" %
+        self.logger.info(self.vclient.ppcli("show l2fib verbose"))
+        self.logger.info(self.vclient.ppcli("show bridge-domain %s detail" %
                                          self.bd_id))
 
     @classmethod
@@ -171,8 +171,8 @@ class TestVtr(VppTestCase):
         if not tags:
             return
 
-        i = VppDot1QSubint(self, self.pg0, tags[0].vlan)
-        self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+        i = VppDot1QSubint(self.vclient, self.pg0, tags[0].vlan)
+        self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                              bd_id=self.bd_id, enable=1)
         i.admin_up()
 
@@ -185,7 +185,7 @@ class TestVtr(VppTestCase):
         swif.sub_if.remove_dot1_layer(rx[0])
         self.assertTrue(Dot1Q not in rx[0])
 
-        self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
+        self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=i.sw_if_index,
                                              bd_id=self.bd_id, enable=0)
         i.remove_vpp_config()
 
@@ -335,20 +335,20 @@ class TestVtr(VppTestCase):
         """ Disable VTR on non-sub-interfaces
         """
         # First set the VTR fields to junk
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=self.pg0.sw_if_index, vtr_op=L2_VTR_OP.L2_PUSH_2,
             push_dot1q=1, tag1=19, tag2=630)
 
-        if_state = self.vapi.sw_interface_dump(
+        if_state = self.vclient.sw_interface_dump(
             sw_if_index=self.pg0.sw_if_index)
         self.assertEqual(if_state[0].sw_if_index, self.pg0.sw_if_index)
         self.assertNotEqual(if_state[0].vtr_op, L2_VTR_OP.L2_DISABLED)
 
         # Then ensure that a request to disable VTR is honored.
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=self.pg0.sw_if_index, vtr_op=L2_VTR_OP.L2_DISABLED)
 
-        if_state = self.vapi.sw_interface_dump(
+        if_state = self.vclient.sw_interface_dump(
             sw_if_index=self.pg0.sw_if_index)
         self.assertEqual(if_state[0].sw_if_index, self.pg0.sw_if_index)
         self.assertEqual(if_state[0].vtr_op, L2_VTR_OP.L2_DISABLED)
@@ -356,11 +356,11 @@ class TestVtr(VppTestCase):
     def test_if_vtr_push_1q(self):
         """ 1Q VTR push 1 on non-sub-interfaces
         """
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=self.pg0.sw_if_index, vtr_op=L2_VTR_OP.L2_PUSH_1,
             push_dot1q=1, tag1=150)
 
-        if_state = self.vapi.sw_interface_dump(
+        if_state = self.vclient.sw_interface_dump(
             sw_if_index=self.pg0.sw_if_index)
         self.assertEqual(if_state[0].sw_if_index, self.pg0.sw_if_index)
         self.assertEqual(if_state[0].vtr_op, L2_VTR_OP.L2_PUSH_1)
@@ -370,11 +370,11 @@ class TestVtr(VppTestCase):
     def test_if_vtr_push_2ad(self):
         """ 1AD VTR push 2 on non-sub-interfaces
         """
-        self.vapi.l2_interface_vlan_tag_rewrite(
+        self.vclient.l2_interface_vlan_tag_rewrite(
             sw_if_index=self.pg0.sw_if_index, vtr_op=L2_VTR_OP.L2_PUSH_2,
             push_dot1q=0, tag1=450, tag2=350)
 
-        if_state = self.vapi.sw_interface_dump(
+        if_state = self.vclient.sw_interface_dump(
             sw_if_index=self.pg0.sw_if_index)
         self.assertEqual(if_state[0].sw_if_index, self.pg0.sw_if_index)
         self.assertEqual(if_state[0].vtr_op, L2_VTR_OP.L2_PUSH_2)
diff --git a/test/test_vxlan.py b/test/test_vxlan.py
index 54d0c2d4a..9b3bcd28b 100644
--- a/test/test_vxlan.py
+++ b/test/test_vxlan.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 
 import socket
-from util import ip4_range, reassemble4
+from vpp_pom.util import ip4_range, reassemble4
 import unittest
 from framework import VppTestCase, VppTestRunner
 from template_bd import BridgeDomain
@@ -11,10 +11,10 @@ from scapy.packet import Raw
 from scapy.layers.inet import IP, UDP
 from scapy.layers.vxlan import VXLAN
 
-import util
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_vxlan_tunnel import VppVxlanTunnel
-from vpp_ip import INVALID_INDEX
+import vpp_pom.util as util
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_vxlan_tunnel import VppVxlanTunnel
+from vpp_pom.vpp_ip import INVALID_INDEX
 
 
 class TestVxlan(BridgeDomain, VppTestCase):
@@ -94,16 +94,16 @@ class TestVxlan(BridgeDomain, VppTestCase):
         for dest_ip4 in ip4_range(next_hop_address, ip_range_start,
                                   ip_range_end):
             # add host route so dest_ip4 will not be resolved
-            rip = VppIpRoute(cls, dest_ip4, 32,
+            rip = VppIpRoute(cls.vclient, dest_ip4, 32,
                              [VppRoutePath(next_hop_address,
                                            INVALID_INDEX)],
                              register=False)
             rip.add_vpp_config()
 
-            r = VppVxlanTunnel(cls, src=cls.pg0.local_ip4,
+            r = VppVxlanTunnel(cls.vclient, src=cls.pg0.local_ip4,
                                dst=dest_ip4, vni=vni)
             r.add_vpp_config()
-            cls.vapi.sw_interface_set_l2_bridge(r.sw_if_index, bd_id=vni)
+            cls.vclient.sw_interface_set_l2_bridge(r.sw_if_index, bd_id=vni)
 
     @classmethod
     def add_del_shared_mcast_dst_load(cls, is_add):
@@ -115,7 +115,7 @@ class TestVxlan(BridgeDomain, VppTestCase):
         vni_start = 10000
         vni_end = vni_start + n_shared_dst_tunnels
         for vni in range(vni_start, vni_end):
-            r = VppVxlanTunnel(cls, src=cls.pg0.local_ip4,
+            r = VppVxlanTunnel(cls.vclient, src=cls.pg0.local_ip4,
                                dst=cls.mcast_ip4, mcast_sw_if_index=1, vni=vni)
             if is_add:
                 r.add_vpp_config()
@@ -143,7 +143,7 @@ class TestVxlan(BridgeDomain, VppTestCase):
         for dest_ip4 in ip4_range(cls.mcast_ip4, ip_range_start,
                                   ip_range_end):
             vni = bytearray(socket.inet_pton(socket.AF_INET, dest_ip4))[3]
-            r = VppVxlanTunnel(cls, src=cls.pg0.local_ip4,
+            r = VppVxlanTunnel(cls.vclient, src=cls.pg0.local_ip4,
                                dst=dest_ip4, mcast_sw_if_index=1, vni=vni)
             if is_add:
                 r.add_vpp_config()
@@ -199,13 +199,13 @@ class TestVxlan(BridgeDomain, VppTestCase):
         #  into BD.
         self.single_tunnel_vni = 0x12345
         self.single_tunnel_bd = 1
-        r = VppVxlanTunnel(self, src=self.pg0.local_ip4,
+        r = VppVxlanTunnel(self.vclient, src=self.pg0.local_ip4,
                            dst=self.pg0.remote_ip4,
                            vni=self.single_tunnel_vni)
         r.add_vpp_config()
-        self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+        self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                              bd_id=self.single_tunnel_bd)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg1.sw_if_index, bd_id=self.single_tunnel_bd)
 
         # Setup vni 2 to test multicast flooding
@@ -213,12 +213,12 @@ class TestVxlan(BridgeDomain, VppTestCase):
         self.mcast_flood_bd = 2
         self.create_vxlan_flood_test_bd(self.mcast_flood_bd,
                                         self.n_ucast_tunnels)
-        r = VppVxlanTunnel(self, src=self.pg0.local_ip4, dst=self.mcast_ip4,
+        r = VppVxlanTunnel(self.vclient, src=self.pg0.local_ip4, dst=self.mcast_ip4,
                            mcast_sw_if_index=1, vni=self.mcast_flood_bd)
         r.add_vpp_config()
-        self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+        self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                              bd_id=self.mcast_flood_bd)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg2.sw_if_index, bd_id=self.mcast_flood_bd)
 
         # Add and delete mcast tunnels to check stability
@@ -231,7 +231,7 @@ class TestVxlan(BridgeDomain, VppTestCase):
         self.ucast_flood_bd = 3
         self.create_vxlan_flood_test_bd(self.ucast_flood_bd,
                                         self.n_ucast_tunnels)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg3.sw_if_index, bd_id=self.ucast_flood_bd)
 
     def test_decap(self):
@@ -245,7 +245,7 @@ class TestVxlan(BridgeDomain, VppTestCase):
         Verify receipt of encapsulated frames on pg0
         """
 
-        self.vapi.sw_interface_set_mtu(self.pg0.sw_if_index, [1500, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg0.sw_if_index, [1500, 0, 0, 0])
 
         frame = (Ether(src='00:00:00:00:00:02', dst='00:00:00:00:00:01') /
                  IP(src='4.3.2.1', dst='1.2.3.4') /
@@ -276,10 +276,10 @@ class TestVxlan(BridgeDomain, VppTestCase):
         super(TestVxlan, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show bridge-domain 1 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 2 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 3 detail"))
-        self.logger.info(self.vapi.cli("show vxlan tunnel"))
+        self.logger.info(self.vclient.cli("show bridge-domain 1 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 2 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 3 detail"))
+        self.logger.info(self.vclient.cli("show vxlan tunnel"))
 
 
 if __name__ == '__main__':
diff --git a/test/test_vxlan6.py b/test/test_vxlan6.py
index d9e2d8159..c103522b3 100644
--- a/test/test_vxlan6.py
+++ b/test/test_vxlan6.py
@@ -10,10 +10,10 @@ from scapy.packet import Raw
 from scapy.layers.inet6 import IP, IPv6, UDP
 from scapy.layers.vxlan import VXLAN
 
-import util
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_vxlan_tunnel import VppVxlanTunnel
-from vpp_ip import INVALID_INDEX
+import vpp_pom.util as util
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_vxlan_tunnel import VppVxlanTunnel
+from vpp_pom.vpp_ip import INVALID_INDEX
 
 
 class TestVxlan6(BridgeDomain, VppTestCase):
@@ -93,14 +93,14 @@ class TestVxlan6(BridgeDomain, VppTestCase):
         end = start + n_ucast_tunnels
         for dest_ip6 in cls.ip_range(start, end):
             # add host route so dest ip will not be resolved
-            rip = VppIpRoute(cls, dest_ip6, 128,
+            rip = VppIpRoute(cls.vclient, dest_ip6, 128,
                              [VppRoutePath(cls.pg0.remote_ip6, INVALID_INDEX)],
                              register=False)
             rip.add_vpp_config()
-            r = VppVxlanTunnel(cls, src=cls.pg0.local_ip6,
+            r = VppVxlanTunnel(cls.vclient, src=cls.pg0.local_ip6,
                                dst=dest_ip6, vni=vni)
             r.add_vpp_config()
-            cls.vapi.sw_interface_set_l2_bridge(r.sw_if_index, bd_id=vni)
+            cls.vclient.sw_interface_set_l2_bridge(r.sw_if_index, bd_id=vni)
 
     @classmethod
     def add_mcast_tunnels_load(cls):
@@ -151,13 +151,13 @@ class TestVxlan6(BridgeDomain, VppTestCase):
         #  into BD.
         self.single_tunnel_vni = 0x12345
         self.single_tunnel_bd = 1
-        r = VppVxlanTunnel(self, src=self.pg0.local_ip6,
+        r = VppVxlanTunnel(self.vclient, src=self.pg0.local_ip6,
                            dst=self.pg0.remote_ip6,
                            vni=self.single_tunnel_vni)
         r.add_vpp_config()
-        self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+        self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                              bd_id=self.single_tunnel_bd)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg1.sw_if_index, bd_id=self.single_tunnel_bd)
 
         # Setup vni 2 to test multicast flooding
@@ -165,19 +165,19 @@ class TestVxlan6(BridgeDomain, VppTestCase):
         self.mcast_flood_bd = 2
         self.create_vxlan_flood_test_bd(self.mcast_flood_bd,
                                         self.n_ucast_tunnels)
-        r = VppVxlanTunnel(self, src=self.pg0.local_ip6, dst=self.mcast_ip6,
+        r = VppVxlanTunnel(self.vclient, src=self.pg0.local_ip6, dst=self.mcast_ip6,
                            mcast_sw_if_index=1, vni=self.mcast_flood_bd)
         r.add_vpp_config()
-        self.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+        self.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                              bd_id=self.mcast_flood_bd)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg2.sw_if_index, bd_id=self.mcast_flood_bd)
 
         # Setup vni 3 to test unicast flooding
         self.ucast_flood_bd = 3
         self.create_vxlan_flood_test_bd(self.ucast_flood_bd,
                                         self.n_ucast_tunnels)
-        self.vapi.sw_interface_set_l2_bridge(
+        self.vclient.sw_interface_set_l2_bridge(
             rx_sw_if_index=self.pg3.sw_if_index, bd_id=self.ucast_flood_bd)
 
     # Method to define VPP actions before tear down of the test case.
@@ -187,10 +187,10 @@ class TestVxlan6(BridgeDomain, VppTestCase):
         super(TestVxlan6, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show bridge-domain 1 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 2 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 3 detail"))
-        self.logger.info(self.vapi.cli("show vxlan tunnel"))
+        self.logger.info(self.vclient.cli("show bridge-domain 1 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 2 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 3 detail"))
+        self.logger.info(self.vclient.cli("show vxlan tunnel"))
 
     def test_encap_fragmented_packet(self):
         """ Encapsulation test send fragments from pg1
diff --git a/test/test_vxlan_gbp.py b/test/test_vxlan_gbp.py
index f332aced7..770094025 100644
--- a/test/test_vxlan_gbp.py
+++ b/test/test_vxlan_gbp.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 
 import socket
-from util import ip4_range, reassemble4_ether
+from vpp_pom.util import ip4_range, reassemble4_ether
 import unittest
 from framework import VppTestCase, VppTestRunner
 from template_bd import BridgeDomain
@@ -11,8 +11,8 @@ from scapy.packet import Raw
 from scapy.layers.inet import IP, UDP
 from scapy.layers.vxlan import VXLAN
 
-from vpp_ip_route import VppIpRoute, VppRoutePath
-from vpp_ip import INVALID_INDEX
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
+from vpp_pom.vpp_ip import INVALID_INDEX
 
 
 class TestVxlanGbp(VppTestCase):
@@ -98,12 +98,12 @@ class TestVxlanGbp(VppTestCase):
                                   ip_range_start,
                                   ip_range_end):
             # add host route so dest_ip4 will not be resolved
-            rip = VppIpRoute(cls, dest_ip4, 32,
+            rip = VppIpRoute(cls.vclient, dest_ip4, 32,
                              [VppRoutePath(next_hop_address,
                                            INVALID_INDEX)],
                              register=False)
             rip.add_vpp_config()
-            r = cls.vapi.vxlan_gbp_tunnel_add_del(
+            r = cls.vclient.vxlan_gbp_tunnel_add_del(
                 tunnel={
                     'src': cls.pg0.local_ip4,
                     'dst': dest_ip4,
@@ -114,7 +114,7 @@ class TestVxlanGbp(VppTestCase):
                 },
                 is_add=1
             )
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=vni)
 
     # Class method to start the VXLAN GBP test case.
@@ -147,7 +147,7 @@ class TestVxlanGbp(VppTestCase):
             # pg1 into BD.
             cls.single_tunnel_bd = 1
             cls.single_tunnel_vni = 0xabcde
-            r = cls.vapi.vxlan_gbp_tunnel_add_del(
+            r = cls.vclient.vxlan_gbp_tunnel_add_del(
                 tunnel={
                     'src': cls.pg0.local_ip4,
                     'dst': cls.pg0.remote_ip4,
@@ -158,9 +158,9 @@ class TestVxlanGbp(VppTestCase):
                 },
                 is_add=1
             )
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=cls.single_tunnel_bd)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg1.sw_if_index,
                 bd_id=cls.single_tunnel_bd)
 
@@ -170,7 +170,7 @@ class TestVxlanGbp(VppTestCase):
             cls.ucast_flood_bd = 3
             cls.create_vxlan_gbp_flood_test_bd(cls.ucast_flood_bd,
                                                cls.n_ucast_tunnels)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg3.sw_if_index,
                 bd_id=cls.ucast_flood_bd)
         except Exception:
@@ -255,7 +255,7 @@ class TestVxlanGbp(VppTestCase):
         Verify receipt of encapsulated frames on pg0
         """
 
-        self.vapi.sw_interface_set_mtu(self.pg0.sw_if_index, [1500, 0, 0, 0])
+        self.vclient.sw_interface_set_mtu(self.pg0.sw_if_index, [1500, 0, 0, 0])
 
         frame = (Ether(src='00:00:00:00:00:02', dst='00:00:00:00:00:01') /
                  IP(src='4.3.2.1', dst='1.2.3.4') /
@@ -283,10 +283,10 @@ class TestVxlanGbp(VppTestCase):
         super(TestVxlanGbp, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show bridge-domain 1 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 3 detail"))
-        self.logger.info(self.vapi.cli("show vxlan-gbp tunnel"))
-        self.logger.info(self.vapi.cli("show error"))
+        self.logger.info(self.vclient.cli("show bridge-domain 1 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 3 detail"))
+        self.logger.info(self.vclient.cli("show vxlan-gbp tunnel"))
+        self.logger.info(self.vclient.cli("show error"))
 
 
 if __name__ == '__main__':
diff --git a/test/test_vxlan_gpe.py b/test/test_vxlan_gpe.py
index c5d6bf07f..5395c88f4 100644
--- a/test/test_vxlan_gpe.py
+++ b/test/test_vxlan_gpe.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 
 import socket
-from util import ip4_range
+from vpp_pom.util import ip4_range
 import unittest
 from framework import VppTestCase, VppTestRunner, running_extended_tests
 from template_bd import BridgeDomain
@@ -11,10 +11,10 @@ from scapy.packet import Raw
 from scapy.layers.inet import IP, UDP
 from scapy.layers.vxlan import VXLAN
 
-import util
-from vpp_ip_route import VppIpRoute, VppRoutePath
+import vpp_pom.util as util
+from vpp_pom.vpp_ip_route import VppIpRoute, VppRoutePath
 
-from vpp_ip import INVALID_INDEX
+from vpp_pom.vpp_ip import INVALID_INDEX
 
 
 @unittest.skipUnless(running_extended_tests, "part of extended tests")
@@ -94,17 +94,17 @@ class TestVxlanGpe(BridgeDomain, VppTestCase):
         for dest_ip4 in ip4_range(next_hop_address, ip_range_start,
                                   ip_range_end):
             # add host route so dest_ip4n will not be resolved
-            rip = VppIpRoute(cls, dest_ip4, 32,
+            rip = VppIpRoute(cls.vclient, dest_ip4, 32,
                              [VppRoutePath(next_hop_address,
                                            INVALID_INDEX)],
                              register=False)
             rip.add_vpp_config()
 
-            r = cls.vapi.vxlan_gpe_add_del_tunnel(
+            r = cls.vclient.vxlan_gpe_add_del_tunnel(
                 src_addr=cls.pg0.local_ip4,
                 dst_addr=dest_ip4,
                 vni=vni)
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=vni)
 
     @classmethod
@@ -117,7 +117,7 @@ class TestVxlanGpe(BridgeDomain, VppTestCase):
         vni_start = 1000
         vni_end = vni_start + n_shared_dst_tunnels
         for vni in range(vni_start, vni_end):
-            r = cls.vapi.vxlan_gpe_add_del_tunnel(
+            r = cls.vclient.vxlan_gpe_add_del_tunnel(
                 local=cls.pg0.local_ip4,
                 remote=cls.mcast_ip4,
                 mcast_sw_if_index=1,
@@ -145,7 +145,7 @@ class TestVxlanGpe(BridgeDomain, VppTestCase):
         for dest_ip4 in ip4_range(cls.mcast_ip4, ip_range_start,
                                   ip_range_end):
             vni = int(dest_ip4.split(".")[3])
-            cls.vapi.vxlan_gpe_add_del_tunnel(
+            cls.vclient.vxlan_gpe_add_del_tunnel(
                 src_addr=cls.pg0.local_ip4,
                 dst_addr=dest_ip4,
                 mcast_sw_if_index=1,
@@ -192,13 +192,13 @@ class TestVxlanGpe(BridgeDomain, VppTestCase):
             # and pg1 into BD.
             cls.single_tunnel_vni = 0xabcde
             cls.single_tunnel_bd = 11
-            r = cls.vapi.vxlan_gpe_add_del_tunnel(
+            r = cls.vclient.vxlan_gpe_add_del_tunnel(
                 src_addr=cls.pg0.local_ip4,
                 dst_addr=cls.pg0.remote_ip4,
                 vni=cls.single_tunnel_vni)
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=cls.single_tunnel_bd)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg1.sw_if_index, bd_id=cls.single_tunnel_bd)
 
             # Setup vni 2 to test multicast flooding
@@ -206,14 +206,14 @@ class TestVxlanGpe(BridgeDomain, VppTestCase):
             cls.mcast_flood_bd = 12
             cls.create_vxlan_gpe_flood_test_bd(cls.mcast_flood_bd,
                                                cls.n_ucast_tunnels)
-            r = cls.vapi.vxlan_gpe_add_del_tunnel(
+            r = cls.vclient.vxlan_gpe_add_del_tunnel(
                 src_addr=cls.pg0.local_ip4,
                 dst_addr=cls.mcast_ip4,
                 mcast_sw_if_index=1,
                 vni=cls.mcast_flood_bd)
-            cls.vapi.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
+            cls.vclient.sw_interface_set_l2_bridge(rx_sw_if_index=r.sw_if_index,
                                                 bd_id=cls.mcast_flood_bd)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg2.sw_if_index, bd_id=cls.mcast_flood_bd)
 
             # Add and delete mcast tunnels to check stability
@@ -226,7 +226,7 @@ class TestVxlanGpe(BridgeDomain, VppTestCase):
             cls.ucast_flood_bd = 13
             cls.create_vxlan_gpe_flood_test_bd(cls.ucast_flood_bd,
                                                cls.n_ucast_tunnels)
-            cls.vapi.sw_interface_set_l2_bridge(
+            cls.vclient.sw_interface_set_l2_bridge(
                 rx_sw_if_index=cls.pg3.sw_if_index, bd_id=cls.ucast_flood_bd)
         except Exception:
             super(TestVxlanGpe, cls).tearDownClass()
@@ -253,12 +253,12 @@ class TestVxlanGpe(BridgeDomain, VppTestCase):
         super(TestVxlanGpe, self).tearDown()
 
     def show_commands_at_teardown(self):
-        self.logger.info(self.vapi.cli("show bridge-domain 11 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 12 detail"))
-        self.logger.info(self.vapi.cli("show bridge-domain 13 detail"))
-        self.logger.info(self.vapi.cli("show int"))
-        self.logger.info(self.vapi.cli("show vxlan-gpe"))
-        self.logger.info(self.vapi.cli("show trace"))
+        self.logger.info(self.vclient.cli("show bridge-domain 11 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 12 detail"))
+        self.logger.info(self.vclient.cli("show bridge-domain 13 detail"))
+        self.logger.info(self.vclient.cli("show int"))
+        self.logger.info(self.vclient.cli("show vxlan-gpe"))
+        self.logger.info(self.vclient.cli("show trace"))
 
 
 if __name__ == '__main__':
diff --git a/test/vpp_bvi_interface.py b/test/vpp_bvi_interface.py
deleted file mode 100644
index 7039f29ca..000000000
--- a/test/vpp_bvi_interface.py
+++ /dev/null
@@ -1,22 +0,0 @@
-from vpp_object import VppObject
-from vpp_interface import VppInterface
-
-
-class VppBviInterface(VppInterface, VppObject):
-    """VPP bvi interface."""
-
-    def __init__(self, test):
-        """ Create VPP BVI interface """
-        super(VppBviInterface, self).__init__(test)
-        self.add_vpp_config()
-
-    def add_vpp_config(self):
-        r = self.test.vapi.bvi_create(user_instance=0xffffffff,
-                                      mac="00:00:00:00:00:00")
-        self.set_sw_if_index(r.sw_if_index)
-
-    def remove_vpp_config(self):
-        self.test.vapi.bvi_delete(sw_if_index=self.sw_if_index)
-
-    def object_id(self):
-        return "bvi-%d" % self._sw_if_index
diff --git a/test/vpp_lo_interface.py b/test/vpp_lo_interface.py
deleted file mode 100644
index 36f56bed8..000000000
--- a/test/vpp_lo_interface.py
+++ /dev/null
@@ -1,21 +0,0 @@
-from vpp_object import VppObject
-from vpp_interface import VppInterface
-
-
-class VppLoInterface(VppInterface, VppObject):
-    """VPP loopback interface."""
-
-    def __init__(self, test):
-        """ Create VPP loopback interface """
-        super(VppLoInterface, self).__init__(test)
-        self.add_vpp_config()
-
-    def add_vpp_config(self):
-        r = self.test.vapi.create_loopback()
-        self.set_sw_if_index(r.sw_if_index)
-
-    def remove_vpp_config(self):
-        self.test.vapi.delete_loopback(self.sw_if_index)
-
-    def object_id(self):
-        return "loopback-%d" % self._sw_if_index
diff --git a/test/vrf.py b/test/vrf.py
index b3daceed2..5cacc69df 100644
--- a/test/vrf.py
+++ b/test/vrf.py
@@ -1,6 +1,6 @@
 """ VRF Status codes """
 
-from util import NumericConstant
+from vpp_pom.util import NumericConstant
 
 
 class VRFState(NumericConstant):
-- 
2.17.1

