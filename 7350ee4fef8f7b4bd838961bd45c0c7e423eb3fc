{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "91f50337_d69c642d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 193
      },
      "writtenOn": "2023-06-01T18:37:34Z",
      "side": 1,
      "message": "Hi, Yang! This is really interesting but the current code is pretty invasive, as it expands several data structures that we typically avoid changing. Moreover, note that vlib buffer metadata is not guaranteed to survive transition through multiple nodes, i.e., if additional features are configured between nat and tcp/udp input metadata might be corrupted. \n\nOne suggestion would be to maybe glean the original dst ip/port in session_api just before notifying the app of the accept event, if a nat translation table exists. And we should enable this feature with a startup config session stanza flag as we don\u0027t want to be looking for nat dest ips always. It would probably be even better if we could do the nat table lookup only on demand, not on accept, as a request from VPPCOM_ATTR_GET_ORIGINAL_DST attr handler to session layer.",
      "revId": "7350ee4fef8f7b4bd838961bd45c0c7e423eb3fc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c525b81e_f3e4fbee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 2975
      },
      "writtenOn": "2023-06-02T03:31:58Z",
      "side": 1,
      "message": "Hi,Florin! Thanks for your reply.The code is invasive indeed, only taking into account my project needs which is latency sensitive.It\u0027s a good idea to fetch original dst info by lookup nat session table.\n\nI have considered querying nat session table every time the VPP receives a requset from vcl, but worried about higher latency.Would it be better attach original dst ip/port before notifying accept event? So that app can get attached info from cache memory directly instead of quering table every time.",
      "parentUuid": "91f50337_d69c642d",
      "revId": "7350ee4fef8f7b4bd838961bd45c0c7e423eb3fc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9d252b2_fd42426c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 193
      },
      "writtenOn": "2023-06-02T04:06:36Z",
      "side": 1,
      "message": "It should be possible, but then I\u0027d like to avoid doing this type of nat lookup for all applications, especially as nat will not always be configured. I suggested one option above with startup.conf config but probably a better alternative would be to add a new app flag (see app_attach_options_index_t) which would enable this feature per app. We could add these types of flags to vcl.conf and pass them down to vpp at attach time.",
      "parentUuid": "c525b81e_f3e4fbee",
      "revId": "7350ee4fef8f7b4bd838961bd45c0c7e423eb3fc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ca3ffe5_2f9c1e13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 2975
      },
      "writtenOn": "2023-06-02T06:25:31Z",
      "side": 1,
      "message": "Thanks for your advice.I need get through how app_attach_options_index_t works first.",
      "parentUuid": "a9d252b2_fd42426c",
      "revId": "7350ee4fef8f7b4bd838961bd45c0c7e423eb3fc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ace4d3d4_65b4d685",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 2975
      },
      "writtenOn": "2023-06-15T09:04:21Z",
      "side": 1,
      "message": "I attempted to include \u003cplugins/nat/nat44-ed/nat44_ed.api.h\u003e in vcl_bapi.c and then called get_original_dst (a new bapi handler function) from nat44_ed_api.c to query the original dst. However, I encountered a compilation error:\n\n    CMakeFiles/plugins/nat/nat44-ed/nat44_ed.api.h:23:10: fatal error: \u0027nat/lib/nat_types.api.h\u0027 file not found.\n\nHere is subinclude in nat44_ed.api.h:\n    #define VL_API_PACKED(x) x __attribute__ ((packed))\n    /* Imported API files */\n    #ifndef vl_api_version\n    #include \u003cvnet/ip/ip_types.api.h\u003e\n    #include \u003cvnet/interface_types.api.h\u003e\n    #include \u003cnat/lib/nat_types.api.h\u003e\n    #endif\n\nnat_types.api.h is generated by src/tools/vppapigen/vppapigen_c.py, and it removes the \"plugins/\" prefix.\n\n    def generate_imports(imports):\n    \"\"\"Add #include matching the API import statements\"\"\"\n    output \u003d \"/* Imported API files */\\n\"\n    output +\u003d \"#ifndef vl_api_version\\n\"\n\n    for i in imports:\n        s \u003d i.filename.replace(\"plugins/\", \"\")\n        output +\u003d \"#include \u003c{}.h\u003e\\n\".format(s)\n    output +\u003d \"#endif\\n\"\n    return output\n\nIt seems that the vcl module cannot directly invoke the nat bapi interface under the plugins directory.\n(After removing all instances of replace(\"plugins/\", \"\") in vppapigen_c.py, the compilation can be successful.)",
      "parentUuid": "1ca3ffe5_2f9c1e13",
      "revId": "7350ee4fef8f7b4bd838961bd45c0c7e423eb3fc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f20407d8_5b553a90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 193
      },
      "writtenOn": "2023-06-15T15:19:44Z",
      "side": 1,
      "message": "Hi Yang, several quick comments:\n- let\u0027s just do C apis for now by reading the mappings in session_api.c just before sending the accept to vcl. Because nat is a plugin this might be still tricky because you\u0027ll need means of making sure the nat plugin has been loaded, so maybe something will have to be initialized when session layer is enabled\n- vcl is slowly moving away from binary api to socket api. Both are available today but the former will eventually be removed.",
      "parentUuid": "ace4d3d4_65b4d685",
      "revId": "7350ee4fef8f7b4bd838961bd45c0c7e423eb3fc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "821479ed_119dd308",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 2975
      },
      "writtenOn": "2023-06-16T06:29:06Z",
      "side": 1,
      "message": "Hi,Florin,Thanks very much for your reply.\n\nIn fact, I have tried both two methods to avoid modifying the vlib buffer:\n\n1.Calling the nat bapi in vcl as mentioned before, it resulted in compilation failure. I have not yet tried calling the socket API.\n2.Calling the C API in session_api.c to query nat sessions (as you mentioned above). However, this also resulted in compilation failure as the original_dst_lookup() function is in the nat plugin, which is not loaded by default.Calling functions from the plugin within the session base library seems a bit inappropriate.\n\nShould I try using the socket API in VCL or add options in CMake to load the nat plugin?",
      "parentUuid": "f20407d8_5b553a90",
      "revId": "7350ee4fef8f7b4bd838961bd45c0c7e423eb3fc",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}