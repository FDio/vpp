{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ddf2eff1_bc6eb4f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 906
      },
      "writtenOn": "2022-11-23T09:34:10Z",
      "side": 1,
      "message": "perftest-2n-clx mrrANDnic_mellanox-cx556aANDdrv_rdma_coreAND1cAND64bANDeth-l2bdbasemaclrn-eth-2memif-1dcr",
      "revId": "813c1bd257ddcc573422083bd66cc8b8ed79d5b2",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2c676f4_4c06ca06",
        "filename": "src/vppinfra/hash.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 2561
      },
      "writtenOn": "2022-11-28T07:05:54Z",
      "side": 1,
      "message": "BITS(x) is defined as (8*sizeof(x)), is_user as uword *is_user.\nIsn\u0027t BITS(h-\u003eis_user[0]) will always be already constant 8*sizeof(uword)?",
      "revId": "813c1bd257ddcc573422083bd66cc8b8ed79d5b2",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ddcfca1_4df27779",
        "filename": "src/vppinfra/hash.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 2832
      },
      "writtenOn": "2023-01-09T16:09:07Z",
      "side": 1,
      "message": "maybe\n#define\tBIT_SIZEOF(x) (sizeof(x) * CHAR_BIT)",
      "parentUuid": "c2c676f4_4c06ca06",
      "revId": "813c1bd257ddcc573422083bd66cc8b8ed79d5b2",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e3ef9b7_0e876935",
        "filename": "src/vppinfra/hash.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 2832
      },
      "writtenOn": "2023-01-10T18:16:34Z",
      "side": 1,
      "message": "after revisit this code, I wonder what is the problem here? h-\u003euser[0] is pointer, so BITS(h-\u003eis_user[0]) will be 8*sizeof(pointer) and the sizeof pointer is depend on the word size of the processor.",
      "parentUuid": "4ddcfca1_4df27779",
      "revId": "813c1bd257ddcc573422083bd66cc8b8ed79d5b2",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "384183a8_c9242106",
        "filename": "src/vppinfra/hash.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 2479
      },
      "writtenOn": "2023-01-11T07:49:30Z",
      "side": 1,
      "message": "so BITS (h-\u003eis_user[0]) will return the size of pointer in bits",
      "parentUuid": "1e3ef9b7_0e876935",
      "revId": "813c1bd257ddcc573422083bd66cc8b8ed79d5b2",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6737128f_95d02bcf",
        "filename": "src/vppinfra/hash.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 2561
      },
      "writtenOn": "2023-01-11T16:51:38Z",
      "side": 1,
      "message": "actually not, h-\u003eis_user[0] is not pointer, here h-\u003eis_user is pointer to an array of uword, h-\u003eis_user[0] is just uword value.\nsizeof(uword) is known at compile time, so, BITS(h-\u003eis_user[0]) \u003d\u003d 8*sizeof(uword) is compile-time constant as well, i.e 64 on x64.\nwith -O0 optimization commit adds local variable, used with div.\nwith -O2 the both variants of hash_is_user() (previous and current) produce same asm code - \"bits\" variable is being optimized out and shr is used for division by known compile-time constant.\nthat\u0027s why I can\u0027t understand how the commit helps to improve tread safety, isn\u0027t it noop?",
      "parentUuid": "384183a8_c9242106",
      "revId": "813c1bd257ddcc573422083bd66cc8b8ed79d5b2",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}