{
  "comments": [
    {
      "key": {
        "uuid": "ce1050da_3ab07948",
        "filename": "src/vnet/ipsec/ipsec.c",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 9
      },
      "writtenOn": "2021-07-15T07:55:10Z",
      "side": 1,
      "message": "I guess this needs to be removed as bihash is not used anymoreâ€¦.",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cf02a41_ba976375",
        "filename": "src/vnet/ipsec/ipsec.c",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 2229
      },
      "writtenOn": "2021-07-15T20:09:40Z",
      "side": 1,
      "message": "Hi Damjan, This bihash code is not related to Flow cache and it is moved from vnet/ipsec/ipsec_tun.c. We want to consolidate all IPSec startup conf code in a common file (ipsec.c) and add Flow cache setting as part of it. We can submit this in a separate patch. Please let us know whether we can do it in a separate patch or not.",
      "parentUuid": "ce1050da_3ab07948",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d2cce10_06530913",
        "filename": "src/vnet/ipsec/ipsec.c",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 9
      },
      "writtenOn": "2021-07-15T21:15:11Z",
      "side": 1,
      "message": "Not sure I understand your motivation but definitely this doesn\u0027t belong into this patch.",
      "parentUuid": "0cf02a41_ba976375",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c33dceb3_2eb44ebb",
        "filename": "src/vnet/ipsec/ipsec_input.c",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 9
      },
      "writtenOn": "2021-07-15T07:55:10Z",
      "side": 1,
      "message": "Why not using per-thread data structures and avoid locking?",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "883dc9ea_b00ec171",
        "filename": "src/vnet/ipsec/ipsec_input.c",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 2229
      },
      "writtenOn": "2021-07-15T20:09:40Z",
      "side": 1,
      "message": "Maintaining hash table at per thread level will consume more memory.\nTo avoid locks, we thought of updating KVP pointer atomically instead of KVP itself, but it will degrade the performance due to double indirection (Hash table pointer-\u003eKVP Pointer-\u003eKVP) to fetch KVP.",
      "parentUuid": "c33dceb3_2eb44ebb",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "386052ae_61db9e7d",
        "filename": "src/vnet/ipsec/ipsec_input.c",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 9
      },
      "writtenOn": "2021-07-15T21:15:11Z",
      "side": 1,
      "message": "It is very unlikely that one flow will show up on more than one thread so I don\u0027t think more memory is valid concern here.\n\nEven if it is more memory it is better than locks or atomics...",
      "parentUuid": "883dc9ea_b00ec171",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69ff5ce7_5b526a68",
        "filename": "src/vnet/ipsec/ipsec_input.c",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 2229
      },
      "writtenOn": "2021-07-15T23:35:32Z",
      "side": 1,
      "message": "IP packets belonging to same flow can enter the system on different ports and land on different worker cores/threads. This will lead to multiple KVP entry additions on thread level hash tables and can can result in minor degradation. I agree that performance will be better over all. As a quick check, we will measure single core performance of flow cache by removing the spin locks and see how much is the improvement. We can decide based on that.",
      "parentUuid": "386052ae_61db9e7d",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5cfbad8_4374d43f",
        "filename": "src/vnet/ipsec/ipsec_spd_policy.c",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 9
      },
      "writtenOn": "2021-07-15T07:55:10Z",
      "side": 1,
      "message": "how this differ to normal store i.e. im-\u003eipsec4_in_spd_flow_cache_entries \u003d 0 ?",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26bd42ef_f09cfc48",
        "filename": "src/vnet/ipsec/ipsec_spd_policy.c",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 2229
      },
      "writtenOn": "2021-07-15T20:09:40Z",
      "side": 1,
      "message": "Compiler may not emit the instructions to guarantee atomicity for normal store of this shared variable between writers (CP and DP).",
      "parentUuid": "c5cfbad8_4374d43f",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25f88844_3babfa2f",
        "filename": "src/vnet/ipsec/ipsec_spd_policy.c",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 9
      },
      "writtenOn": "2021-07-15T21:15:11Z",
      "side": 1,
      "message": "Huh, are you saying that compiler may. not use single 32-bit store instruction to store 32-bit number to memory?\nCan you prove that?",
      "parentUuid": "26bd42ef_f09cfc48",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c0423d1_696eba60",
        "filename": "src/vnet/ipsec/ipsec_spd_policy.c",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 2229
      },
      "writtenOn": "2021-07-15T23:35:32Z",
      "side": 1,
      "message": "On aarch64, aligned loads and stores up to 64 bits are atomic. Not sure about other architectures.",
      "parentUuid": "25f88844_3babfa2f",
      "revId": "0b02111e76015f647e478c6ec700b2f8d932860b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}