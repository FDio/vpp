{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "82fe91d0_d683e018",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1849
      },
      "writtenOn": "2023-06-26T12:43:50Z",
      "side": 1,
      "message": "Please correct me if I am wrong but looks like you removed all original plain text packets tests and replaced by encrypted packets. Can you explain why you think the original tests are not necessary any more?",
      "revId": "ff5372983219ff8048062e67d281242bb334c92a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbc3bcd3_c0f2b61c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 2931
      },
      "writtenOn": "2023-06-30T08:51:46Z",
      "side": 1,
      "message": "I think VLIB_NODE_FN (ipsec4_input_node) is to handle IPsec traffic(Be it ESP,AH or ESP encapsulated UDP). \nNoticed that plane text TCP and ICMP packet being forwarded without SPD policy match, Where UDP being dropped. \nTo proof that , just modify traffic type from UDP to TCP , will see all test get fails with same policy rules. \nIn my further investigation I found that, https://gerrit.fd.io/r/c/vpp/+/38791/4/src/vnet/ipsec/ipsec_input.c#549  line 549 hit for UDP as well as ESP encapsulated UDP packet. Probably , there is mishandling in RFC 3948.",
      "parentUuid": "82fe91d0_d683e018",
      "revId": "ff5372983219ff8048062e67d281242bb334c92a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ead87e5_0b505c53",
        "filename": "test/asf/test_ipsec_default.py",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1849
      },
      "writtenOn": "2023-06-30T09:44:45Z",
      "side": 1,
      "message": "Sorry I didn\u0027t make myself clear - the original test here targets plain packet bypass policy - not the encrypted and udp encapped packet. The test was also created for specific reason. Your test itself is ok but please create new test instead of replacing existing one.",
      "revId": "ff5372983219ff8048062e67d281242bb334c92a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "541aaf27_b2d5d14a",
        "filename": "test/asf/test_ipsec_default.py",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 2931
      },
      "writtenOn": "2023-07-03T07:57:51Z",
      "side": 1,
      "message": "I had also doubt initially when I started working on this issue. Why plain text TCP and ICMP traffic did not consider to match against Bypass policy ? \nAs https://gerrit.fd.io/r/c/vpp/+/38791/4/src/vnet/ipsec/ipsec_input.c#546 only plain text UDP handled to match against Bypass/Protect/discard . tests are tuned to send UDP traffic only. \nFor TCP and ICMP control directly goes to https://gerrit.fd.io/r/c/vpp/+/38791/4/src/vnet/ipsec/ipsec_input.c#698 after line 546.  When I correct logic for UDP as same as TCP and ICMP\nMost of test case start failing. So I assumed that inbound node only to deal IPsec traffic for decrypt /bypass/discard. I may wrong …. Pls provide reference to deal plan traffic as well.",
      "parentUuid": "2ead87e5_0b505c53",
      "revId": "ff5372983219ff8048062e67d281242bb334c92a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb2dd81b_0fa26354",
        "filename": "test/asf/test_ipsec_default.py",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1849
      },
      "writtenOn": "2023-07-19T02:29:34Z",
      "side": 1,
      "message": "First, your doubt.\n\nIt is valid, for now VPP relies on the user carefully setting the routing/punting correctly to drop TCP/ICMP or any other packet types except for UDP or ESP that may be harmful or invalid as it is cheaper to do so (ipsec_input just pass through and expect l3 input/lookup to drop them).\n\nIn the perfect world yes it may be better for those packets filtered by the graph node - I assume this can be in our TODO list - but as nobody complains yet, so nothing happened.\n\nSecond, your tests.\n\nTo coop with the code the tests shall include both UDP and UDP encapped IPsec packets to test the behavior. I really don\u0027t think replacing the old tests to only UDP encapped IPsec is a good idea.",
      "parentUuid": "541aaf27_b2d5d14a",
      "revId": "ff5372983219ff8048062e67d281242bb334c92a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79e1c596_3fe19f56",
        "filename": "test/asf/test_ipsec_default.py",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 2931
      },
      "writtenOn": "2023-08-07T08:17:06Z",
      "side": 1,
      "message": "I tried to check IPsec XFRM implementation\n\nBehavior of plain traffic like TCP, UDP, ICMP are same w.r.t inbound processing \nFor plain traffic , routing and inbound policy , both are in action to take decision where routing table is taking decision early. e.g. case 3 \n\nFor inbound traffic : \nTuple [ DST IP, Protocol Type, SPI, ]\n1 ) encrypted packet matches tuple in SPD ,  resolved SA and do decapsulation and decryption \n2)  plain packet(UDP, TCP, ICMP) partial matches  tuple in SPD , dropped with error “XfrmInTmplMismatch” \n3)  plain packet(UDP, TCP, ICMP) does not matches tuple in SPD , bypassed \n\nTo avoid case 2 , we can setup policy without SA (excluding TMPL field) – Bypass  \nip netns exec ipsec_end_b ip xfrm policy add src 192.168.1.100/24 dst 192.168.2.100/24 dir in priority 2070 action block/allow \n\nInbound SA and Policy:-  \n\nip netns exec ipsec_end_a ip xfrm state add src 192.168.1.100 dst 192.168.2.100 proto esp spi 0x53fa0fdd mode transport reqid 16386 replay-window 32 auth \"hmac(sha1)\" 0x55f01ac07e15e437115dde0aedd18a822ba9f81e enc \"cbc(aes)\" 0x6aed4975adf006d65c76f63923a6265b sel src 0.0.0.0/0 dst 0.0.0.0/0\nip netns exec ipsec_end_a ip xfrm policy add dir out src 192.168.1.100 dst 192.168.2.100 ptype main action allow priority 2080 tmpl src 192.168.1.100 dst 192.168.2.100 proto esp spi 0x53fa0fdd reqid 16386 mode transport\n\nip netns exec ipsec_end_b ip xfrm state add src 192.168.1.100 dst 192.168.2.100 proto esp spi 0x53fa0fdd mode transport reqid 16386 replay-window 32 auth \"hmac(sha1)\" 0x55f01ac07e15e437115dde0aedd18a822ba9f81e enc \"cbc(aes)\" 0x6aed4975adf006d65c76f63923a6265b sel src 0.0.0.0/0 dst 0.0.0.0/0\nip netns exec ipsec_end_b ip xfrm policy add dir in src 192.168.1.100 dst 192.168.2.100 ptype main action allow priority 2080 tmpl src 192.168.1.100 dst 192.168.2.100 proto esp spi 0x53fa0fdd reqid 16386 mode transport\nip netns exec ipsec_end_b ip xfrm policy add dir fwd src 192.168.1.100 dst 192.168.2.100 ptype main action allow priority 2080 tmpl src 192.168.1.100 dst 192.168.2.100 proto esp spi 0x53fa0fdd reqid 16386 mode transport",
      "parentUuid": "eb2dd81b_0fa26354",
      "revId": "ff5372983219ff8048062e67d281242bb334c92a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}