{
  "comments": [
    {
      "key": {
        "uuid": "8f627fc7_9f13d978",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 11
      },
      "writtenOn": "2018-08-22T15:43:16Z",
      "side": 1,
      "message": "Just comparing ethernet header is not enough to guarantee the same flow hash. The function vnet_l2_compute_flow_hash() would do L3 5-tupple hash if the payload is IPv4 or IPv6 packet.",
      "range": {
        "startLine": 140,
        "startChar": 14,
        "endLine": 140,
        "endChar": 20
      },
      "revId": "6cc6b636dfb89410939e4f1db68f7d152b3bf703",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3120853d_32600ac0",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1374
      },
      "writtenOn": "2018-08-23T04:59:34Z",
      "side": 1,
      "message": "Thanks for reminder. L3 5tuple hash will be added. How about this patch\u0027s idea? Is it feasibleï¼Ÿ",
      "parentUuid": "8f627fc7_9f13d978",
      "range": {
        "startLine": 140,
        "startChar": 14,
        "endLine": 140,
        "endChar": 20
      },
      "revId": "6cc6b636dfb89410939e4f1db68f7d152b3bf703",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab1b4126_5c959992",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 11
      },
      "writtenOn": "2018-08-23T17:11:37Z",
      "side": 1,
      "message": "I suppose one would need to parse the L3 and L4 packet header to extract and cache the 5-tupple value of the packet to compare, using ~0 for the ones that does not apply. I wonder if the process of extracting the 5-tupple and compare would be worth it or not compare with always generating the 5-tupple hash. If you like to try this approach, we should compare the performance for both 5-tupple cache hit and cache miss before and after your patch.",
      "parentUuid": "3120853d_32600ac0",
      "range": {
        "startLine": 140,
        "startChar": 14,
        "endLine": 140,
        "endChar": 20
      },
      "revId": "6cc6b636dfb89410939e4f1db68f7d152b3bf703",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d77401eb_d507af97",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 2
      },
      "lineNbr": 352,
      "author": {
        "id": 9
      },
      "writtenOn": "2018-08-22T10:40:12Z",
      "side": 1,
      "message": "I would prefer avoiding use of memcmp, as some compilers are not smart enough to deal with it in performant way. Vector variant might be:\n\nload both addresses into  u8x16, XOR, mask and u8x16_is_all_zero().\n\nnon-vector version load 3 times (u64 + u32 +u16) and XOR all of them.",
      "range": {
        "startLine": 352,
        "startChar": 14,
        "endLine": 352,
        "endChar": 20
      },
      "revId": "6cc6b636dfb89410939e4f1db68f7d152b3bf703",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d563cbe_51915cbb",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 2
      },
      "lineNbr": 352,
      "author": {
        "id": 1374
      },
      "writtenOn": "2018-08-23T03:37:38Z",
      "side": 1,
      "message": "Ok. I also saw that memcmp consumes +1% cycles for the single core. Maybe your suggestion can help improve this. Thanks!. BTW, it looks that vector version have to add mask operation. Maybe, non-vector version is better, just guess here.",
      "parentUuid": "d77401eb_d507af97",
      "range": {
        "startLine": 352,
        "startChar": 14,
        "endLine": 352,
        "endChar": 20
      },
      "revId": "6cc6b636dfb89410939e4f1db68f7d152b3bf703",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}