{
  "comments": [
    {
      "key": {
        "uuid": "c3e81c61_0a84f50f",
        "filename": "src/plugins/tlsopenssl/tls_openssl.c",
        "patchSetId": 1
      },
      "lineNbr": 568,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "I\u0027d call this \"index\", as opposed to \"handle\", since it\u0027s an index in a pool. Handles, as we typically use them in tls/stack carry more information than the index (eg. they may carry the thread index and pool index).",
      "range": {
        "startLine": 568,
        "startChar": 2,
        "endLine": 568,
        "endChar": 11
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c23cd5cc_167b58f8",
        "filename": "src/plugins/tlsopenssl/tls_openssl.c",
        "patchSetId": 1
      },
      "lineNbr": 614,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "No pointers to pool elements, pls! :-)\n\nIf the pool expands (e.g., a new server issues a listen), you\u0027ll be left with a dangling reference whenever trying to access tls_ssl_ctx.\n\nNormally, in this sort of situation I\u0027d save the index and then retrieve the actual structure whenever needed. The problem however, is going to be the fact that start_listen() will most probably come on main thread and then you\u0027ll need to use the result on any of the workers.\n\nTo solve this, you can retrieve the actual structure whenever needed using openssl_ctx_get_w_thread(), with thread index being 0. Although this is *not* thread safe, it should be fine as long as start/stop listen are issued with a worker barrier sync, since it acts like a lock on the pool. External listen/connect come over the binary api, and so they are guarded by a worker barrier sync. Internal apps, on the other hand, could in theory call listen from workers although all the examples we have now, call listen from cli, so they\u0027re safe as well.\n\nAnother option would be to have an explicit lock and then perhaps allocate listeners out of another pool.",
      "range": {
        "startLine": 614,
        "startChar": 0,
        "endLine": 614,
        "endChar": 41
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a6d0550_d66335b4",
        "filename": "src/plugins/tlsopenssl/tls_openssl.c",
        "patchSetId": 1
      },
      "lineNbr": 625,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "This is one of the places where you\u0027ll have to use openssl_ctx_get_w_thread().",
      "range": {
        "startLine": 625,
        "startChar": 31,
        "endLine": 625,
        "endChar": 42
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ae773f7_26f26083",
        "filename": "src/vnet/tls/tls.c",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "Extraneous space",
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56f46548_970cd087",
        "filename": "src/vnet/tls/tls.h",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "In light of my other comments, I don\u0027t think you need this.",
      "range": {
        "startLine": 38,
        "startChar": 12,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7164b449_e296bdd4",
        "filename": "src/vnet/tls/tls.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "This should probably be a u32",
      "range": {
        "startLine": 46,
        "startChar": 2,
        "endLine": 46,
        "endChar": 15
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}