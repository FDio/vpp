{
  "comments": [
    {
      "key": {
        "uuid": "c3e81c61_0a84f50f",
        "filename": "src/plugins/tlsopenssl/tls_openssl.c",
        "patchSetId": 1
      },
      "lineNbr": 568,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "I\u0027d call this \"index\", as opposed to \"handle\", since it\u0027s an index in a pool. Handles, as we typically use them in tls/stack carry more information than the index (eg. they may carry the thread index and pool index).",
      "range": {
        "startLine": 568,
        "startChar": 2,
        "endLine": 568,
        "endChar": 11
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d37b682_067ee6e8",
        "filename": "src/plugins/tlsopenssl/tls_openssl.c",
        "patchSetId": 1
      },
      "lineNbr": 568,
      "author": {
        "id": 1269
      },
      "writtenOn": "2018-08-14T06:56:52Z",
      "side": 1,
      "message": "okay, understand, and actually the first version I use oc_index as well, but change it by referring the code in tls.c below.\nctx_handle \u003d tls_ctx_alloc (lctx-\u003etls_ctx_engine);",
      "parentUuid": "c3e81c61_0a84f50f",
      "range": {
        "startLine": 568,
        "startChar": 2,
        "endLine": 568,
        "endChar": 11
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c23cd5cc_167b58f8",
        "filename": "src/plugins/tlsopenssl/tls_openssl.c",
        "patchSetId": 1
      },
      "lineNbr": 614,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "No pointers to pool elements, pls! :-)\n\nIf the pool expands (e.g., a new server issues a listen), you\u0027ll be left with a dangling reference whenever trying to access tls_ssl_ctx.\n\nNormally, in this sort of situation I\u0027d save the index and then retrieve the actual structure whenever needed. The problem however, is going to be the fact that start_listen() will most probably come on main thread and then you\u0027ll need to use the result on any of the workers.\n\nTo solve this, you can retrieve the actual structure whenever needed using openssl_ctx_get_w_thread(), with thread index being 0. Although this is *not* thread safe, it should be fine as long as start/stop listen are issued with a worker barrier sync, since it acts like a lock on the pool. External listen/connect come over the binary api, and so they are guarded by a worker barrier sync. Internal apps, on the other hand, could in theory call listen from workers although all the examples we have now, call listen from cli, so they\u0027re safe as well.\n\nAnother option would be to have an explicit lock and then perhaps allocate listeners out of another pool.",
      "range": {
        "startLine": 614,
        "startChar": 0,
        "endLine": 614,
        "endChar": 41
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e81fd6a2_ac76f2d7",
        "filename": "src/plugins/tlsopenssl/tls_openssl.c",
        "patchSetId": 1
      },
      "lineNbr": 614,
      "author": {
        "id": 1269
      },
      "writtenOn": "2018-08-14T06:56:52Z",
      "side": 1,
      "message": "Thanks for the great comments. :)\nIn my first version implementation, I want to handle 3 openssl specific parameter which is produced from the call of \"start_listen\", that is, ssl_ctx, pkey and srvcert, so I re-use the existing openssl_ctx_t. Due to the limitation to use point in pool, I think this design is not good enough. So in the second implementation, I defined a new data structure to store the openssl listener specific info as openssl_listen_ctx_t. This data structure can decouple pkey, servcert from openssl_ctx_t to save memory. \nThen comes the question should I use a new pool to store this data structure? Probably not. The reason is both \"pkey\" and \"servcert\" is re-usable, and both is reproduced from \"app-\u003etls_cert\" or \"app-\u003etls-pkey\", so why not just store into openssl_main? \nBased on this, I have re-implement this code.",
      "parentUuid": "c23cd5cc_167b58f8",
      "range": {
        "startLine": 614,
        "startChar": 0,
        "endLine": 614,
        "endChar": 41
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a6d0550_d66335b4",
        "filename": "src/plugins/tlsopenssl/tls_openssl.c",
        "patchSetId": 1
      },
      "lineNbr": 625,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "This is one of the places where you\u0027ll have to use openssl_ctx_get_w_thread().",
      "range": {
        "startLine": 625,
        "startChar": 31,
        "endLine": 625,
        "endChar": 42
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "740fa503_00a5d739",
        "filename": "src/plugins/tlsopenssl/tls_openssl.c",
        "patchSetId": 1
      },
      "lineNbr": 625,
      "author": {
        "id": 1269
      },
      "writtenOn": "2018-08-14T06:56:52Z",
      "side": 1,
      "message": "If using a pool_index, then it requires a pool_elt_at_index call, and what\u0027s more, a lock may needed. To make data plane more efficient, I think this data structure can use SSL_CTX * directly, so there is no lock needed.",
      "parentUuid": "3a6d0550_d66335b4",
      "range": {
        "startLine": 625,
        "startChar": 31,
        "endLine": 625,
        "endChar": 42
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ae773f7_26f26083",
        "filename": "src/vnet/tls/tls.c",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "Extraneous space",
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "700af062_dfaf32ca",
        "filename": "src/vnet/tls/tls.c",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 1269
      },
      "writtenOn": "2018-08-14T06:56:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ae773f7_26f26083",
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56f46548_970cd087",
        "filename": "src/vnet/tls/tls.h",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "In light of my other comments, I don\u0027t think you need this.",
      "range": {
        "startLine": 38,
        "startChar": 12,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7164b449_e296bdd4",
        "filename": "src/vnet/tls/tls.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 193
      },
      "writtenOn": "2018-08-13T16:44:21Z",
      "side": 1,
      "message": "This should probably be a u32",
      "range": {
        "startLine": 46,
        "startChar": 2,
        "endLine": 46,
        "endChar": 15
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48abab4f_ec062adc",
        "filename": "src/vnet/tls/tls.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1269
      },
      "writtenOn": "2018-08-14T06:56:52Z",
      "side": 1,
      "message": "In the design needs to use u64 :)",
      "parentUuid": "7164b449_e296bdd4",
      "range": {
        "startLine": 46,
        "startChar": 2,
        "endLine": 46,
        "endChar": 15
      },
      "revId": "e124b2d8ec3a0777f6c43943f249554d87ed3664",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}