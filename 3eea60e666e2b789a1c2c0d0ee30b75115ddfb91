{
  "comments": [
    {
      "key": {
        "uuid": "e173b7e8_bc1d49fa",
        "filename": "src/plugins/unittest/sparse_vec_test.c",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 9
      },
      "writtenOn": "2019-03-28T20:59:52Z",
      "side": 1,
      "message": "inserting \" \" somewhere in the middle can make this look nicer :)",
      "range": {
        "startLine": 41,
        "startChar": 10,
        "endLine": 41,
        "endChar": 93
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaf81124_f8560623",
        "filename": "src/plugins/unittest/sparse_vec_test.c",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 320
      },
      "writtenOn": "2019-03-29T11:12:54Z",
      "side": 1,
      "message": "Good idea. I opted the \"del\" button though - hope the new variant is better :)",
      "parentUuid": "e173b7e8_bc1d49fa",
      "range": {
        "startLine": 41,
        "startChar": 10,
        "endLine": 41,
        "endChar": 93
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c4bd05b_983d83e5",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-03-28T20:58:00Z",
      "side": 1,
      "message": "Can you add a classmethod for tearDownClass?",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 46
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "084a2d81_f58ca84c",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 320
      },
      "writtenOn": "2019-03-29T11:12:54Z",
      "side": 1,
      "message": "Done, thanks for noting! I mechanically copypasted the test_string.py - what are the consequences of not having the classmethod tearDownClass ? it is absent in a few places...",
      "parentUuid": "5c4bd05b_983d83e5",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 46
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fa5fa6a_8b507b0c",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-03-29T13:52:30Z",
      "side": 1,
      "message": "I know.  The cleanup is here.  https://gerrit.fd.io/r/#/c/18269/\n\nIt\u0027s not strictly needed with a test case holds a single test method, but once a second test case is added, it is needed for cleanup.  The cleanup method does: \n        \"\"\" Perform final cleanup after running all tests in this test-case \"\"\"\n        cls.reporter.send_keep_alive(cls, \u0027tearDownClass\u0027)\n        cls.quit()\n        cls.file_handler.close()\n        cls.reset_packet_infos()\n        if debug_framework:\n            debug_internal.on_tear_down_class(cls)",
      "parentUuid": "084a2d81_f58ca84c",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 46
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52f03cb6_212bf1e3",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 320
      },
      "writtenOn": "2019-03-29T15:49:57Z",
      "side": 1,
      "message": "Oh, cool! Thanks for the info, good to know!",
      "parentUuid": "9fa5fa6a_8b507b0c",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 46
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14839807_9f96dd98",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-04-09T13:45:28Z",
      "side": 1,
      "message": "\u003e It\u0027s not strictly needed\n\nThen why should we waste space (and speed) by writing it?\n\nIf you want a reminder, replace (in future cleanup Change) lines 12-20 with a single comment line (perhaps two lines, depending on verbosity):\n\n# Do not forget to add setUp* and tearDown* methods when needed as described in {some document reference}.",
      "parentUuid": "52f03cb6_212bf1e3",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 46
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93052ffa_4d711f85",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-04-10T16:28:05Z",
      "side": 1,
      "message": "We do need it if we want to clear up all the swallowing of base exceptions.  We do need it if we want to run on more than the python2 unittest suite.  Right now, we have to use a custom runner/wrapper to manually manipulate the tests because the conventions aren\u0027t being followed.  \nHere is the reference: https://docs.python.org/2/library/unittest.html#setupclass-and-teardownclass . \n\n\"If you want the setUpClass and tearDownClass on base classes called then you must call up to them yourself. The implementations in TestCase are empty.\"",
      "parentUuid": "14839807_9f96dd98",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 46
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54c6f619_9777d744",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-04-11T11:26:42Z",
      "side": 1,
      "message": "\u003e If you want the setUpClass and tearDownClass on base classes called\n\nI am not sure what does \"base classes\" mean here.\n\n\u003e The implementations in TestCase are empty.\n\nBut we have implementations in VppTestCase.\n\n\u003e https://docs.python.org/2/library/unittest.html#setupclass-and-teardownclass\n\nI have also looked at #class-and-module-fixtures:\n\n  \"A BaseTestSuite still exists for frameworks that donâ€™t want to support shared fixtures.\"\n\nMaybe that is what they meant by \"base classes\"?\n\n  \"When the test suite encounters a test from a new class then tearDownClass() from the previous class (if there is one) is called, followed by setUpClass() from the new class.\"\n\nOnce again, I was not sure what they mean exactly by \"if there is one\". So I resorted to looking up the source code:\nhttps://github.com/python/cpython/blob/0f221d09cad46bee38d1b7a7822772df66c53028/Lib/unittest/suite.py#L286\n\nNo __dict__ shenanigans, plain getattr, which means we can rely on inheritance without explicit calls...\n\n\u003e Right now, we have to use a custom runner/wrapper to manually manipulate the tests because the conventions aren\u0027t being followed.\n\n... unless that implies the code in suite.py is not executed?\n\n\u003e We do need it if we want to clear up all the swallowing of base exceptions.\n\nI do not follow. Do you have an example?\n\nOverall, perhaps it would be quicker for me to contribute a Change which removes the calls, see whether verify fails, and if not ask you why.\nBut I have already written this comment, so posting it is even quicker.",
      "parentUuid": "93052ffa_4d711f85",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 46
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b9f1a31_d42ff446",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 320
      },
      "writtenOn": "2019-04-11T11:45:30Z",
      "side": 1,
      "message": "\"verify succeeds\" is a wrong success criterion, Vratko. Example: \"rm -rf test/test_acl_plugin*\" does not fail the verify. As far as I understand, the intent of these classes is to precisely make verify fail whereas before it would have succeeded and masked the underlying failure. Paul, please correct me if I mixed something up :)",
      "parentUuid": "54c6f619_9777d744",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 46
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0629451_f7c79bd6",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-04-11T17:58:25Z",
      "side": 1,
      "message": "\u003e contribute a Change which removes the calls\n\nSo I decided to do that (just so I can say I have contributed more than just negative comments).\nIt was not pleasant, it felt like work. I have probably underestimated the number of calls to remove (and overestimated my editing skills).\nAnyway, it is here [3].\n\n\u003e \"verify succeeds\" is a wrong success criterion\n\nThanks, that has given me an idea of a better verification.\nI have created [4], but I do not see the logging output (which would prove there is no difference between implicit and explicit calls).\n\nCurently I believe [3] can be merged and [4] then abandoned.\n\n[3] https://gerrit.fd.io/r/18820\n[4] https://gerrit.fd.io/r/18821",
      "parentUuid": "4b9f1a31_d42ff446",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 46
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76b0910a_4afb6dad",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-03-28T20:58:00Z",
      "side": 1,
      "message": "Outdent? Don\u0027t you want this called always?",
      "range": {
        "startLine": 27,
        "startChar": 12,
        "endLine": 27,
        "endChar": 45
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5fd8322_1bf58bf5",
        "filename": "test/test_sparse_vec.py",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 320
      },
      "writtenOn": "2019-03-29T11:12:54Z",
      "side": 1,
      "message": "yup, done, thank you!",
      "parentUuid": "76b0910a_4afb6dad",
      "range": {
        "startLine": 27,
        "startChar": 12,
        "endLine": 27,
        "endChar": 45
      },
      "revId": "3eea60e666e2b789a1c2c0d0ee30b75115ddfb91",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}