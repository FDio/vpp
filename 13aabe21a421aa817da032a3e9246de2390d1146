{
  "comments": [
    {
      "key": {
        "uuid": "00b32a6c_e93a8858",
        "filename": "src/vnet/gso/hdr_offset_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 372,
      "author": {
        "id": 267
      },
      "writtenOn": "2020-04-29T08:06:05Z",
      "side": 1,
      "message": "what happens if it\u0027s neither v4 nor v6?",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbf6f191_5bfcd4af",
        "filename": "src/vnet/gso/hdr_offset_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 372,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-29T11:57:10Z",
      "side": 1,
      "message": "I\u0027ll add ASSERT (!(is_ip4 ^ is_ip6)) here to make sure it should be either of one.",
      "parentUuid": "00b32a6c_e93a8858",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e7b1355_02c6408f",
        "filename": "src/vnet/gso/hdr_offset_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 372,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-29T11:57:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbf6f191_5bfcd4af",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31ed3e78_cd6d8992",
        "filename": "src/vnet/gso/hdr_offset_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 372,
      "author": {
        "id": 267
      },
      "writtenOn": "2020-04-29T12:14:49Z",
      "side": 1,
      "message": "it would be better to use only one argument, like ip_address_family_t af",
      "parentUuid": "9e7b1355_02c6408f",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ece24c93_52513fe6",
        "filename": "src/vnet/gso/hdr_offset_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 474,
      "author": {
        "id": 267
      },
      "writtenOn": "2020-04-29T08:06:05Z",
      "side": 1,
      "message": "i don\u0027t understand why you need to know that it\u0027s a tunnel. \nwhatever interface the packet is egressing the GSO node will given a packet that looks like:\n   INTERFACE-ENCAP | IP | L4 | PAYLOAD\nsave_rewrite_length tells you how big the INTERFACE-ENCAP is and adj-\u003efixup function will fix any fields in INTERFACE-ENCAP that need updating after the PAYLOAD has been segmented.\ni would have hoped that all interfaces could then be treated in the same way.",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19826ec5_d66c5144",
        "filename": "src/vnet/gso/hdr_offset_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 474,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-29T11:57:10Z",
      "side": 1,
      "message": "In case of l2 path, we need to know offsets for both inner and outer headers i.e. VXLAN. Secondly, GSO node will be placed right before output interface in most of the cases (regular gso, gso/vxlan, gso/ip-ip, gso/gre, gso/geneve) except IPSEC which is placed before the tunnel interface. At output interface, we can check the interface capabilities and act accordingly on the GSO packets. That\u0027s why we also need to parse both headers.\n\nhdr-parser is also used in interface_output.h to get the header offset for non-gso packet checksum calculation.",
      "parentUuid": "ece24c93_52513fe6",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb0f2187_d8a4402a",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 267
      },
      "writtenOn": "2020-04-29T08:06:05Z",
      "side": 1,
      "message": "this is done by the adj\u0027s fixup function.",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc340971_15e9ab17",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-29T11:57:10Z",
      "side": 1,
      "message": "This function is used when gso node will be enabled on output interface instead of ipip tunnel interface. Packet will be: ETHERNET | OUTER IP | INNER IP | L4 | PAYLOAD in this case. While, adj\u0027s fixup needs packet starting with OUTER IP | INNER IP | L4 | PAYLOAD which is the use case of IPSec at line 295.",
      "parentUuid": "bb0f2187_d8a4402a",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b443187_3d4dc3d2",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 267
      },
      "writtenOn": "2020-04-29T12:20:11Z",
      "side": 1,
      "message": "but you don\u0027t need GSO to work for tunnelled packets when enabled on the ethernet, since it\u0027s enabled on the tunnel interface.",
      "parentUuid": "cc340971_15e9ab17",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f066ee59_17996131",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-30T12:40:46Z",
      "side": 1,
      "message": "GSO node does not affect non-GSO traffic. GSO node enabled on ethernet will not process packets except putting them in frame for next node, if GSO node is enabled on ethernet interface and on IPSec tunnel. GSO packets will be segmented before the IPSec tunnel in this case.",
      "parentUuid": "1b443187_3d4dc3d2",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8f6e0a5_5c7ab715",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 267
      },
      "writtenOn": "2020-04-30T14:08:47Z",
      "side": 1,
      "message": "right. so why does the GSO node on the ethernet need to parse inner and outer tunnel headers? why does it need to know the packet was tunnelled? the GSO segmenting has already been done and the packet is no longer a GSO packet.",
      "parentUuid": "f066ee59_17996131",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d10d9bec_bee7714c",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-05-03T16:51:48Z",
      "side": 1,
      "message": "I think so, I should address your earlier comment differently. Think about IPIP and IPSec as different tunnels as GSO IPIP can be supported by Physical Interface while there is no GSO IPSec support in Physical interfaces. This patch implements supports for both IPSec and IPIP. In case of IPIP, GSO node should be enabled on output interface and above function will be executed as a fixup. In case of IPSec, GSO node should be enabled before IPSec tunnel and above function has nothing to do with IPSec use case.",
      "parentUuid": "f8f6e0a5_5c7ab715",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a93c742a_adea3000",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 541,
      "author": {
        "id": 267
      },
      "writtenOn": "2020-04-29T08:06:05Z",
      "side": 1,
      "message": "do (if node \u0026 TRACED) around all these.",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15ab62a6_b4c182ec",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 541,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-29T11:57:10Z",
      "side": 1,
      "message": "I don\u0027t get the requirement of testing \"node\" in above condition.",
      "parentUuid": "a93c742a_adea3000",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcaf6d0a_4ecb972f",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 541,
      "author": {
        "id": 267
      },
      "writtenOn": "2020-04-29T12:20:11Z",
      "side": 1,
      "message": "it\u0027s not a requirement, it\u0027s an optimisation. one check on the node versus 4 checks on the buffers. it saves you cycles in the common case.",
      "parentUuid": "15ab62a6_b4c182ec",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de8a7f23_2cc1a939",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 877,
      "author": {
        "id": 267
      },
      "writtenOn": "2020-04-29T08:06:05Z",
      "side": 1,
      "message": "still need the runs_before \u003d \"ipsecX-output-feature\"",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15353ecd_bcd7edea",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 877,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-29T11:57:10Z",
      "side": 1,
      "message": "I\u0027ll fix it.",
      "parentUuid": "de8a7f23_2cc1a939",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64fb0930_305e31cb",
        "filename": "src/vnet/gso/node.c",
        "patchSetId": 4
      },
      "lineNbr": 877,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-29T11:57:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15353ecd_bcd7edea",
      "revId": "13aabe21a421aa817da032a3e9246de2390d1146",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}