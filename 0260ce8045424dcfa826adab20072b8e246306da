{
  "comments": [
    {
      "key": {
        "uuid": "3a3291f1_675da2e9",
        "filename": "src/vlib/unix/plugin.c",
        "patchSetId": 10
      },
      "lineNbr": 106,
      "author": {
        "id": 10
      },
      "writtenOn": "2017-02-03T05:47:03Z",
      "side": 1,
      "message": "All of the \"return -1\" statements in this section should be \"vec_free(data); elf_main_free_ (\u0026em); return -1;\" to avoid leaking memory.",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 106,
        "endChar": 5
      },
      "revId": "0260ce8045424dcfa826adab20072b8e246306da",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_e7687289",
        "filename": "src/vlib/unix/plugin.c",
        "patchSetId": 10
      },
      "lineNbr": 393,
      "author": {
        "id": 10
      },
      "writtenOn": "2017-02-03T05:47:03Z",
      "side": 1,
      "message": "Initialize these pointers to 0, so subsequent call to vec_free() can never attempt to free a random location (value left on stack).  \n\nNote: This is required based on next comment in the case where the exit condition is encountered on the 1st time through.",
      "range": {
        "startLine": 393,
        "startChar": 0,
        "endLine": 393,
        "endChar": 16
      },
      "revId": "0260ce8045424dcfa826adab20072b8e246306da",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_c70576c3",
        "filename": "src/vlib/unix/plugin.c",
        "patchSetId": 10
      },
      "lineNbr": 407,
      "author": {
        "id": 10
      },
      "writtenOn": "2017-02-03T05:47:03Z",
      "side": 1,
      "message": "Add vec_free(v); vec_free(s); before breaking out of loop.  If this case is entered after the 1st pass through the loop, then memory will be leaked. If it is the 1st pass, and s \u0026 v are initialized to zero, then the vec_free()s will do nothing.",
      "range": {
        "startLine": 407,
        "startChar": 0,
        "endLine": 407,
        "endChar": 13
      },
      "revId": "0260ce8045424dcfa826adab20072b8e246306da",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_47f986c7",
        "filename": "src/vlib/unix/plugin.c",
        "patchSetId": 10
      },
      "lineNbr": 418,
      "author": {
        "id": 10
      },
      "writtenOn": "2017-02-03T05:47:03Z",
      "side": 1,
      "message": "Initialize this pointer to 0: u8 *s \u003d 0;",
      "range": {
        "startLine": 418,
        "startChar": 5,
        "endLine": 418,
        "endChar": 12
      },
      "revId": "0260ce8045424dcfa826adab20072b8e246306da",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_27f67ad8",
        "filename": "src/vlib/unix/plugin.c",
        "patchSetId": 10
      },
      "lineNbr": 427,
      "author": {
        "id": 10
      },
      "writtenOn": "2017-02-03T05:47:03Z",
      "side": 1,
      "message": "vec_free (s); on error to prevent memory leak.",
      "range": {
        "startLine": 427,
        "startChar": 0,
        "endLine": 427,
        "endChar": 16
      },
      "revId": "0260ce8045424dcfa826adab20072b8e246306da",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_07037eb9",
        "filename": "src/vlib/unix/plugin.h",
        "patchSetId": 10
      },
      "lineNbr": 63,
      "author": {
        "id": 10
      },
      "writtenOn": "2017-02-03T05:47:03Z",
      "side": 1,
      "message": "I would recommend that the size of these arrays uses a #define to ensure they are identical in size.\n\nWhere did the size 32 come from?  \n\nI don\u0027t see anything in .../vpp/build-root/scripts/version which explicitly limits the size of the version string which is how VPP_VERSION is generated.  .../vpp/src/vpp.am generates the version file which #defines VPP_BUILD_VERSION as VPP_VERSION\n\nWhat happens if a string larger than 32 chars is specified?\n\nWill the compilier ensure that it is is a null terminated c-string or will it simply truncate the string at 32 characters (leaving a non-terminated string in the array)?",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 63,
        "endChar": 34
      },
      "revId": "0260ce8045424dcfa826adab20072b8e246306da",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a3291f1_47d186fa",
        "filename": "src/vlib/unix/plugin.h",
        "patchSetId": 10
      },
      "lineNbr": 63,
      "author": {
        "id": 9
      },
      "writtenOn": "2017-02-03T08:39:02Z",
      "side": 1,
      "message": "As I cannot have pointer here due to elf parsing, i had to put fixed size array. I put 32 as a reasonable array size but it can be bigger.\nCompiler will report error if string is bigger than array, still you are right about null termination, it will not be there if string is 32 bytes long. I fill fix that in the plugin.c",
      "parentUuid": "3a3291f1_07037eb9",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 63,
        "endChar": 34
      },
      "revId": "0260ce8045424dcfa826adab20072b8e246306da",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}