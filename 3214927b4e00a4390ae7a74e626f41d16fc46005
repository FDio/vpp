{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6799b8da_4ff07864",
        "filename": "src/vnet/crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 491,
      "author": {
        "id": 366
      },
      "writtenOn": "2025-08-21T14:04:44Z",
      "side": 1,
      "message": "It looks like this can be called twice per packet by esp_prepare_sync_op(). It could probably be more efficient if it retrieved the correct value from an array using the alg and op type as indexes instead of doing a potentially long series of `if (alg \u003d\u003d x) { if (type \u003d\u003d y) return foo; ... }`.\n\nE.g. declare an array like `vnet_crypto_op_id_t alg_type_op_map[VNET_CRYPTO_OP_N_TYPES][VNET_CRYPTO_N_ALGS]` and populate it with the correct values. Then vnet_crypto_op_id_from_alg() can do something like:\n```\n  if (alg \u003c VNET_CRYPTO_N_ALGS \u0026\u0026 type \u003c VNET_CRYPTO_OP_N_TYPES)\n    return alg_type_op_map[type][alg];\n\n  return VNET_CRYPTO_OP_NONE;\n```",
      "revId": "3214927b4e00a4390ae7a74e626f41d16fc46005",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8c1f80c_60615284",
        "filename": "src/vnet/crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 491,
      "author": {
        "id": 3139
      },
      "writtenOn": "2025-08-21T15:19:42Z",
      "side": 1,
      "message": "Yeah, good idea. But what about extending ipsec_main array (ipsec/main.c) by linked algs instead of adding the new one mapping structure.  Here is example how I can add:\n\"    [IPSEC_CRYPTO_ALG_AES_CBC_256_SHA1_96] \u003d {\n      .enc_op_id \u003d VNET_CRYPTO_OP_AES_256_CBC_SHA1_TAG12_ENC,\n      .dec_op_id \u003d VNET_CRYPTO_OP_AES_256_CBC_SHA1_TAG12_DEC,\n      .alg \u003d VNET_CRYPTO_ALG_AES_256_CBC_SHA1_TAG12,\n      .iv_size \u003d 16,\n      .block_align \u003d 16,\n      .icv_size \u003d 12,\n    },\"\n    The single disadvantage that the keys contains ipsec\u0027s notation alg name and start with prefix \"IPSEC\". It would be better to use key with prefix VNET_...  And then move this function in ipsec.c .",
      "parentUuid": "6799b8da_4ff07864",
      "revId": "3214927b4e00a4390ae7a74e626f41d16fc46005",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a42c67c_e5c6be45",
        "filename": "src/vnet/crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 491,
      "author": {
        "id": 3139
      },
      "writtenOn": "2025-09-15T10:34:02Z",
      "side": 1,
      "message": "Now it is simplified and more efficient. Found really good approach based on crypto_main.algs[...]op_by_type[...]",
      "parentUuid": "d8c1f80c_60615284",
      "revId": "3214927b4e00a4390ae7a74e626f41d16fc46005",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8976b945_7a08559e",
        "filename": "src/vnet/crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 491,
      "author": {
        "id": 1849
      },
      "writtenOn": "2025-10-13T14:13:19Z",
      "side": 1,
      "message": "Can you provide crypto perf number to crypto+hmac for native/ipsecmb perf? Matthew\u0027s point is valid - from perf perspective doing bulk crypto and then bulk hmac, although more complicated in implementation, will keep the instruction cache hot; Doing crypto and then hmac for each op has less optimal icache utilization. Providing performance results should help verifying it is still the case for today.",
      "parentUuid": "5a42c67c_e5c6be45",
      "revId": "3214927b4e00a4390ae7a74e626f41d16fc46005",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92586e24_a664369e",
        "filename": "src/vnet/crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 491,
      "author": {
        "id": 3139
      },
      "writtenOn": "2025-10-14T22:28:16Z",
      "side": 1,
      "message": "**Crypto+HMAC Performance Tests** have been ran on the single-op crypto+HMAC (current patch and [baseline][1] (master code) on the same [ci env][4]. Single-op has better results:\n* AES_128_CBC_HMAC_SHA1: **~12–38%** (encrypt+hmac), **~27–38%** (decrypt+hmac)\n* AES_128_CTR_HMAC_SHA1: **~3–6%** (encrypt+hmac), **~22–27%** (decrypt+hmac).\nAll results are available in a [single-op patch logs][2] and [baseline logs][3].\n\n[1]: https://gerrit.fd.io/r/c/vpp/+/43891\n[2]: https://s3-logs.fd.io/vex-yul-rot-jenkins-1/vpp-verify-master-ubuntu2404-x86_64/3440/console.log.gz\n[3]: https://s3-logs.fd.io/vex-yul-rot-jenkins-1/vpp-verify-master-ubuntu2404-x86_64/3439/console.log.gz\n[4]: https://jenkins.fd.io/job/vpp-verify-master-ubuntu2404-x86_64",
      "parentUuid": "8976b945_7a08559e",
      "revId": "3214927b4e00a4390ae7a74e626f41d16fc46005",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd1d0df0_c62bfc41",
        "filename": "src/vnet/crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 491,
      "author": {
        "id": 3139
      },
      "writtenOn": "2025-10-14T22:39:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92586e24_a664369e",
      "revId": "3214927b4e00a4390ae7a74e626f41d16fc46005",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}