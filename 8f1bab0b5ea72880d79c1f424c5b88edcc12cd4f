{
  "comments": [
    {
      "key": {
        "uuid": "32deadf3_00f933b8",
        "filename": "src/vnet/ip/ip_format_fns.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-11-15T13:18:57Z",
      "side": 1,
      "message": "How do you feel about changing the values of these enums to the iana afi values?",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 18
      },
      "revId": "8f1bab0b5ea72880d79c1f424c5b88edcc12cd4f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa1daa9a_62dab90e",
        "filename": "src/vnet/ip/ip_format_fns.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-11-18T17:07:53Z",
      "side": 1,
      "message": "Do you mean [0] these ones?\nFirstly, it would be a big API change. I assume many clients just paste is_ip6 (or other hardcoded values) without bothering to read the enum definition.\nSecondly, base the enum implementation on u16 (or u8 if we plan to support only a small subset). The default (u32) is wasting space. But that is both big a API change and a big code change.\nOverall, I am supportive (the less IANA \u003c\u003d\u003e VPP translations the better), I just do not expect the migration to happen anytime soon.\n\n[0] https://www.iana.org/assignments/address-family-numbers/address-family-numbers.xhtml",
      "parentUuid": "32deadf3_00f933b8",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 18
      },
      "revId": "8f1bab0b5ea72880d79c1f424c5b88edcc12cd4f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea283f02_fbd24e78",
        "filename": "src/vnet/ip/ip_format_fns.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-11-18T17:45:26Z",
      "side": 1,
      "message": "Yes, I mean those values.  With Jakub\u0027s ongoing refactoring, hopefully many of the is_v6/is_v4 bools will go away. If we are doing backward incompatible changes, does it make sense to add this in?\n\nIf space is a concern in the api, do the fields need to be reordered based on their sizes so they don\u0027t get padded?\n\nI agree it a big api change, but is it also a big code change?  Can\u0027t we just map the internal ADDRESS_IP[46] to API values via encode/decode?",
      "parentUuid": "fa1daa9a_62dab90e",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 18
      },
      "revId": "8f1bab0b5ea72880d79c1f424c5b88edcc12cd4f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc18f65d_cbb92a1b",
        "filename": "src/vnet/ip/ip_format_fns.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-11-20T13:00:36Z",
      "side": 1,
      "message": "\u003e but is it also a big code change?\n\nIf we are going for u16, many instances of \"ntohl\" would need to become \"ntohs\". And I do not see an easy automated way to see which ones, unless a tool like checkstyle is smart enough.\nI believe it would be easier to do u32_to_u16 migration after VPP-1777.\n\n\u003e do the fields need to be reordered \n\nFor PAPI users, order does not matter. But for users pushing configuration via shared memory, ordering fields to have them aligned would be nice.\nMy concern for field sizes is primarily due to general principles, secondarily due to Unix Domain Socket transport having finite buffer size.",
      "parentUuid": "ea283f02_fbd24e78",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 18
      },
      "revId": "8f1bab0b5ea72880d79c1f424c5b88edcc12cd4f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc422464_99050cd4",
        "filename": "src/vnet/ip/ip_format_fns.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-11-20T15:19:58Z",
      "side": 1,
      "message": "Is that an optimization that should be added to vppapigen_c?",
      "parentUuid": "bc18f65d_cbb92a1b",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 18
      },
      "revId": "8f1bab0b5ea72880d79c1f424c5b88edcc12cd4f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ac31b1c_3fa7fbdd",
        "filename": "src/vnet/ip/ip_format_fns.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-11-21T14:28:01Z",
      "side": 1,
      "message": "You mean implementing auto-detection for the smallest fitting type, but still allowing the colon operator to override?\nYes, it could be added. The downside is lot of \"ntohl\" to find and edit in the code.",
      "parentUuid": "fc422464_99050cd4",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 18
      },
      "revId": "8f1bab0b5ea72880d79c1f424c5b88edcc12cd4f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ea64ad8_f650a119",
        "filename": "src/vnet/ip/ip_format_fns.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-11-21T15:21:45Z",
      "side": 1,
      "message": "I actually meant, should it automatically reorder the fields based on their sizes so that they get padded efficiently.\n\nBut it brings up another issue: We have so many errors / fixes regarding endianness.  Can\u0027t we define the endianness transform with the type and have the api do the ntoh\u003cx\u003e / hton\u003cx\u003e and the developer always works with the host representation.",
      "parentUuid": "6ac31b1c_3fa7fbdd",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 18
      },
      "revId": "8f1bab0b5ea72880d79c1f424c5b88edcc12cd4f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2feaea2a_beeddf1b",
        "filename": "src/vnet/ip/ip_format_fns.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-11-21T17:16:16Z",
      "side": 1,
      "message": "\u003e Can\u0027t we define the endianness transform with the type\n\nAlready done...\n\n\u003e and have the api do the ntoh\u003cx\u003e / hton\u003cx\u003e\n\n... and VPP-1799 is about applying this part.",
      "parentUuid": "6ea64ad8_f650a119",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 18
      },
      "revId": "8f1bab0b5ea72880d79c1f424c5b88edcc12cd4f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}