{
  "comments": [
    {
      "key": {
        "uuid": "86c051f3_98de0b85",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T04:24:52Z",
      "side": 1,
      "message": "We should also include \"\u0026\u0026 csum_offload\" as another condition which means VXLAN encap will be setting up checksum offload related metadata to overwrite the ones already present for payload here.",
      "range": {
        "startLine": 141,
        "startChar": 18,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c951427_29484fd2",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T17:31:04Z",
      "side": 1,
      "message": "I withdraw the prev comment about adding check for csum_offload. I wonder, however, is the check below for GSO bit correct?  If the GSO bit is set, would checksum always be updated by gso node, even if packet is not segmented?",
      "parentUuid": "86c051f3_98de0b85",
      "range": {
        "startLine": 141,
        "startChar": 18,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1783ea9_e37a098a",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-06-04T18:06:35Z",
      "side": 1,
      "message": "GSO bit is only set for Jumbo Frames GSO packets (greater than MTU size). In correct functional configuration, these packets are always handled by either gso node for software based segmentation or HW TSO if NIC supports it. We don\u0027t need to calculate the checksums for those packets here.",
      "parentUuid": "4c951427_29484fd2",
      "range": {
        "startLine": 141,
        "startChar": 18,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef0caf3c_d4e43ce2",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 278,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T04:24:52Z",
      "side": 1,
      "message": "Just realized we should also clear either VNNET_BUFFER_F_IS_IP4/IP6 bit in the flags field depending on the parameter is_ip4, just in case inner/outer ip4 or ip6 is different.  Something like: b0-\u003eflags \u0026\u003d is_ip4? ~VNNET_BUFFER_F_IS_IP6 : ~VNNET_BUFFER_F_IS_IP4;",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddd737ee_d06adc34",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 281,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T04:24:52Z",
      "side": 1,
      "message": "Just realized we should also clear either VNNET_BUFFER_F_IS_IP4/IP6 bit in the flags field depending on the parameter is_ip4, just in case inner/outer ip4 or ip6 is different.  Something like: b0-\u003eflags \u0026\u003d is_ip4? ~VNNET_BUFFER_F_IS_IP6 : ~VNNET_BUFFER_F_IS_IP4;",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df90cc7d_1a46f7a2",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T04:24:52Z",
      "side": 1,
      "message": "We should also include \"\u0026\u0026 csum_offload\" as another condition which means VXLAN encap will be setting up checksum offload related metadata to overwrite the ones already present for payload here.",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faf71f41_794ea82f",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T17:31:04Z",
      "side": 1,
      "message": "I withdraw the prev comment about adding check for csum_offload. I wonder, however, is the check below for GSO bit correct?  If the GSO bit is set, would checksum always be updated by gso node, even if packet is not segmented?",
      "parentUuid": "df90cc7d_1a46f7a2",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c983896_603106c9",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-06-04T18:06:35Z",
      "side": 1,
      "message": "Yes. Same as my above comment!",
      "parentUuid": "faf71f41_794ea82f",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15491db4_4a2c603b",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 453,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T04:24:52Z",
      "side": 1,
      "message": "Just realized we should also clear either VNNET_BUFFER_F_IS_IP4/IP6 bit in the flags field depending on the parameter is_ip4, just in case inner/outer ip4 or ip6 is different.  Something like: b0-\u003eflags \u0026\u003d is_ip4? ~VNNET_BUFFER_F_IS_IP6 : ~VNNET_BUFFER_F_IS_IP4;",
      "range": {
        "startLine": 453,
        "startChar": 11,
        "endLine": 453,
        "endChar": 17
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}