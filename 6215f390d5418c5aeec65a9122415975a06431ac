{
  "comments": [
    {
      "key": {
        "uuid": "86c051f3_98de0b85",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T04:24:52Z",
      "side": 1,
      "message": "We should also include \"\u0026\u0026 csum_offload\" as another condition which means VXLAN encap will be setting up checksum offload related metadata to overwrite the ones already present for payload here.",
      "range": {
        "startLine": 141,
        "startChar": 18,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c951427_29484fd2",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T17:31:04Z",
      "side": 1,
      "message": "I withdraw the prev comment about adding check for csum_offload. I wonder, however, is the check below for GSO bit correct?  If the GSO bit is set, would checksum always be updated by gso node, even if packet is not segmented?",
      "parentUuid": "86c051f3_98de0b85",
      "range": {
        "startLine": 141,
        "startChar": 18,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1783ea9_e37a098a",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-06-04T18:06:35Z",
      "side": 1,
      "message": "GSO bit is only set for Jumbo Frames GSO packets (greater than MTU size). In correct functional configuration, these packets are always handled by either gso node for software based segmentation or HW TSO if NIC supports it. We don\u0027t need to calculate the checksums for those packets here.",
      "parentUuid": "4c951427_29484fd2",
      "range": {
        "startLine": 141,
        "startChar": 18,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d3eab13_6d07c6ae",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T18:14:22Z",
      "side": 1,
      "message": "Thinking about this a bit more, I realize we should still include \"\u0026\u0026 csum_offload\" here.  For IPv4 case, csum_offload is 0 and metadata is set to do inner checksum on interface-output.  This would be fine as the outer UDP checksum is 0 and IP4 header checksum is done here. So no update is needed on outer header. The problem only exist for IPv6 case when csum_offload is set to 1.  My question about checking GSO bit below remain standing.",
      "parentUuid": "4c951427_29484fd2",
      "range": {
        "startLine": 141,
        "startChar": 18,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba68acdb_fe1636eb",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T19:47:50Z",
      "side": 1,
      "message": "So GSO bit question is answered. Please consider the \"\u0026\u0026csum_offload\" part if you agree.",
      "parentUuid": "6d3eab13_6d07c6ae",
      "range": {
        "startLine": 141,
        "startChar": 18,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73032316_39e43258",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-06-08T08:47:36Z",
      "side": 1,
      "message": "I have added the csum_offload condition. But, in my opinion, it will not work with current interface output node. When node calculates the inner header checksum, we also need to modify the checksum of outer header.",
      "parentUuid": "ba68acdb_fe1636eb",
      "range": {
        "startLine": 141,
        "startChar": 18,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d47b3b30_395017fc",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-08T15:30:02Z",
      "side": 1,
      "message": "For IPv4 case, interface-output node will do inner checksum. The outer header checksum does not need update because UDP checksum is 0 and IP checksum which cover IP4 header only is done here.",
      "parentUuid": "73032316_39e43258",
      "range": {
        "startLine": 141,
        "startChar": 18,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c8f2167_d7ba4496",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T22:56:23Z",
      "side": 1,
      "message": "We should not use the flags bit here but use is_ip4, !is_ip4. The input parameter is_ip4 is passed as constant to help compiler inline more efficient code.  Same for all the other calls.  Also, patch-27195 is removing with-gso parameter.  I suppose we should merge it first and fix this here.",
      "range": {
        "startLine": 150,
        "startChar": 11,
        "endLine": 150,
        "endChar": 31
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ca68724_43ace8f5",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-06-08T08:47:36Z",
      "side": 1,
      "message": "is_ip4 is for v4 based vxlan tunnel. It doesn\u0027t provide indication of inner header Protocol type.",
      "parentUuid": "0c8f2167_d7ba4496",
      "range": {
        "startLine": 150,
        "startChar": 11,
        "endLine": 150,
        "endChar": 31
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48784140_f66a18be",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-08T15:30:02Z",
      "side": 1,
      "message": "Yes, you are right.  I am confused wit the inner/outer IP type.",
      "parentUuid": "7ca68724_43ace8f5",
      "range": {
        "startLine": 150,
        "startChar": 11,
        "endLine": 150,
        "endChar": 31
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef0caf3c_d4e43ce2",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 278,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T04:24:52Z",
      "side": 1,
      "message": "Just realized we should also clear either VNNET_BUFFER_F_IS_IP4/IP6 bit in the flags field depending on the parameter is_ip4, just in case inner/outer ip4 or ip6 is different.  Something like: b0-\u003eflags \u0026\u003d is_ip4? ~VNNET_BUFFER_F_IS_IP6 : ~VNNET_BUFFER_F_IS_IP4;",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddd737ee_d06adc34",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 281,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T04:24:52Z",
      "side": 1,
      "message": "Just realized we should also clear either VNNET_BUFFER_F_IS_IP4/IP6 bit in the flags field depending on the parameter is_ip4, just in case inner/outer ip4 or ip6 is different.  Something like: b0-\u003eflags \u0026\u003d is_ip4? ~VNNET_BUFFER_F_IS_IP6 : ~VNNET_BUFFER_F_IS_IP4;",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df90cc7d_1a46f7a2",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T04:24:52Z",
      "side": 1,
      "message": "We should also include \"\u0026\u0026 csum_offload\" as another condition which means VXLAN encap will be setting up checksum offload related metadata to overwrite the ones already present for payload here.",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faf71f41_794ea82f",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T17:31:04Z",
      "side": 1,
      "message": "I withdraw the prev comment about adding check for csum_offload. I wonder, however, is the check below for GSO bit correct?  If the GSO bit is set, would checksum always be updated by gso node, even if packet is not segmented?",
      "parentUuid": "df90cc7d_1a46f7a2",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c983896_603106c9",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-06-04T18:06:35Z",
      "side": 1,
      "message": "Yes. Same as my above comment!",
      "parentUuid": "faf71f41_794ea82f",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d6a02bd_3c2e0fca",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T18:14:22Z",
      "side": 1,
      "message": "Thinking about this a bit more, I realize we should still include \"\u0026\u0026 csum_offload\" here.  For IPv4 case, csum_offload is 0 and metadata is set to do inner checksum on interface-output.  This would be fine as the outer UDP checksum is 0 and IP4 header checksum is done here. So no update is needed on outer header. The problem only exist for IPv6 case when csum_offload is set to 1.  My question about checking GSO bit below remain standing.",
      "parentUuid": "faf71f41_794ea82f",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e55a2a0e_2d53e742",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T19:47:50Z",
      "side": 1,
      "message": "So GSO bit question is answered. Please consider the \"\u0026\u0026csum_offload\" part if you agree.",
      "parentUuid": "4d6a02bd_3c2e0fca",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6668d9b_662e04f1",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-06-08T08:47:36Z",
      "side": 1,
      "message": "I have added the csum_offload condition. But, in my opinion, it will not work with current interface output node. When node calculates the inner header checksum, we also need to modify the checksum of outer header.",
      "parentUuid": "e55a2a0e_2d53e742",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91b0f0b3_2492546c",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-08T15:30:02Z",
      "side": 1,
      "message": "Yes, you are right.  I am confused wit the inner/outer IP type.",
      "parentUuid": "a6668d9b_662e04f1",
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15491db4_4a2c603b",
        "filename": "src/vnet/vxlan/encap.c",
        "patchSetId": 1
      },
      "lineNbr": 453,
      "author": {
        "id": 11
      },
      "writtenOn": "2020-06-04T04:24:52Z",
      "side": 1,
      "message": "Just realized we should also clear either VNNET_BUFFER_F_IS_IP4/IP6 bit in the flags field depending on the parameter is_ip4, just in case inner/outer ip4 or ip6 is different.  Something like: b0-\u003eflags \u0026\u003d is_ip4? ~VNNET_BUFFER_F_IS_IP6 : ~VNNET_BUFFER_F_IS_IP4;",
      "range": {
        "startLine": 453,
        "startChar": 11,
        "endLine": 453,
        "endChar": 17
      },
      "revId": "6215f390d5418c5aeec65a9122415975a06431ac",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}