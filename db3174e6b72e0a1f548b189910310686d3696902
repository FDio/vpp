{
  "comments": [
    {
      "key": {
        "uuid": "c676a8de_8b603eb4",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 680
      },
      "writtenOn": "2020-04-14T17:11:06Z",
      "side": 1,
      "message": "When we hit this else, aren\u0027t we dealing with INDIRECT_DESC\u003d\u003d0 case? If so, the check for INDIRECT_DESC appears redundant.\n\nWhy do we rule out chained buffer support for tap? Just not sure if it will work for tap or not?",
      "revId": "db3174e6b72e0a1f548b189910310686d3696902",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d115b2e_6c2894e2",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-14T18:12:19Z",
      "side": 1,
      "message": "Today, user can\u0027t create tapv2 interface if backend doesn\u0027t support INDIRECT_DESC feature. That\u0027s why, I am explicitly enabling it for native virtio.",
      "parentUuid": "c676a8de_8b603eb4",
      "revId": "db3174e6b72e0a1f548b189910310686d3696902",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1587e40d_0802049a",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 680
      },
      "writtenOn": "2020-04-14T18:26:39Z",
      "side": 1,
      "message": "OK, so we want to retain the check for VIRTIO_IF_TYPE_PCI. \nBut do we still need the check INDIRECT_DESC\u003d\u003d0? If it is INDIRECT_DESC\u003d1, execution would not come here.",
      "parentUuid": "4d115b2e_6c2894e2",
      "revId": "db3174e6b72e0a1f548b189910310686d3696902",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e657c34c_daaafc5b",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-16T23:29:03Z",
      "side": 1,
      "message": "I\u0027ll fix it.",
      "parentUuid": "1587e40d_0802049a",
      "revId": "db3174e6b72e0a1f548b189910310686d3696902",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65e9bb0b_c11fbccf",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 5
      },
      "lineNbr": 408,
      "author": {
        "id": 680
      },
      "writtenOn": "2020-04-14T17:11:06Z",
      "side": 1,
      "message": "Do we need to mess with the buffer flags?",
      "revId": "db3174e6b72e0a1f548b189910310686d3696902",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96680816_cd2c4887",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 5
      },
      "lineNbr": 408,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-14T18:12:19Z",
      "side": 1,
      "message": "It is required for freeing strategy. There exists 1:1 mapping between vlib_buffer_t and descriptor in case of chained buffers. We make sure to free exactly one vlib_buffer_t against one descriptor by removing above flags from chained buffers.",
      "parentUuid": "65e9bb0b_c11fbccf",
      "revId": "db3174e6b72e0a1f548b189910310686d3696902",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72dd7e50_3de15078",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 5
      },
      "lineNbr": 408,
      "author": {
        "id": 680
      },
      "writtenOn": "2020-04-14T18:26:39Z",
      "side": 1,
      "message": "In that case, we may want to reset b-\u003enext_buffer also. I remember seeing some code ignoring the flags and just going for b-\u003enext_buffer. I don\u0027t know if it still exists or not.",
      "parentUuid": "96680816_cd2c4887",
      "revId": "db3174e6b72e0a1f548b189910310686d3696902",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6dd351b_27e68bcc",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 5
      },
      "lineNbr": 408,
      "author": {
        "id": 680
      },
      "writtenOn": "2020-04-14T21:33:30Z",
      "side": 1,
      "message": "Why don\u0027t we need 1:1 mapping for INDIRECT_DESC but we need it for chained buffers only?",
      "parentUuid": "96680816_cd2c4887",
      "revId": "db3174e6b72e0a1f548b189910310686d3696902",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5baf067d_b585fe25",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 5
      },
      "lineNbr": 408,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-16T23:29:03Z",
      "side": 1,
      "message": "There is 1:1 mapping for descriptors and buffers in vring. In case of INDIRECT descriptors, native virtio consumes only ONE descriptors from VRING which maps the indirect descriptor chain and only ONE buffer entry to store the index of first buffer in chain.",
      "parentUuid": "d6dd351b_27e68bcc",
      "revId": "db3174e6b72e0a1f548b189910310686d3696902",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f7da0dc_1b5ae968",
        "filename": "src/vnet/devices/virtio/device.c",
        "patchSetId": 5
      },
      "lineNbr": 408,
      "author": {
        "id": 241
      },
      "writtenOn": "2020-04-16T23:29:03Z",
      "side": 1,
      "message": "I\u0027ll fix it.",
      "parentUuid": "72dd7e50_3de15078",
      "revId": "db3174e6b72e0a1f548b189910310686d3696902",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}