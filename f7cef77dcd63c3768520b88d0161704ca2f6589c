{
  "comments": [
    {
      "key": {
        "uuid": "bf1d7aab_fca27c27",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 281,
      "author": {
        "id": 366
      },
      "writtenOn": "2021-08-30T15:40:07Z",
      "side": 1,
      "message": "What\u0027s the reason for changing this? There seem to be other places in the code that expect lip_namespace to be a vector rather than a C string.",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "742ced3b_01e0573d",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 281,
      "author": {
        "id": 2352
      },
      "writtenOn": "2021-08-30T17:45:40Z",
      "side": 1,
      "message": "I could use a little help on this one -- Take this snippet:\n\n  lip-\u003elip_namespace \u003d vec_dup(ns);\n  LCP_ITF_PAIR_DBG (\"add: netns %s lip-netns(vec) %s\", ns, lip-\u003elip_namespace);\n  if (!lip-\u003elip_namespace) {\n\n  if (ns \u0026\u0026 ns[0] !\u003d 0)\n    lip-\u003elip_namespace \u003d (u8 *) strdup ((const char *) ns);\n  LCP_ITF_PAIR_DBG (\"add: netns %s lip-netns(str) %s\", ns, lip-\u003elip_namespace);\n  }\n\nThat yields the following debug log:\nlinux-cp/itf         [notice]: add: netns dataplane lip-netns(vec) (nil)\nlinux-cp/itf         [notice]: add: netns dataplane lip-netns(str) dataplane\n\nSo for some reason I forget now, I stumbled across this discrepancy and chose the cheap way out. I want to do it correctly, though :)",
      "parentUuid": "bf1d7aab_fca27c27",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8888deb_40a2ff73",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 374,
      "author": {
        "id": 366
      },
      "writtenOn": "2021-08-30T15:40:07Z",
      "side": 1,
      "message": "rtnl_link_vlan_set_id() always returns 0, unless the earlier call to rtnl_link_vlan_alloc() failed, in which case VPP would crash when rtnl_link_vlan_set_id() dereferences the pointer. So the body in the if {..} block here will never be executed.",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7070789f_73ca3ffe",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 374,
      "author": {
        "id": 2352
      },
      "writtenOn": "2021-08-30T17:45:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8888deb_40a2ff73",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32a7e7f1_a017e4ce",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 382,
      "author": {
        "id": 366
      },
      "writtenOn": "2021-08-30T15:40:07Z",
      "side": 1,
      "message": "Same issue as above. The body in the if {..} block will never be executed.",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "171e34c3_47692cc5",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 382,
      "author": {
        "id": 2352
      },
      "writtenOn": "2021-08-30T17:45:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32a7e7f1_a017e4ce",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74e80831_4afaee1b",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 707,
      "author": {
        "id": 366
      },
      "writtenOn": "2021-08-30T15:40:07Z",
      "side": 1,
      "message": "If you\u0027re going to print a debug message indicating that you found a match, it seems like a good idea to include the index or name of the interface that matched. You were searching for an interface and basically all of the search criteria (parent, VLAN tags/proto) get printed, but nothing is printed about the matching interface that was found.",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c2e2485_fc77896f",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 707,
      "author": {
        "id": 2352
      },
      "writtenOn": "2021-08-30T17:45:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74e80831_4afaee1b",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43fef9d2_e019582d",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 732,
      "author": {
        "id": 366
      },
      "writtenOn": "2021-08-30T15:40:07Z",
      "side": 1,
      "message": "Is it necessary to switch to the tap\u0027s namespace here and to switch back at the end of the function? No system calls are made while the process is attached to the tap\u0027s namespace.",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fff855e_fbb28076",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 732,
      "author": {
        "id": 2352
      },
      "writtenOn": "2021-08-30T17:45:40Z",
      "side": 1,
      "message": "\u003e Is it necessary to switch to the tap\u0027s namespace here and to switch back at the end of the function? No system calls are made while the process is attached to the tap\u0027s namespace.\n\nGood catch - it\u0027s not necessary at all. Removed and cleaned up this function.",
      "parentUuid": "43fef9d2_e019582d",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aae0e079_c589b4c9",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 741,
      "author": {
        "id": 366
      },
      "writtenOn": "2021-08-30T15:40:07Z",
      "side": 1,
      "message": "The clib_memset() is unnecessary here since every member of the struct is explicitly initialized immediately afterwards.",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4fcfe41_93fe8609",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 741,
      "author": {
        "id": 2352
      },
      "writtenOn": "2021-08-30T17:45:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "aae0e079_c589b4c9",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec704f0e_f5c48d6b",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 747,
      "author": {
        "id": 366
      },
      "writtenOn": "2021-08-30T15:40:07Z",
      "side": 1,
      "message": "vnet_sw_interface_walk() iterates all of the sw interfaces on the system. You should instead use vnet_hw_interface_walk_sw() and only walk the sw interfaces on the parent interface.",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec4402ce_5ea670ca",
        "filename": "src/plugins/linux-cp/lcp_interface.c",
        "patchSetId": 13
      },
      "lineNbr": 747,
      "author": {
        "id": 2352
      },
      "writtenOn": "2021-08-30T17:45:40Z",
      "side": 1,
      "message": "\u003e vnet_sw_interface_walk() iterates all of the sw interfaces on the system. You should instead use vnet_hw_interface_walk_sw() and only walk the sw interfaces on the parent interface.\n\nCool - I didn\u0027t know that vnet_hw_interface_walk_sw() existed. Refactored to use it, saving lots of cycles in case there are many interfaces on the system, thanks!",
      "parentUuid": "ec704f0e_f5c48d6b",
      "revId": "f7cef77dcd63c3768520b88d0161704ca2f6589c",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}