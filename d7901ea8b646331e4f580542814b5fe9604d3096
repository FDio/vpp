{
  "comments": [
    {
      "key": {
        "uuid": "a7d37af2_d5e763cb",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 24
      },
      "lineNbr": 73,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-07-01T12:55:56Z",
      "side": 1,
      "message": "Looking at [0], it says:\n\n    If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form \u003c...some useful description...\u003e should be returned.\n\nSo, your code returns some useful description. But I think returning a valid Python expression is possible.\n\n[0] https://docs.python.org/3/reference/datamodel.html#object.__repr__",
      "range": {
        "startLine": 73,
        "startChar": 16,
        "endLine": 73,
        "endChar": 17
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa0b6ce7_01cba72a",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 24
      },
      "lineNbr": 73,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-07-01T14:39:48Z",
      "side": 1,
      "message": "This is a feature request, not a defect. ;)\n\nThe next line reads: If this is not possible, a string of the form \u003c...some useful description...\u003e should be returned.\n\nThats why the angle brackets. The diagnostic information comes in the vars.\n\nfor example:\nIf this is not possible, a string of the form \u003c...some useful description...\u003e should be returned.\n\u003cString(length_field_packer\u003d\u003cBaseTypes(packer\u003d\u003cStruct object at 0x7f52b72fa688\u003e, options\u003dNone, size\u003d4)\u003e, limit\u003d64, name\u003d\u0027string\u0027, size\u003d1)\u003e",
      "parentUuid": "a7d37af2_d5e763cb",
      "range": {
        "startLine": 73,
        "startChar": 16,
        "endLine": 73,
        "endChar": 17
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e67b1390_43f212a6",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 24
      },
      "lineNbr": 73,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-07-02T12:32:00Z",
      "side": 1,
      "message": "\u003e This is a feature request\n\nWell, the whole idea of adding __repr__ is a feature request.\n\n\u003e If this is not possible\n\nBut it IS possible. Also, my quote started with \"If at all possible\".\n\nI know it is strange to have __repr__ not mandatory, while the form of its output is mandatory, but that is how I read the documentation.\n\nAs a compromise, we can say \"not possible due to development time constraints\". :)\n\nUpdate: I see next patch set makes behavior configurable, which is great.",
      "parentUuid": "fa0b6ce7_01cba72a",
      "range": {
        "startLine": 73,
        "startChar": 16,
        "endLine": 73,
        "endChar": 17
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a783905_99d0c900",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 24
      },
      "lineNbr": 76,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-07-01T12:55:56Z",
      "side": 1,
      "message": "Looking at line 72, I believe repr() called on BaseTypes instance will list keys \"packer\", \"size\" and \"options\", instead of \"types\", \"elements\" and \"options\" used by the actual constructor.\n\nOne solution would be to narrow down constructors to only store given arguments, and introduce factory class methods to perform utility computations for values of such contructors.\nAnother solution os to override the generic __repr__ with one listing actucally used arguments of current non-trivial constructors (but that needs more coding and plays less well with inheritance).\nOther solutions may be possible.",
      "range": {
        "startLine": 76,
        "startChar": 16,
        "endLine": 76,
        "endChar": 25
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d33fb68a_d91a760c",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 24
      },
      "lineNbr": 76,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-07-01T14:39:48Z",
      "side": 1,
      "message": "__repr__ does not have to be reversible.  It is not now. It currently returns: \u003cBaseTypes at 0x7f52b72fa650\u003e which is not reversible.",
      "parentUuid": "6a783905_99d0c900",
      "range": {
        "startLine": 76,
        "startChar": 16,
        "endLine": 76,
        "endChar": 25
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a00f9df0_b26b1596",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 24
      },
      "lineNbr": 76,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-07-02T12:32:00Z",
      "side": 1,
      "message": "It only has to be reversible if it is possible to have reversible output. Contructors themselves seem to allow reversible output.",
      "parentUuid": "d33fb68a_d91a760c",
      "range": {
        "startLine": 76,
        "startChar": 16,
        "endLine": 76,
        "endChar": 25
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3f2294e_c0f5e37e",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 24
      },
      "lineNbr": 342,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-07-01T12:55:56Z",
      "side": 1,
      "message": "Line 315 lists different arguments.",
      "range": {
        "startLine": 342,
        "startChar": 20,
        "endLine": 342,
        "endChar": 40
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f861bc5a_0658eef1",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 24
      },
      "lineNbr": 342,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-07-02T12:32:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a3f2294e_c0f5e37e",
      "range": {
        "startLine": 342,
        "startChar": 20,
        "endLine": 342,
        "endChar": 40
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f09a88ad_455ded3e",
        "filename": "src/vpp/api/vpe.api",
        "patchSetId": 24
      },
      "lineNbr": 286,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-07-01T12:55:56Z",
      "side": 1,
      "message": "Include the comment block describing the @param items (and default values with special semantics).",
      "range": {
        "startLine": 286,
        "startChar": 0,
        "endLine": 286,
        "endChar": 6
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe441f69_998494bb",
        "filename": "src/vpp/api/vpe.api",
        "patchSetId": 24
      },
      "lineNbr": 296,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-07-01T12:55:56Z",
      "side": 1,
      "message": "Belongs to line 290?",
      "range": {
        "startLine": 296,
        "startChar": 16,
        "endLine": 296,
        "endChar": 36
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d24bb56c_6376dbf5",
        "filename": "src/vpp/api/vpe.api",
        "patchSetId": 24
      },
      "lineNbr": 296,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-07-01T14:39:48Z",
      "side": 1,
      "message": "Yes. I\u0027ll fix.",
      "parentUuid": "fe441f69_998494bb",
      "range": {
        "startLine": 296,
        "startChar": 16,
        "endLine": 296,
        "endChar": 36
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f7dd1f2_72f7b1b5",
        "filename": "src/vpp/api/vpe.api",
        "patchSetId": 24
      },
      "lineNbr": 296,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-07-02T12:32:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d24bb56c_6376dbf5",
      "range": {
        "startLine": 296,
        "startChar": 16,
        "endLine": 296,
        "endChar": 36
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41ecfdc7_3f99d01b",
        "filename": "test/test_papi.py",
        "patchSetId": 24
      },
      "lineNbr": 53,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-07-01T12:55:56Z",
      "side": 1,
      "message": "Currently I am interested in repr of VPPApiClientInvalidReturnValueError, especially its \"arg\" value.",
      "range": {
        "startLine": 53,
        "startChar": 32,
        "endLine": 53,
        "endChar": 33
      },
      "revId": "d7901ea8b646331e4f580542814b5fe9604d3096",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}