{
  "comments": [
    {
      "key": {
        "uuid": "6e8ab507_3dccd655",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 17,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-09-02T09:00:31Z",
      "side": 1,
      "message": "Except that u8 name[64] does not imply \\x00 will occur anywhere in the 64 bytes. But the VPP code seldom expects that, using strncpy and other dangerous functions.\n\nIdeally, fixed size string and u8 could differ by caring (or not, respectively) about the value being NULL terminated (and that after the NULL no non-null characters are present within the size).",
      "range": {
        "startLine": 17,
        "startChar": 22,
        "endLine": 17,
        "endChar": 45
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d0f70e9_09e7ed10",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 17,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-09-02T11:14:24Z",
      "side": 1,
      "message": "That was the intention. string name[64] must be nul-terminated. Essentially a C-string.",
      "parentUuid": "6e8ab507_3dccd655",
      "range": {
        "startLine": 17,
        "startChar": 22,
        "endLine": 17,
        "endChar": 45
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e95746a7_011c0c58",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 17,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-09-02T13:02:59Z",
      "side": 1,
      "message": "\u003e string name[64] must be nul-terminated\n\nI wonder which field could be used for unit-testing this claim.\nPerhaps we can add an API to insert arbitrary message into log, and than see what log_dump emits?",
      "parentUuid": "5d0f70e9_09e7ed10",
      "range": {
        "startLine": 17,
        "startChar": 22,
        "endLine": 17,
        "endChar": 45
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "208c7e50_b9a9c08e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 17,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-09-02T13:41:13Z",
      "side": 1,
      "message": "Let me add a test in VPP unit test code.",
      "parentUuid": "e95746a7_011c0c58",
      "range": {
        "startLine": 17,
        "startChar": 22,
        "endLine": 17,
        "endChar": 45
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7547f69b_98324490",
        "filename": "src/plugins/map/map_api.c",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-09-02T09:00:31Z",
      "side": 1,
      "message": "How do you know the destination already has NULL at the last character? Was there a memset making sure of that?",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 71
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d3198d6_6ec342a6",
        "filename": "src/plugins/map/map_api.c",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-09-02T11:14:24Z",
      "side": 1,
      "message": "https://en.cppreference.com/w/c/string/byte/strncpy\n\nstrncpy(_s) adds nul terminator.",
      "parentUuid": "7547f69b_98324490",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 71
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3435a2b_cd4dc3fd",
        "filename": "src/plugins/map/map_api.c",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-09-02T16:06:11Z",
      "side": 1,
      "message": "\u003e https://en.cppreference.com/w/c/string/byte/strncpy\n\nIt also says:\n\n  If the first count characters were non-null, dest will not contain a null terminated string!\n\nIn this case, count includes that \"- 1\", so no automatic adding of nul.",
      "parentUuid": "7d3198d6_6ec342a6",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 71
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1666c259_61ed1e5e",
        "filename": "src/plugins/map/map_api.c",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-09-03T08:15:01Z",
      "side": 1,
      "message": "Sorry, for some reason I was convinced that the safe string functions were used.\nFixed in upcoming patch to use strncpy_s.",
      "parentUuid": "d3435a2b_cd4dc3fd",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 71
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e019a02_2a2e287a",
        "filename": "src/plugins/map/map_api.c",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-09-03T08:18:48Z",
      "side": 1,
      "message": "This patch use of strncpy is actually safe, since count is one less than dest size, and strncpy will fill the remaining dest buffer with nul.",
      "parentUuid": "1666c259_61ed1e5e",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 71
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcae2ac2_eb3722c1",
        "filename": "src/plugins/map/map_api.c",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-09-03T10:16:58Z",
      "side": 1,
      "message": "For strncpy, \"dest size\" is the value of the third argument. Due to \"- 1\", it is one less than the fixed size, so the last byte of fixed size dest array is never nulled (as it is outside \"dest buffer\" as understood by strncpy).\nIn other words, there is no easy way to make strncpy do what strncpy_s was designed to do.",
      "parentUuid": "8e019a02_2a2e287a",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 71
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c58f997c_04340d83",
        "filename": "src/vpp-api/python/vpp_papi/tests/test_vpp_serializer.py",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-09-02T09:00:31Z",
      "side": 1,
      "message": "Assert size and name?",
      "range": {
        "startLine": 28,
        "startChar": 40,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b55096ec_d085a9c7",
        "filename": "src/vpp-api/python/vpp_papi/tests/test_vpp_serializer.py",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-09-02T11:14:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c58f997c_04340d83",
      "range": {
        "startLine": 28,
        "startChar": 40,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4888ea73_16ce107e",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-09-02T09:00:31Z",
      "side": 1,
      "message": "Why not just use this as the second argument to ljust()?",
      "range": {
        "startLine": 130,
        "startChar": 20,
        "endLine": 130,
        "endChar": 26
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "838e45d7_8aaeec69",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-09-02T11:14:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4888ea73_16ce107e",
      "range": {
        "startLine": 130,
        "startChar": 20,
        "endLine": 130,
        "endChar": 26
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c832693_3e4fbdd1",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-09-02T09:00:31Z",
      "side": 1,
      "message": "We should check that the length of this is not more than self.limit?",
      "range": {
        "startLine": 131,
        "startChar": 19,
        "endLine": 131,
        "endChar": 38
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ed7017e_a9fffd82",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-09-02T13:39:15Z",
      "side": 1,
      "message": "That\u0027s checked just above.\n     if self.limit and len(list) \u003e self.limit - 1:\n            raise VPPSerializerValueError(\n                \"Invalid argument length for: {}, {} maximum {}\".\n                format(list, len(list), self.limit - 1))",
      "parentUuid": "1c832693_3e4fbdd1",
      "range": {
        "startLine": 131,
        "startChar": 19,
        "endLine": 131,
        "endChar": 38
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "886ff44d_950229f2",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-09-02T13:49:25Z",
      "side": 1,
      "message": "\u003e That\u0027s checked just above.\n\nThat depends on the type of \"list\" argument. My point is, .encode() can change the length. Example:\n\n$ python\nPython 2.7.16 (default, Apr  6 2019, 01:42:57) \n[GCC 8.3.0] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\u003e\u003e\u003e s \u003d \u0027€\u0027\n\u003e\u003e\u003e len(s)\n3\n\u003e\u003e\u003e s \u003d u\u0027€\u0027\n\u003e\u003e\u003e len(s)\n1\n\u003e\u003e\u003e s \u003d s.encode(\u0027utf-8\u0027)\n\u003e\u003e\u003e len(s)\n3",
      "parentUuid": "9ed7017e_a9fffd82",
      "range": {
        "startLine": 131,
        "startChar": 19,
        "endLine": 131,
        "endChar": 38
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a397ebc1_dc39caa0",
        "filename": "src/vpp-api/python/vpp_papi/vpp_serializer.py",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-09-03T08:15:01Z",
      "side": 1,
      "message": "Thanks, good point. Changed to \u0027ascii\u0027 which enforces 7-bit only...",
      "parentUuid": "886ff44d_950229f2",
      "range": {
        "startLine": 131,
        "startChar": 19,
        "endLine": 131,
        "endChar": 38
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1af36474_a2be51af",
        "filename": "src/vpp/api/vpe.api",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-09-02T11:09:33Z",
      "side": 1,
      "message": "A bump is probably warranted.",
      "range": {
        "startLine": 22,
        "startChar": 18,
        "endLine": 22,
        "endChar": 23
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64270913_61c76f06",
        "filename": "src/vpp/api/vpe.api",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-09-02T11:14:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1af36474_a2be51af",
      "range": {
        "startLine": 22,
        "startChar": 18,
        "endLine": 22,
        "endChar": 23
      },
      "revId": "53ec3583ff91a9c103a15782b5776a8ee2d2dad3",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}