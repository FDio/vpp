{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1a35f0d_980c6690",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 601
      },
      "writtenOn": "2024-10-03T19:17:51Z",
      "side": 1,
      "message": "Generic points:\n\n1. test code duplication - please don’t duplicate test/bfd.py to test/bfd_v2.py. It’s not apparent what are the changes. Also please don’t duplicate test_bfd.py to test_bfd_v2.py. If v2 differs too much, then simply add a new test case in test_bfd.py.\n\n2. bfd_events_v2 - why? These are internal events - yes? If so, then simply update the existing bfd_event instead of introducing v2. If not, then remove bfd_events from api_helper_macros.h and update VPP code to use bfd_events_v2.\n\n3. bfd_api - why is _v2 marked as “in progress”? Are you planning to add more parameters to the API(s)?",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36068a4e_61883b8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-03T20:19:17Z",
      "side": 1,
      "message": "1. In that case, I\u0027ll make changes to the original file and add additional testcases to only test V1 APIs and V1 bfd events. The code in bfd.py still needs to be duplicated somewhat so many functions in there currently call V1 API and now we need to call V1 API in one case and V2 in other cases. I can just created additional class in the same file.\n\n2. It seems the external API want_bfd_events() is autogenerated from the macro string \"bfd_events\" api_helper_macros.h. So if there is already a client using this API, they expect a struct bfd_udp_session_event to be returned which doesn\u0027t have multihop field in there. Now we need to return multihop so we need to use bfd_udp_session_event_v2 which means we would need a new client API to register for BFD events.\n\n3. Initially I thought of supporting discriminator value in the APIs but for now we don\u0027t need it. I\u0027ll remove \"in progress\".",
      "parentUuid": "b1a35f0d_980c6690",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0be2979_58592fca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 601
      },
      "writtenOn": "2024-10-04T07:03:59Z",
      "side": 1,
      "message": "I just got an idea on how to simplify the whole API migration.\nBecause there is only a single flag being added to the APIs, let\u0027s use sw_if_index set to ~0 for that.\nTo keep backwards compatibility, we instead introduce a new API\nbfd_enable_disable_multihop_support(), which toggles accepting/not accepting ~0 sw_if_index, with the default value being off.\nSo this way, backwards compatibility is maintained, unless somebody calls in the new API bfd_enable_disable_multihop_support() to explicitly turn it on, then all the APIs reject sw_if_index ~0 as invalid and work the same way as they do now.\nWith multihop enabled, sw_if_index ~0 is then used to mark multihop sessions and replaces the 1-bit flag.\nAll the old CRUD APIs then remain as they were - no need for _v2.\nThoughs?",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82969375_c79950ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 601
      },
      "writtenOn": "2024-10-04T08:30:35Z",
      "side": 1,
      "message": "Thinking about this a bit more it\u0027s probably enough to provide bfd_enable_multihop(), no need to support disabling multihop and the added complexities arising from it.",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10ca69ac_de45458a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-06T22:43:39Z",
      "side": 1,
      "message": "This is a good suggestion. This will avoid us from having v2 APIs and having a more complicated test code. I will make the changes to take sf_if_index of 0xFFFFFFFF (or ~0) as an indication of multihop. Will also send event to client using the same sw_if_index if the session is multihop.",
      "parentUuid": "e0be2979_58592fca",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d7b14e7_a570979c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-06T22:43:39Z",
      "side": 1,
      "message": "No need for all this since there are no v2 APIs anymore.",
      "parentUuid": "36068a4e_61883b8d",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a9350e3_6b61a4cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-16T16:23:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10ca69ac_de45458a",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfd91c16_8517e9d7",
        "filename": "src/vnet/bfd/bfd_cli.c",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 601
      },
      "writtenOn": "2024-10-03T19:17:51Z",
      "side": 1,
      "message": "do { } while(0);",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 3
      },
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9abcdfd4_f6f88d75",
        "filename": "src/vnet/bfd/bfd_cli.c",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-03T20:19:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dfd91c16_8517e9d7",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 3
      },
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b11f58b3_9b8cfc35",
        "filename": "src/vnet/bfd/bfd_udp.c",
        "patchSetId": 6
      },
      "lineNbr": 1204,
      "author": {
        "id": 601
      },
      "writtenOn": "2024-10-03T19:17:51Z",
      "side": 1,
      "message": "%u",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14bb6937_455650db",
        "filename": "src/vnet/bfd/bfd_udp.c",
        "patchSetId": 6
      },
      "lineNbr": 1204,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-03T20:19:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b11f58b3_9b8cfc35",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f897bc_1bbede72",
        "filename": "src/vnet/bfd/bfd_udp.c",
        "patchSetId": 6
      },
      "lineNbr": 1363,
      "author": {
        "id": 601
      },
      "writtenOn": "2024-10-03T19:17:51Z",
      "side": 1,
      "message": "%u",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d8512ba_34e9581f",
        "filename": "src/vnet/bfd/bfd_udp.c",
        "patchSetId": 6
      },
      "lineNbr": 1363,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-03T20:19:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f7f897bc_1bbede72",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ba0b999_d61b3a22",
        "filename": "src/vnet/bfd/bfd_udp.c",
        "patchSetId": 6
      },
      "lineNbr": 1760,
      "author": {
        "id": 601
      },
      "writtenOn": "2024-10-03T19:17:51Z",
      "side": 1,
      "message": "this will break existing clients accessing stat segment by name and should probably be subject to same update process as the API is\nin other words, don\u0027t change existing stats\nmaybe consult with Andrew Yourtchenko on what is the policy for this, but I think it should be the same",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "618ea4c6_9e6891a1",
        "filename": "src/vnet/bfd/bfd_udp.c",
        "patchSetId": 6
      },
      "lineNbr": 1760,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-03T20:19:17Z",
      "side": 1,
      "message": "To keep the changes simpler (rather than going with versioning again), I can go with these strings:\n\nSH (no change): \"/bfd/udp4/sessions\"\nMH: \"/bfd/udp4/sessions_mh\"\n\nWould that be ok?",
      "parentUuid": "8ba0b999_d61b3a22",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11e919f9_b15f9060",
        "filename": "src/vnet/bfd/bfd_udp.c",
        "patchSetId": 6
      },
      "lineNbr": 1760,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-16T16:23:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "618ea4c6_9e6891a1",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b318882a_463e0fc4",
        "filename": "src/vnet/bfd/bfd_udp.h",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 601
      },
      "writtenOn": "2024-10-03T19:17:51Z",
      "side": 1,
      "message": "should this be a 1-bit flag of the \n\nu32 multihop:1;\nu32 unused:31;\n\nkind?",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0b699b2_560764f1",
        "filename": "src/vnet/bfd/bfd_udp.h",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-03T20:19:17Z",
      "side": 1,
      "message": "Will change to 1 bit.",
      "parentUuid": "b318882a_463e0fc4",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfd2462c_b260eb40",
        "filename": "src/vnet/bfd/bfd_udp.h",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 601
      },
      "writtenOn": "2024-10-07T09:43:44Z",
      "side": 1,
      "message": "I read the change again - may I ask you to shave 1 bit of above u32 indexes to use for multihop? There is no reason to enlarge the key/waste memory here.\n\n31 bits for sw_if_index/fib_index is still plenty enough.\n\nAlternatively, 16 bits for sw_if_index/fib_index is still enough. In that case, dropping multihop flag and replacing the test by ~0 \u003d\u003d sw_if_index could be enough.",
      "parentUuid": "a0b699b2_560764f1",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a0c0b0e_a89ff6f1",
        "filename": "src/vnet/bfd/bfd_udp.h",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-08T03:06:06Z",
      "side": 1,
      "message": "I\u0027ll just switch to 16 bit each for sw_if_index and fib_index and remove the union. This way sw_if_index value of 0xFFFF can indicate multihop. For now fib_index will only be used for multihop and stay at 0. I\u0027ll leave the internal APIs with multihop parameter so we don\u0027t have to do check against sw_if_index in many of the internal functions.",
      "parentUuid": "cfd2462c_b260eb40",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2d9d716_a9f992ea",
        "filename": "src/vnet/bfd/bfd_udp.h",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 3146
      },
      "writtenOn": "2024-10-16T16:23:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a0c0b0e_a89ff6f1",
      "revId": "21de86212c2d5bd62304434fe23913430500e1aa",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}