{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c5159714_d8f8ae06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 680
      },
      "writtenOn": "2025-09-26T21:12:13Z",
      "side": 1,
      "message": "Do we really need the spinlock? It looks like the race condition is for these 2 variables,\nn_since_last_int\nint_deadline\nCan we use clib_atomic operation on them and not use spinlock?",
      "revId": "1e08ee2a4620ffbbeece38d4433f4adac0ba03f1",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff47f558_80551c02",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1388
      },
      "writtenOn": "2025-09-29T07:12:20Z",
      "side": 1,
      "message": "I guess atomics would work too. Actually, spinlock is based on them too. So I think it is simpler and probably better to run one atomic operation (for `int_lock`) instead of two (for `n_since_last_int` and `int_deadline`).\n\nI wonder why you don\u0027t like the spinlock? Now, only one thread will be locked and only for a very short period of time. And spinlocks, as I know, are good in such cases.",
      "parentUuid": "c5159714_d8f8ae06",
      "revId": "1e08ee2a4620ffbbeece38d4433f4adac0ba03f1",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e37b9f5_a292afd9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 680
      },
      "writtenOn": "2025-09-29T15:50:27Z",
      "side": 1,
      "message": "The application for spinlock is to protect a large section of code. For the race condition of a simple variable, it makes more sense to use atomic operations and not spinlock unless you tell me atomic operations do not work.",
      "parentUuid": "ff47f558_80551c02",
      "revId": "1e08ee2a4620ffbbeece38d4433f4adac0ba03f1",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "696a4ff9_04e0cf12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1388
      },
      "writtenOn": "2025-09-30T12:03:45Z",
      "side": 1,
      "message": "Can you clarify your expectations of using atomic operations? Do you expect to see a better performance or to make the code follow the guidelines?",
      "parentUuid": "3e37b9f5_a292afd9",
      "revId": "1e08ee2a4620ffbbeece38d4433f4adac0ba03f1",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fc53835_3329103a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 680
      },
      "writtenOn": "2025-09-30T22:08:21Z",
      "side": 1,
      "message": "Vratko, would you please run csit vhost performance test on this patch to ensure that there is no degradation?",
      "revId": "1e08ee2a4620ffbbeece38d4433f4adac0ba03f1",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "440fec1f_d2a8d228",
        "filename": "src/plugins/vhost/vhost_user.c",
        "patchSetId": 2
      },
      "lineNbr": 1260,
      "author": {
        "id": 680
      },
      "writtenOn": "2025-09-26T21:12:13Z",
      "side": 1,
      "message": "txq is init but not lock. When the code enters here, we\u0027d do unlock.",
      "revId": "1e08ee2a4620ffbbeece38d4433f4adac0ba03f1",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e933d7b7_f35205ab",
        "filename": "src/plugins/vhost/vhost_user.c",
        "patchSetId": 2
      },
      "lineNbr": 1260,
      "author": {
        "id": 1388
      },
      "writtenOn": "2025-09-29T07:12:20Z",
      "side": 1,
      "message": "Right, just to simplify the code, because unlock is safe to do any number of times. For example, in vhost_user_output.c, `vring_lock` is locked only if the queue is shared, but unlock happens unconditionally.",
      "parentUuid": "440fec1f_d2a8d228",
      "revId": "1e08ee2a4620ffbbeece38d4433f4adac0ba03f1",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b939a52_2758684f",
        "filename": "src/plugins/vhost/vhost_user.c",
        "patchSetId": 2
      },
      "lineNbr": 1266,
      "author": {
        "id": 680
      },
      "writtenOn": "2025-09-26T21:12:13Z",
      "side": 1,
      "message": "Same here",
      "revId": "1e08ee2a4620ffbbeece38d4433f4adac0ba03f1",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}