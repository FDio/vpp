{
  "comments": [
    {
      "key": {
        "uuid": "129b9c00_0e87753d",
        "filename": "src/plugins/wireguard/wireguard_output_tun.c",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 267
      },
      "writtenOn": "2021-05-21T07:13:19Z",
      "side": 1,
      "message": "alternatively:\n  offset is vnet_buffer(b[0]).ip_save_rewrite_length.\n  plain_data_len is vlib_buffer_length_in_chain() - offset.",
      "revId": "c209e16e0930ade8be3d3f44d75cdecc10335b5b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a716e01c_77e05def",
        "filename": "src/plugins/wireguard/wireguard_peer.c",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 8
      },
      "writtenOn": "2021-04-28T06:51:31Z",
      "side": 1,
      "message": "It\u0027s useful to set the flow label for the purpose of getting good ECMP in the network.\n(It is also typical of tunnels to support copying of the traffic class / TOS field)\nHere is some code I used in the past:\n  u8 tc \u003d mm-\u003etc_copy ? ip4-\u003etos : mm-\u003etc;\n  u32 vtcfl \u003d 0x6 \u003c\u003c 28;\n  vtcfl |\u003d tc \u003c\u003c 20;\n  vtcfl |\u003d vnet_buffer (p)-\u003eip.flow_hash \u0026 0x000fffff;\n\n  return (clib_host_to_net_u32 (vtcfl));",
      "revId": "c209e16e0930ade8be3d3f44d75cdecc10335b5b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe0060a7_fc68b856",
        "filename": "src/plugins/wireguard/wireguard_peer.c",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 8
      },
      "writtenOn": "2021-04-28T06:51:31Z",
      "side": 1,
      "message": "The recommended hop limit is 64.",
      "revId": "c209e16e0930ade8be3d3f44d75cdecc10335b5b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bdf9215_587a2466",
        "filename": "src/plugins/wireguard/wireguard_peer.c",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 2280
      },
      "writtenOn": "2021-04-28T13:35:51Z",
      "side": 1,
      "message": "Probably using allowed_ips[0] is a bad idea.",
      "range": {
        "startLine": 258,
        "startChar": 33,
        "endLine": 258,
        "endChar": 58
      },
      "revId": "c209e16e0930ade8be3d3f44d75cdecc10335b5b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2106adc9_a1de9e36",
        "filename": "src/plugins/wireguard/wireguard_peer.c",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 8
      },
      "writtenOn": "2021-05-05T06:54:08Z",
      "side": 1,
      "message": "You want the address family of the peer here I think?\nSo assuming you have a check somewhere that peer-\u003esrc and peer-\u003edst is of the same AF.\nThen wouldn\u0027t fib_proto_to_link(fib_proto) work?",
      "parentUuid": "7bdf9215_587a2466",
      "range": {
        "startLine": 258,
        "startChar": 33,
        "endLine": 258,
        "endChar": 58
      },
      "revId": "c209e16e0930ade8be3d3f44d75cdecc10335b5b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaaea2e8_93ebf33a",
        "filename": "src/plugins/wireguard/wireguard_peer.c",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 2280
      },
      "writtenOn": "2021-05-05T08:18:16Z",
      "side": 1,
      "message": "If we use IPvX over IPvX - all is ok.\nThe problem is using IPvX over IPvY. Then we have a situation where the peer-\u003esrc and peer-\u003edst is IPv4, but encapsulated traffic is IPv6.\nAnd we have to redirect packets from IPv6 to IPv4 after encoding.\nI have a guess we should use wg-interface address instead of peer-\u003eallowed-ips[], but what if it has many IPs (IPv6 AND IPv4)? What address should we use?\nI think correctly?",
      "parentUuid": "2106adc9_a1de9e36",
      "range": {
        "startLine": 258,
        "startChar": 33,
        "endLine": 258,
        "endChar": 58
      },
      "revId": "c209e16e0930ade8be3d3f44d75cdecc10335b5b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95d88a16_2a5c2e16",
        "filename": "src/plugins/wireguard/wireguard_peer.c",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 8
      },
      "writtenOn": "2021-05-05T08:34:36Z",
      "side": 1,
      "message": "The rewrite string / outer encap is bound to a peer. If the peer is IPv4 it lives in the IPv4 FIB if it\u0027s IPv6 it lives in the IP6 FIB.\n10:31\nI believe wireguard could support both IPv4 and IPv6 payload to a given peer. You would have cross AF FIB table resolution. I think that should work. But we might have to involve Benoit or Neale for a definite answer.",
      "parentUuid": "eaaea2e8_93ebf33a",
      "range": {
        "startLine": 258,
        "startChar": 33,
        "endLine": 258,
        "endChar": 58
      },
      "revId": "c209e16e0930ade8be3d3f44d75cdecc10335b5b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f940d78_e095e642",
        "filename": "src/plugins/wireguard/wireguard_peer.c",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 2
      },
      "writtenOn": "2021-05-17T15:38:13Z",
      "side": 1,
      "message": "Artem... my suggestion, simply try replacing here:\n\nfib_proto_to_link (allowed_ips[0].fp_proto)\n\nwith the address family of \u0026peer-\u003edst.addr.\n\nAnd try it.  Either cross AF lookup will work (in which case we are fine) or it won\u0027t (in which case we are really really not fine).\n\nI did a quick spot check to see if via the CLI it would add the route it does.  So definitely worth trying out :)",
      "parentUuid": "95d88a16_2a5c2e16",
      "range": {
        "startLine": 258,
        "startChar": 33,
        "endLine": 258,
        "endChar": 58
      },
      "revId": "c209e16e0930ade8be3d3f44d75cdecc10335b5b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03f998ee_42aa4e8e",
        "filename": "src/plugins/wireguard/wireguard_peer.c",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 2280
      },
      "writtenOn": "2021-09-30T09:56:41Z",
      "side": 1,
      "message": "Thank you.\nAdjacency approach was changed in this patch - https://gerrit.fd.io/r/c/vpp/+/32413/8",
      "parentUuid": "6f940d78_e095e642",
      "range": {
        "startLine": 258,
        "startChar": 33,
        "endLine": 258,
        "endChar": 58
      },
      "revId": "c209e16e0930ade8be3d3f44d75cdecc10335b5b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7f9ba06_ff4d8b9f",
        "filename": "src/plugins/wireguard/wireguard_peer.c",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 2
      },
      "writtenOn": "2021-09-30T14:31:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03f998ee_42aa4e8e",
      "range": {
        "startLine": 258,
        "startChar": 33,
        "endLine": 258,
        "endChar": 58
      },
      "revId": "c209e16e0930ade8be3d3f44d75cdecc10335b5b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}