// Test the behavior of EPOLLET for EPOLLOUT when using the default notsent
// lowat.
//
// When sendbuffer is cleared, epoll_wait returns EPOLLOUT after a partial
// write, regardless of whether the user received EAGAIN or not.
`../../common/defaults.sh
../common/set_sysctls.py /proc/sys/net/ipv4/tcp_wmem="4096 50000 4194304"
`
    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

   +0 < S 0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
   +0 > S. 0:0(0) ack 1 <mss 1460,nop,nop,sackOK,nop,wscale 8>
   +0 < . 1:1(0) ack 1 win 257

   +0 accept(3, ..., ...) = 4

   // Use the default notsent lowat.
   +0 setsockopt(4, SOL_TCP, TCP_NOTSENT_LOWAT, [0], 4) = 0
   +0 getsockopt(4, SOL_TCP, TCP_NOTSENT_LOWAT, [0], [4]) = 0

   +0 fcntl(4, F_SETFL, O_RDWR|O_NONBLOCK) = 0
   +0 epoll_create(1) = 5

   // Add the FD as EPOLLET and clear all the events.
   +0 epoll_ctl(5, EPOLL_CTL_ADD, 4, {events=EPOLLOUT|EPOLLIN|EPOLLET, fd=4}) = 0
   +0 epoll_wait(5, {events=EPOLLOUT, fd=4}, 1, 0) = 1
   +0 epoll_wait(5, {events=0, ptr=0}, 1, 0) = 0

   // We have a parital write here.
   +0 write(4, ..., 59000) = 58000

   // Now epoll_wait should not return any event because there is no space.
   +0 epoll_wait(5, {events=0, ptr=0}, 1, 0) = 0

   // The ack does not open up enough space to send EPOLLOUT to the user.
   +0 > P. 1:10001(10000) ack 1
   +0 < . 1:1(0) ack 10001 win 257
   +0 > P. 10001:26001(16000) ack 1
   +0 epoll_wait(5, {events=0, ptr=0}, 1, 0) = 0

   // Now this ack opens up substantial space and we will send EPOLLOUT.
   +0 < . 1:1(0) ack 26001 win 257
   +0 > P. 26001:42001(16000) ack 1
   +0 epoll_wait(5, {events=EPOLLOUT, fd=4}, 1, 0) = 1
   // EPOLLET prevents a second EPOLLOUT.
   +0 epoll_wait(5, {events=0, ptr=0}, 1, 0) = 0

   // We have another parital write here.
   +0 write(4, ..., 180000) = 128000

   // The ack opens enough space to send EPOLLOUT to the user.
   +0 < . 1:1(0) ack 42001 win 257
   +0 > P. 42001:74001(32000) ack 1
   +0 epoll_wait(5, {events=EPOLLOUT, fd=4}, 1, 0) = 1

   // The ack opens more space, but EPOLLET prevents a second EPOLLOUT.
   +0 epoll_wait(5, {events=0, ptr=0}, 1, 0) = 0
   +0 < . 1:1(0) ack 74001 win 257
   +0 epoll_wait(5, {events=0, ptr=0}, 1, 0) = 0
   +0 > P. 74001:106001(32000) ack 1

   // Another partial write.
   +0 write(4, ..., 180000) = 112000

   // This ack opens more space, so we send EPOLLOUT.
   +0 < . 1:1(0) ack 106001 win 257
   +0 > P. 106001:138001(32000) ack 1
   +0 epoll_wait(5, {events=EPOLLOUT, fd=4}, 1, 0) = 1
