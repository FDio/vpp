// Verify behavior for the sequence:
// shutdown(SHUT_RDWR), close().
// In this variant we verify behavior when there is still
// data in the write queue at the time of the shutdown(),
// and then we get an ACK before the close().

`../common/defaults.sh`

// Initialize a server socket.
    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

   +0 < S 0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
   +0 > S. 0:0(0) ack 1 <mss 1460,nop,nop,sackOK,nop,wscale 8>
+.001 < . 1:1(0) ack 1 win 257

   +0 accept(3, ..., ...) = 4

 +.01 write(4, ..., 20000) = 20000
   +0 > P. 1:10001(10000) ack 1

// Shutdown SHUT_RDDWR enqueues a FIN, but we don't have
// cwnd to send it.
+.000 shutdown(4, SHUT_RDWR) = 0

// Receive an ACK and send more data in slow start.
+.001 < . 1:1(0) ack 1001 win 257
   +0 > P. 10001:12001(2000) ack 1

// TLP after 2*RTT + min_rto
+.005 > . 12001:13001(1000) ack 1

   +0 read(4, ..., 1000) = 0
   +0 write(4, ..., 1000) = -1 EPIPE (Broken pipe)

 +.01 close(4) = 0

 +.01 < . 1:1(0) ack 13001 win 257
   +0 > FP. 13001:20001(7000) ack 1
   +0 < . 1:1(0) ack 20002 win 257

 +.01 < F. 1:1(0) ack 20002 win 257
   +0 > . 20002:20002(0) ack 2

