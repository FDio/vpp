// Test baseline POLLOUT behavior with no TCP_NOTSENT_LOWAT.

`../../common/defaults.sh
../common/set_sysctls.py /proc/sys/net/ipv4/tcp_wmem="4096 50000 4194304" \
                         /proc/sys/net/ipv4/tcp_min_tso_segs=10
`

// Initialize connection
    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

   +0 < S 0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
   +0 > S. 0:0(0) ack 1 <mss 1460,nop,nop,sackOK,nop,wscale 8>
 +.02 < . 1:1(0) ack 1 win 257

   +0 accept(3, ..., ...) = 4

// Verify that by default the option value is 0.
   +0 getsockopt(4, SOL_TCP, TCP_NOTSENT_LOWAT, [0], [4]) = 0

   +0 fcntl(4, F_SETFL, O_RDWR|O_NONBLOCK) = 0

   +0 write(4, ..., 59000) = 58000
   +0 > P. 1:10001(10000) ack 1
 +.02 < . 1:1(0) ack 10001 win 257
   +0 > P. 10001:26001(16000) ack 1

// Verify that we get a POLLOUT when a little space frees up.
   +0...0.020 poll([{fd=4,
             events=POLLOUT,
             revents=POLLOUT}], 1, 1000) = 1

// An ACK for at least 17 packets wakes the poll for POLLOUT.
 +.02 < . 1:1(0) ack 17001 win 257
`/tmp/sysctl_restore_${PPID}.sh`
