// Verify behavior for the sequence: remote side sends FIN, then we close().
// Since the remote side (client) closes first, we test our LAST_ACK code path.
--tolerance_usecs=50000

// Initialize a server socket.
    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

   +0 < S 0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
   +0 > S. 0:0(0) ack 1 <mss 1460,wscale 10,sackOK,nop,nop,nop>
   +0 < . 1:1(0) ack 1 win 257

   +0 accept(3, ..., ...) = 4

// Client closes first.
 +.01 < F. 1:1(0) ack 1 win 257
   +0 > . 1:1(0) ack 2

// App notices that client closed.
   +0 read(4, ..., 1000) = 0

// Then we close.
 +.01 close(4) = 0
   +0 > F. 1:1(0) ack 2

// Client ACKs our FIN.
 +.01 < . 2:2(0) ack 2 win 257

// Verify that we send RST in response to any incoming segments
// (because the kernel no longer has any record of this socket).
 +.01 < . 2:2(0) ack 2 win 257
   +0 > R 2:2(0)
