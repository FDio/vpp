#!/bin/sh
set -eu

# which packagecloud repository to use
export PACKAGECLOUD_REPO=${PACKAGECLOUD_REPO:-'fdio/release'}

# the version to pin down during the install, or empty
if [ -z "${VPP_CHECK_VERSION+set}" ]; then
  VPP_EXACT_VERSION=${VPP_EXACT_VERSION:-"19.01.2-release"}
else
  VPP_EXACT_VERSION=""
fi
export VPP_EXACT_VERSION

# which version to check for in the show outputs
export VPP_CHECK_VERSION=${VPP_CHECK_VERSION:-${VPP_EXACT_VERSION:+${VPP_EXACT_VERSION}}}

# Prompt user to confirm verification criteria
echo "Repo: ${PACKAGECLOUD_REPO}, force install version: '${VPP_EXACT_VERSION}', check version: '${VPP_CHECK_VERSION}'"
read -p "Press enter when ready:" ENTER

if [ "$VPP_EXACT_VERSION" = "" ]; then
  BUILD_ARG_VERSION=""
else
  BUILD_ARG_VERSION="--build-arg VPP_EXACT_VERSION=${VPP_EXACT_VERSION}"
fi

TEST_ENVIRONMENTS="ubuntu1604 ubuntu1804 centos"

# build the three containers
echo "-----------------------"
echo
echo "Building docker containers:"
for i in ${TEST_ENVIRONMENTS}; do
  echo  
  echo DOCKER build $i  
  docker build -q -t vpp-test-$i -f Dockerfile.$i ${BUILD_ARG_VERSION} --build-arg PACKAGECLOUD_REPO=${PACKAGECLOUD_REPO} --build-arg VPP_CHECK_VERSION=${VPP_CHECK_VERSION} .
done

echo "-----------------------"

# run the tests, bail out if it fails
for i in ${TEST_ENVIRONMENTS}; do
  echo
  echo Testing: $i
  if docker run --shm-size=512M vpp-test-$i; then
    echo "TEST $i ok"
  else
    RET_CODE=$?
    echo   
    echo "RET_CODE: ${RET_CODE}"
    echo "FAILURE testing $i!"
    exit 1
  fi
done
echo "-----------------------"
echo
echo 'ALL TESTS PASSED!!!  :)'
