{
  "comments": [
    {
      "key": {
        "uuid": "afa4d06a_7fbd5163",
        "filename": "src/vpp-api/python/CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 8
      },
      "writtenOn": "2021-02-09T18:28:10Z",
      "side": 1,
      "message": "Is this really required? What is the consequence of not including it?",
      "revId": "639d1a5b38b4527aaf196b651b40c25bdd1ef49b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f90a496_882b8275",
        "filename": "src/vpp-api/python/CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 1496
      },
      "writtenOn": "2021-02-09T19:27:34Z",
      "side": 1,
      "message": "You asked this in patch set 2, yes?\n\nFor convenience, I copied it here.\n\nThis doesn\u0027t change what is there for cmake from what I\u0027ve looked at. This just kicks in if a system has 2 versions installed, and picks the newer version. Presumably, the older python version was successful in a past run. \n\nFrom the docs:\nThe Python_ADDITIONAL_VERSIONS variable can be used to specify a list of version numbers that should be taken into account when searching for Python. You need to set this variable before calling find_package(PythonLibs).\n\nDamjan\u0027s commit to add the check on v3.12 is about the syntax change that happened within cmake.  We somehow conflated that to also peg builds to python2.7 when there is no dependency.\n\nAre you asking something different?",
      "parentUuid": "afa4d06a_7fbd5163",
      "revId": "639d1a5b38b4527aaf196b651b40c25bdd1ef49b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7d32733_21ff912c",
        "filename": "src/vpp-api/python/CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 8
      },
      "writtenOn": "2021-02-09T19:45:39Z",
      "side": 1,
      "message": "Would it not work equally well not trying to specify explicit versions?\nThe fewer things we need to update when python 3.10 is out...",
      "parentUuid": "8f90a496_882b8275",
      "revId": "639d1a5b38b4527aaf196b651b40c25bdd1ef49b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a45740c_d989d27b",
        "filename": "src/vpp-api/python/CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 1496
      },
      "writtenOn": "2021-02-09T20:17:07Z",
      "side": 1,
      "message": "No.  This is not about PYTHON\u003d in the makefile.  This is about what version packaging uses as \"python3\" when building the distributions.  We want packaging to use the most current version on the box.  \nI can probably add 3.11, 3.10 to the list if you are worried, but it will probably change before we get to that point.\n\nThe other way to do this is to use `alternatives` to set the system python3 version outside of cmake, but that means that we have to list them, and parse out the installed options and select the highest version.",
      "parentUuid": "a7d32733_21ff912c",
      "revId": "639d1a5b38b4527aaf196b651b40c25bdd1ef49b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aaa4fcc_7f5102d4",
        "filename": "src/vpp-api/python/CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 8
      },
      "writtenOn": "2021-02-09T20:19:13Z",
      "side": 1,
      "message": "Why is it better to use latest if that’s what cmake does instead of system default which you presumably get without the line?",
      "parentUuid": "0a45740c_d989d27b",
      "revId": "639d1a5b38b4527aaf196b651b40c25bdd1ef49b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}