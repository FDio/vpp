{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a5913945_e31b61ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 193
      },
      "writtenOn": "2022-11-20T23:25:10Z",
      "side": 1,
      "message": "We already have support for software rss in interface handoff. Isn\u0027t that enough? ",
      "revId": "c5e9c7d5f6a96b4b6ba41f14a6c98eeed50ffb5f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85ec8392_60509f9d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1737
      },
      "writtenOn": "2022-11-21T01:11:37Z",
      "side": 1,
      "message": "software rss maybe not enough. the fragmented udp/tcp packets maybe hash to different threads.",
      "parentUuid": "a5913945_e31b61ad",
      "revId": "c5e9c7d5f6a96b4b6ba41f14a6c98eeed50ffb5f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c4c988f_51208331",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 193
      },
      "writtenOn": "2022-11-21T16:54:36Z",
      "side": 1,
      "message": "Fragmentation should deal with that problem before tcp/udp, which should never be exposed to fragments. \n\nThe point is that we shouldn\u0027t be doing handoffs all over the place as they\u0027re not cheap. Typically, lower layers should handle consistent thread selection for a flow otherwise all features would have to reimplement their own handoff on their own.",
      "parentUuid": "85ec8392_60509f9d",
      "revId": "c5e9c7d5f6a96b4b6ba41f14a6c98eeed50ffb5f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05158b30_622a75c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1737
      },
      "writtenOn": "2022-11-22T01:47:59Z",
      "side": 1,
      "message": "Currently the fragment udp packets is reassembled in it\u0027s own node like: ip4-full-reassembly. But if the nic rss do not support ipv4-frag and is configured with ipv4-udp and ipv4 rss, nic will treat all fragment udp packets as ipv4 packet not udp packet, and will RSS the reassembled udp packet to different thread, this will lead to session layer error. So in our project, I have to turn off ipv4-udp. Now I think just handoff the packet to right thread, can solve the problem.",
      "parentUuid": "1c4c988f_51208331",
      "revId": "c5e9c7d5f6a96b4b6ba41f14a6c98eeed50ffb5f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5a2bd2b_1b73bfc5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 193
      },
      "writtenOn": "2022-11-26T01:49:48Z",
      "side": 1,
      "message": "Unless I\u0027m missing something, that sounds again like a reassembly problem.\n\nLet me see if I understood the problem correctly: your nics rss ip fragments to different workers and ip reassembly in vpp does not consistently return the reassembled packets of a given flow to the same worker? If that is accurate, the issue is in the ip reassembly code and it should be fixed.",
      "parentUuid": "05158b30_622a75c7",
      "revId": "c5e9c7d5f6a96b4b6ba41f14a6c98eeed50ffb5f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d779598_289b214d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1737
      },
      "writtenOn": "2022-11-26T02:05:40Z",
      "side": 1,
      "message": "It\u0027s no reassembly issue. For udp packet less then mtu, 82599es will rss by ipv4-udp rule in nic, but for udp pacet more then mtu, all the fragments will rss by ipv4 rule in nic, the worker threads above two cases may be different.",
      "parentUuid": "d5a2bd2b_1b73bfc5",
      "revId": "c5e9c7d5f6a96b4b6ba41f14a6c98eeed50ffb5f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb79c8d0_548b6198",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 193
      },
      "writtenOn": "2022-11-26T02:26:21Z",
      "side": 1,
      "message": "The first packet in a chain of fragments, i.e., the one that has the udp header, should hit the ipv4-udp rule in the nic. If it does not, it sounds like a bug. The subsequent fragments, i.e., those without the udp header, will hit whatever other rules in place. Reassembly should then use the thread of the first packet as the thread of the reassembled packet.",
      "parentUuid": "1d779598_289b214d",
      "revId": "c5e9c7d5f6a96b4b6ba41f14a6c98eeed50ffb5f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35b924ae_d95e43d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1737
      },
      "writtenOn": "2022-11-26T03:43:14Z",
      "side": 1,
      "message": "In my test cases, I found the 82599es nic will rss udp fragments by ipv4, event the packet has udp header. \nIn 82599-datasheet-v3-4.pdf page.314, it says only parse non-fragmented IPv4, TCP/DUP/SCTP l4 header for rss function like:ipv4-udp/ipv4-tcp. You can check it.",
      "parentUuid": "cb79c8d0_548b6198",
      "revId": "c5e9c7d5f6a96b4b6ba41f14a6c98eeed50ffb5f",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2"
    }
  ]
}