{
  "comments": [
    {
      "key": {
        "uuid": "d278b001_4c4ec22d",
        "filename": "src/vpp-api/python/vpp_papi/vpp_papi.py",
        "patchSetId": 4
      },
      "lineNbr": 671,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-12-09T11:59:04Z",
      "side": 1,
      "message": "See comments below.",
      "range": {
        "startLine": 671,
        "startChar": 20,
        "endLine": 671,
        "endChar": 24
      },
      "revId": "771f3549121de33d3582d8c038ed2380e266a47e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bed24cf_b08c8e11",
        "filename": "src/vpp-api/python/vpp_papi/vpp_papi.py",
        "patchSetId": 4
      },
      "lineNbr": 733,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-12-09T11:59:04Z",
      "side": 1,
      "message": "This gets changed. We do not want to change this, as calling with timeout\u003d0.0 may be legitimate in async clients.",
      "range": {
        "startLine": 733,
        "startChar": 59,
        "endLine": 733,
        "endChar": 70
      },
      "revId": "771f3549121de33d3582d8c038ed2380e266a47e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7791e2f_09d3a1f8",
        "filename": "src/vpp-api/python/vpp_papi/vpp_papi.py",
        "patchSetId": 4
      },
      "lineNbr": 733,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-12-09T12:37:11Z",
      "side": 1,
      "message": "The docs say that q.get() takes blocking\u003d[True|False] \n\nhttps://docs.python.org/3/library/queue.html#queue.Queue.get\n\nIf blocking\u003dTrue and timeout \u003d 0.0, get() immediately raises Empty.\n\nhttps://github.com/python/cpython/blob/master/Lib/queue.py#L177\n\nI can update the docstring to indicate that we raise VPPIOError, which is what the shmem transport does.  We should decide what the behavior should be and make it consistent across the transports.",
      "parentUuid": "0bed24cf_b08c8e11",
      "range": {
        "startLine": 733,
        "startChar": 59,
        "endLine": 733,
        "endChar": 70
      },
      "revId": "771f3549121de33d3582d8c038ed2380e266a47e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26a08455_a66781b2",
        "filename": "src/vpp-api/python/vpp_papi/vpp_papi.py",
        "patchSetId": 4
      },
      "lineNbr": 733,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-12-09T13:59:41Z",
      "side": 1,
      "message": "\u003e If blocking\u003dTrue and timeout \u003d 0.0, get() immediately raises Empty.\n\u003e\n\u003e https://github.com/python/cpython/blob/master/Lib/queue.py#L177\n\nNot if there is something waiting in the queue, when line 175 skips line 177.\nI think using timeout\u003d0.0 for \"async read\" is understandable enough, unless we want to add \"blocking\" argument alongside \"timeout\".\n\n\u003e We should decide what the behavior should be and make it consistent across the transports.\n\nI prefer None when there is a delay (but later attempt may work), and VPPIOError when something went wrong and we do no expect waiting will fix it.",
      "parentUuid": "f7791e2f_09d3a1f8",
      "range": {
        "startLine": 733,
        "startChar": 59,
        "endLine": 733,
        "endChar": 70
      },
      "revId": "771f3549121de33d3582d8c038ed2380e266a47e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9eed64fc_1ff9330b",
        "filename": "src/vpp-api/python/vpp_papi/vpp_papi.py",
        "patchSetId": 4
      },
      "lineNbr": 733,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-12-09T15:14:09Z",
      "side": 1,
      "message": "non blocking get \u003d\u003d get_nowait \u003d\u003d get(block\u003dFalse, timeout\u003dNone) (not timeout\u003d0.0)\nhttps://docs.python.org/3.6/library/queue.html#queue.Queue.get_nowait\nhttps://github.com/python/cpython/blob/master/Lib/queue.py#L192\n\nWe need an error for when we timeout. I\u0027m not invested in VPPIOErrorI can create/raise an ApiClientReadTimeout if you like. They can be ignored from the client.",
      "parentUuid": "26a08455_a66781b2",
      "range": {
        "startLine": 733,
        "startChar": 59,
        "endLine": 733,
        "endChar": 70
      },
      "revId": "771f3549121de33d3582d8c038ed2380e266a47e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed3737d3_111c9e77",
        "filename": "src/vpp-api/python/vpp_papi/vpp_papi.py",
        "patchSetId": 4
      },
      "lineNbr": 733,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-12-11T13:19:03Z",
      "side": 1,
      "message": "The API of Queue offers both \"block\" and \"timeout\" arguments. The documentation is not explicit on what happens when block\u003dTrue and timeout\u003d0.0, but the implemented behavior is the same as with block\u003dFalse, just the execution is slightly slower.\n\nNow, vpp_papi.read_blocking only offers \"timeout\" argument. The behavior with timeout\u003d0.0 is implied by the line we are commenting on, no \"if timeout is positive\" condition is present here. Maybe the method name (read_blocking) is confusing, and we could rename this to just read(), with the docstring explaining that the timeout value decides whether the read is blocking or not.\n\n\u003e We need an error for when we timeout.\n\nWe can have a wrapper function that raises ApiClientReadTimeout when the inner function returns None. With the two functions, callers can chose what they like. Line 670 will call the raising function, (my hypothetical) async client user will call the None returning function, everybody is happy.\nThen, read_blocking could be a good name for the raising function, but that would be a backward incompatible change for existing users.",
      "parentUuid": "9eed64fc_1ff9330b",
      "range": {
        "startLine": 733,
        "startChar": 59,
        "endLine": 733,
        "endChar": 70
      },
      "revId": "771f3549121de33d3582d8c038ed2380e266a47e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4b6217e_87455423",
        "filename": "src/vpp-api/python/vpp_papi/vpp_transport_socket.py",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-12-09T12:37:11Z",
      "side": 1,
      "message": "This is always blocking.  For async, this would have to be False.",
      "range": {
        "startLine": 235,
        "startChar": 30,
        "endLine": 235,
        "endChar": 35
      },
      "revId": "771f3549121de33d3582d8c038ed2380e266a47e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d203826_e58abf9e",
        "filename": "src/vpp-api/python/vpp_papi/vpp_transport_socket.py",
        "patchSetId": 4
      },
      "lineNbr": 237,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-12-09T11:59:04Z",
      "side": 1,
      "message": "This is how it gets changed. Excepting is more expensive than checking for None.",
      "range": {
        "startLine": 237,
        "startChar": 12,
        "endLine": 237,
        "endChar": 43
      },
      "revId": "771f3549121de33d3582d8c038ed2380e266a47e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6121f633_36958e9d",
        "filename": "src/vpp-api/python/vpp_papi/vpp_transport_socket.py",
        "patchSetId": 4
      },
      "lineNbr": 237,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-12-09T12:37:11Z",
      "side": 1,
      "message": "Added to make the interfaces consistent between socket and shmem.",
      "parentUuid": "8d203826_e58abf9e",
      "range": {
        "startLine": 237,
        "startChar": 12,
        "endLine": 237,
        "endChar": 43
      },
      "revId": "771f3549121de33d3582d8c038ed2380e266a47e",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}