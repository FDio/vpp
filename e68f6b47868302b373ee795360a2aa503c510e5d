{
  "comments": [
    {
      "key": {
        "uuid": "ebbb1628_bc19b7ef",
        "filename": "src/vnet/devices/tap/tap.c",
        "patchSetId": 7
      },
      "lineNbr": 479,
      "author": {
        "id": 9
      },
      "writtenOn": "2018-10-22T16:17:58Z",
      "side": 1,
      "message": "What happens if you turn off gso and there are still GSO packets on the ring?",
      "range": {
        "startLine": 479,
        "startChar": 23,
        "endLine": 479,
        "endChar": 36
      },
      "revId": "e68f6b47868302b373ee795360a2aa503c510e5d",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6871b60c_0b3cb392",
        "filename": "src/vnet/devices/tap/tap.c",
        "patchSetId": 7
      },
      "lineNbr": 479,
      "author": {
        "id": 320
      },
      "writtenOn": "2018-10-22T17:07:53Z",
      "side": 1,
      "message": "If the kernel TAP driver has already enqueued some GSO packets in our direction, and we turn off the GSO, then we stop properly marking them on ingress, which will result in a few packet dropped due to invalid checksums by receiving host (non-gso packets), or due to MTU checks (gso packets).\n\nThe first condition is easily reproducible by just commenting out the next line. I could not reproduce the second condition, even repeatedly turning on/off the gso on the receiving interface of the iperf. \n\nGiven the constraint of not changing the datapath for the non-gso tap interfaces, one way to address this if we want zero drops is to turn off the \"gso_enabled\" flag on the interface a few milliseconds after sending IOCTLs - although that seems a bit too convoluted ?\n\nOr did you have something else in mind ?",
      "parentUuid": "ebbb1628_bc19b7ef",
      "range": {
        "startLine": 479,
        "startChar": 23,
        "endLine": 479,
        "endChar": 36
      },
      "revId": "e68f6b47868302b373ee795360a2aa503c510e5d",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d3dcfca_19f3e2b4",
        "filename": "src/vnet/devices/tap/tap.c",
        "patchSetId": 7
      },
      "lineNbr": 479,
      "author": {
        "id": 9
      },
      "writtenOn": "2018-10-23T13:11:07Z",
      "side": 1,
      "message": "Well, first to say I dont see a great use case of option to turn this on/off during runtime so I will be perfectly fine with having this as a a rgument to create api/cli.\n\nIf you want to continue with this approach, dropping few packets should not be acceptable, so i will allow turning it on/off only if interface is admin down....",
      "parentUuid": "6871b60c_0b3cb392",
      "range": {
        "startLine": 479,
        "startChar": 23,
        "endLine": 479,
        "endChar": 36
      },
      "revId": "e68f6b47868302b373ee795360a2aa503c510e5d",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbf005d1_b5ba1df7",
        "filename": "src/vnet/devices/tap/tap.c",
        "patchSetId": 7
      },
      "lineNbr": 479,
      "author": {
        "id": 320
      },
      "writtenOn": "2018-10-23T14:22:32Z",
      "side": 1,
      "message": "Like we discussed last week - I do not see a lot of sense of adding the flag to create interface - the only reason one would want it off is when something is broken, right ? So turning on/off is purely a debugging measure and should not require recreating the entire world - and allows us to:\n (1) not require any changes to existing users\n (2) transparently change the default for offload to \"on\" when it is deemed stable enough or provide a startup config option for doing so.\n (3) be able to dynamically turn it off during the debugging. \n (4) dynamically show the performance differences in progress of running the iperf session - which is great from the demo standpoint.\n\nThe adddition of a new parameter to create interface has none of the above benefits and has the drawback of creating the incompatibility for the clients due to a mismatch of the API. For something semantically meaningful it would be the right way but the \"acceleration\" is not it.\n\nAs for dropping a few packets - would we not drop more packets if we bring the interface down ? What is the exact concern that you have ? Accidental unforeseen effects elsewhere in the code when we receive the GSO packets and the GSO has been disabled ?",
      "parentUuid": "6d3dcfca_19f3e2b4",
      "range": {
        "startLine": 479,
        "startChar": 23,
        "endLine": 479,
        "endChar": 36
      },
      "revId": "e68f6b47868302b373ee795360a2aa503c510e5d",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}