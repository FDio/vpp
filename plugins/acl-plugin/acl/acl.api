/* Hey Emacs use -*- mode: C -*- */
/*
 * Copyright (c) 2016 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Define a simple binary API to control the feature */

/*
 * Access List Rule entry
 *
 * Future considerations:
 * u32 proto_flags;
 * u8 traffic_class;
 * u32 flow_label;
 * u32 extension_header_present;
 * u8 port_range_operator
 */
typeonly manual_print manual_endian define acl_rule
{
  u8 is_permit;
  u8 is_ipv6;
  u8 src_ip_addr[16];
  u8 src_ip_prefix_len;
  u8 dst_ip_addr[16];
  u8 dst_ip_prefix_len;
  u8 proto;
  u16 src_port;
  u16 dst_port;
};

typeonly manual_print manual_endian define l2_acl_rule
{
  u8 is_permit;
  u16 type;
  u8 src_mac[6];
  u8 dst_mac[6];
};

manual_print manual_endian define acl_add
{
  u32 client_index;
  u32 context;
  u32 count;
  vl_api_acl_rule_t r[count];
};

define acl_add_reply
{
  u32 context;
  u32 acl_index;
  i32 retval;
};

define acl_del
{
  u32 client_index;
  u32 context;
  u32 acl_index;
};

define acl_del_reply
{
  u32 context;
  i32 retval;
};

define acl_interface_add_del
{
  u32 client_index;
  u32 context;
  u8 is_add;
  u8 is_input;
  u32 sw_if_index;
  u32 acl_index;
};

define acl_interface_add_del_reply
{
  u32 context;
  i32 retval;
};

define acl_dump
{
  u32 client_context;
  u32 context;
  u32 sw_if_index; /* ~0 for all tunnels */
};

manual_print manual_endian define acl_details
{
  u32 context;
  u32 sw_if_index;
  u32 acl_index;
  u32 count;
  vl_api_acl_rule_t r[count];
};

manual_print manual_endian define l2_acl_add
{
  u32 client_index;
  u32 context;
  u32 count;
  vl_api_l2_acl_rule_t r[count];
};

define l2_acl_add_reply
{
  u32 context;
  u32 acl_index;
  i32 retval;
};
define l2_acl_del
{
  u32 client_index;
  u32 context;
  u32 acl_index;
};

define l2_acl_del_reply
{
  u32 context;
  i32 retval;
};

define l2_acl_interface_add_del
{
  u32 client_index;
  u32 context;
  u8 is_add;
  u8 is_input;
  u32 sw_if_index;
  u32 acl_index;
};

define l2_acl_interface_add_del_reply
{
  u32 context;
  i32 retval;
};

define l2_acl_dump
{
  u32 client_context;
  u32 context;
  u32 sw_if_index; /* ~0 for all tunnels */
};

manual_print manual_endian define l2_acl_details
{
  u32 context;
  u32 sw_if_index;
  u32 acl_index;
  u32 count;
  vl_api_l2_acl_rule_t r[count];
};
